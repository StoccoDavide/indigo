<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.12.0" xml:lang="en-US">
  <compounddef id="a00029" kind="file" language="C++">
    <compoundname>project.m</compoundname>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="normal">%&gt;<sp/>Project<sp/>the<sp/>system<sp/>solution<sp/>\f$<sp/>\mathbf{x}<sp/>\f$<sp/>on<sp/>the<sp/>invariants</highlight></codeline>
<codeline lineno="2"><highlight class="normal">%&gt;<sp/>\f$<sp/>\mathbf{h}<sp/>(\mathbf{x},<sp/>\mathbf{v},<sp/>t)<sp/>=<sp/>\mathbf{0}<sp/>\f$.<sp/>The</highlight></codeline>
<codeline lineno="3"><highlight class="normal">%&gt;<sp/>constrained<sp/>minimization<sp/>problem<sp/>to<sp/>be<sp/>solved<sp/>is:</highlight></codeline>
<codeline lineno="4"><highlight class="normal">%&gt;</highlight></codeline>
<codeline lineno="5"><highlight class="normal">%&gt;<sp/>\f[</highlight></codeline>
<codeline lineno="6"><highlight class="normal">%&gt;<sp/>\textrm{minimize}<sp/>\quad</highlight></codeline>
<codeline lineno="7"><highlight class="normal">%&gt;<sp/>\dfrac{1}{2}\left(\mathbf{x}<sp/>-<sp/>\widetilde{\mathbf{x}}\right)^2<sp/>\quad</highlight></codeline>
<codeline lineno="8"><highlight class="normal">%&gt;<sp/>\textrm{subject<sp/>to}<sp/>\quad<sp/>\mathbf{h}(\mathbf{x},<sp/>\mathbf{v},<sp/>t)<sp/>=</highlight></codeline>
<codeline lineno="9"><highlight class="normal">%&gt;<sp/>\mathbf{0}.</highlight></codeline>
<codeline lineno="10"><highlight class="normal">%&gt;<sp/>\f]</highlight></codeline>
<codeline lineno="11"><highlight class="normal">%&gt;</highlight></codeline>
<codeline lineno="12"><highlight class="normal">%&gt;<sp/>**Solution<sp/>Algorithm**</highlight></codeline>
<codeline lineno="13"><highlight class="normal">%&gt;</highlight></codeline>
<codeline lineno="14"><highlight class="normal">%&gt;<sp/>Given<sp/>the<sp/>Lagrangian<sp/>of<sp/>the<sp/>minimization<sp/>problem<sp/>of<sp/>the<sp/>form:</highlight></codeline>
<codeline lineno="15"><highlight class="normal">%&gt;</highlight></codeline>
<codeline lineno="16"><highlight class="normal">%&gt;<sp/>\f[</highlight></codeline>
<codeline lineno="17"><highlight class="normal">%&gt;<sp/>\mathcal{L}(\mathbf{x},<sp/>\boldsymbol{\lambda})<sp/>=</highlight></codeline>
<codeline lineno="18"><highlight class="normal">%&gt;<sp/>\frac{1}{2}\left(\mathbf{x}<sp/>-<sp/>\widetilde{\mathbf{x}}\right)^2<sp/>+</highlight></codeline>
<codeline lineno="19"><highlight class="normal">%&gt;<sp/>\boldsymbol{\lambda}<sp/>\cdot<sp/>\mathbf{h}(\mathbf{x},<sp/>\mathbf{v},<sp/>t).</highlight></codeline>
<codeline lineno="20"><highlight class="normal">%&gt;<sp/>\f]</highlight></codeline>
<codeline lineno="21"><highlight class="normal">%&gt;</highlight></codeline>
<codeline lineno="22"><highlight class="normal">%&gt;<sp/>The<sp/>solution<sp/>of<sp/>the<sp/>problem<sp/>is<sp/>obtained<sp/>by<sp/>solving<sp/>the<sp/>following:</highlight></codeline>
<codeline lineno="23"><highlight class="normal">%&gt;</highlight></codeline>
<codeline lineno="24"><highlight class="normal">%&gt;<sp/>\f[</highlight></codeline>
<codeline lineno="25"><highlight class="normal">%&gt;<sp/>\left\{\begin{array}{l}</highlight></codeline>
<codeline lineno="26"><highlight class="normal">%&gt;<sp/>\mathbf{x}<sp/>+<sp/>\mathbf{Jh}_\mathbf{x}^T<sp/>\boldsymbol{\lambda}<sp/>=</highlight></codeline>
<codeline lineno="27"><highlight class="normal">%&gt;<sp/>\widetilde{\mathbf{x}}<sp/>\\[0.5em]</highlight></codeline>
<codeline lineno="28"><highlight class="normal">%&gt;<sp/>\mathbf{h}(\mathbf{x},<sp/>\mathbf{v},<sp/>t)<sp/>=<sp/>\mathbf{0}</highlight></codeline>
<codeline lineno="29"><highlight class="normal">%&gt;<sp/>\end{array}\right.</highlight></codeline>
<codeline lineno="30"><highlight class="normal">%&gt;<sp/>\f]</highlight></codeline>
<codeline lineno="31"><highlight class="normal">%&gt;</highlight></codeline>
<codeline lineno="32"><highlight class="normal">%&gt;<sp/>Using<sp/>the<sp/>Taylor<sp/>expansion<sp/>of<sp/>the<sp/>Lagrangian:</highlight></codeline>
<codeline lineno="33"><highlight class="normal">%&gt;</highlight></codeline>
<codeline lineno="34"><highlight class="normal">%&gt;<sp/>\f[</highlight></codeline>
<codeline lineno="35"><highlight class="normal">%&gt;<sp/>\mathbf{h}(\mathbf{x},<sp/>\mathbf{v},<sp/>t)<sp/>+<sp/>\mathbf{Jh}_\mathbf{x}<sp/>\delta\mathbf{x}<sp/>+</highlight></codeline>
<codeline lineno="36"><highlight class="normal">%&gt;<sp/>\mathcal{O}\left(\left\|<sp/>\delta\mathbf{x}<sp/>\right\|^2\right)<sp/>=<sp/>\mathbf{0}</highlight></codeline>
<codeline lineno="37"><highlight class="normal">%&gt;<sp/>\f]</highlight></codeline>
<codeline lineno="38"><highlight class="normal">%&gt;</highlight></codeline>
<codeline lineno="39"><highlight class="normal">%&gt;<sp/>define<sp/>the<sp/>iterative<sp/>method<sp/>as:</highlight></codeline>
<codeline lineno="40"><highlight class="normal">%&gt;</highlight></codeline>
<codeline lineno="41"><highlight class="normal">%&gt;<sp/>\f[</highlight></codeline>
<codeline lineno="42"><highlight class="normal">%&gt;<sp/>\mathbf{x}<sp/>=<sp/>\widetilde{\mathbf{x}}<sp/>+<sp/>\delta\mathbf{x}.</highlight></codeline>
<codeline lineno="43"><highlight class="normal">%&gt;<sp/>\f]</highlight></codeline>
<codeline lineno="44"><highlight class="normal">%&gt;</highlight></codeline>
<codeline lineno="45"><highlight class="normal">%&gt;<sp/>Notice<sp/>that<sp/>\f$<sp/>\delta\mathbf{x}<sp/>\f$<sp/>is<sp/>the<sp/>solution<sp/>of<sp/>the<sp/>linear<sp/>system:</highlight></codeline>
<codeline lineno="46"><highlight class="normal">%&gt;</highlight></codeline>
<codeline lineno="47"><highlight class="normal">%&gt;<sp/>\f[</highlight></codeline>
<codeline lineno="48"><highlight class="normal">%&gt;<sp/>\begin{bmatrix}</highlight></codeline>
<codeline lineno="49"><highlight class="normal">%&gt;<sp/>\mathbf{I}<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;<sp/>\mathbf{Jh}_\mathbf{x}^T<sp/>\\[0.5em]</highlight></codeline>
<codeline lineno="50"><highlight class="normal">%&gt;<sp/>\mathbf{Jh}_\mathbf{x}<sp/>&amp;<sp/>\mathbf{0}</highlight></codeline>
<codeline lineno="51"><highlight class="normal">%&gt;<sp/>\end{bmatrix}</highlight></codeline>
<codeline lineno="52"><highlight class="normal">%&gt;<sp/>\begin{bmatrix}</highlight></codeline>
<codeline lineno="53"><highlight class="normal">%&gt;<sp/>\delta\mathbf{x}<sp/>\\[0.5em]</highlight></codeline>
<codeline lineno="54"><highlight class="normal">%&gt;<sp/>\boldsymbol{\lambda}</highlight></codeline>
<codeline lineno="55"><highlight class="normal">%&gt;<sp/>\end{bmatrix}</highlight></codeline>
<codeline lineno="56"><highlight class="normal">%&gt;<sp/>=</highlight></codeline>
<codeline lineno="57"><highlight class="normal">%&gt;<sp/>\begin{bmatrix}</highlight></codeline>
<codeline lineno="58"><highlight class="normal">%&gt;<sp/>\widetilde{\mathbf{x}}<sp/>-<sp/>\mathbf{x}<sp/>\\[0.5em]</highlight></codeline>
<codeline lineno="59"><highlight class="normal">%&gt;<sp/>-\mathbf{h}(\mathbf{x},<sp/>\mathbf{v},<sp/>t)</highlight></codeline>
<codeline lineno="60"><highlight class="normal">%&gt;<sp/>\end{bmatrix}</highlight></codeline>
<codeline lineno="61"><highlight class="normal">%&gt;<sp/>\f]</highlight></codeline>
<codeline lineno="62"><highlight class="normal">%&gt;</highlight></codeline>
<codeline lineno="63"><highlight class="normal">%&gt;<sp/>where<sp/>\f$<sp/>\mathbf{Jh}_\mathbf{x}<sp/>\f$<sp/>is<sp/>the<sp/>Jacobian<sp/>of<sp/>the<sp/>invariants/</highlight></codeline>
<codeline lineno="64"><highlight class="normal">%&gt;<sp/>with<sp/>respect<sp/>to<sp/>the<sp/>states<sp/>\f$<sp/>\mathbf{x}<sp/>\f$.</highlight></codeline>
<codeline lineno="65"><highlight class="normal">%&gt;</highlight></codeline>
<codeline lineno="66"><highlight class="normal">%&gt;<sp/>\param<sp/>x_t<sp/>The<sp/>initial<sp/>guess<sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>the<sp/>states<sp/>\f$<sp/>\widetilde{\mathbf{x}}<sp/>\f$.</highlight></codeline>
<codeline lineno="67"><highlight class="normal">%&gt;<sp/>\param<sp/>t<sp/><sp/><sp/>The<sp/>time<sp/>\f$<sp/>t<sp/>\f$<sp/>at<sp/>which<sp/>the<sp/>states<sp/>are<sp/>evaluated.</highlight></codeline>
<codeline lineno="68"><highlight class="normal">%&gt;<sp/>\param<sp/>x_b<sp/>[optional]<sp/>Boolean<sp/>vector<sp/>to<sp/>project<sp/>the<sp/>corresponding<sp/>states</highlight></codeline>
<codeline lineno="69"><highlight class="normal">%&gt;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>to<sp/>be<sp/>projected<sp/>(</highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:<sp/>all<sp/>states<sp/>are<sp/>projected).</highlight></codeline>
<codeline lineno="70"><highlight class="normal">%&gt;</highlight></codeline>
<codeline lineno="71"><highlight class="normal">%&gt;<sp/>\</highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>The<sp/>solution<sp/>of<sp/>the<sp/>projection<sp/>problem<sp/>\f$<sp/>\mathbf{x}<sp/>\f$.</highlight></codeline>
<codeline lineno="72"><highlight class="normal">%</highlight></codeline>
<codeline lineno="73"><highlight class="normal">function<sp/>x<sp/>=<sp/>project(<sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>x_t,<sp/>t,<sp/>varargin<sp/>)</highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/>CMD<sp/>=<sp/></highlight><highlight class="stringliteral">&apos;Indigo.RungeKutta.project(...):<sp/>&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/>%<sp/>Get<sp/>the<sp/>number<sp/>of<sp/>states,<sp/>equations<sp/>and<sp/>invariants</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/>num_eqns<sp/>=<sp/>this.m_sys.get_num_eqns();</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/>num_invs<sp/>=<sp/>this.m_sys.get_num_invs();</highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/>assert(length(x_t)<sp/>==<sp/>num_eqns,<sp/>...</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/>[CMD,<sp/></highlight><highlight class="stringliteral">&apos;the<sp/>number<sp/>of<sp/>states<sp/>does<sp/>not<sp/>match<sp/>the<sp/>number<sp/>of<sp/>equations.&apos;</highlight><highlight class="normal">]);</highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/>%<sp/>Check<sp/>the<sp/>input</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(nargin<sp/>==<sp/>3)</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/>projected_x<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">(num_eqns,<sp/>1);</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/>elseif<sp/>(nargin<sp/>==<sp/>4)</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/>projected_x<sp/>=<sp/>varargin{1}{1};</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(length(projected_x)<sp/>==<sp/>num_eqns,<sp/>...</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>[CMD,<sp/></highlight><highlight class="stringliteral">&apos;the<sp/>number<sp/>of<sp/>the<sp/>projectes<sp/>states<sp/>does<sp/>not<sp/>match<sp/>the<sp/>&apos;</highlight><highlight class="normal">,<sp/>...</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;number<sp/>of<sp/>equations.&apos;</highlight><highlight class="normal">]);</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/>error([CMD,<sp/></highlight><highlight class="stringliteral">&apos;invalid<sp/>number<sp/>of<sp/>input<sp/>arguments.&apos;</highlight><highlight class="normal">]);</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/>end</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/>num_projected_x<sp/>=<sp/>sum(projected_x);</highlight></codeline>
<codeline lineno="96"><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/>%<sp/>Check<sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>there<sp/>are<sp/>any<sp/>constraints</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/>x<sp/>=<sp/>x_t;</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(num_invs<sp/>&gt;<sp/>0)</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>k<sp/>=<sp/>1:this.m_max_projection_iter</highlight></codeline>
<codeline lineno="101"><highlight class="normal"></highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>%<sp/>Standard<sp/>projection<sp/>method</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>%<sp/><sp/><sp/><sp/><sp/>[A]<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{x}<sp/><sp/><sp/><sp/>=<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{b}</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>%<sp/>/<sp/>I<sp/><sp/>Jh_x^T<sp/>\<sp/>/<sp/><sp/><sp/>dx<sp/><sp/><sp/>\<sp/><sp/><sp/>/<sp/>x_t<sp/>-<sp/>x_k<sp/>\</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>%<sp/>|<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/>|<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/>=<sp/>|<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>%<sp/>\<sp/>Jh_x<sp/><sp/><sp/><sp/>0<sp/>/<sp/>\<sp/>lambda<sp/>/<sp/><sp/><sp/>\<sp/><sp/><sp/><sp/>-h<sp/><sp/><sp/><sp/><sp/>/</highlight></codeline>
<codeline lineno="107"><highlight class="normal"></highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>%<sp/>Evaluate<sp/>the<sp/>veils,<sp/>invariants<sp/>vector<sp/>and<sp/>their<sp/>Jacobian</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>v<sp/><sp/><sp/><sp/>=<sp/>this.m_sys.v(x,<sp/>t);</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>y<sp/><sp/><sp/><sp/>=<sp/>this.m_sys.y(x,<sp/>v,<sp/>t);</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>h<sp/><sp/><sp/><sp/>=<sp/>this.m_sys.h(x,<sp/>y,<sp/>v,<sp/>t);</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Jv_x<sp/>=<sp/>this.m_sys.Jv_x(x,<sp/>v,<sp/>t);</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Jh_x<sp/>=<sp/>this.m_sys.Jh_x(x,<sp/>y,<sp/>v,<sp/>t);</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Jh_y<sp/>=<sp/>this.m_sys.Jh_y(x,<sp/>y,<sp/>v,<sp/>t);</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Jh_v<sp/>=<sp/>this.m_sys.Jh_v(x,<sp/>y,<sp/>v,<sp/>t);</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Jy_x<sp/>=<sp/>this.m_sys.Jy_x(x,<sp/>y,<sp/>v,<sp/>t);</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Jh_x<sp/>=<sp/>Jh_x<sp/>+<sp/>Jh_y<sp/>*<sp/>Jy_x<sp/>+<sp/>Jh_v<sp/>*<sp/>Jv_x;</highlight></codeline>
<codeline lineno="118"><highlight class="normal"></highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>%<sp/>Select<sp/>only<sp/>the<sp/>projected<sp/>invariants</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>h<sp/><sp/><sp/><sp/>=<sp/>h(this.m_projected_invs);</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Jh_x<sp/>=<sp/>Jh_x(this.m_projected_invs,<sp/>projected_x);</highlight></codeline>
<codeline lineno="122"><highlight class="normal"></highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>%<sp/>Check<sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>the<sp/>solution<sp/>is<sp/>found</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(norm(h,<sp/>inf)<sp/>&lt;<sp/>this.m_projection_low_tolerance)</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>end</highlight></codeline>
<codeline lineno="127"><highlight class="normal"></highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>%<sp/>Compute<sp/>the<sp/>solution<sp/>of<sp/>the<sp/>linear<sp/>system</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>A<sp/>=<sp/>[eye(num_projected_x),<sp/>Jh_x.</highlight><highlight class="stringliteral">&apos;;<sp/>...</highlight></codeline>
<codeline lineno="130"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Jh_x,<sp/>zeros(sum(this.m_projected_invs))];</highlight></codeline>
<codeline lineno="131"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/>b<sp/>=<sp/>[x_t(projected_x)<sp/>-<sp/>x(projected_x);<sp/>-h];</highlight></codeline>
<codeline lineno="132"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(rcond(A)<sp/>&gt;<sp/>this.m_projection_rcond_tolerance)</highlight></codeline>
<codeline lineno="133"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sol<sp/>=<sp/>A\b;</highlight></codeline>
<codeline lineno="134"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/>else</highlight></codeline>
<codeline lineno="135"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[sol,<sp/>~]<sp/>=<sp/>lsqr(A,<sp/>b,<sp/>this.m_projection_low_tolerance,<sp/>500);</highlight></codeline>
<codeline lineno="136"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/>end</highlight></codeline>
<codeline lineno="137"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="138"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/>%<sp/>Update<sp/>the<sp/>solution</highlight></codeline>
<codeline lineno="139"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/>dx<sp/>=<sp/>sol(1:num_projected_x);</highlight></codeline>
<codeline lineno="140"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/>x(projected_x)<sp/>=<sp/>x(projected_x)<sp/>+<sp/>dx;</highlight></codeline>
<codeline lineno="141"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="142"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/>%<sp/>Check<sp/>if<sp/>the<sp/>solution<sp/>is<sp/>found</highlight></codeline>
<codeline lineno="143"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(k<sp/>==<sp/>this.m_max_projection_iter)</highlight></codeline>
<codeline lineno="144"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>warning([CMD,<sp/>&apos;</highlight><highlight class="normal">maximum<sp/>number<sp/>of<sp/>iterations<sp/>reached.</highlight><highlight class="stringliteral">&apos;]);</highlight></codeline>
<codeline lineno="145"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/>end</highlight></codeline>
<codeline lineno="146"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>end</highlight></codeline>
<codeline lineno="147"><highlight class="stringliteral"><sp/><sp/>end</highlight></codeline>
<codeline lineno="148"><highlight class="stringliteral">end</highlight></codeline>
    </programlisting>
    <location file="+Indigo/@RungeKutta/project.m"/>
  </compounddef>
</doxygen>
