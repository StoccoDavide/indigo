<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.6" xml:lang="en-US">
  <compounddef id="a00113" kind="file" language="C++">
    <compoundname>NewtonSolver.m</compoundname>
      <sectiondef kind="func">
      <memberdef kind="function" id="a00113_1a86bf5da3ed616857524e95fb134ed389" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>function</type>
        <definition>function NewtonSolver</definition>
        <argsstring>(in fun, in jac, in x_0, in varargin)</argsstring>
        <name>NewtonSolver</name>
        <param>
          <type>in</type>
          <declname>fun</declname>
        </param>
        <param>
          <type>in</type>
          <declname>jac</declname>
        </param>
        <param>
          <type>in</type>
          <declname>x_0</declname>
        </param>
        <param>
          <type>in</type>
          <declname>varargin</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Function implementing the Dumped Newton Solver. Solve <verbatim>embed:rst:leading-asterisk ..math:`J(x_k) h = -F(x_k)` </verbatim> and update <verbatim>embed:rst:leading-asterisk ..math:`x_{k+1} = x_k + \alpha_k h` </verbatim> where <verbatim>embed:rst:leading-asterisk ..math:`\alpha_k` </verbatim> satisfies <verbatim>embed:rst:leading-asterisk ..math:`\norm{J(x_k)^{-1} F(x_{k+1})} \leq (1 - \frac{\alpha_k}{2}) \norm{J(x_k)^{-1} F(x_k)} = (1 - \frac{\alpha_k}{2}) \norm{h}` </verbatim>. This is called Affine invariant Newton step (see <ulink url="https://www.zib.de/deuflhard/research/algorithm/ainewton.en.html">https://www.zib.de/deuflhard/research/algorithm/ainewton.en.html</ulink>).</para>
<para>Output flags:<itemizedlist>
<listitem><para>flag = 0 -&gt; solution found;</para>
</listitem><listitem><para>flag = 1 -&gt; failed because of bad initial point;</para>
</listitem><listitem><para>flag = 2 -&gt; failed because of step too short, filed linesearch.</para>
</listitem></itemizedlist>
</para>
<para>Inputs:<itemizedlist>
<listitem><para>fun -&gt; function F(x) = feval( fun, x );</para>
</listitem><listitem><para>jac -&gt; Jacobian matrix of the function J(x) = feval( jac, x );</para>
</listitem><listitem><para>x_0 -&gt; initial guess;</para>
</listitem><listitem><para>VERBOSE -&gt; [optional, defalut = false] enable verbose mode;</para>
</listitem><listitem><para>TOLERANCE -&gt; [optional, defalut = 1.0e-08] tolerance;</para>
</listitem><listitem><para>ITER_NWTN -&gt; [optional, defalut = 50] maximum number of Newton iterations;</para>
</listitem><listitem><para>ITER_DUMP -&gt; [optional, defalut = 50] maximum number of Dumping iterations;</para>
</listitem><listitem><para>ALPHA -&gt; [optional, defalut = 0.5] dumping coefficient </para>
</listitem></itemizedlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="NewtonSolver.m" line="52" column="11" declfile="NewtonSolver.m" declline="52" declcolumn="11"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="normal">%<sp/>%<sp/>%<sp/>%<sp/>%<sp/>%<sp/>%<sp/>%<sp/>%<sp/>%<sp/>%<sp/>%<sp/>%<sp/>%<sp/>%<sp/>%<sp/>%<sp/>%<sp/>%<sp/>%<sp/>%<sp/>%<sp/>%<sp/>%<sp/>%<sp/>%<sp/>%<sp/>%<sp/>%<sp/>%<sp/>%<sp/>%<sp/>%<sp/>%<sp/>%<sp/>%</highlight></codeline>
<codeline lineno="2"><highlight class="normal">%<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>%</highlight></codeline>
<codeline lineno="3"><highlight class="normal">%<sp/>The<sp/>DIAL<sp/>project<sp/>-<sp/>Course<sp/>of<sp/>MECHATRONICS<sp/>SYSTEM<sp/>SIMULATION<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>%</highlight></codeline>
<codeline lineno="4"><highlight class="normal">%<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>%</highlight></codeline>
<codeline lineno="5"><highlight class="normal">%<sp/>Copyright<sp/>(c)<sp/>2020,<sp/>Davide<sp/>Stocco<sp/>and<sp/>Enrico<sp/>Bertolazzi,<sp/>Francesco<sp/><sp/>%</highlight></codeline>
<codeline lineno="6"><highlight class="normal">%<sp/>Biral<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>%</highlight></codeline>
<codeline lineno="7"><highlight class="normal">%<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>%</highlight></codeline>
<codeline lineno="8"><highlight class="normal">%<sp/>The<sp/>DIAL<sp/>project<sp/>and<sp/>its<sp/>components<sp/>are<sp/>supplied<sp/>under<sp/>the<sp/>terms<sp/>of<sp/>%</highlight></codeline>
<codeline lineno="9"><highlight class="normal">%<sp/>the<sp/>open<sp/>source<sp/>BSD<sp/>2-Clause<sp/>License.<sp/>The<sp/>contents<sp/>of<sp/>the<sp/>DIAL<sp/><sp/><sp/><sp/><sp/><sp/>%</highlight></codeline>
<codeline lineno="10"><highlight class="normal">%<sp/>project<sp/>and<sp/>its<sp/>components<sp/>may<sp/>not<sp/>be<sp/>copied<sp/>or<sp/>disclosed<sp/>except<sp/>in<sp/>%</highlight></codeline>
<codeline lineno="11"><highlight class="normal">%<sp/>accordance<sp/>with<sp/>the<sp/>terms<sp/>of<sp/>the<sp/>BSD<sp/>2-Clause<sp/>License.<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>%</highlight></codeline>
<codeline lineno="12"><highlight class="normal">%<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>%</highlight></codeline>
<codeline lineno="13"><highlight class="normal">%<sp/>URL:<sp/>https:</highlight><highlight class="comment">//opensource.org/licenses/BSD-2-Clause<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>%</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal">%<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>%</highlight></codeline>
<codeline lineno="15"><highlight class="normal">%<sp/><sp/><sp/><sp/>Davide<sp/>Stocco<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>%</highlight></codeline>
<codeline lineno="16"><highlight class="normal">%<sp/><sp/><sp/><sp/>Department<sp/>of<sp/>Industrial<sp/>Engineering<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>%</highlight></codeline>
<codeline lineno="17"><highlight class="normal">%<sp/><sp/><sp/><sp/>University<sp/>of<sp/>Trento<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>%</highlight></codeline>
<codeline lineno="18"><highlight class="normal">%<sp/><sp/><sp/><sp/>e-mail:<sp/>davide.stocco@unitn.it<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>%</highlight></codeline>
<codeline lineno="19"><highlight class="normal">%<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>%</highlight></codeline>
<codeline lineno="20"><highlight class="normal">%<sp/><sp/><sp/><sp/>Enrico<sp/>Bertolazzi<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>%</highlight></codeline>
<codeline lineno="21"><highlight class="normal">%<sp/><sp/><sp/><sp/>Department<sp/>of<sp/>Industrial<sp/>Engineering<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>%</highlight></codeline>
<codeline lineno="22"><highlight class="normal">%<sp/><sp/><sp/><sp/>University<sp/>of<sp/>Trento<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>%</highlight></codeline>
<codeline lineno="23"><highlight class="normal">%<sp/><sp/><sp/><sp/>e-mail:<sp/>enrico.bertolazzi@unitn.it<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>%</highlight></codeline>
<codeline lineno="24"><highlight class="normal">%<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>%</highlight></codeline>
<codeline lineno="25"><highlight class="normal">%<sp/><sp/><sp/><sp/>Francesco<sp/>Biral<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>%</highlight></codeline>
<codeline lineno="26"><highlight class="normal">%<sp/><sp/><sp/><sp/>Department<sp/>of<sp/>Industrial<sp/>Engineering<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>%</highlight></codeline>
<codeline lineno="27"><highlight class="normal">%<sp/><sp/><sp/><sp/>University<sp/>of<sp/>Trento<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>%</highlight></codeline>
<codeline lineno="28"><highlight class="normal">%<sp/><sp/><sp/><sp/>e-mail:<sp/>francesco.biral@unitn.it<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>%</highlight></codeline>
<codeline lineno="29"><highlight class="normal">%<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>%</highlight></codeline>
<codeline lineno="30"><highlight class="normal">%<sp/>%<sp/>%<sp/>%<sp/>%<sp/>%<sp/>%<sp/>%<sp/>%<sp/>%<sp/>%<sp/>%<sp/>%<sp/>%<sp/>%<sp/>%<sp/>%<sp/>%<sp/>%<sp/>%<sp/>%<sp/>%<sp/>%<sp/>%<sp/>%<sp/>%<sp/>%<sp/>%<sp/>%<sp/>%<sp/>%<sp/>%<sp/>%<sp/>%<sp/>%<sp/>%</highlight></codeline>
<codeline lineno="31"><highlight class="normal">%</highlight></codeline>
<codeline lineno="32"><highlight class="normal">%&gt;<sp/>Function<sp/>implementing<sp/>the<sp/>Dumped<sp/>Newton<sp/>Solver.</highlight></codeline>
<codeline lineno="33"><highlight class="normal">%&gt;<sp/>Solve<sp/>\rst<sp/>..math:`J(x_k)<sp/>h<sp/>=<sp/>-F(x_k)`<sp/>\endrst<sp/>and<sp/>update<sp/>\rst<sp/>..math:`x_{k+1}<sp/>=<sp/>x_k<sp/>+<sp/>\alpha_k<sp/>h`<sp/>\endrst<sp/>where<sp/>\rst<sp/>..math:`\alpha_k`<sp/>\endrst<sp/>satisfies<sp/>\rst<sp/>..math:`\norm{J(x_k)^{-1}<sp/>F(x_{k+1})}<sp/>\leq<sp/>(1<sp/>-<sp/>\frac{\alpha_k}{2})<sp/>\norm{J(x_k)^{-1}<sp/>F(x_k)}<sp/>=<sp/>(1<sp/>-<sp/>\frac{\alpha_k}{2})<sp/>\norm{h}`<sp/>\endrst.</highlight></codeline>
<codeline lineno="34"><highlight class="normal">%&gt;<sp/>This<sp/>is<sp/>called<sp/>Affine<sp/>invariant<sp/>Newton<sp/>step<sp/>(see</highlight></codeline>
<codeline lineno="35"><highlight class="normal">%&gt;<sp/>https:</highlight><highlight class="comment">//www.zib.de/deuflhard/research/algorithm/ainewton.en.html).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal">%&gt;</highlight></codeline>
<codeline lineno="37"><highlight class="normal">%&gt;<sp/>Output<sp/>flags:</highlight></codeline>
<codeline lineno="38"><highlight class="normal">%&gt;<sp/><sp/>-<sp/>flag<sp/>=<sp/>0<sp/>-&gt;<sp/>solution<sp/>found;</highlight></codeline>
<codeline lineno="39"><highlight class="normal">%&gt;<sp/><sp/>-<sp/>flag<sp/>=<sp/>1<sp/>-&gt;<sp/>failed<sp/>because<sp/>of<sp/>bad<sp/>initial<sp/>point;</highlight></codeline>
<codeline lineno="40"><highlight class="normal">%&gt;<sp/><sp/>-<sp/>flag<sp/>=<sp/>2<sp/>-&gt;<sp/>failed<sp/>because<sp/>of<sp/>step<sp/>too<sp/>short,<sp/>filed<sp/>linesearch.</highlight></codeline>
<codeline lineno="41"><highlight class="normal">%&gt;</highlight></codeline>
<codeline lineno="42"><highlight class="normal">%&gt;<sp/>Inputs:</highlight></codeline>
<codeline lineno="43"><highlight class="normal">%&gt;<sp/><sp/>-<sp/>fun<sp/><sp/><sp/><sp/><sp/><sp/><sp/>-&gt;<sp/>function<sp/>F(x)<sp/>=<sp/>feval(<sp/>fun,<sp/>x<sp/>);</highlight></codeline>
<codeline lineno="44"><highlight class="normal">%&gt;<sp/><sp/>-<sp/>jac<sp/><sp/><sp/><sp/><sp/><sp/><sp/>-&gt;<sp/>Jacobian<sp/>matrix<sp/>of<sp/>the<sp/>function<sp/>J(x)<sp/>=<sp/>feval(<sp/>jac,<sp/>x<sp/>);</highlight></codeline>
<codeline lineno="45"><highlight class="normal">%&gt;<sp/><sp/>-<sp/>x_0<sp/><sp/><sp/><sp/><sp/><sp/><sp/>-&gt;<sp/>initial<sp/>guess;</highlight></codeline>
<codeline lineno="46"><highlight class="normal">%&gt;<sp/><sp/>-<sp/>VERBOSE<sp/><sp/><sp/>-&gt;<sp/>[optional,<sp/>defalut<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">]<sp/>enable<sp/>verbose<sp/>mode;</highlight></codeline>
<codeline lineno="47"><highlight class="normal">%&gt;<sp/><sp/>-<sp/>TOLERANCE<sp/>-&gt;<sp/>[optional,<sp/>defalut<sp/>=<sp/>1.0e-08]<sp/>tolerance;</highlight></codeline>
<codeline lineno="48"><highlight class="normal">%&gt;<sp/><sp/>-<sp/>ITER_NWTN<sp/>-&gt;<sp/>[optional,<sp/>defalut<sp/>=<sp/>50]<sp/>maximum<sp/>number<sp/>of<sp/>Newton<sp/>iterations;</highlight></codeline>
<codeline lineno="49"><highlight class="normal">%&gt;<sp/><sp/>-<sp/>ITER_DUMP<sp/>-&gt;<sp/>[optional,<sp/>defalut<sp/>=<sp/>50]<sp/>maximum<sp/>number<sp/>of<sp/>Dumping<sp/>iterations;</highlight></codeline>
<codeline lineno="50"><highlight class="normal">%&gt;<sp/><sp/>-<sp/>ALPHA<sp/><sp/><sp/><sp/><sp/>-&gt;<sp/>[optional,<sp/>defalut<sp/>=<sp/>0.5]<sp/>dumping<sp/>coefficient</highlight></codeline>
<codeline lineno="51"><highlight class="normal">%</highlight></codeline>
<codeline lineno="52" refid="a00113_1a86bf5da3ed616857524e95fb134ed389" refkind="member"><highlight class="normal">function<sp/>[x,<sp/>flag]<sp/>=<sp/><ref refid="a00113_1a86bf5da3ed616857524e95fb134ed389" kindref="member">NewtonSolver</ref>(<sp/>fun,<sp/>jac,<sp/>x_0,<sp/>varargin<sp/>)</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/>flag<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/>x<sp/><sp/><sp/><sp/>=<sp/>x_0<sp/>;</highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>any(isnan(x_0))</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/>fprintf(1,<sp/></highlight><highlight class="stringliteral">&apos;NewtonSolver:<sp/>Bad<sp/>initial<sp/>point!\n&apos;</highlight><highlight class="normal"><sp/>)<sp/>;</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/>flag<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/>end</highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/>VERBOSE<sp/><sp/><sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/>TOLERANCE<sp/>=<sp/>1.0e-08;</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/>ITER_NWTN<sp/>=<sp/>50;</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/>ITER_DUMP<sp/>=<sp/>50;</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/>ALPHA<sp/><sp/><sp/><sp/><sp/>=<sp/>0.5;</highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>nargin<sp/>&gt;<sp/>3</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/>VERBOSE<sp/>=<sp/>varargin{1};</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/>end</highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>nargin<sp/>&gt;<sp/>4</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/>TOLERANCE<sp/>=<sp/>varargin{2};</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/>end</highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>nargin<sp/>&gt;<sp/>5</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/>ITER_NWTN<sp/>=<sp/>varargin{3};</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/>end</highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>nargin<sp/>&gt;<sp/>6</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/>ITER_DUMP<sp/>=<sp/>varargin{4};</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/>end</highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>nargin<sp/>&gt;<sp/>7</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/>ALPHA<sp/>=<sp/>varargin{5};</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/>end</highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>VERBOSE</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/>fprintf(1,<sp/></highlight><highlight class="stringliteral">&apos;NEWTON<sp/>SOLVER\n&apos;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/>end</highlight></codeline>
<codeline lineno="91"><highlight class="normal"></highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/>%<sp/>Perform<sp/>Newton<sp/>iteration</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>1:ITER_NWTN</highlight></codeline>
<codeline lineno="94"><highlight class="normal"></highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/>%<sp/>Direction<sp/>search</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/>F<sp/><sp/>=<sp/>feval(<sp/>fun,<sp/>x<sp/>);</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/>JF<sp/>=<sp/>feval(<sp/>jac,<sp/>x<sp/>);</highlight></codeline>
<codeline lineno="98"><highlight class="normal"></highlight></codeline>
<codeline lineno="99"><highlight class="normal"></highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/>%<sp/>Check<sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>converged</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>norm(F,inf)<sp/>&lt;<sp/>TOLERANCE</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/>end</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/>%<sp/>Evaluate<sp/>search<sp/>direction</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/>h<sp/><sp/>=<sp/>-JF\F;</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/>nh<sp/>=<sp/>norm(h,2);</highlight></codeline>
<codeline lineno="108"><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/>%<sp/>Perform<sp/>Dumping<sp/>iteration</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/>dumped<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>0:ITER_DUMP-1</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>xd<sp/>=<sp/>x<sp/>+<sp/>ALPHA^j<sp/>*<sp/>h;</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>all(isfinite(xd))</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Fd<sp/>=<sp/>feval(<sp/>fun,<sp/>xd<sp/>);</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hd<sp/>=<sp/>-JF\Fd;</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>norm(hd,2)<sp/>&lt;<sp/>sqrt(1-ALPHA/2)*nh</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dumped<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>end</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>end</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/>end</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>~dumped</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>VERBOSE</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(1,<sp/></highlight><highlight class="stringliteral">&apos;NewtonSolver(...):<sp/>alpha<sp/>=<sp/>%g,<sp/>Failed<sp/>dumping<sp/>iteration!\n&apos;</highlight><highlight class="normal">,<sp/>ALPHA<sp/>);</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>end</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>flag<sp/>=<sp/>2;</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/>end</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/>x<sp/>=<sp/>xd;</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>VERBOSE</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(1,<sp/></highlight><highlight class="stringliteral">&apos;iter<sp/>[%d]:<sp/>||F||_inf<sp/>=<sp/>%14g,<sp/>alpha<sp/>=<sp/>%g\n&apos;</highlight><highlight class="normal">,<sp/>i,<sp/>norm(F,inf),<sp/>ALPHA<sp/>);</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/>end</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>norm(h,inf)<sp/>&lt;<sp/>TOLERANCE</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/>end</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/>end</highlight></codeline>
<codeline lineno="139"><highlight class="normal">end</highlight></codeline>
    </programlisting>
    <location file="NewtonSolver.m"/>
  </compounddef>
</doxygen>
