<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.6" xml:lang="en-US">
  <compounddef id="a00020" kind="file" language="C++">
    <compoundname>progress_bar.m</compoundname>
      <sectiondef kind="func">
      <memberdef kind="function" id="a00020_1ae97c4520a33fe6864edc163bc4169171" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>function</type>
        <definition>function progress_bar</definition>
        <argsstring>(in input, in varargin)</argsstring>
        <name>progress_bar</name>
        <param>
          <type>in</type>
          <declname>input</declname>
        </param>
        <param>
          <type>in</type>
          <declname>varargin</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Display a progress bar inside the command window of the type:</para>
<para><computeroutput>100% [====================] Completed!</computeroutput></para>
<para><bold>Usage:</bold></para>
<para><itemizedlist>
<listitem><para>progress(&apos;_start&apos;): initializes a new progress bar. Must always be called first.</para>
</listitem><listitem><para>progress(i): updates the progress bar. i is a percentage.</para>
</listitem><listitem><para>progress(i, m): is similar, but a percentage is automagically calculated, where i is the current step and m the maximum number of steps.</para>
</listitem><listitem><para>progress(&apos;_end&apos;): ends the progress bar.</para>
</listitem><listitem><para>progress(&apos;_erase&apos;): ends the progress bar and removes if from the command window, restoring it to the way it was before the progress bar was initiated.</para>
</listitem><listitem><para>progress(message): ends the progress bar and adds message after the bar.</para>
</listitem><listitem><para>progress(..., opts): uses options from the opts struct.</para>
</listitem></itemizedlist>
</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>[optional]</parametername>
</parameternamelist>
<parameterdescription>
<para>opts.percentage_length: sets the number of characters reserved for the percentage display (default: 5) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>[optional]</parametername>
</parameternamelist>
<parameterdescription>
<para>opts.bar_length: sets the number of characters reserved for the progress bar (default: 20) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>[optional]</parametername>
</parameternamelist>
<parameterdescription>
<para>opts.char_empty: sets the &quot;empty&quot; character (default: &apos; &apos;) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>[optional]</parametername>
</parameternamelist>
<parameterdescription>
<para>opts.char_filled: sets the &quot;filled&quot; character (default: &apos;=&apos;)</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>out The output progress bar string. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="+Indigo/+Utils/progress_bar.m" line="29" column="11" declfile="+Indigo/+Utils/progress_bar.m" declline="29" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="a00020_1afd08d027a8e395395e58480eca904b29" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>function</type>
        <definition>function generate_string</definition>
        <argsstring>(in perc, in opts)</argsstring>
        <name>generate_string</name>
        <param>
          <type>in</type>
          <declname>perc</declname>
        </param>
        <param>
          <type>in</type>
          <declname>opts</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Generate the progress bar string.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>perc</parametername>
</parameternamelist>
<parameterdescription>
<para>Percentage of the progress bar to be filled. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>opts</parametername>
</parameternamelist>
<parameterdescription>
<para>Struct containing the options.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>out The output string. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="+Indigo/+Utils/progress_bar.m" line="102" column="11" declfile="+Indigo/+Utils/progress_bar.m" declline="102" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="a00020_1a9dd481946d2e553022a27801ff530d81" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>function</type>
        <definition>function default_option</definition>
        <argsstring>(in opts, in field, in default)</argsstring>
        <name>default_option</name>
        <param>
          <type>in</type>
          <declname>opts</declname>
        </param>
        <param>
          <type>in</type>
          <declname>field</declname>
        </param>
        <param>
          <type>in</type>
          <declname>default</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Check whether a setting was found in the options struct.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>opts</parametername>
</parameternamelist>
<parameterdescription>
<para>The options struct. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>field</parametername>
</parameternamelist>
<parameterdescription>
<para>The field to be checked. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>default</parametername>
</parameternamelist>
<parameterdescription>
<para>The default value to be returned if the field is not found.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>out The field, or the default value if the field is not found. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="+Indigo/+Utils/progress_bar.m" line="125" column="11" declfile="+Indigo/+Utils/progress_bar.m" declline="125" declcolumn="11"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="normal">%</highlight></codeline>
<codeline lineno="2"><highlight class="normal">%&gt;<sp/>Display<sp/>a<sp/>progress<sp/>bar<sp/>inside<sp/>the<sp/>command<sp/>window<sp/>of<sp/>the<sp/>type:</highlight></codeline>
<codeline lineno="3"><highlight class="normal">%&gt;</highlight></codeline>
<codeline lineno="4"><highlight class="normal">%&gt;<sp/>`100%<sp/>[====================]<sp/>Completed!`</highlight></codeline>
<codeline lineno="5"><highlight class="normal">%&gt;</highlight></codeline>
<codeline lineno="6"><highlight class="normal">%&gt;<sp/>**Usage:**</highlight></codeline>
<codeline lineno="7"><highlight class="normal">%&gt;</highlight></codeline>
<codeline lineno="8"><highlight class="normal">%&gt;<sp/>-<sp/>progress(</highlight><highlight class="stringliteral">&apos;_start&apos;</highlight><highlight class="normal">):<sp/>initializes<sp/>a<sp/>new<sp/>progress<sp/>bar.<sp/>Must<sp/>always<sp/>be<sp/>called</highlight></codeline>
<codeline lineno="9"><highlight class="normal">%&gt;<sp/><sp/><sp/>first.</highlight></codeline>
<codeline lineno="10"><highlight class="normal">%&gt;<sp/>-<sp/>progress(i):<sp/>updates<sp/>the<sp/>progress<sp/>bar.<sp/>i<sp/>is<sp/>a<sp/>percentage.</highlight></codeline>
<codeline lineno="11"><highlight class="normal">%&gt;<sp/>-<sp/>progress(i,<sp/>m):<sp/>is<sp/>similar,<sp/>but<sp/>a<sp/>percentage<sp/>is<sp/>automagically<sp/>calculated,</highlight></codeline>
<codeline lineno="12"><highlight class="normal">%&gt;<sp/><sp/><sp/>where<sp/>i<sp/>is<sp/>the<sp/>current<sp/>step<sp/>and<sp/>m<sp/>the<sp/>maximum<sp/>number<sp/>of<sp/>steps.</highlight></codeline>
<codeline lineno="13"><highlight class="normal">%&gt;<sp/>-<sp/>progress(</highlight><highlight class="stringliteral">&apos;_end&apos;</highlight><highlight class="normal">):<sp/>ends<sp/>the<sp/>progress<sp/>bar.</highlight></codeline>
<codeline lineno="14"><highlight class="normal">%&gt;<sp/>-<sp/>progress(</highlight><highlight class="stringliteral">&apos;_erase&apos;</highlight><highlight class="normal">):<sp/>ends<sp/>the<sp/>progress<sp/>bar<sp/>and<sp/>removes<sp/>if<sp/>from<sp/>the<sp/>command</highlight></codeline>
<codeline lineno="15"><highlight class="normal">%&gt;<sp/><sp/><sp/>window,<sp/>restoring<sp/>it<sp/>to<sp/>the<sp/>way<sp/>it<sp/>was<sp/>before<sp/>the<sp/>progress<sp/>bar<sp/>was</highlight></codeline>
<codeline lineno="16"><highlight class="normal">%&gt;<sp/><sp/><sp/>initiated.</highlight></codeline>
<codeline lineno="17"><highlight class="normal">%&gt;<sp/>-<sp/>progress(message):<sp/>ends<sp/>the<sp/>progress<sp/>bar<sp/>and<sp/>adds<sp/>message<sp/>after<sp/>the<sp/>bar.</highlight></codeline>
<codeline lineno="18"><highlight class="normal">%&gt;<sp/>-<sp/>progress(...,<sp/>opts):<sp/>uses<sp/>options<sp/>from<sp/>the<sp/>opts<sp/>struct.</highlight></codeline>
<codeline lineno="19"><highlight class="normal">%&gt;</highlight></codeline>
<codeline lineno="20"><highlight class="normal">%&gt;<sp/>\param<sp/>[optional]<sp/>opts.percentage_length:<sp/>sets<sp/>the<sp/>number<sp/>of<sp/>characters</highlight></codeline>
<codeline lineno="21"><highlight class="normal">%&gt;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>reserved<sp/>for<sp/>the<sp/>percentage<sp/>display<sp/>(default:<sp/>5)</highlight></codeline>
<codeline lineno="22"><highlight class="normal">%&gt;<sp/>\param<sp/>[optional]<sp/>opts.bar_length:<sp/>sets<sp/>the<sp/>number<sp/>of<sp/>characters<sp/>reserved</highlight></codeline>
<codeline lineno="23"><highlight class="normal">%&gt;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>for<sp/>the<sp/>progress<sp/>bar<sp/>(default:<sp/>20)</highlight></codeline>
<codeline lineno="24"><highlight class="normal">%&gt;<sp/>\param<sp/>[optional]<sp/>opts.char_empty:<sp/>sets<sp/>the<sp/></highlight><highlight class="stringliteral">&quot;empty&quot;</highlight><highlight class="normal"><sp/>character<sp/>(default:<sp/></highlight><highlight class="stringliteral">&apos;<sp/>&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="25"><highlight class="normal">%&gt;<sp/>\param<sp/>[optional]<sp/>opts.char_filled:<sp/>sets<sp/>the<sp/></highlight><highlight class="stringliteral">&quot;filled&quot;</highlight><highlight class="normal"><sp/>character<sp/>(default:<sp/></highlight><highlight class="stringliteral">&apos;=&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="26"><highlight class="normal">%&gt;</highlight></codeline>
<codeline lineno="27"><highlight class="normal">%&gt;<sp/>\return<sp/>out<sp/>The<sp/>output<sp/>progress<sp/>bar<sp/>string.</highlight></codeline>
<codeline lineno="28"><highlight class="normal">%</highlight></codeline>
<codeline lineno="29" refid="a00020_1ae97c4520a33fe6864edc163bc4169171" refkind="member"><highlight class="normal">function<sp/><ref refid="a00020_1ae97c4520a33fe6864edc163bc4169171" kindref="member">progress_bar</ref>(<sp/>input,<sp/>varargin<sp/>)</highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/>%<sp/>Handle<sp/>input</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/>p<sp/>=<sp/>inputParser;</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/>p.addRequired(</highlight><highlight class="stringliteral">&apos;input&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/>p.addOptional(</highlight><highlight class="stringliteral">&apos;max&apos;</highlight><highlight class="normal">,<sp/>[]);</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/>p.addOptional(</highlight><highlight class="stringliteral">&apos;opts&apos;</highlight><highlight class="normal">,<sp/>[]);</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/>p.parse(input,<sp/>varargin{:});</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/>p<sp/>=<sp/>p.Results;</highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/>%<sp/>Handle<sp/>options</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/>opts<sp/>=<sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/>opts.perc_length<sp/>=<sp/><ref refid="a00020_1a9dd481946d2e553022a27801ff530d81" kindref="member">default_option</ref>(p.opts,<sp/></highlight><highlight class="stringliteral">&apos;perc_length&apos;</highlight><highlight class="normal">,<sp/>5);</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/>opts.bar_length<sp/><sp/>=<sp/><ref refid="a00020_1a9dd481946d2e553022a27801ff530d81" kindref="member">default_option</ref>(p.opts,<sp/></highlight><highlight class="stringliteral">&apos;bar_length&apos;</highlight><highlight class="normal">,<sp/><sp/>20);</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/>opts.char_empty<sp/><sp/>=<sp/><ref refid="a00020_1a9dd481946d2e553022a27801ff530d81" kindref="member">default_option</ref>(p.opts,<sp/></highlight><highlight class="stringliteral">&apos;char_empty&apos;</highlight><highlight class="normal">,<sp/><sp/></highlight><highlight class="charliteral">&apos;<sp/>&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/>opts.char_filled<sp/>=<sp/><ref refid="a00020_1a9dd481946d2e553022a27801ff530d81" kindref="member">default_option</ref>(p.opts,<sp/></highlight><highlight class="stringliteral">&apos;char_filled&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;=&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/>%<sp/>If<sp/>input<sp/>is<sp/>a<sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>ischar(p.input)</highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/>switch<sp/>p.input</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>case<sp/>(&apos;_start&apos;)</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>%<sp/>Start<sp/>a<sp/>new<sp/>progress<sp/>bar</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>str_out<sp/>=<sp/><ref refid="a00020_1afd08d027a8e395395e58480eca904b29" kindref="member">generate_string</ref>(0,<sp/>opts);</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(str_out);</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>case<sp/>(&apos;_end&apos;)</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>%<sp/>End<sp/>a<sp/>progress<sp/>bar</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>case<sp/>(&apos;_erase&apos;)</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>%<sp/>End<sp/>and<sp/>erase<sp/>a<sp/>progress<sp/>bar</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>str_out<sp/>=<sp/><ref refid="a00020_1afd08d027a8e395395e58480eca904b29" kindref="member">generate_string</ref>(0,<sp/>opts);</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>str_cr<sp/><sp/>=<sp/>repmat(&apos;\b&apos;,<sp/>1,<sp/>length(str_out)-2);</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(str_cr);</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>otherwise</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>%<sp/>End<sp/>a<sp/>progress<sp/>bar<sp/>with<sp/>a<sp/>message<sp/>after<sp/>the<sp/>bar</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>str_out<sp/>=<sp/>sprintf(&apos;<sp/>%s\n&apos;,<sp/>p.input);</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>str_cr<sp/>=<sp/>repmat(&apos;\b&apos;,<sp/>1,<sp/>1);</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>fprintf([str_cr,<sp/>str_out]);</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/>end</highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/>%<sp/>If<sp/>input<sp/>is<sp/>a<sp/>number</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/>elseif<sp/>isnumeric(p.input)</highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/>%<sp/>If<sp/>a<sp/>max<sp/>value<sp/>is<sp/>also<sp/>provided,<sp/>compute<sp/>the<sp/>percentage</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/>%<sp/>If<sp/>no,<sp/>p.input<sp/>is<sp/>assumed<sp/>to<sp/>be<sp/>a<sp/>percentage</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/>if<sp/>(~isempty(p.max)<sp/>&amp;&amp;<sp/>isnumeric(p.max))</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>p.input<sp/>=<sp/>round(100*input/p.max);</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/>else</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(p.input<sp/>&lt;<sp/>0)</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p.input<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>elseif<sp/>(p.input<sp/>&gt;<sp/>100)</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p.input<sp/>=<sp/>100;</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>end</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/>end</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/>%<sp/>Generate<sp/>the<sp/>output<sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/>str_out<sp/>=<sp/><ref refid="a00020_1afd08d027a8e395395e58480eca904b29" kindref="member">generate_string</ref>(p.input,<sp/>opts);</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/>str_cr<sp/><sp/>=<sp/>repmat(&apos;\b&apos;,<sp/>1,<sp/>length(str_out)-2);</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/>fprintf([str_cr,<sp/>str_out]);</highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/>%<sp/>Unsupported<sp/>argument<sp/>type</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/>else</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/>error(&apos;Indigo.Utils.<ref refid="a00020_1ae97c4520a33fe6864edc163bc4169171" kindref="member">progress_bar</ref>(...):<sp/>invalid<sp/>input<sp/>detected.&apos;);</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/>end</highlight></codeline>
<codeline lineno="91"><highlight class="normal">end</highlight></codeline>
<codeline lineno="92"><highlight class="normal">%</highlight></codeline>
<codeline lineno="93"><highlight class="normal">%<sp/>-<sp/>-<sp/>-<sp/>-<sp/>-<sp/>-<sp/>-<sp/>-<sp/>-<sp/>-<sp/>-<sp/>-<sp/>-<sp/>-<sp/>-<sp/>-<sp/>-<sp/>-<sp/>-<sp/>-<sp/>-<sp/>-<sp/>-<sp/>-<sp/>-<sp/>-<sp/>-<sp/>-<sp/>-<sp/>-<sp/>-<sp/>-<sp/>-<sp/>-<sp/>-<sp/>-<sp/>-<sp/>-<sp/>-</highlight></codeline>
<codeline lineno="94"><highlight class="normal">%</highlight></codeline>
<codeline lineno="95"><highlight class="normal">%&gt;<sp/>Generate<sp/>the<sp/>progress<sp/>bar<sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal">.</highlight></codeline>
<codeline lineno="96"><highlight class="normal">%&gt;</highlight></codeline>
<codeline lineno="97"><highlight class="normal">%&gt;<sp/>\param<sp/>perc<sp/>Percentage<sp/>of<sp/>the<sp/>progress<sp/>bar<sp/>to<sp/>be<sp/>filled.</highlight></codeline>
<codeline lineno="98"><highlight class="normal">%&gt;<sp/>\param<sp/>opts<sp/>Struct<sp/>containing<sp/>the<sp/>options.</highlight></codeline>
<codeline lineno="99"><highlight class="normal">%&gt;</highlight></codeline>
<codeline lineno="100"><highlight class="normal">%&gt;<sp/>\return<sp/>out<sp/>The<sp/>output<sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal">.</highlight></codeline>
<codeline lineno="101"><highlight class="normal">%</highlight></codeline>
<codeline lineno="102" refid="a00020_1afd08d027a8e395395e58480eca904b29" refkind="member"><highlight class="normal">function<sp/>out<sp/>=<sp/><ref refid="a00020_1afd08d027a8e395395e58480eca904b29" kindref="member">generate_string</ref>(<sp/>perc,<sp/>opts<sp/>)</highlight></codeline>
<codeline lineno="103"><highlight class="normal"></highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/>perc<sp/><sp/><sp/><sp/><sp/>=<sp/>floor(perc);</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/>perc_out<sp/>=<sp/>[num2str(perc),<sp/>&apos;%%&apos;];</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/>perc_out<sp/>=<sp/>[perc_out,<sp/>repmat(&apos;<sp/>&apos;,<sp/>1,<sp/>opts.perc_length-length(perc_out)+1)];</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/>n_empty<sp/><sp/>=<sp/>floor(perc/100*opts.bar_length);</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/>bar_out<sp/><sp/>=<sp/>[&apos;[&apos;,<sp/>repmat(&apos;=&apos;,<sp/>1,<sp/>n_empty),<sp/>...</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>repmat(&apos;<sp/>&apos;,<sp/>1,<sp/>opts.bar_length-n_empty),<sp/>&apos;]&apos;];</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/>out<sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>[perc_out,<sp/>bar_out,<sp/>&apos;\n&apos;];</highlight></codeline>
<codeline lineno="111"><highlight class="normal">end</highlight></codeline>
<codeline lineno="112"><highlight class="normal">%</highlight></codeline>
<codeline lineno="113"><highlight class="normal">%<sp/>-<sp/>-<sp/>-<sp/>-<sp/>-<sp/>-<sp/>-<sp/>-<sp/>-<sp/>-<sp/>-<sp/>-<sp/>-<sp/>-<sp/>-<sp/>-<sp/>-<sp/>-<sp/>-<sp/>-<sp/>-<sp/>-<sp/>-<sp/>-<sp/>-<sp/>-<sp/>-<sp/>-<sp/>-<sp/>-<sp/>-<sp/>-<sp/>-<sp/>-<sp/>-<sp/>-<sp/>-<sp/>-<sp/>-</highlight></codeline>
<codeline lineno="114"><highlight class="normal">%</highlight></codeline>
<codeline lineno="115"><highlight class="normal">%</highlight></codeline>
<codeline lineno="116"><highlight class="normal">%&gt;<sp/>Check<sp/>whether<sp/>a<sp/>setting<sp/>was<sp/>found<sp/>in<sp/>the<sp/>options<sp/>struct.</highlight></codeline>
<codeline lineno="117"><highlight class="normal">%&gt;</highlight></codeline>
<codeline lineno="118"><highlight class="normal">%&gt;<sp/>\param<sp/>opts<sp/><sp/><sp/><sp/>The<sp/>options<sp/>struct.</highlight></codeline>
<codeline lineno="119"><highlight class="normal">%&gt;<sp/>\param<sp/>field<sp/><sp/><sp/>The<sp/>field<sp/>to<sp/>be<sp/>checked.</highlight></codeline>
<codeline lineno="120"><highlight class="normal">%&gt;<sp/>\param<sp/>default<sp/>The<sp/>default<sp/>value<sp/>to<sp/>be<sp/>returned<sp/>if<sp/>the<sp/>field<sp/>is<sp/>not<sp/>found.</highlight></codeline>
<codeline lineno="121"><highlight class="normal">%&gt;</highlight></codeline>
<codeline lineno="122"><highlight class="normal">%&gt;<sp/>\return<sp/>out<sp/>The<sp/>field,<sp/>or<sp/>the<sp/>default<sp/>value<sp/>if<sp/>the<sp/>field<sp/>is<sp/>not</highlight></codeline>
<codeline lineno="123"><highlight class="normal">%&gt;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>found.</highlight></codeline>
<codeline lineno="124"><highlight class="normal">%</highlight></codeline>
<codeline lineno="125" refid="a00020_1a9dd481946d2e553022a27801ff530d81" refkind="member"><highlight class="normal">function<sp/>out<sp/>=<sp/><ref refid="a00020_1a9dd481946d2e553022a27801ff530d81" kindref="member">default_option</ref>(<sp/>opts,<sp/>field,<sp/>default<sp/>)</highlight></codeline>
<codeline lineno="126"><highlight class="normal"></highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/>if<sp/>(isfield(opts,<sp/>field))</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/>out<sp/>=<sp/>opts.(field);</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/>else</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/>out<sp/>=<sp/>default;</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/>end</highlight></codeline>
<codeline lineno="132"><highlight class="normal">end</highlight></codeline>
<codeline lineno="133"><highlight class="normal">%</highlight></codeline>
<codeline lineno="134"><highlight class="normal">%<sp/>-<sp/>-<sp/>-<sp/>-<sp/>-<sp/>-<sp/>-<sp/>-<sp/>-<sp/>-<sp/>-<sp/>-<sp/>-<sp/>-<sp/>-<sp/>-<sp/>-<sp/>-<sp/>-<sp/>-<sp/>-<sp/>-<sp/>-<sp/>-<sp/>-<sp/>-<sp/>-<sp/>-<sp/>-<sp/>-<sp/>-<sp/>-<sp/>-<sp/>-<sp/>-<sp/>-<sp/>-<sp/>-<sp/>-</highlight></codeline>
<codeline lineno="135"><highlight class="normal">%</highlight></codeline>
    </programlisting>
    <location file="+Indigo/+Utils/progress_bar.m"/>
  </compounddef>
</doxygen>
