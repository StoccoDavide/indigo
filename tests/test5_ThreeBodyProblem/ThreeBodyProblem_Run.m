%% Prepare worspace

clc;
clear all; %#ok<CLALL>
close all;

%% Instantiate system object

mu = 0.012277471; % body mass factor

ODE = ThreeBodyProblem_Implicit(mu);

%% Initialize the solver and set the ODE

solver_name = {
  % ... % Explict methods
  % 'ExplicitEuler', ...
  % 'ExplicitMidpoint', ...
  % 'Heun2', ...
  % 'Wray3', ...
  % 'Heun3' ...
  % 'Ralston2', ...
  % 'Ralston3', ...
  % 'Ralston4', ...
  % 'RK3', ...
  % 'RK4', ...
  % 'RK38', ...
  % 'SSPRK3', ...
  % 'Wray3', ...
  ... % Implict methods
  %  'CrankNicolson', ...
  %  'GaussLegendre2', ...
  %  'GaussLegendre4', ...
  %  'GaussLegendre6', ...
  % 'ImplicitEuler', ...
  % 'ImplicitMidpoint', ...
  % 'LobattoIIIA2', ...
  % 'LobattoIIIA4', ...
  % 'LobattoIIIB2', ...
  % 'LobattoIIIB4', ...
  % 'LobattoIIIC2', ...
  % 'LobattoIIIC4', ...
  % 'LobattoIIICS2', ...
  % 'LobattoIIICS4', ...
%    'LobattoIIID2', ...
%    'LobattoIIID4', ...
%    'RadauIA3', ...
%    'RadauIA5', ...
%    'RadauIIA3', ...
%    'RadauIIA5', ...
%    'SunGeng5', ...
%   ... % Embedded methods
... %   'GaussLegendre34', ...
... %   'GaussLegendre56', ...
  ...%'LobattoIIIA12', ...
  %'DormandPrince54', ...
  'RadauIIA5', ...
  'LobattoIIIA34', ...
 % 'LobattoIIIB12', ...
  %'LobattoIIIB34', ...
  %'LobattoIIIC12', ...
  %'LobattoIIIC34', ...
};

for i = 1:length(solver_name)
  eval(strcat(['solver', solver_name{i}, '=', solver_name{i}, '();']));
  eval(strcat(['solver', solver_name{i}, '.set_ode( ODE );']));
end

%% Integrate the system of ODE

% Set integration interval
d_t   = 0.01;
t_ini = 0.0;
t_end = 20.0;
T_vec = t_ini:d_t:t_end;

% Set initial conditions
x_0 = 0.994;
y_0 = 0;
u_0 = 0;
v_0 = -2.00158510637908252240537862224;
X_ini = [x_0, y_0, u_0, v_0];

% Solve the system of ODEs for each solver
for i = 1:length(solver_name)
  eval(strcat(['[X_', solver_name{i}, ', T_', solver_name{i}, '] =', ...
    'solver', solver_name{i}, '.solve( T_vec, X_ini, false, true, 20.0e+03 );']));
end

%% Plot results

linewidth = 1.1;
title_str = 'Test 1 -- Pendulum ODE (Linear)';

figure();
hold on; grid on; grid minor;
title(title_str);
xlabel('$x$ (m)');
ylabel('$y$ (m)');
xlim([-1.2, 1.2]);
ylim([-1.2, 1.2]);
for i = 1:length(solver_name)
  eval(strcat(['plot( X_', solver_name{i}, '(1,:)', ', X_', solver_name{i}, '(2,:), ''--'', ''LineWidth'', linewidth );']));
end
legend(solver_name, 'Location', 'southwest');
hold off;

figure();
hold on; grid on; grid minor;
title(title_str);
xlabel('$Iter$ (--)');
ylabel('$\Delta t$ (s)');
for i = 1:length(solver_name)
  eval(strcat(['plot( T_', solver_name{i}, '(1,1:end-1), (T_', solver_name{i}, '(1,2:end) - T_', solver_name{i}, '(1,1:end-1)), ''LineWidth'', linewidth );']));
end
legend(solver_name, 'Location', 'southwest');
hold off;

%% That's All Folks!
