% +--------------------------------------------------------------------------+
% | 'Indigo' module version 1.0 - BSD 3-Clause License - Copyright (c) 2023  |
% | Current version authors:                                                 |
% |   Davide Stocco and Enrico Bertolazzi.                                   |
% +--------------------------------------------------------------------------+

% Matlab generated code for implicit system: Torus
% This file has been automatically generated by Indigo.
% DISCLAIMER: If you need to edit it, do it wisely!

classdef Torus < Indigo.DAE.Explicit
  %
  % No class description provided.
  %
  properties (SetAccess = protected, Hidden = true)
    % User data
    m_r = 10.0;
    m_rho = 5.0;
  end
  %
  methods
    %
    % - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    %
    function this = Torus( varargin )
      % Class constructor.

      % Superclass constructor
      num_eqns = 7;
      num_veil = 0;
      num_invs = 3;
      this = this@Indigo.DAE.Explicit('Torus', num_eqns, num_veil, num_invs);

      % User data
      if (nargin == 0)
        % Keep default values
      elseif (nargin == 1 && isstruct(varargin{1}))
        this.m_r = varargin{1}.r;
        this.m_rho = varargin{1}.rho;
      elseif (nargin == 2)
        this.m_r = varargin{1};
        this.m_rho = varargin{2};
      else
        error('wrong number of input arguments.');
      end
    end % Torus
    %
    % - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    %
    function out_f = f( this, in_1, ~, t )
      % Evaluate the function f.

      % Extract properties
      r = this.m_r;

      % Extract inputs
      x__1 = in_1(1);
      x__2 = in_1(2);
      x__3 = in_1(3);
      u__1 = in_1(4);
      u__2 = in_1(5);
      u__3 = in_1(6);
      lambda = in_1(7);

      % Evaluate function
      out_1 = u__1;
      out_2 = u__2;
      out_3 = u__3;
      t1 = cos(t);
      t2 = t1 * u__3;
      t3 = x__1 ^ 2;
      t4 = x__2 ^ 2;
      t6 = sqrt(t3 + t4);
      t7 = t6 * t2;
      t8 = sin(t);
      t9 = t8 * x__3;
      t10 = t6 * t9;
      t11 = x__1 * lambda;
      t16 = t6 * u__2;
      t18 = 0.1e1 / t6;
      out_4 = t18 * (-2 * r * t11 + 2 * t6 * t11 - t10 - t16 + t7);
      t19 = t8 * u__3;
      t20 = t6 * t19;
      t21 = t1 * x__3;
      t22 = t6 * t21;
      t23 = x__2 * lambda;
      t28 = t6 * u__1;
      out_5 = t18 * (-2 * r * t23 + 2 * t6 * t23 + t20 + t22 + t28);
      t30 = x__3 * lambda;
      out_6 = 2 * t30 - x__3;
      t32 = t4 ^ 2;
      t33 = t32 * x__2;
      t34 = lambda * t33;
      t38 = t6 * x__3;
      t41 = t3 ^ 2;
      t42 = t41 * x__1;
      t43 = t1 * t42;
      t47 = r * t1;
      t51 = r * t8;
      t54 = t3 * x__1;
      t55 = t54 * t4;
      t58 = u__1 * r;
      t61 = x__1 * t4;
      t62 = u__1 ^ 2;
      t67 = t54 * x__2;
      t68 = r * t62;
      t71 = x__1 * t32;
      t74 = t4 * x__2;
      t75 = x__1 * t74;
      t78 = u__2 ^ 2;
      t79 = r * t78;
      t82 = 3 * r * t62 * u__1 * t61 - 3 * t38 * t8 * t33 + 3 * t51 * x__3 * t33 + 3 * t47 * x__3 * t42 + 8 * t16 * t34 - 2 * t28 * t55 - t28 * t71 - 3 * t38 * t43 + 2 * t58 * t55 + t58 * t71 + 3 * t68 * t67 + 3 * t68 * t75 - 3 * t79 * t75;
      t83 = t41 * x__2;
      t85 = u__2 * r;
      t90 = u__1 * t54;
      t101 = t3 * x__2;
      t106 = t3 * t74;
      t112 = t6 * u__3;
      t118 = t41 * x__3;
      t121 = 3 * r * t78 * u__2 * t101 + 3 * t112 * t1 * t33 - 3 * t112 * t8 * t42 + 3 * t85 * u__1 * t32 - 3 * t85 * u__1 * t41 + 3 * t85 * t62 * t74 - 2 * t16 * t106 + 2 * t85 * t106 - 4 * t112 * t118 - t16 * t83 - 3 * t79 * t67 + 3 * t79 * t90 + t85 * t83;
      t123 = x__3 * t32;
      t132 = t42 * lambda;
      t147 = t8 * t41;
      t149 = u__2 * u__3 * r;
      t152 = t6 * t32;
      t153 = u__2 * t8;
      t154 = u__3 * t153;
      t157 = t6 * t41;
      t160 = r * u__2 * t33 + r * u__1 * t42 - 3 * t47 * u__3 * t33 - u__2 * t6 * t33 + 3 * t51 * u__3 * t42 - u__1 * t6 * t42 - 4 * t112 * t123 + 8 * t28 * t132 - 8 * t58 * t132 - 3 * t149 * t147 + 3 * t154 * t152 + 3 * t154 * t157 - 8 * t85 * t34;
      t169 = r * t9;
      t172 = lambda * t4;
      t177 = r * t90;
      t180 = lambda * t32;
      t186 = x__1 * u__1 * r;
      t189 = lambda * t74;
      t190 = t6 * t3;
      t191 = u__2 * t190;
      t195 = r * u__2 * t3;
      t198 = u__2 * t157;
      t202 = r * u__2 * t41;
      t211 = 16 * u__1 * t6 * t54 * t172 + 8 * u__1 * t6 * x__1 * t180 - 2 * r * t43 * t30 + 8 * u__3 * t157 * t30 + 8 * u__3 * t38 * t180 + 2 * t6 * t43 * t30 + 2 * t10 * t34 - 2 * t169 * t34 - 16 * t177 * t172 - 8 * t186 * t180 + 16 * t191 * t189 - 16 * t195 * t189 + 8 * t198 * t23 - 8 * t202 * t23;
      t224 = r * t21;
      t232 = u__1 * t8 * t6;
      t238 = r * u__1 * t8;
      t247 = 3 * u__2 * t6 * t1 * t123 - 6 * t10 * t106 - 3 * t10 * t83 + 6 * t169 * t106 - 3 * t232 * t118 - 3 * t232 * t123 + 3 * t238 * t123 + 3 * t169 * t83 - 3 * t202 * t21 - 6 * t22 * t55 - 3 * t22 * t71 + 6 * t224 * t55 + 3 * t224 * t71;
      t266 = r * t2;
      t269 = r * t19;
      t276 = x__3 * t4;
      t277 = u__3 * t190;
      t280 = t1 * t32;
      t281 = u__3 * t28;
      t284 = -6 * r * u__2 * t62 * t101 - 6 * r * t78 * u__1 * t61 - 6 * t266 * t106 + 6 * t7 * t106 + 3 * t198 * t21 - 6 * t20 * t55 - 3 * t20 * t71 - 3 * t266 * t83 + 6 * t269 * t55 + 3 * t269 * t71 - 8 * t277 * t276 + 3 * t281 * t280 + 3 * t7 * t83;
      t290 = u__1 * u__3 * r;
      t300 = t3 * t1 * t4;
      t313 = t3 * t4;
      t320 = x__3 * t180;
      t321 = x__1 * t1;
      t328 = x__3 * t189;
      t332 = 3 * t149 * t54 * t1 * x__2 + 3 * t149 * x__1 * t1 * t74 - 2 * r * t321 * t320 + 3 * t281 * t41 * t1 - 3 * t149 * t8 * t313 + 6 * t154 * t6 * t313 + 4 * t8 * t190 * t328 + 3 * t290 * t8 * t67 + 3 * t290 * t8 * t75 + 2 * t6 * t321 * t320 - 3 * t290 * t280 + 6 * t281 * t300 - 3 * t290 * t300;
      t337 = x__3 * t172;
      t338 = t54 * t1;
      t345 = x__3 * t23;
      t354 = x__3 * t74;
      t358 = t3 * t276;
      t363 = x__3 * x__2;
      t368 = r * t153;
      t374 = t1 * t276;
      t379 = -4 * r * t8 * t3 * t328 - 2 * r * t147 * t345 - 4 * r * t338 * t337 + 3 * t177 * t1 * t363 + 3 * t186 * t1 * t354 + 2 * t8 * t157 * t345 + 4 * t6 * t338 * t337 - 3 * t368 * x__1 * t354 - 3 * t368 * t54 * t363 + 6 * t191 * t374 - 3 * t195 * t374 - 6 * t232 * t358 + 3 * t238 * t358 + 16 * t277 * t337;
      t383 = t32 * t4;
      t387 = x__3 ^ 2;
      t390 = t3 * t32;
      t395 = r ^ 2;
      t400 = t41 * t4;
      t410 = t41 * t3;
      t415 = 2 * t190 * t387 * t4 + 2 * t395 * t6 * t313 + t6 * t387 * t32 + t6 * t41 * t387 - 2 * r * t383 - 6 * r * t390 - 6 * r * t400 - 2 * r * t410 + t395 * t152 + t395 * t157 + t6 * t383 + 3 * t6 * t390 + 3 * t6 * t400 + t6 * t410;
      out_7 = -0.1e1 / t415 * (t82 + t121 + t160 + t211 + t247 + t284 + t332 + t379) / 2;

      % Store outputs
      out_f = zeros(7, 1);
      out_f(1) = out_1;
      out_f(2) = out_2;
      out_f(3) = out_3;
      out_f(4) = out_4;
      out_f(5) = out_5;
      out_f(6) = out_6;
      out_f(7) = out_7;
    end % f
    %
    % - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    %
    function out_Jf_x = Jf_x( this, in_1, ~, t )
      % Evaluate the Jacobian of f with respect to x.

      % Extract properties
      r = this.m_r;

      % Extract inputs
      x__1 = in_1(1);
      x__2 = in_1(2);
      x__3 = in_1(3);
      u__1 = in_1(4);
      u__2 = in_1(5);
      u__3 = in_1(6);
      lambda = in_1(7);

      % Evaluate function
      t1 = cos(t);
      t2 = t1 * u__3;
      t3 = x__1 ^ 2;
      t4 = x__2 ^ 2;
      t5 = t3 + t4;
      t6 = sqrt(t5);
      t7 = 0.1e1 / t6;
      t8 = x__1 * t7;
      t10 = sin(t);
      t11 = t10 * x__3;
      t14 = 2 * t6 * lambda;
      t18 = lambda * r;
      t19 = 2 * t18;
      t20 = t7 * u__2;
      t21 = x__1 * t20;
      t24 = t6 * t2;
      t25 = t6 * t11;
      t26 = x__1 * lambda;
      t31 = t6 * u__2;
      t34 = 0.1e1 / t6 / t5;
      t35 = t34 * (-2 * r * t26 + 2 * t6 * t26 + t24 - t25 - t31);
      out_4_1 = t7 * (2 * t7 * lambda * t3 - t8 * t11 + t8 * t2 + t14 - t19 - t21) - x__1 * t35;
      t37 = t10 * u__3;
      t39 = t1 * x__3;
      t41 = x__2 * t7;
      t43 = 2 * t41 * t26;
      t44 = t7 * u__1;
      t45 = x__1 * t44;
      t48 = t6 * t37;
      t49 = t6 * t39;
      t50 = x__2 * lambda;
      t55 = t6 * u__1;
      t57 = t34 * (-2 * r * t50 + 2 * t6 * t50 + t48 + t49 + t55);
      out_5_1 = t7 * (t8 * t37 + t8 * t39 + t43 + t45) - x__1 * t57;
      t59 = u__1 * t4;
      t60 = u__2 ^ 2;
      t61 = r * t60;
      t64 = u__1 * t3;
      t67 = t4 * x__2;
      t68 = t3 * x__1;
      t69 = t68 * t67;
      t72 = t4 ^ 2;
      t73 = t72 * x__2;
      t74 = t7 * t73;
      t75 = u__2 * x__1;
      t77 = t3 ^ 2;
      t78 = t77 * x__1;
      t79 = t78 * x__2;
      t81 = x__2 * x__1;
      t82 = t60 * u__2;
      t83 = r * t82;
      t86 = t68 * x__2;
      t89 = x__1 * t67;
      t92 = t10 * t77;
      t93 = t6 * u__3;
      t94 = t93 * t92;
      t96 = t10 * t72;
      t98 = 3 * t93 * t96;
      t99 = u__3 * r;
      t100 = t99 * t92;
      t102 = u__1 * u__2;
      t103 = r * t68;
      t104 = t103 * t102;
      t107 = x__1 * r;
      t108 = t107 * u__2 * t67;
      t111 = r * t3;
      t113 = 9 * t111 * t60 * x__2;
      t114 = x__2 * u__2;
      t115 = t103 * t114;
      t119 = 6 * t111 * t59 - 2 * t20 * t69 - t20 * t79 - 4 * t31 * t86 - 4 * t31 * t89 - 6 * t61 * t59 + 9 * t61 * t64 - t75 * t74 + 6 * t83 * t81 + 15 * t100 - 12 * t104 + 4 * t108 - t113 + 4 * t115 - 15 * t94 - t98;
      t120 = t3 * t72;
      t122 = t77 * t4;
      t125 = t3 * t4;
      t128 = lambda * t72;
      t129 = u__1 * r;
      t134 = t77 * t3;
      t138 = t77 * lambda;
      t145 = t78 * x__3;
      t146 = u__3 * t7;
      t149 = t68 * x__3;
      t155 = x__3 * t72;
      t156 = r * t1;
      t159 = t1 * t134;
      t160 = t7 * x__3;
      t163 = u__1 ^ 2;
      t165 = t111 * t163 * x__2;
      t167 = t1 * t77;
      t168 = t6 * x__3;
      t169 = t168 * t167;
      t171 = t1 * t72;
      t173 = 3 * t168 * t171;
      t174 = 8 * t44 * t134 * lambda - 3 * t146 * t10 * t134 - t44 * t120 - 2 * t44 * t122 - 6 * t55 * t125 - 8 * t129 * t128 + 8 * t55 * t128 - 40 * t129 * t138 + 40 * t55 * t138 - 4 * t146 * t145 - 16 * t93 * t149 + 3 * t156 * t155 - 3 * t160 * t159 + 3 * t99 * t96 + 9 * t165 - 15 * t169 - t173;
      t176 = x__3 * t77;
      t177 = t156 * t176;
      t179 = t6 * t72;
      t181 = t6 * t77;
      t187 = t163 * u__1;
      t191 = t7 * t134;
      t193 = u__1 * t72;
      t194 = r * t193;
      t195 = t163 * t67;
      t197 = 3 * r * t195;
      t198 = t77 * u__1;
      t199 = r * t198;
      t201 = lambda * t67;
      t202 = t7 * t68;
      t203 = u__2 * t202;
      t206 = r * t75;
      t209 = x__3 * lambda;
      t210 = t7 * t78;
      t214 = t6 * t68;
      t218 = t7 * t39;
      t221 = t7 * t11;
      t226 = t10 * t6;
      t227 = u__1 * t226;
      t230 = 3 * r * t187 * t4 - 3 * r * t60 * t67 + 8 * u__3 * t210 * t209 + 32 * u__3 * t214 * t209 - 6 * t218 * t122 - 12 * t227 * t149 - u__1 * t179 - 5 * u__1 * t181 - u__1 * t191 + 16 * t203 * t201 - 32 * t206 * t201 - 3 * t221 * t79 - 12 * t25 * t89 + 15 * t177 + t194 + t197 + 5 * t199;
      t231 = t10 * t7;
      t232 = u__1 * t231;
      t235 = x__3 * t67;
      t241 = r * u__2 * t68;
      t244 = u__2 * t210;
      t247 = u__2 * t214;
      t250 = u__2 * t10;
      t251 = r * t250;
      t255 = r * u__2 * t163;
      t258 = r * t2;
      t259 = t258 * t89;
      t261 = r * t37;
      t262 = t261 * t125;
      t264 = t258 * t86;
      t266 = t48 * t125;
      t268 = t7 * t2;
      t275 = t1 * t73;
      t276 = x__1 * t146;
      t279 = t7 * t37;
      t284 = 3 * r * u__1 * t1 * t235 - 3 * t279 * t120 - 3 * t232 * t145 - 3 * t251 * t235 + 12 * t24 * t86 + 12 * t24 * t89 - 12 * t241 * t39 + 3 * t244 * t39 + 12 * t247 * t39 - 12 * t255 * t81 + 6 * t268 * t69 + 3 * t268 * t79 + 3 * t276 * t275 - 12 * t259 + 18 * t262 - 12 * t264 - 18 * t266;
      t289 = x__3 * t4;
      t290 = t6 * x__1;
      t291 = u__3 * t290;
      t296 = u__3 * t202;
      t299 = t68 * t1;
      t300 = u__3 * t55;
      t303 = t78 * t1;
      t304 = u__3 * t44;
      t308 = u__3 * u__1;
      t309 = r * t308;
      t312 = t10 * t68;
      t313 = u__3 * u__2;
      t314 = r * t313;
      t317 = u__3 * t250;
      t322 = t1 * t67;
      t336 = r * t39;
      t339 = -10 * r * t167 * t209 + 3 * t309 * t10 * t67 + 2 * t7 * t159 * t209 + 10 * t6 * t167 * t209 - 6 * t279 * t122 - 2 * t336 * t128 + 2 * t49 * t128 - 4 * t276 * t155 + 3 * t317 * t210 + 12 * t317 * t214 - 16 * t291 * t289 - 8 * t296 * t289 + 12 * t300 * t299 + 3 * t304 * t303 - 12 * t314 * t312 + 3 * t314 * t322;
      t340 = lambda * t4;
      t341 = t7 * t77;
      t345 = r * t64;
      t348 = t6 * t3;
      t349 = u__1 * t348;
      t352 = t7 * t3;
      t360 = u__2 * t290;
      t365 = lambda * t73;
      t368 = r * t11;
      t369 = t368 * t89;
      t371 = t336 * t125;
      t373 = t368 * t86;
      t375 = t49 * t125;
      t379 = t10 * t73;
      t387 = 8 * u__1 * t352 * t128 - 3 * x__1 * t160 * t379 + 16 * u__1 * t341 * t340 - 3 * t218 * t120 + 32 * t360 * t201 + 8 * t21 * t365 - 6 * t221 * t69 - 32 * t241 * t50 + 8 * t244 * t50 + 32 * t247 * t50 - 12 * t25 * t86 - 48 * t345 * t340 + 48 * t349 * t340 + 12 * t369 + 18 * t371 + 12 * t373 - 18 * t375;
      t389 = x__3 * t128;
      t392 = t68 * t4;
      t396 = x__1 * t4;
      t397 = t10 * t396;
      t400 = t1 * x__2;
      t401 = t3 * t400;
      t407 = t7 * t72;
      t412 = t1 * t4;
      t416 = x__1 * t412;
      t419 = t3 * x__2;
      t420 = t10 * t419;
      t429 = t1 * t289;
      t432 = x__3 * x__2;
      t433 = t3 * t432;
      t446 = 8 * t276 * t389 + 6 * t317 * t7 * t392 - 6 * t314 * t397 + 9 * t314 * t401 + 12 * t317 * t6 * t396 + 3 * x__1 * t313 * t10 * t407 + 6 * t304 * t68 * t412 - 6 * t309 * t416 + 9 * t309 * t420 + 12 * t300 * t416 + 3 * x__1 * t308 * t7 * t171 - 6 * t206 * t429 - 9 * t251 * t433 + 12 * t360 * t429 + 3 * t21 * t1 * t155 + 6 * t203 * t429 - 6 * t232 * t68 * t289;
      t447 = x__1 * t289;
      t448 = u__1 * t10;
      t449 = r * t448;
      t452 = t1 * t432;
      t461 = t3 * t1;
      t465 = x__3 * t201;
      t473 = x__3 * t340;
      t474 = t7 * t167;
      t480 = x__3 * t50;
      t496 = x__3 * t365;
      t504 = -8 * r * t10 * x__1 * t465 - 3 * x__1 * t448 * t7 * t155 - 8 * r * t312 * t480 - 12 * r * t461 * t473 + 4 * t10 * t202 * t465 + 2 * t10 * t210 * t480 + 8 * t10 * t214 * t480 + 8 * t10 * t290 * t465 + 2 * x__1 * t231 * t496 + 2 * t7 * t461 * t389 + 12 * t6 * t461 * t473 - 12 * t227 * t447 + 32 * t291 * t473 + 16 * t296 * t473 + 9 * t345 * t452 + 6 * t449 * t447 + 4 * t474 * t473;
      t508 = t72 * t4;
      t512 = x__3 ^ 2;
      t513 = t512 * t72;
      t519 = r ^ 2;
      t521 = t512 * t4;
      t528 = t519 * t6;
      t531 = t77 * t512;
      t537 = -6 * r * t120 - 6 * r * t122 - 2 * r * t134 - 2 * r * t508 + 3 * t6 * t120 + 3 * t6 * t122 + 2 * t528 * t125 + t6 * t134 + t519 * t179 + t519 * t181 + 2 * t348 * t521 + t6 * t508 + t6 * t513 + t6 * t531;
      t538 = 0.1e1 / t537;
      t542 = t168 * t379;
      t544 = t168 * t303;
      t546 = t156 * t145;
      t548 = x__3 * t73;
      t549 = r * t10;
      t550 = t549 * t548;
      t552 = t55 * t392;
      t554 = t129 * t392;
      t556 = r * t187;
      t559 = r * t163;
      t562 = x__1 * t72;
      t563 = t55 * t562;
      t564 = t129 * t562;
      t569 = 8 * t31 * t365 + 3 * t556 * t396 + 3 * t559 * t86 + 3 * t559 * t89 - 3 * t61 * t89 - 3 * t542 - 3 * t544 + 3 * t546 + 3 * t550 - 2 * t552 + 2 * t554 - t563 + t564;
      t570 = t77 * x__2;
      t571 = t31 * t570;
      t572 = u__2 * r;
      t573 = t572 * t570;
      t576 = u__1 * t68;
      t587 = t3 * t67;
      t588 = t31 * t587;
      t590 = t572 * t587;
      t594 = t10 * t78;
      t597 = t93 * t176;
      t599 = 3 * t572 * t193 + 3 * t572 * t195 - 3 * t572 * t198 + 3 * t93 * t275 + 3 * t83 * t419 + 3 * t61 * t576 - 3 * t93 * t594 - 3 * t61 * t86 - t571 + t573 - 2 * t588 + 2 * t590 - 4 * t597;
      t601 = t93 * t155;
      t609 = t78 * lambda;
      t617 = r * u__1 * t78;
      t618 = t6 * t78;
      t619 = u__1 * t618;
      t620 = t6 * t73;
      t621 = u__2 * t620;
      t623 = r * u__2 * t73;
      t624 = u__2 * t3;
      t625 = r * t624;
      t628 = u__2 * t181;
      t632 = r * u__2 * t77;
      t635 = -3 * t156 * u__3 * t73 + 3 * t549 * u__3 * t78 - 8 * t129 * t609 - 16 * t625 * t201 - 8 * t572 * t365 + 8 * t628 * t50 - 8 * t632 * t50 + 8 * t55 * t609 - 4 * t601 + t617 - t619 - t621 + t623;
      t636 = u__3 * t181;
      t639 = u__3 * t168;
      t642 = t49 * t562;
      t644 = t25 * t587;
      t646 = t49 * t392;
      t648 = t25 * t570;
      t650 = t368 * t587;
      t652 = t336 * t562;
      t654 = t368 * t570;
      t656 = t336 * t392;
      t666 = 8 * t639 * t128 - 3 * t227 * t155 + 3 * t449 * t155 - 3 * t227 * t176 + 8 * t636 * t209 - 3 * t632 * t39 - 3 * t642 - 6 * t644 - 6 * t646 - 3 * t648 + 6 * t650 + 3 * t652 + 3 * t654 + 6 * t656;
      t670 = u__2 * t6 * t1;
      t676 = r * t60 * u__1;
      t697 = u__3 * t348;
      t698 = t697 * t289;
      t700 = 3 * t670 * t155 + 3 * t24 * t570 + 6 * t24 * t587 - 6 * t255 * t419 - 3 * t258 * t570 - 6 * t258 * t587 + 6 * t261 * t392 + 3 * t261 * t562 + 3 * t628 * t39 - 6 * t48 * t392 - 6 * t676 * t396 - 3 * t48 * t562 - 8 * t698;
      t713 = r * t303;
      t718 = t6 * t303;
      t723 = u__1 * t214;
      t726 = r * t576;
      t729 = u__1 * t290;
      t732 = 8 * t729 * t128 + 3 * t300 * t167 + 3 * t300 * t171 - 3 * t309 * t171 + 3 * t317 * t179 + 3 * t317 * t181 - 2 * t713 * t209 + 2 * t718 * t209 + 2 * t25 * t365 - 3 * t314 * t92 + 16 * t723 * t340 - 16 * t726 * t340 - 2 * t368 * t365;
      t734 = u__1 * x__1;
      t735 = r * t734;
      t738 = u__2 * t348;
      t743 = t1 * t235;
      t746 = t3 * t289;
      t769 = 3 * t309 * t10 * t86 + 3 * t309 * t10 * t89 - 3 * t251 * x__1 * t235 - 3 * t251 * t68 * t432 - 8 * t735 * t128 + 16 * t738 * t201 - 6 * t227 * t746 - 3 * t625 * t429 + 6 * t738 * t429 + 3 * t449 * t746 + 3 * t726 * t452 + 16 * t697 * t473 + 3 * t735 * t743;
      t770 = t3 * t412;
      t787 = x__1 * t1;
      t788 = t6 * t787;
      t791 = r * t787;
      t794 = t10 * t348;
      t798 = r * t10 * t3;
      t801 = t6 * t299;
      t804 = r * t299;
      t807 = t10 * t181;
      t810 = r * t92;
      t813 = -3 * t314 * t10 * t125 + 6 * t317 * t6 * t125 + 3 * t314 * x__1 * t322 + 3 * t314 * t68 * t400 + 6 * t300 * t770 - 3 * t309 * t770 + 2 * t788 * t389 - 2 * t791 * t389 + 4 * t794 * t465 - 4 * t798 * t465 + 4 * t801 * t473 - 4 * t804 * t473 + 2 * t807 * t480 - 2 * t810 * t480;
      t817 = t537 ^ 2;
      t819 = 0.1e1 / t817 * (t569 + t599 + t635 + t666 + t700 + t732 + t769 + t813);
      t820 = t7 * t508;
      t823 = t6 * t562;
      t828 = r * t562;
      t838 = t6 * t392;
      t843 = r * t392;
      t847 = t519 * t7;
      t857 = r * t78;
      t862 = 4 * x__1 * t512 * t4 * t6 + 3 * t7 * t78 * t4 + x__1 * t519 * t407 + t7 * t78 * t512 + 3 * t7 * t68 * t72 + t7 * t77 * t68 + 2 * t202 * t521 + t519 * t210 + 4 * t512 * t214 + 4 * t519 * t214 + 2 * t847 * t392 + 4 * t528 * t396 + t8 * t513 + x__1 * t820 + 6 * t618 + 6 * t823 - 12 * t828 + 12 * t838 - 24 * t843 - 12 * t857;
      out_7_1 = -t538 * (t119 + t174 + t230 + t284 + t339 + t387 + t446 + t504) / 2 + t862 * t819 / 2;
      t867 = x__2 * t20;
      out_4_2 = t7 * (-t41 * t11 + t41 * t2 + t43 - t867) - x__2 * t35;
      t875 = x__2 * t44;
      out_5_2 = t7 * (2 * t7 * t340 + t41 * t37 + t41 * t39 + t14 - t19 + t875) - x__2 * t57;
      t879 = t93 * t171;
      t882 = t156 * u__3 * t72;
      t885 = 3 * t93 * t167;
      t900 = r * t4;
      t903 = r * t67;
      t904 = t903 * t102;
      t907 = t900 * t60 * x__1;
      t916 = x__1 * t73;
      t918 = 3 * t146 * t1 * t508 - 3 * t156 * u__3 * t77 - 6 * t572 * t163 * t3 + 9 * t572 * t163 * t4 - 2 * t20 * t120 - t20 * t122 - 6 * t31 * t125 - 4 * t146 * t548 - 16 * t93 * t235 - t44 * t916 + 6 * t900 * t624 + 15 * t879 - 15 * t882 + t885 + 12 * t904 - 9 * t907;
      t923 = lambda * t508;
      t930 = t903 * t734;
      t934 = 9 * t900 * x__1 * t163;
      t935 = x__2 * r;
      t936 = t935 * t576;
      t948 = t549 * t155;
      t951 = 3 * t168 * t92;
      t952 = t168 * t96;
      t957 = -3 * t160 * t10 * t508 - u__1 * x__2 * t210 + 40 * t31 * t128 - 40 * t572 * t128 + 8 * t31 * t138 - 8 * t572 * t138 + 8 * t20 * t923 - 2 * t44 * t69 - 4 * t55 * t86 - 4 * t55 * t89 + 6 * t556 * t81 + 4 * t930 + t934 + 4 * t936 + 15 * t948 - t951 - 15 * t952;
      t962 = r * t72 * u__2;
      t966 = 3 * r * t60 * t68;
      t986 = t10 * t341;
      t995 = 3 * r * t163 * t68 + 3 * r * t82 * t3 + 4 * t10 * t352 * t389 + 4 * t7 * t299 * t465 + 3 * t549 * t176 - 5 * u__2 * t179 + 8 * t788 * t465 + 12 * t794 * t473 - 12 * t798 * t473 + 2 * t986 * t473 + 8 * t801 * t480 - 8 * t804 * t480 - u__2 * t820 - t628 + t632 + 5 * t962 - t966;
      t1021 = u__2 * t352;
      t1038 = 3 * x__2 * t313 * t986 + 6 * t304 * t3 * t322 - 6 * t309 * t401 + 9 * t309 * t397 + 12 * t300 * t401 + 3 * x__2 * t308 * t474 + 6 * t317 * t7 * t587 - 6 * t314 * t420 + 9 * t314 * t416 + 12 * t317 * t6 * t419 + 6 * t1021 * t743 - 6 * t625 * t452 - 9 * t251 * t447 + 12 * t738 * t452 + 3 * t867 * t77 * t39 - 6 * t232 * t3 * t235 + 6 * t449 * t433;
      t1049 = u__3 * t352;
      t1055 = x__2 * t146;
      t1082 = 9 * t735 * t429 - 12 * t227 * t433 - 3 * x__2 * t448 * t7 * t176 + 16 * t1049 * t465 + 32 * t697 * t480 + 8 * t1055 * t77 * t209 + 2 * x__2 * t210 * t1 * t209 + 2 * t7 * t787 * t496 - 8 * t791 * t465 + 8 * u__3 * t160 * t365 + 32 * t639 * t201 - 12 * t49 * t86 + 3 * t726 * t39 + 12 * t449 * t235 - 3 * t232 * t548 - 12 * t227 * t235;
      t1093 = t261 * t89;
      t1095 = t258 * t125;
      t1097 = t261 * t86;
      t1099 = t24 * t125;
      t1119 = 3 * t1 * t548 * t7 * u__2 - 8 * t1049 * t235 - 4 * t1055 * t176 - 3 * t1055 * t594 + 6 * t120 * t268 + 3 * t122 * t268 - 3 * t149 * t251 + 12 * t235 * t670 - 6 * t279 * t69 - 3 * t279 * t916 - 12 * t48 * t86 - 12 * t48 * t89 - 12 * t676 * t81 + 12 * t1093 - 18 * t1095 + 12 * t1097 + 18 * t1099;
      t1135 = t6 * t67;
      t1157 = 16 * t201 * t202 * u__1 + 12 * t1135 * t317 + 10 * t128 * t25 - 10 * t128 * t368 + 2 * t209 * t807 - 2 * t209 * t810 + 2 * t221 * t923 + 3 * t275 * t304 + 3 * t299 * t314 + 12 * t300 * t322 + 3 * t309 * t312 - 12 * t309 * t322 + 3 * t317 * t74 + 8 * t365 * t45 - 16 * t432 * t697 - 32 * t50 * t726 + 8 * t609 * t875;
      t1173 = t336 * t89;
      t1175 = t368 * t125;
      t1177 = t336 * t86;
      t1179 = t25 * t125;
      t1194 = -3 * t160 * t303 * x__2 + 8 * t340 * t341 * u__2 + 16 * t1021 * t128 - 6 * t120 * t221 - 3 * t122 * t221 + 32 * t201 * t729 - 32 * t201 * t735 - 6 * t218 * t69 - 3 * t218 * t916 - 48 * t340 * t625 + 48 * t340 * t738 - 12 * t49 * t89 + 32 * t50 * t723 + 12 * t1173 + 18 * t1175 + 12 * t1177 - 18 * t1179;
      t1202 = r * t73;
      t1208 = t6 * t587;
      t1213 = r * t587;
      t1218 = t6 * x__2;
      t1225 = t6 * t570;
      t1230 = r * t570;
      t1240 = 4 * t1218 * t3 * t512 + 3 * t3 * t7 * t73 + t341 * t519 * x__2 + 2 * t352 * t512 * t67 + t512 * t7 * t73 + t67 * t7 * t72 + 3 * t67 * t7 * t77 + 4 * t1135 * t512 + 4 * t1135 * t519 + t191 * x__2 + t41 * t531 + 4 * t419 * t528 + t519 * t74 + 2 * t587 * t847 - 12 * t1202 + 12 * t1208 - 24 * t1213 + 6 * t1225 - 12 * t1230 + 6 * t620;
      out_7_2 = -t538 * (t918 + t957 + t995 + t1038 + t1082 + t1119 + t1157 + t1194) / 2 + t1240 * t819 / 2;
      out_4_3 = -t10;
      out_5_3 = t1;
      out_6_3 = 2 * lambda - 1;
      t1263 = 3 * r * t379 - 8 * t125 * t93 + 8 * t138 * t93 + 3 * t167 * t31 - 3 * t167 * t572 + 3 * t171 * t31 - 4 * t179 * u__3 - 3 * t379 * t6 - 4 * t636 + 3 * t713 - 3 * t718;
      t1270 = out_5_3 * lambda;
      t1287 = 2 * t1270 * t618 - 2 * t1270 * t857 + 8 * t128 * t93 + 3 * t129 * t96 + 6 * t156 * t392 + 3 * t156 * t562 - 3 * t179 * t448 - 3 * t181 * t448 + 2 * t226 * t365 - 2 * t365 * t549 + 6 * t549 * t587;
      t1291 = t6 * out_5_3;
      t1304 = out_5_3 * x__2;
      t1309 = out_5_3 * t4;
      t1314 = -6 * t125 * t227 + 3 * t125 * t449 - 6 * t1291 * t392 - 3 * t1291 * t562 + 3 * t1304 * t726 - 3 * t1309 * t625 - 3 * t226 * t570 - 6 * t226 * t587 - 3 * t251 * t86 + 3 * t322 * t735 + 3 * t549 * t570;
      t1337 = 2 * t128 * t788 - 2 * t128 * t791 + 6 * t1309 * t738 + 4 * t201 * t794 - 4 * t201 * t798 - 3 * t251 * t89 + 16 * t340 * t697 + 4 * t340 * t801 - 4 * t340 * t804 + 2 * t50 * t807 - 2 * t50 * t810;
      t1341 = t6 * t155;
      t1343 = t348 * t289;
      t1345 = t6 * t176;
      out_7_3 = -t538 * (t1263 + t1287 + t1314 + t1337) / 2 + (2 * t1341 + 4 * t1343 + 2 * t1345) * t819 / 2;
      out_1_4 = 1;
      out_5_4 = 1;
      t1361 = 3 * t879 - 3 * t882 + t885 + 6 * t904 - 6 * t907 + 6 * t930 + t934 + 6 * t936 + 3 * t948 - t951 - 3 * t952 - t823 + t828 - 2 * t838 + 2 * t843 + 3 * t962 + t966;
      t1386 = -12 * r * t114 * t64 - 8 * r * t609 + 8 * t128 * t290 - 16 * t18 * t392 - 8 * t18 * t562 + 16 * t214 * t340 + 8 * t6 * t609 + 3 * t1093 - 3 * t1095 + 3 * t1097 + 6 * t1099 + 3 * t1173 + 3 * t1175 + 3 * t1177 - 6 * t1179 - t618 - 3 * t632 + t857;
      out_7_4 = -t538 * (t1361 + t1386) / 2;
      out_2_5 = 1;
      out_4_5 = -1;
      t1402 = 3 * t94 + t98 - 3 * t100 + 6 * t104 - 6 * t108 + t113 - 6 * t115 - 6 * t165 + 3 * t169 + t173 - 3 * t177 + 3 * t194 + t197 - 3 * t199 - 2 * t1208 + 2 * t1213 - t1225;
      t1427 = -12 * r * t4 * t734 * u__2 - 8 * r * t365 - 8 * t18 * t570 - 16 * t18 * t587 + 8 * t181 * t50 + 16 * t201 * t348 + 8 * t365 * t6 + t1202 + t1230 + 3 * t259 - 3 * t262 + 3 * t264 + 6 * t266 - 3 * t369 - 3 * t371 - 3 * t373 + 6 * t375 - t620;
      out_7_5 = -t538 * (t1402 + t1427) / 2;
      out_3_6 = 1;
      out_4_6 = out_5_3;
      out_5_6 = t10;
      t1433 = out_4_6 * t73;
      t1438 = out_5_6 * t78;
      t1444 = u__2 * out_5_6;
      t1463 = -3 * r * t1433 + 3 * r * t1438 + 8 * t128 * t168 - 3 * t129 * t171 + 3 * t1433 * t6 - 3 * t1438 * t6 + 3 * t1444 * t179 + 3 * t1444 * t181 - 3 * t156 * t570 + 3 * t167 * t55 + 3 * t171 * t55 + 8 * t181 * t209 - 3 * t572 * t92 - 4 * t1341 - 8 * t1343 - 4 * t1345;
      t1500 = 6 * out_5_6 * t125 * t6 * u__2 + 16 * t3 * t340 * t6 * x__3 - 3 * t125 * t251 + 3 * t1291 * t570 + 6 * t1291 * t587 + 3 * t1304 * t241 - 3 * t1309 * t345 + 6 * t1309 * t349 - 6 * t156 * t587 + 3 * t206 * t322 - 6 * t226 * t392 - 3 * t226 * t562 + 6 * t392 * t549 + 3 * t449 * t86 + 3 * t449 * t89 + 3 * t549 * t562;
      out_7_6 = -t538 * (t1463 + t1500) / 2;
      out_4_7 = t7 * (2 * t290 - 2 * t107);
      out_5_7 = t7 * (2 * t1218 - 2 * t935);
      out_6_7 = 2 * x__3;
      t1521 = 2 * t542 + 2 * t544 - 2 * t546 - 2 * t550 + 16 * t552 - 16 * t554 + 8 * t563 - 8 * t564 + 8 * t571 - 8 * t573 + 16 * t588 - 16 * t590 + 8 * t597;
      t1536 = 8 * t601 - 8 * t617 + 8 * t619 + 8 * t621 - 8 * t623 + 2 * t642 + 4 * t644 + 4 * t646 + 2 * t648 - 4 * t650 - 2 * t652 - 2 * t654 - 4 * t656 + 16 * t698;
      out_7_7 = -t538 * (t1521 + t1536) / 2;

      % Store outputs
      out_Jf_x = zeros(7, 7);
      out_Jf_x(4, 1) = out_4_1;
      out_Jf_x(5, 1) = out_5_1;
      out_Jf_x(7, 1) = out_7_1;
      out_Jf_x(4, 2) = out_4_2;
      out_Jf_x(5, 2) = out_5_2;
      out_Jf_x(7, 2) = out_7_2;
      out_Jf_x(4, 3) = out_4_3;
      out_Jf_x(5, 3) = out_5_3;
      out_Jf_x(6, 3) = out_6_3;
      out_Jf_x(7, 3) = out_7_3;
      out_Jf_x(1, 4) = out_1_4;
      out_Jf_x(5, 4) = out_5_4;
      out_Jf_x(7, 4) = out_7_4;
      out_Jf_x(2, 5) = out_2_5;
      out_Jf_x(4, 5) = out_4_5;
      out_Jf_x(7, 5) = out_7_5;
      out_Jf_x(3, 6) = out_3_6;
      out_Jf_x(4, 6) = out_4_6;
      out_Jf_x(5, 6) = out_5_6;
      out_Jf_x(7, 6) = out_7_6;
      out_Jf_x(4, 7) = out_4_7;
      out_Jf_x(5, 7) = out_5_7;
      out_Jf_x(6, 7) = out_6_7;
      out_Jf_x(7, 7) = out_7_7;
    end % Jf_x
    %
    % - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    %
    function out_Jf_v = Jf_v( ~, ~, ~, ~ )
      % Evaluate the Jacobian of f with respect to v.

      % Extract properties
      % No properties

      % Extract inputs

      % Evaluate function
      % No body

      % Store outputs
      out_Jf_v = zeros(7, 0);
    end % Jf_v
    %
    % - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    %
    function out_v = v( ~, ~, ~ )
      % Evaluate the the veils v.

      % Extract properties
      % No properties

      % Extract inputs

      % Evaluate function
      % No body

      % Store outputs
      out_v = zeros(0, 1);
    end % v
    %
    % - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    %
    function out_Jv_x = Jv_x( ~, ~, ~, ~ )
      % Evaluate the Jacobian of v with respect to x.

      % Extract properties
      % No properties

      % Extract inputs

      % Evaluate function
      % No body

      % Store outputs
      out_Jv_x = zeros(0, 7);
    end % Jv_x
    %
    % - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    %
    function out_h = h( this, in_1, ~, t )
      % Calculate the residual of the invariants h.

      % Extract properties
      r = this.m_r;
      rho = this.m_rho;

      % Extract inputs
      x__1 = in_1(1);
      x__2 = in_1(2);
      x__3 = in_1(3);
      u__1 = in_1(4);
      u__2 = in_1(5);
      u__3 = in_1(6);
      lambda = in_1(7);

      % Evaluate function
      t1 = x__1 ^ 2;
      t2 = x__2 ^ 2;
      t3 = x__3 ^ 2;
      t4 = t1 + t2;
      t5 = sqrt(t4);
      t8 = r ^ 2;
      t9 = rho ^ 2;
      out_1 = 2 * t5 * r - t1 - t2 - t3 - t8 + t9;
      t11 = t5 - r;
      out_2 = 2 * (x__1 * t11 * u__1 + x__2 * t11 * u__2 + t5 * u__3 * x__3) / t5;
      t20 = t5 * t4;
      t22 = sin(t);
      t24 = cos(t);
      t26 = -t22 * x__3 + t24 * u__3 - u__2;
      t29 = lambda * t2;
      t32 = t22 * u__3 + t24 * x__3 + u__1;
      t38 = u__1 ^ 2;
      t40 = u__2 ^ 2;
      t42 = u__3 ^ 2;
      t46 = t1 ^ 2;
      t52 = x__2 * t32;
      out_3 = -4 / t20 * ((lambda * t1 + x__1 * t26 / 2 + t29 + x__2 * t32 / 2 + t3 * (lambda - 0.1e1 / 0.2e1) + lambda * t8 + t38 / 2 + t40 / 2 + t42 / 2) * t20 - (4 * lambda * t46 + t1 * x__1 * t26 + t1 * (8 * t29 + t52 + t40) - x__1 * (-x__2 * t26 + 2 * u__1 * u__2) * x__2 + (4 * t29 + t52 + t38) * t2) * r / 2);

      % Store outputs
      out_h = zeros(3, 1);
      out_h(1) = out_1;
      out_h(2) = out_2;
      out_h(3) = out_3;
    end % h
    %
    % - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    %
    function out_Jh_x = Jh_x( this, in_1, ~, t )
      % Calculate the Jacobian of h with respect to x.

      % Extract properties
      r = this.m_r;

      % Extract inputs
      x__1 = in_1(1);
      x__2 = in_1(2);
      x__3 = in_1(3);
      u__1 = in_1(4);
      u__2 = in_1(5);
      u__3 = in_1(6);
      lambda = in_1(7);

      % Evaluate function
      t1 = x__1 ^ 2;
      t2 = x__2 ^ 2;
      t3 = t1 + t2;
      t4 = sqrt(t3);
      t5 = 0.1e1 / t4;
      t6 = t5 * r;
      out_1_1 = 2 * t6 * x__1 - 2 * x__1;
      t9 = t3 * t4;
      t10 = 0.1e1 / t9;
      t11 = t4 - r;
      t12 = t11 * u__1;
      t14 = t11 * u__2;
      t16 = u__3 * x__3;
      t19 = (x__1 * t12 + x__2 * t14 + t4 * t16) * t10;
      t21 = t5 * u__1;
      t23 = t5 * u__2;
      t24 = x__2 * x__1;
      out_2_1 = -2 * x__1 * t19 + 2 * (x__1 * t5 * t16 + t1 * t21 + t24 * t23 + t12) * t5;
      t32 = sin(t);
      t33 = t32 * x__3;
      t34 = cos(t);
      t35 = t34 * u__3;
      t36 = -t33 + t35 - u__2;
      t39 = lambda * t2;
      t40 = t34 * x__3;
      t41 = t32 * u__3;
      t42 = t40 + t41 + u__1;
      t45 = lambda - 0.1e1 / 0.2e1;
      t46 = x__3 ^ 2;
      t48 = r ^ 2;
      t50 = u__1 ^ 2;
      t52 = u__2 ^ 2;
      t54 = u__3 ^ 2;
      t56 = lambda * t1 + x__1 * t36 / 2 + t39 + x__2 * t42 / 2 + t46 * t45 + lambda * t48 + t50 / 2 + t52 / 2 + t54 / 2;
      t57 = t56 * t4;
      t67 = x__1 * t1;
      t73 = x__2 * t42;
      t74 = 8 * t39 + t73 + t52;
      t78 = -x__2 * t36;
      t81 = 2 * u__1 * u__2 + t78;
      t82 = t81 * x__2;
      t90 = t1 ^ 2;
      t97 = 4 * t39 + t73 + t50;
      t103 = t3 ^ 2;
      t106 = 0.1e1 / t4 / t103 * (t56 * t9 - (4 * lambda * t90 + t1 * t74 + t97 * t2 + t67 * t36 - x__1 * t82) * r / 2);
      out_3_1 = -4 * t10 * (3 * x__1 * t57 + (2 * x__1 * lambda - t33 / 2 + t35 / 2 - u__2 / 2) * t9 - (16 * lambda * t67 + 3 * t1 * t36 + 2 * x__1 * t74 - t82) * r / 2) + 12 * x__1 * t106;
      out_1_2 = 2 * t6 * x__2 - 2 * x__2;
      out_2_2 = -2 * x__2 * t19 + 2 * (x__2 * t5 * t16 + t2 * t23 + t24 * t21 + t14) * t5;
      t121 = x__2 * lambda;
      out_3_2 = -4 * t10 * (3 * x__2 * t57 + (2 * t121 + t40 / 2 + t41 / 2 + u__1 / 2) * t9 - (t1 * (16 * t121 + t40 + t41 + u__1) - x__1 * t81 - x__1 * t78 + 2 * t97 * x__2 + (8 * t121 + t40 + t41 + u__1) * t2) * r / 2) + 12 * x__2 * t106;
      t146 = 2 * x__3;
      out_1_3 = -t146;
      out_2_3 = 2 * u__3;
      t149 = x__2 * t34;
      t159 = t2 * x__2;
      out_3_3 = -4 * t10 * ((-x__1 * t32 / 2 + t149 / 2 + 2 * x__3 * t45) * t9 - (-x__1 * t32 * t2 + t1 * t149 + t34 * t159 - t67 * t32) * r / 2);
      out_2_4 = 2 * t5 * t11 * x__1;
      t177 = x__2 + 2 * u__1;
      out_3_4 = -4 * t10 * ((x__2 / 2 + u__1) * t9 - (-2 * x__2 * u__2 * x__1 + t1 * x__2 + t177 * t2) * r / 2);
      out_2_5 = 2 * t5 * t11 * x__2;
      out_3_5 = -4 * t10 * ((-x__1 / 2 + u__2) * t9 - (-x__1 * t177 * x__2 + 2 * t1 * u__2 - t67) * r / 2);
      out_2_6 = t146;
      t202 = x__2 * t32;
      out_3_6 = -4 * t10 * ((x__1 * t34 / 2 + t202 / 2 + u__3) * t9 - (x__1 * t34 * t2 + t1 * t202 + t32 * t159 + t67 * t34) * r / 2);
      t222 = t2 ^ 2;
      out_3_7 = -4 * t10 * ((t48 + t1 + t2 + t46) * t9 - (8 * t2 * t1 + 4 * t222 + 4 * t90) * r / 2);

      % Store outputs
      out_Jh_x = zeros(3, 7);
      out_Jh_x(1, 1) = out_1_1;
      out_Jh_x(2, 1) = out_2_1;
      out_Jh_x(3, 1) = out_3_1;
      out_Jh_x(1, 2) = out_1_2;
      out_Jh_x(2, 2) = out_2_2;
      out_Jh_x(3, 2) = out_3_2;
      out_Jh_x(1, 3) = out_1_3;
      out_Jh_x(2, 3) = out_2_3;
      out_Jh_x(3, 3) = out_3_3;
      out_Jh_x(2, 4) = out_2_4;
      out_Jh_x(3, 4) = out_3_4;
      out_Jh_x(2, 5) = out_2_5;
      out_Jh_x(3, 5) = out_3_5;
      out_Jh_x(2, 6) = out_2_6;
      out_Jh_x(3, 6) = out_3_6;
      out_Jh_x(3, 7) = out_3_7;
    end % Jh_x
    %
    % - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    %
    function out_Jh_v = Jh_v( ~, ~, ~, ~ )
      % Calculate the Jacobian of h with respect to v.

      % Extract properties
      % No properties

      % Extract inputs

      % Evaluate function
      % No body

      % Store outputs
      out_Jh_v = zeros(3, 0);
    end % Jh_v
    %
    % - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    %
    function out = in_domain( ~, ~, ~ )
      out = true;
    end % in_domain
    %
    % - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    %
  end
end % Torus

% That's All Folks!
