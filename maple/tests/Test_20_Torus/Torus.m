% +--------------------------------------------------------------------------+
% | 'Indigo' module version 1.0 - BSD 3-Clause License - Copyright (c) 2023  |
% | Current version authors:                                                 |
% |   Davide Stocco and Enrico Bertolazzi.                                   |
% +--------------------------------------------------------------------------+

% Matlab generated code for implicit system: Torus
% This file has been automatically generated by Indigo.
% DISCLAIMER: If you need to edit it, do it wisely!

classdef Torus < Indigo.Systems.Implicit
  %
  % No class description provided.
  %
  properties (SetAccess = protected, Hidden = true)
    % User data
    m_r = 10.0;
    m_rho = 5.0;
  end
  %
  methods
    %
    % - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    %
    function this = Torus( varargin )
      % Class constructor.

      % Superclass constructor
      num_eqns = 7;
      num_veil = 0;
      num_invs = 3;
      this = this@Indigo.Systems.Implicit('Torus', num_eqns, num_veil, num_invs);

      % User data
      if (nargin == 0)
        % Keep default values
      elseif (nargin == 1 && isstruct(varargin{1}))
        this.m_r = varargin{1}.r;
        this.m_rho = varargin{1}.rho;
      elseif (nargin == 2)
        this.m_r = varargin{1};
        this.m_rho = varargin{2};
      else
        error('wrong number of input arguments.');
      end
    end % Torus
    %
    % - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    %
    function out_F = F( this, in_1, in_2, in_3, t )
      % Evaluate the function F.

      % Extract properties
      r = this.m_r;
      rho = this.m_rho;

      % Extract inputs
      x__1 = in_1(1);
      x__2 = in_1(2);
      x__3 = in_1(3);
      u__1 = in_1(4);
      u__2 = in_1(5);
      u__3 = in_1(6);
      lambda = in_1(7);
      x__1_dot = in_2(1);
      x__2_dot = in_2(2);
      x__3_dot = in_2(3);
      u__1_dot = in_2(4);
      u__2_dot = in_2(5);
      u__3_dot = in_2(6);
      lambda_dot = in_2(7);

      % Evaluate function
      out_1 = x__1_dot - u__1;
      out_2 = x__2_dot - u__2;
      out_3 = x__3_dot - u__3;
      t1 = x__1 * lambda;
      t2 = cos(t);
      t3 = t2 * u__3;
      t4 = t3 / 2;
      t5 = sin(t);
      t6 = t5 * x__3;
      t7 = t6 / 2;
      t8 = u__2 / 2;
      t10 = x__1 ^ 2;
      t11 = x__2 ^ 2;
      t12 = t10 + t11;
      t13 = sqrt(t12);
      t17 = 0.1e1 / t13;
      out_4 = u__1_dot + 2 * t17 * (t13 * (-t1 - t4 + t7 + t8) + r * t1);
      t20 = x__2 * lambda;
      t21 = t2 * x__3;
      t22 = t21 / 2;
      t23 = t5 * u__3;
      t24 = t23 / 2;
      t25 = u__1 / 2;
      out_5 = u__2_dot + 2 * t17 * (t13 * (-t20 - t22 - t24 - t25) + r * t20);
      out_6 = u__3_dot - x__3 * (2 * lambda - 1);
      t35 = t12 ^ 2;
      t39 = -t6 + t3 - u__2;
      t42 = lambda * t11;
      t43 = t21 + t23 + u__1;
      t46 = lambda - 0.1e1 / 0.2e1;
      t47 = x__3 ^ 2;
      t49 = r ^ 2;
      t51 = u__1 ^ 2;
      t53 = u__2 ^ 2;
      t55 = u__3 ^ 2;
      t57 = lambda * t10 + x__1 * t39 / 2 + t42 + x__2 * t43 / 2 + t47 * t46 + lambda * t49 + t51 / 2 + t53 / 2 + t55 / 2;
      t58 = t13 * t12;
      t60 = t10 ^ 2;
      t63 = t10 * x__1;
      t66 = x__2 * t43;
      t67 = 8 * t42 + t66 + t53;
      t70 = -x__2 * t39;
      t73 = 2 * u__1 * u__2 + t70;
      t74 = t73 * x__2;
      t77 = 4 * t42 + t66 + t51;
      t83 = (t58 * t57 - (4 * lambda * t60 + t10 * t67 + t77 * t11 + t63 * t39 - x__1 * t74) * r / 2) / t13 / t35;
      t86 = 0.1e1 / t58;
      t90 = t13 * t57;
      t134 = x__2 * t2;
      t140 = t11 * x__2;
      t161 = x__2 + 2 * u__1;
      t186 = x__2 * t5;
      t207 = t11 ^ 2;
      t216 = -t23 - t21;
      t219 = t3 - t6;
      out_7 = x__1_dot * (6 * x__1 * t83 - 2 * (t58 * (2 * t1 - t7 + t4 - t8) + 3 * x__1 * t90 - (16 * lambda * t63 + 3 * t10 * t39 + 2 * x__1 * t67 - t74) * r / 2) * t86) + x__2_dot * (6 * x__2 * t83 - 2 * (t58 * (2 * t20 + t22 + t24 + t25) + 3 * x__2 * t90 - (t10 * (16 * t20 + t23 + t21 + u__1) - x__1 * t73 - x__1 * t70 + 2 * t77 * x__2 + (8 * t20 + t23 + t21 + u__1) * t11) * r / 2) * t86) - 2 * x__3_dot * (t58 * (-x__1 * t5 / 2 + t134 / 2 + 2 * x__3 * t46) - (-x__1 * t11 * t5 + t10 * t134 + t2 * t140 - t63 * t5) * r / 2) * t86 - 2 * u__1_dot * (t58 * (x__2 / 2 + u__1) - (-2 * x__2 * u__2 * x__1 + t10 * x__2 + t161 * t11) * r / 2) * t86 - 2 * u__2_dot * (t58 * (-x__1 / 2 + u__2) - (-x__1 * t161 * x__2 + 2 * u__2 * t10 - t63) * r / 2) * t86 - 2 * u__3_dot * (t58 * (x__1 * t2 / 2 + t186 / 2 + u__3) - (x__1 * t11 * t2 + t10 * t186 + t5 * t140 + t63 * t2) * r / 2) * t86 - 2 * lambda_dot * (t58 * (t49 + t10 + t11 + t47) - (8 * t10 * t11 + 4 * t207 + 4 * t60) * r / 2) * t86 - 2 * (t58 * (x__1 * t216 / 2 + x__2 * t219 / 2) - (t10 * x__2 * t219 + x__1 * t11 * t216 + t219 * t140 + t63 * t216) * r / 2) * t86;

      % Store outputs
      out_F = zeros(7, 1);
      out_F(1) = out_1;
      out_F(2) = out_2;
      out_F(3) = out_3;
      out_F(4) = out_4;
      out_F(5) = out_5;
      out_F(6) = out_6;
      out_F(7) = out_7;
    end % F
    %
    % - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    %
    function out_JF_x = JF_x( this, in_1, in_2, in_3, t )
      % Evaluate the Jacobian of F with respect to x.

      % Extract properties
      r = this.m_r;
      rho = this.m_rho;

      % Extract inputs
      x__1 = in_1(1);
      x__2 = in_1(2);
      x__3 = in_1(3);
      u__1 = in_1(4);
      u__2 = in_1(5);
      u__3 = in_1(6);
      lambda = in_1(7);
      x__1_dot = in_2(1);
      x__2_dot = in_2(2);
      x__3_dot = in_2(3);
      u__1_dot = in_2(4);
      u__2_dot = in_2(5);
      u__3_dot = in_2(6);
      lambda_dot = in_2(7);

      % Evaluate function
      t1 = x__1 ^ 2;
      t2 = x__2 ^ 2;
      t3 = t1 + t2;
      t4 = sqrt(t3);
      t5 = t4 * lambda;
      t6 = x__1 * lambda;
      t7 = cos(t);
      t8 = t7 * u__3;
      t9 = t8 / 2;
      t10 = sin(t);
      t11 = t10 * x__3;
      t12 = t11 / 2;
      t13 = u__2 / 2;
      t14 = -t6 - t9 + t12 + t13;
      t15 = 0.1e1 / t4;
      t18 = lambda * r;
      t24 = t4 * t3;
      t25 = 0.1e1 / t24;
      t26 = t25 * (r * t6 + t4 * t14);
      out_4_1 = 2 * t15 * (x__1 * t15 * t14 + t18 - t5) - 2 * x__1 * t26;
      t29 = x__2 * lambda;
      t30 = t7 * x__3;
      t31 = t30 / 2;
      t32 = t10 * u__3;
      t33 = t32 / 2;
      t34 = u__1 / 2;
      t35 = -t29 - t31 - t33 - t34;
      t36 = 0.1e1 / t3;
      t42 = t25 * (r * t29 + t4 * t35);
      out_5_1 = 2 * x__1 * t36 * t35 - 2 * x__1 * t42;
      t45 = t3 ^ 2;
      t49 = lambda * t1;
      t50 = -t11 + t8 - u__2;
      t53 = lambda * t2;
      t54 = t30 + t32 + u__1;
      t57 = lambda - 0.1e1 / 0.2e1;
      t58 = x__3 ^ 2;
      t60 = r ^ 2;
      t62 = u__1 ^ 2;
      t64 = u__2 ^ 2;
      t66 = u__3 ^ 2;
      t68 = t49 + x__1 * t50 / 2 + t53 + x__2 * t54 / 2 + t58 * t57 + lambda * t60 + t62 / 2 + t64 / 2 + t66 / 2;
      t70 = t1 ^ 2;
      t73 = t1 * x__1;
      t76 = x__2 * t54;
      t77 = 8 * t53 + t76 + t64;
      t79 = -t50;
      t80 = x__2 * t79;
      t81 = u__1 * u__2;
      t83 = t80 + 2 * t81;
      t84 = x__2 * t83;
      t87 = 4 * t53 + t76 + t62;
      t92 = t24 * t68 - (4 * lambda * t70 + t1 * t77 + t87 * t2 + t73 * t50 - x__1 * t84) * r / 2;
      t93 = t92 / t4 / t45 / t3;
      t97 = 0.1e1 / t4 / t45;
      t99 = 2 * t6 - t12 + t9 - t13;
      t101 = t4 * t68;
      t114 = (t24 * t99 + 3 * x__1 * t101 - (16 * lambda * t73 + 3 * t1 * t50 + 2 * x__1 * t77 - t84) * r / 2) * t97;
      t118 = 6 * t92 * t97;
      t120 = 2 * t24 * lambda;
      t121 = t4 * t99;
      t124 = t15 * t68;
      t127 = 3 * t101;
      t131 = 16 * t53;
      t132 = 2 * t76;
      t142 = x__2 * x__1;
      t148 = 2 * t29 + t31 + t33 + t34;
      t153 = 16 * t29 + t32 + t30 + u__1;
      t160 = 8 * t29 + t32 + t30 + u__1;
      t166 = (t24 * t148 + 3 * x__2 * t101 - (t1 * t153 + t160 * t2 - x__1 * t80 - x__1 * t83 + 2 * t87 * x__2) * r / 2) * t97;
      t169 = t4 * t148;
      t184 = -30 * t142 * t93 + 6 * x__2 * t114 + 6 * x__1 * t166 - 2 * (3 * x__1 * t169 + 3 * x__2 * t121 + 3 * t142 * t124 - (2 * x__1 * t153 - 2 * t80 - 2 * t81) * r / 2) * t25;
      t186 = t10 * x__1;
      t188 = x__2 * t7;
      t192 = -t186 / 2 + t188 / 2 + 2 * x__3 * t57;
      t194 = x__2 * t2;
      t196 = t2 * t10;
      t202 = (t1 * t188 - t73 * t10 + t7 * t194 - x__1 * t196) * r / 2;
      t204 = (t24 * t192 - t202) * t97;
      t209 = t24 * t10 / 2;
      t210 = t4 * t192;
      t214 = 2 * x__1 * t188;
      t215 = t1 * t10;
      t221 = (-t209 + 3 * x__1 * t210 - (-t196 + t214 - 3 * t215) * r / 2) * t25;
      t225 = x__2 / 2 + u__1;
      t227 = t1 * x__2;
      t228 = u__2 * x__2;
      t232 = x__2 + 2 * u__1;
      t238 = (t24 * t225 - (t232 * t2 - 2 * x__1 * t228 + t227) * r / 2) * t97;
      t242 = t4 * t225;
      t250 = (3 * x__1 * t242 - (-2 * t228 + 2 * t142) * r / 2) * t25;
      t254 = -x__1 / 2 + u__2;
      t258 = t232 * x__2;
      t264 = (t24 * t254 - (2 * u__2 * t1 - x__1 * t258 - t73) * r / 2) * t97;
      t268 = t24 / 2;
      t269 = t4 * t254;
      t273 = x__1 * u__2;
      t279 = (-t268 + 3 * x__1 * t269 - (-3 * t1 + 4 * t273 - t258) * r / 2) * t25;
      t282 = x__1 * t7;
      t284 = t10 * x__2;
      t286 = t282 / 2 + t284 / 2 + u__3;
      t289 = t2 * t7;
      t293 = t1 * t284 + t10 * t194 + x__1 * t289 + t73 * t7;
      t297 = (t24 * t286 - t293 * r / 2) * t97;
      t302 = t24 * t7 / 2;
      t303 = t4 * t286;
      t307 = 2 * x__1 * t284;
      t308 = t1 * t7;
      t314 = (t302 + 3 * x__1 * t303 - (t289 + t307 + 3 * t308) * r / 2) * t25;
      t317 = t60 + t1 + t2 + t58;
      t322 = t2 ^ 2;
      t328 = (t24 * t317 - (8 * t1 * t2 + 4 * t322 + 4 * t70) * r / 2) * t97;
      t334 = t4 * t317;
      t343 = (2 * t24 * x__1 + 3 * x__1 * t334 - (16 * x__1 * t2 + 16 * t73) * r / 2) * t25;
      t346 = -t32 - t30;
      t347 = t346 / 2;
      t349 = t8 - t11;
      t350 = t349 / 2;
      t352 = x__1 * t347 + x__2 * t350;
      t355 = x__2 * t349;
      t357 = -t346;
      t358 = t2 * t357;
      t365 = (t24 * t352 - (t1 * t355 + t349 * t194 + t73 * t346 - x__1 * t358) * r / 2) * t97;
      t369 = t4 * t352;
      out_7_1 = x__1_dot * (-30 * t1 * t93 + 12 * x__1 * t114 + t118 - 2 * (t120 + 6 * x__1 * t121 + 3 * t1 * t124 + t127 - (6 * x__1 * t50 + t131 + t132 + 48 * t49 + 2 * t64) * r / 2) * t25) + x__2_dot * t184 + 6 * x__3_dot * x__1 * t204 - 2 * x__3_dot * t221 + 6 * u__1_dot * x__1 * t238 - 2 * u__1_dot * t250 + 6 * u__2_dot * x__1 * t264 - 2 * u__2_dot * t279 + 6 * u__3_dot * x__1 * t297 - 2 * u__3_dot * t314 + 6 * lambda_dot * x__1 * t328 - 2 * lambda_dot * t343 + 6 * x__1 * t365 - 2 * (t24 * t347 + 3 * x__1 * t369 - (3 * t1 * t346 + 2 * x__1 * t355 - t358) * r / 2) * t25;
      out_4_2 = 2 * x__2 * t36 * t14 - 2 * x__2 * t26;
      out_5_2 = 2 * t15 * (x__2 * t15 * t35 + t18 - t5) - 2 * x__2 * t42;
      t425 = (t302 + 3 * x__2 * t210 - (3 * t289 - t307 + t308) * r / 2) * t25;
      t439 = (t268 + 3 * x__2 * t242 - (t1 - 2 * t273 + 2 * t258 + t2) * r / 2) * t25;
      t452 = (3 * x__2 * t269 - (-x__1 * t232 - t142) * r / 2) * t25;
      t465 = (t209 + 3 * x__2 * t303 - (3 * t196 + t214 + t215) * r / 2) * t25;
      t480 = (2 * t24 * x__2 + 3 * x__2 * t334 - (16 * t227 + 16 * t194) * r / 2) * t25;
      out_7_2 = x__1_dot * t184 + x__2_dot * (-30 * t2 * t93 + 12 * x__2 * t166 + t118 - 2 * (t120 + 6 * x__2 * t169 + 3 * t2 * t124 + t127 - (4 * t160 * x__2 - 2 * x__1 * t79 + t131 + t132 + 16 * t49 + 2 * t62) * r / 2) * t25) + 6 * x__3_dot * x__2 * t204 - 2 * x__3_dot * t425 + 6 * u__1_dot * x__2 * t238 - 2 * u__1_dot * t439 + 6 * u__2_dot * x__2 * t264 - 2 * u__2_dot * t452 + 6 * u__3_dot * x__2 * t297 - 2 * u__3_dot * t465 + 6 * lambda_dot * x__2 * t328 - 2 * lambda_dot * t480 + 6 * x__2 * t365 - 2 * (t24 * t350 + 3 * x__2 * t369 - (-2 * x__1 * x__2 * t357 + t1 * t349 + 3 * t349 * t2) * r / 2) * t25;
      out_4_3 = t10;
      out_5_3 = -t7;
      out_6_3 = -2 * lambda + 1;
      out_7_3 = x__1_dot * (6 * x__1 * t204 - 2 * t221) + x__2_dot * (6 * x__2 * t204 - 2 * t425) + 2 * x__3_dot * out_6_3 - 4 * x__3 * lambda_dot - 2 * (t24 * (-t282 / 2 - t284 / 2) + t293 * r / 2) * t25;
      out_1_4 = -1;
      out_5_4 = -1;
      t540 = r * t25;
      out_7_4 = x__1_dot * (6 * x__1 * t238 - 2 * t250) + x__2_dot * (6 * x__2 * t238 - 2 * t439) - 2 * u__1_dot * (-r * t2 + t24) * t25 - 2 * u__2_dot * t142 * t540;
      out_2_5 = -1;
      out_4_5 = 1;
      out_7_5 = x__1_dot * (6 * x__1 * t264 - 2 * t279) + x__2_dot * (6 * x__2 * t264 - 2 * t452) - 2 * u__1_dot * t142 * t540 - 2 * u__2_dot * (-r * t1 + t24) * t25;
      out_3_6 = -1;
      out_4_6 = out_5_3;
      out_5_6 = -out_4_3;
      out_7_6 = x__1_dot * (6 * x__1 * t297 - 2 * t314) + x__2_dot * (6 * x__2 * t297 - 2 * t465) - 2 * u__3_dot - 2 * (t24 * (-t186 / 2 + t188 / 2) - t202) * t25;
      out_4_7 = 2 * t15 * (x__1 * r - t4 * x__1);
      out_5_7 = 2 * t15 * (x__2 * r - t4 * x__2);
      out_6_7 = -2 * x__3;
      out_7_7 = x__1_dot * (6 * x__1 * t328 - 2 * t343) + x__2_dot * (6 * x__2 * t328 - 2 * t480) - 4 * x__3 * x__3_dot;

      % Store outputs
      out_JF_x = zeros(7, 7);
      out_JF_x(4, 1) = out_4_1;
      out_JF_x(5, 1) = out_5_1;
      out_JF_x(7, 1) = out_7_1;
      out_JF_x(4, 2) = out_4_2;
      out_JF_x(5, 2) = out_5_2;
      out_JF_x(7, 2) = out_7_2;
      out_JF_x(4, 3) = out_4_3;
      out_JF_x(5, 3) = out_5_3;
      out_JF_x(6, 3) = out_6_3;
      out_JF_x(7, 3) = out_7_3;
      out_JF_x(1, 4) = out_1_4;
      out_JF_x(5, 4) = out_5_4;
      out_JF_x(7, 4) = out_7_4;
      out_JF_x(2, 5) = out_2_5;
      out_JF_x(4, 5) = out_4_5;
      out_JF_x(7, 5) = out_7_5;
      out_JF_x(3, 6) = out_3_6;
      out_JF_x(4, 6) = out_4_6;
      out_JF_x(5, 6) = out_5_6;
      out_JF_x(7, 6) = out_7_6;
      out_JF_x(4, 7) = out_4_7;
      out_JF_x(5, 7) = out_5_7;
      out_JF_x(6, 7) = out_6_7;
      out_JF_x(7, 7) = out_7_7;
    end % JF_x
    %
    % - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    %
    function out_JF_x_dot = JF_x_dot( this, in_1, in_2, in_3, t )
      % Evaluate the Jacobian of F with respect to x_dot.

      % Extract properties
      r = this.m_r;
      rho = this.m_rho;

      % Extract inputs
      x__1 = in_1(1);
      x__2 = in_1(2);
      x__3 = in_1(3);
      u__1 = in_1(4);
      u__2 = in_1(5);
      u__3 = in_1(6);
      lambda = in_1(7);
      x__1_dot = in_2(1);
      x__2_dot = in_2(2);
      x__3_dot = in_2(3);
      u__1_dot = in_2(4);
      u__2_dot = in_2(5);
      u__3_dot = in_2(6);
      lambda_dot = in_2(7);

      % Evaluate function
      out_1_1 = 1;
      t1 = x__1 ^ 2;
      t2 = x__2 ^ 2;
      t3 = t1 + t2;
      t4 = t3 ^ 2;
      t5 = sqrt(t3);
      t9 = sin(t);
      t10 = t9 * x__3;
      t11 = cos(t);
      t12 = t11 * u__3;
      t13 = -t10 + t12 - u__2;
      t16 = lambda * t2;
      t17 = t11 * x__3;
      t18 = t9 * u__3;
      t19 = t17 + t18 + u__1;
      t22 = lambda - 0.1e1 / 0.2e1;
      t23 = x__3 ^ 2;
      t25 = r ^ 2;
      t27 = u__1 ^ 2;
      t29 = u__2 ^ 2;
      t31 = u__3 ^ 2;
      t33 = lambda * t1 + x__1 * t13 / 2 + t16 + x__2 * t19 / 2 + t23 * t22 + lambda * t25 + t27 / 2 + t29 / 2 + t31 / 2;
      t34 = t5 * t3;
      t36 = t1 ^ 2;
      t39 = t1 * x__1;
      t42 = x__2 * t19;
      t43 = 8 * t16 + t42 + t29;
      t46 = -x__2 * t13;
      t49 = 2 * u__1 * u__2 + t46;
      t50 = t49 * x__2;
      t53 = 4 * t16 + t42 + t27;
      t59 = (t34 * t33 - (4 * lambda * t36 + t1 * t43 + t39 * t13 + t53 * t2 - x__1 * t50) * r / 2) / t5 / t4;
      t62 = 0.1e1 / t34;
      t70 = t5 * t33;
      out_7_1 = 6 * x__1 * t59 - 2 * (t34 * (2 * x__1 * lambda - t10 / 2 + t12 / 2 - u__2 / 2) + 3 * x__1 * t70 - (16 * lambda * t39 + 3 * t1 * t13 + 2 * x__1 * t43 - t50) * r / 2) * t62;
      out_2_2 = 1;
      t87 = x__2 * lambda;
      out_7_2 = 6 * x__2 * t59 - 2 * (t34 * (2 * t87 + t17 / 2 + t18 / 2 + u__1 / 2) + 3 * x__2 * t70 - (t1 * (16 * t87 + t18 + t17 + u__1) - x__1 * t49 - x__1 * t46 + 2 * t53 * x__2 + (8 * t87 + t18 + t17 + u__1) * t2) * r / 2) * t62;
      out_3_3 = 1;
      t114 = t11 * x__2;
      t120 = x__2 * t2;
      out_7_3 = -2 * (t34 * (-x__1 * t9 / 2 + t114 / 2 + 2 * x__3 * t22) - (-x__1 * t2 * t9 + t1 * t114 + t11 * t120 - t39 * t9) * r / 2) * t62;
      out_4_4 = 1;
      t140 = x__2 + 2 * u__1;
      out_7_4 = -2 * (t34 * (x__2 / 2 + u__1) - (-2 * x__2 * u__2 * x__1 + t1 * x__2 + t2 * t140) * r / 2) * t62;
      out_5_5 = 1;
      out_7_5 = -2 * (t34 * (-x__1 / 2 + u__2) - (-x__1 * t140 * x__2 + 2 * u__2 * t1 - t39) * r / 2) * t62;
      out_6_6 = 1;
      t163 = x__2 * t9;
      out_7_6 = -2 * (t34 * (x__1 * t11 / 2 + t163 / 2 + u__3) - (x__1 * t11 * t2 + t1 * t163 + t39 * t11 + t9 * t120) * r / 2) * t62;
      t183 = t2 ^ 2;
      out_7_7 = -2 * (t34 * (t25 + t1 + t2 + t23) - (8 * t1 * t2 + 4 * t183 + 4 * t36) * r / 2) * t62;

      % Store outputs
      out_JF_x_dot = zeros(7, 7);
      out_JF_x_dot(1, 1) = out_1_1;
      out_JF_x_dot(7, 1) = out_7_1;
      out_JF_x_dot(2, 2) = out_2_2;
      out_JF_x_dot(7, 2) = out_7_2;
      out_JF_x_dot(3, 3) = out_3_3;
      out_JF_x_dot(7, 3) = out_7_3;
      out_JF_x_dot(4, 4) = out_4_4;
      out_JF_x_dot(7, 4) = out_7_4;
      out_JF_x_dot(5, 5) = out_5_5;
      out_JF_x_dot(7, 5) = out_7_5;
      out_JF_x_dot(6, 6) = out_6_6;
      out_JF_x_dot(7, 6) = out_7_6;
      out_JF_x_dot(7, 7) = out_7_7;
    end % JF_x_dot
    %
    % - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    %
    function out_JF_v = JF_v( this, in_1, in_2, in_3, t )
      % Evaluate the Jacobian of F with respect to v.

      % Extract properties
      r = this.m_r;
      rho = this.m_rho;

      % Extract inputs
      x__1 = in_1(1);
      x__2 = in_1(2);
      x__3 = in_1(3);
      u__1 = in_1(4);
      u__2 = in_1(5);
      u__3 = in_1(6);
      lambda = in_1(7);
      x__1_dot = in_2(1);
      x__2_dot = in_2(2);
      x__3_dot = in_2(3);
      u__1_dot = in_2(4);
      u__2_dot = in_2(5);
      u__3_dot = in_2(6);
      lambda_dot = in_2(7);

      % Evaluate function
      % No body

      % Store outputs
      out_JF_v = zeros(7, 0);
    end % JF_v
    %
    % - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    %
    function out_v = v( this, in_1, t )
      % Evaluate the the veils v.

      % Extract properties
      r = this.m_r;
      rho = this.m_rho;

      % Extract inputs
      x__1 = in_1(1);
      x__2 = in_1(2);
      x__3 = in_1(3);
      u__1 = in_1(4);
      u__2 = in_1(5);
      u__3 = in_1(6);
      lambda = in_1(7);

      % Evaluate function
      % No body

      % Store outputs
      out_v = zeros(0, 1);
    end % v
    %
    % - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    %
    function out_Jv_x = Jv_x( this, in_1, in_2, t )
      % Evaluate the Jacobian of v with respect to x.

      % Extract properties
      r = this.m_r;
      rho = this.m_rho;

      % Extract inputs
      x__1 = in_1(1);
      x__2 = in_1(2);
      x__3 = in_1(3);
      u__1 = in_1(4);
      u__2 = in_1(5);
      u__3 = in_1(6);
      lambda = in_1(7);

      % Evaluate function
      % No body

      % Store outputs
      out_Jv_x = zeros(0, 7);
    end % Jv_x
    %
    % - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    %
    function out_h = h( this, in_1, in_2, t )
      % Calculate the residual of the invariants h.

      % Extract properties
      r = this.m_r;
      rho = this.m_rho;

      % Extract inputs
      x__1 = in_1(1);
      x__2 = in_1(2);
      x__3 = in_1(3);
      u__1 = in_1(4);
      u__2 = in_1(5);
      u__3 = in_1(6);
      lambda = in_1(7);

      % Evaluate function
      t1 = x__1 ^ 2;
      t2 = x__2 ^ 2;
      t3 = x__3 ^ 2;
      t4 = t1 + t2;
      t5 = sqrt(t4);
      t8 = r ^ 2;
      t9 = rho ^ 2;
      out_1 = 2 * t5 * r - t1 - t2 - t3 - t8 + t9;
      t10 = u__1 * x__1;
      t13 = u__2 * x__2;
      out_2 = 0.1e1 / t5 * (t5 * x__3 * u__3 - r * t10 - r * t13 + t5 * t10 + t5 * t13);
      t20 = t5 * t4;
      t23 = sin(t);
      t25 = cos(t);
      t27 = -t23 * x__3 + t25 * u__3 - u__2;
      t30 = lambda * t2;
      t33 = t23 * u__3 + t25 * x__3 + u__1;
      t39 = u__1 ^ 2;
      t41 = u__2 ^ 2;
      t43 = u__3 ^ 2;
      t47 = t1 ^ 2;
      t53 = x__2 * t33;
      out_3 = -2 * (t20 * (lambda * t1 + x__1 * t27 / 2 + t30 + x__2 * t33 / 2 + t3 * (lambda - 0.1e1 / 0.2e1) + lambda * t8 + t39 / 2 + t41 / 2 + t43 / 2) - (4 * lambda * t47 + t1 * x__1 * t27 + t1 * (8 * t30 + t53 + t41) - x__1 * (-x__2 * t27 + 2 * u__1 * u__2) * x__2 + (4 * t30 + t53 + t39) * t2) * r / 2) / t20;

      % Store outputs
      out_h = zeros(3, 1);
      out_h(1) = out_1;
      out_h(2) = out_2;
      out_h(3) = out_3;
    end % h
    %
    % - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    %
    function out_Jh_x = Jh_x( this, in_1, in_2, t )
      % Calculate the Jacobian of h with respect to x.

      % Extract properties
      r = this.m_r;
      rho = this.m_rho;

      % Extract inputs
      x__1 = in_1(1);
      x__2 = in_1(2);
      x__3 = in_1(3);
      u__1 = in_1(4);
      u__2 = in_1(5);
      u__3 = in_1(6);
      lambda = in_1(7);

      % Evaluate function
      t1 = x__1 ^ 2;
      t2 = x__2 ^ 2;
      t3 = t1 + t2;
      t4 = sqrt(t3);
      t5 = 0.1e1 / t4;
      t6 = t5 * r;
      out_1_1 = 2 * x__1 * t6 - 2 * x__1;
      t13 = u__2 * x__2;
      t14 = x__1 * t5;
      t16 = u__3 * x__3;
      t20 = u__1 * x__1;
      t27 = t4 * t3;
      t28 = 0.1e1 / t27;
      t29 = t28 * (-r * t13 - r * t20 + t4 * t13 + t4 * t16 + t4 * t20);
      out_2_1 = t5 * (t5 * t1 * u__1 - u__1 * r + t14 * t13 + t14 * t16 + t4 * u__1) - x__1 * t29;
      t31 = t3 ^ 2;
      t35 = sin(t);
      t36 = t35 * x__3;
      t37 = cos(t);
      t38 = t37 * u__3;
      t39 = -t36 + t38 - u__2;
      t42 = lambda * t2;
      t43 = t37 * x__3;
      t44 = t35 * u__3;
      t45 = t43 + t44 + u__1;
      t48 = lambda - 0.1e1 / 0.2e1;
      t49 = x__3 ^ 2;
      t51 = r ^ 2;
      t53 = u__1 ^ 2;
      t55 = u__2 ^ 2;
      t57 = u__3 ^ 2;
      t59 = lambda * t1 + x__1 * t39 / 2 + t42 + x__2 * t45 / 2 + t49 * t48 + lambda * t51 + t53 / 2 + t55 / 2 + t57 / 2;
      t61 = t1 ^ 2;
      t64 = t1 * x__1;
      t67 = x__2 * t45;
      t68 = 8 * t42 + t67 + t55;
      t71 = -x__2 * t39;
      t74 = 2 * u__1 * u__2 + t71;
      t75 = t74 * x__2;
      t78 = 4 * t42 + t67 + t53;
      t84 = (t27 * t59 - (4 * lambda * t61 + t1 * t68 + t78 * t2 + t64 * t39 - x__1 * t75) * r / 2) / t4 / t31;
      t94 = t4 * t59;
      out_3_1 = 6 * x__1 * t84 - 2 * (t27 * (2 * x__1 * lambda - t36 / 2 + t38 / 2 - u__2 / 2) + 3 * x__1 * t94 - (16 * lambda * t64 + 3 * t1 * t39 + 2 * x__1 * t68 - t75) * r / 2) * t28;
      out_1_2 = 2 * x__2 * t6 - 2 * x__2;
      t111 = x__2 * t5;
      out_2_2 = t5 * (t5 * u__2 * t2 - u__2 * r + t111 * t16 + t111 * t20 + t4 * u__2) - x__2 * t29;
      t123 = x__2 * lambda;
      out_3_2 = 6 * x__2 * t84 - 2 * (t27 * (2 * t123 + t43 / 2 + t44 / 2 + u__1 / 2) + 3 * x__2 * t94 - (t1 * (16 * t123 + t44 + t43 + u__1) - x__1 * t74 - x__1 * t71 + 2 * t78 * x__2 + (8 * t123 + t44 + t43 + u__1) * t2) * r / 2) * t28;
      out_1_3 = -2 * x__3;
      out_2_3 = u__3;
      t151 = x__2 * t37;
      t157 = t2 * x__2;
      out_3_3 = -2 * (t27 * (-x__1 * t35 / 2 + t151 / 2 + 2 * x__3 * t48) - (-x__1 * t2 * t35 + t1 * t151 + t37 * t157 - t64 * t35) * r / 2) * t28;
      out_2_4 = t5 * (-x__1 * r + t4 * x__1);
      t179 = x__2 + 2 * u__1;
      out_3_4 = -2 * (t27 * (x__2 / 2 + u__1) - (t1 * x__2 - 2 * x__1 * t13 + t179 * t2) * r / 2) * t28;
      out_2_5 = t5 * (-x__2 * r + t4 * x__2);
      out_3_5 = -2 * (t27 * (-x__1 / 2 + u__2) - (-x__1 * t179 * x__2 + 2 * u__2 * t1 - t64) * r / 2) * t28;
      out_2_6 = x__3;
      t205 = x__2 * t35;
      out_3_6 = -2 * (t27 * (x__1 * t37 / 2 + t205 / 2 + u__3) - (x__1 * t2 * t37 + t1 * t205 + t35 * t157 + t64 * t37) * r / 2) * t28;
      t225 = t2 ^ 2;
      out_3_7 = -2 * (t27 * (t51 + t1 + t2 + t49) - (8 * t2 * t1 + 4 * t225 + 4 * t61) * r / 2) * t28;

      % Store outputs
      out_Jh_x = zeros(3, 7);
      out_Jh_x(1, 1) = out_1_1;
      out_Jh_x(2, 1) = out_2_1;
      out_Jh_x(3, 1) = out_3_1;
      out_Jh_x(1, 2) = out_1_2;
      out_Jh_x(2, 2) = out_2_2;
      out_Jh_x(3, 2) = out_3_2;
      out_Jh_x(1, 3) = out_1_3;
      out_Jh_x(2, 3) = out_2_3;
      out_Jh_x(3, 3) = out_3_3;
      out_Jh_x(2, 4) = out_2_4;
      out_Jh_x(3, 4) = out_3_4;
      out_Jh_x(2, 5) = out_2_5;
      out_Jh_x(3, 5) = out_3_5;
      out_Jh_x(2, 6) = out_2_6;
      out_Jh_x(3, 6) = out_3_6;
      out_Jh_x(3, 7) = out_3_7;
    end % Jh_x
    %
    % - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    %
    function out_Jh_v = Jh_v( this, in_1, in_2, t )
      % Calculate the Jacobian of h with respect to v.

      % Extract properties
      r = this.m_r;
      rho = this.m_rho;

      % Extract inputs
      x__1 = in_1(1);
      x__2 = in_1(2);
      x__3 = in_1(3);
      u__1 = in_1(4);
      u__2 = in_1(5);
      u__3 = in_1(6);
      lambda = in_1(7);

      % Evaluate function
      % No body

      % Store outputs
      out_Jh_v = zeros(3, 0);
    end % Jh_v
    %
    % - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    %
  end
end % Torus

% That's All Folks!
