% +--------------------------------------------------------------------------+
% | 'Indigo' module version 1.0 - BSD 3-Clause License - Copyright (c) 2023  |
% | Current version authors:                                                 |
% |   Davide Stocco and Enrico Bertolazzi.                                   |
% +--------------------------------------------------------------------------+

% Matlab generated code for implicit system: Torus
% This file has been automatically generated by Indigo.
% DISCLAIMER: If you need to edit it, do it wisely!

classdef Torus < Indigo.DAE.Explicit
  %
  % No class description provided.
  %
  properties (SetAccess = protected, Hidden = true)
    % User data
    m_r = 10.0;
    m_rho = 5.0;
  end
  %
  methods
    %
    % - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    %
    function this = Torus( varargin )
      % Class constructor.

      % Superclass constructor
      num_eqns = 7;
      num_veil = 9;
      num_invs = 3;
      this = this@Indigo.DAE.Explicit('Torus', num_eqns, num_veil, num_invs);

      % User data
      if (nargin == 0)
        % Keep default values
      elseif (nargin == 1 && isstruct(varargin{1}))
        this.m_r = varargin{1}.r;
        this.m_rho = varargin{1}.rho;
      elseif (nargin == 2)
        this.m_r = varargin{1};
        this.m_rho = varargin{2};
      else
        error('wrong number of input arguments.');
      end
    end % Torus
    %
    % - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    %
    function out_f = f( this, in_1, in_2, t )
      % Evaluate the function f.

      % Extract properties
      r = this.m_r;

      % Extract inputs
      x__1 = in_1(1);
      x__2 = in_1(2);
      x__3 = in_1(3);
      u__1 = in_1(4);
      u__2 = in_1(5);
      u__3 = in_1(6);
      lambda = in_1(7);
      V_y58KN_1 = in_2(1);
      V_y58KN_2 = in_2(2);

      % Evaluate function
      out_1 = u__1;
      out_2 = u__2;
      out_3 = u__3;
      out_4 = -V_y58KN_1;
      out_5 = -V_y58KN_2;
      t1 = x__3 * lambda;
      out_6 = 2 * t1 - x__3;
      t3 = x__1 ^ 2;
      t4 = t3 * x__1;
      t5 = t3 ^ 2;
      t6 = t5 * t4;
      t8 = x__2 ^ 2;
      t9 = t8 * x__2;
      t10 = t8 ^ 2;
      t11 = t10 * t9;
      t13 = cos(t);
      t14 = x__3 * t13;
      t16 = sin(t);
      t17 = t11 * t16;
      t19 = t5 * t3;
      t23 = t10 * t8;
      t27 = t19 * u__2;
      t33 = t19 * x__3;
      t36 = x__3 * t23;
      t41 = -u__3 * t6 * t16 - 3 * V_y58KN_1 * t19 * u__1 - 3 * V_y58KN_1 * u__1 * t23 - 3 * V_y58KN_2 * t23 * u__2 - V_y58KN_1 * t11 - t6 * t14 - x__3 * t17 - 3 * V_y58KN_2 * t27 - 4 * u__3 * t33 - 4 * u__3 * t36 + V_y58KN_2 * t6;
      t44 = t6 * lambda;
      t55 = t5 * x__1;
      t59 = t10 * x__2;
      t68 = x__2 * t16;
      t69 = x__3 * t68;
      t70 = t3 + t8;
      t71 = sqrt(t70);
      t72 = t71 * t70;
      t73 = t3 * t72;
      t77 = x__1 * t71 * t9;
      t78 = V_y58KN_2 * r;
      t79 = u__1 * t78;
      t83 = t3 * t71 * t8;
      t84 = V_y58KN_1 * r;
      t85 = u__1 * t84;
      t88 = 2 * u__2 * lambda * t11 + r * t73 * t69 + 3 * V_y58KN_2 * t4 * t10 + u__3 * t11 * t13 - V_y58KN_1 * t19 * x__2 + V_y58KN_2 * x__1 * t23 - 3 * V_y58KN_1 * t3 * t59 - 3 * V_y58KN_1 * t5 * t9 + 3 * V_y58KN_2 * t55 * t8 + 2 * u__1 * t44 - 3 * t79 * t77 - 3 * t85 * t83;
      t91 = t4 * t71 * x__2;
      t94 = u__2 * t84;
      t97 = u__2 * t78;
      t103 = u__1 ^ 2;
      t106 = r * t3 * t71;
      t109 = u__2 ^ 2;
      t113 = r * x__1 * t71;
      t116 = t8 * t16;
      t118 = x__1 * r;
      t121 = x__2 * t13;
      t123 = r * t3;
      t131 = t9 * t16;
      t133 = lambda * t72;
      t137 = t8 * t13;
      t138 = x__3 * t137;
      t142 = -2 * r * t4 * lambda * t72 * t14 - 2 * r * t133 * x__3 * t131 + r * x__1 * t72 * t138 - 6 * t106 * t103 * x__2 * u__2 - 6 * t113 * u__1 * t8 * t109 + u__3 * t118 * t72 * t116 - u__3 * t123 * t72 * t121 - 3 * t94 * t77 - 3 * t79 * t91 - 3 * t97 * t83 - 3 * t94 * t91;
      t151 = u__1 * t8;
      t152 = r * t72;
      t166 = r * t4;
      t170 = t72 * t8;
      t184 = t9 * t13;
      t187 = 3 * u__2 * r * t71 * t103 * t9 + r * t72 * x__3 * t131 + 3 * t113 * t103 * u__1 * t8 + 3 * t106 * x__2 * t109 * u__2 + 3 * u__1 * t166 * t71 * t109 + 3 * V_y58KN_2 * t123 * t72 * u__2 - 3 * t97 * t71 * t10 + 3 * V_y58KN_1 * t152 * t151 - u__3 * t152 * t184 - 3 * t85 * t5 * t71 + 3 * t97 * t170 + 3 * t85 * t73;
      t193 = t70 ^ 2;
      t194 = t71 * t193;
      t204 = x__3 * t10;
      t209 = x__3 * t8;
      t214 = t23 * t13;
      t218 = t10 * t13;
      t225 = t59 * t16;
      t235 = -2 * lambda * r * u__2 * t194 * x__2 - 2 * u__1 * t118 * lambda * t194 + 24 * u__3 * t3 * lambda * t204 + 24 * u__3 * t5 * lambda * t209 + u__3 * t166 * t72 * t16 + 6 * t5 * t1 * t131 + 6 * t55 * t1 * t137 + 2 * t19 * t1 * t68 + 2 * x__1 * t1 * t214 + 6 * t4 * t1 * t218 + 6 * t3 * t1 * t225;
      t241 = t4 * t72;
      t268 = -9 * V_y58KN_1 * t3 * u__1 * t10 + V_y58KN_1 * t123 * t72 * x__2 + r * t241 * t14 - V_y58KN_2 * t118 * t170 - 3 * t5 * x__3 * t131 - 3 * t55 * x__3 * t137 - 9 * V_y58KN_1 * t5 * t151 - x__3 * x__1 * t214 - 3 * t4 * x__3 * t218 - 3 * t3 * x__3 * t225 + t84 * t72 * t9 - t33 * t68;
      t278 = u__3 * t3;
      t281 = u__3 * t5;
      t286 = u__3 * t19;
      t303 = -3 * u__3 * t4 * t10 * t16 - 9 * V_y58KN_2 * t3 * t10 * u__2 - x__1 * u__3 * t23 * t16 - 9 * V_y58KN_2 * t5 * t8 * u__2 - 3 * u__3 * t55 * t116 + 3 * t278 * t59 * t13 + 2 * t1 * t17 + t286 * t121 + 3 * t281 * t184 - 12 * t278 * t204 - 12 * t281 * t209;
      t341 = 6 * u__1 * t4 * lambda * t10 + 2 * x__1 * u__1 * lambda * t23 + 6 * u__2 * t3 * lambda * t59 + 6 * u__2 * t5 * lambda * t9 + 6 * u__1 * t55 * lambda * t8 + 2 * t27 * x__2 * lambda + 8 * lambda * u__3 * t36 - 2 * t118 * t133 * t138 - 2 * t123 * t133 * t69 + 8 * t286 * t1 + 2 * t44 * t14 - t78 * t241;
      t345 = t10 ^ 2;
      t346 = x__3 ^ 2;
      t350 = r ^ 2;
      t377 = t5 ^ 2;
      t379 = -2 * r * t72 * t10 - 2 * r * t5 * t72 + 3 * t3 * t346 * t10 + 3 * t350 * t3 * t10 + 3 * t5 * t346 * t8 + 3 * t350 * t5 * t8 + 6 * t5 * t10 - 4 * t123 * t170 + t19 * t346 + t350 * t19 + 4 * t19 * t8 + 4 * t3 * t23 + t346 * t23 + t350 * t23 + t345 + t377;
      out_7 = -0.1e1 / t379 * (t41 + t88 + t142 + t187 + t235 + t268 + t303 + t341) / 2;

      % Store outputs
      out_f = zeros(7, 1);
      out_f(1) = out_1;
      out_f(2) = out_2;
      out_f(3) = out_3;
      out_f(4) = out_4;
      out_f(5) = out_5;
      out_f(6) = out_6;
      out_f(7) = out_7;
    end % f
    %
    % - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    %
    function out_Jf_x = Jf_x( this, in_1, in_2, t )
      % Evaluate the Jacobian of f with respect to x.

      % Extract properties
      r = this.m_r;

      % Extract inputs
      x__1 = in_1(1);
      x__2 = in_1(2);
      x__3 = in_1(3);
      u__1 = in_1(4);
      u__2 = in_1(5);
      u__3 = in_1(6);
      lambda = in_1(7);
      V_y58KN_1 = in_2(1);
      V_y58KN_2 = in_2(2);

      % Evaluate function
      t1 = x__2 ^ 2;
      t2 = t1 ^ 2;
      t3 = t2 * t1;
      t4 = V_y58KN_2 * t3;
      t5 = x__1 ^ 2;
      t6 = t5 ^ 2;
      t7 = t6 * t5;
      t8 = V_y58KN_2 * t7;
      t10 = x__3 * lambda;
      t11 = t6 * x__1;
      t12 = u__3 * t11;
      t15 = lambda * t2;
      t19 = lambda * t1;
      t23 = t5 + t1;
      t24 = t23 ^ 2;
      t25 = sqrt(t23);
      t26 = t25 * t24;
      t27 = lambda * t26;
      t28 = u__1 * r;
      t31 = t1 * x__2;
      t32 = lambda * t31;
      t33 = t5 * x__1;
      t37 = x__2 * lambda;
      t38 = u__2 * t11;
      t41 = t2 * x__2;
      t42 = lambda * t41;
      t46 = cos(t);
      t47 = t3 * t46;
      t50 = x__3 * t46;
      t51 = t7 * lambda;
      t54 = x__3 * t2;
      t55 = x__1 * u__3;
      t58 = x__3 * t1;
      t59 = u__3 * t33;
      t62 = 18 * u__1 * t5 * t15 + 30 * u__1 * t6 * t19 + 24 * u__2 * t33 * t32 + 12 * x__1 * u__2 * t42 + 48 * t12 * t10 + 2 * t10 * t47 - 2 * t28 * t27 + 12 * t38 * t37 + 14 * t51 * t50 - 24 * t55 * t54 - 48 * t59 * t58 + t4 + 7 * t8;
      t63 = t41 * t46;
      t66 = t31 * t46;
      t69 = x__2 * t46;
      t72 = sin(t);
      t73 = t2 * t72;
      t74 = u__3 * t5;
      t77 = t1 * t72;
      t78 = u__3 * t6;
      t81 = u__1 * t2;
      t85 = u__1 * t1;
      t89 = u__1 ^ 2;
      t90 = t89 * u__1;
      t91 = t90 * t1;
      t92 = r * t25;
      t95 = t2 * u__2;
      t99 = t1 * u__2;
      t103 = t2 * t46;
      t104 = t5 * x__3;
      t107 = t1 * t46;
      t108 = t6 * x__3;
      t111 = t41 * t72;
      t112 = x__3 * x__1;
      t115 = -36 * V_y58KN_1 * t33 * t85 - 36 * V_y58KN_2 * t33 * t99 - 18 * x__1 * V_y58KN_1 * t81 - 18 * x__1 * V_y58KN_2 * t95 - 9 * t104 * t103 - 15 * t108 * t107 - 6 * t112 * t111 + 6 * t12 * t69 + 6 * t55 * t63 + 12 * t59 * t66 - 9 * t74 * t73 - 15 * t78 * t77 + 3 * t92 * t91;
      t117 = t31 * t72;
      t118 = t33 * x__3;
      t121 = x__2 * t72;
      t122 = t11 * x__3;
      t125 = t6 * t25;
      t126 = V_y58KN_2 * r;
      t130 = t25 * t23;
      t131 = t130 * r;
      t132 = t131 * V_y58KN_2 * t1;
      t133 = V_y58KN_2 * t5;
      t135 = 3 * t131 * t133;
      t138 = t3 * t72;
      t143 = lambda * t3;
      t151 = t11 * u__1;
      t154 = -7 * u__3 * t7 * t72 - 12 * t118 * t117 - 6 * t122 * t121 - 24 * u__3 * t122 - 3 * t126 * t125 - u__3 * t138 + 2 * u__1 * t143 - 18 * V_y58KN_1 * t151 - x__3 * t47 - 7 * t7 * t50 + 14 * u__1 * t51 - t132 - t135;
      t157 = x__1 * t41;
      t160 = t33 * t31;
      t163 = t11 * x__2;
      t166 = t6 * t1;
      t167 = V_y58KN_2 * t166;
      t169 = t5 * t2;
      t171 = 9 * V_y58KN_2 * t169;
      t172 = u__2 ^ 2;
      t173 = t172 * u__2;
      t174 = x__2 * t173;
      t176 = r * x__1 * t25;
      t179 = t25 * t31;
      t180 = V_y58KN_1 * r;
      t181 = u__2 * t180;
      t184 = 0.1e1 / t25;
      t186 = r * t33 * t184;
      t190 = r * t33;
      t191 = V_y58KN_2 * t190;
      t194 = t130 * t72;
      t195 = r * t5;
      t196 = u__3 * t195;
      t199 = u__3 * t131;
      t201 = t25 * t72;
      t202 = r * t6;
      t206 = x__1 * t130;
      t207 = u__1 * t180;
      t210 = 9 * t191 * t25 * u__2 + 3 * u__3 * t202 * t201 - 6 * V_y58KN_1 * t157 - 12 * V_y58KN_1 * t160 - 6 * V_y58KN_1 * t163 + 6 * t176 * t174 + 3 * t186 * t174 - 3 * t181 * t179 + 3 * t196 * t194 + t199 * t77 + 6 * t207 * t206 - 18 * V_y58KN_2 * t38 + 15 * t167 + t171;
      t213 = u__1 * t126;
      t217 = r * t5 * t184;
      t220 = t33 * t25;
      t226 = t5 * t130;
      t227 = r * t226;
      t231 = r * t130 * x__3;
      t236 = x__1 * x__2;
      t237 = t130 * t180;
      t240 = x__1 * r;
      t243 = 3 * V_y58KN_1 * t240 * t179;
      t244 = t25 * t1;
      t245 = V_y58KN_2 * t195;
      t247 = 3 * t245 * t244;
      t248 = t25 * x__2;
      t251 = 3 * V_y58KN_1 * t190 * t248;
      t252 = x__1 * lambda;
      t256 = t33 * lambda;
      t260 = 3 * r * t125 * t50 - 3 * t207 * t11 * t184 + 48 * u__3 * t252 * t54 + 96 * u__3 * t256 * t58 + t231 * t107 - 3 * t213 * t179 - 3 * t207 * t220 + 3 * t217 * t91 + 3 * t227 * t50 + 2 * t237 * t236 + t243 - t247 + t251;
      t261 = lambda * t130;
      t262 = u__1 * t195;
      t265 = t5 * t10;
      t268 = t6 * t10;
      t271 = x__1 * t10;
      t274 = t33 * t10;
      t277 = t11 * t10;
      t280 = t25 * t172;
      t283 = t1 * t172;
      t288 = t184 * t172;
      t292 = t130 * u__2;
      t293 = V_y58KN_2 * t240;
      t296 = x__3 * t107;
      t297 = lambda * t25;
      t298 = t195 * t297;
      t301 = x__3 * t121;
      t305 = t240 * t261;
      t308 = x__3 * t117;
      t309 = t240 * t297;
      t312 = -6 * r * t25 * u__1 * t283 - 6 * t190 * t297 * t301 + 3 * u__1 * t202 * t288 + 18 * t265 * t103 + 30 * t268 * t107 + 12 * t271 * t111 + 24 * t274 * t117 + 12 * t277 * t121 - 10 * t262 * t261 + 9 * t262 * t280 + 6 * t293 * t292 - 6 * t298 * t296 - 4 * t305 * t301 - 6 * t309 * t308;
      t315 = t33 * t184 * t1;
      t316 = u__2 * t126;
      t320 = t6 * t184 * x__2;
      t323 = t184 * t2;
      t330 = t5 * t184 * t31;
      t337 = x__1 * t244;
      t340 = t5 * t248;
      t343 = r * t206;
      t347 = r * t5 * t25;
      t355 = t130 * t69;
      t356 = u__3 * t240;
      t359 = -3 * V_y58KN_2 * u__2 * x__1 * r * t323 + 3 * r * t220 * t301 + 3 * t176 * t308 - 3 * t181 * t320 - 3 * t207 * t315 + 3 * t207 * t337 - 3 * t213 * t320 - 3 * t213 * t330 - 9 * t213 * t340 + 3 * t347 * t296 + 2 * t343 * t301 - 3 * t316 * t315 - 2 * t356 * t355;
      t361 = u__3 * t190;
      t370 = t130 * x__2;
      t372 = u__2 * r;
      t373 = x__1 * t372;
      t376 = t130 * t50;
      t377 = t5 * lambda;
      t378 = r * t377;
      t381 = r * t261;
      t384 = t25 * t50;
      t385 = t6 * lambda;
      t389 = x__2 * u__2;
      t390 = t89 * t389;
      t393 = u__1 * t283;
      t396 = t89 * t31;
      t408 = -10 * t373 * lambda * t370 - 6 * r * t385 * t384 + 3 * t373 * t184 * t396 + 3 * t196 * t25 * t77 - 3 * t356 * t25 * t66 - 3 * t361 * t25 * t69 - 12 * t176 * t390 - 3 * t181 * t330 - 9 * t181 * t340 - 6 * t186 * t390 - 6 * t217 * t393 - 2 * t381 * t296 + 3 * t316 * t337 - 6 * t378 * t376;
      t412 = t2 ^ 2;
      t413 = x__3 ^ 2;
      t417 = r ^ 2;
      t419 = t413 * t2;
      t429 = t413 * t1;
      t432 = t130 * t1;
      t443 = t6 ^ 2;
      t445 = -2 * r * t130 * t2 - 2 * r * t6 * t130 + 4 * t7 * t1 + 3 * t417 * t166 + 3 * t417 * t169 - 4 * t195 * t432 + 6 * t6 * t2 + t413 * t3 + t417 * t3 + 4 * t5 * t3 + t7 * t413 + t417 * t7 + 3 * t5 * t419 + 3 * t6 * t429 + t412 + t443;
      t446 = 0.1e1 / t445;
      t448 = t6 * t33;
      t450 = t2 * t31;
      t452 = t130 * t31;
      t454 = t112 * t47;
      t455 = t118 * t103;
      t457 = t122 * t107;
      t459 = t104 * t111;
      t461 = t108 * t117;
      t463 = t7 * x__3;
      t464 = t463 * t121;
      t465 = V_y58KN_1 * t5;
      t468 = V_y58KN_1 * t6;
      t471 = t180 * t452 + V_y58KN_2 * t448 - V_y58KN_1 * t450 - 9 * t465 * t81 - 9 * t468 * t85 - t454 - 3 * t455 - 3 * t457 - 3 * t459 - 3 * t461 - t464;
      t474 = V_y58KN_2 * t6;
      t477 = t74 * t54;
      t479 = t78 * t58;
      t483 = u__3 * t7;
      t492 = t450 * t72;
      t495 = t448 * lambda;
      t498 = 2 * t10 * t492 - 3 * t12 * t77 - 9 * t133 * t95 - t55 * t138 - 9 * t474 * t99 + t483 * t69 + 2 * t495 * t50 - 3 * t59 * t73 + 3 * t74 * t63 + 3 * t78 * t66 - 12 * t477 - 12 * t479;
      t500 = u__1 * t33;
      t505 = x__1 * u__1;
      t508 = u__2 * t6;
      t511 = u__2 * t7;
      t514 = u__2 * t5;
      t517 = x__3 * t3;
      t518 = lambda * u__3;
      t523 = t33 * t130;
      t525 = t448 * t50;
      t526 = x__3 * t492;
      t527 = 8 * t483 * t10 - t126 * t523 + 2 * t505 * t143 + 6 * t500 * t15 + 6 * t151 * t19 + 6 * t508 * t32 + 2 * t511 * t37 + 6 * t514 * t42 + 8 * t518 * t517 - t525 - t526;
      t539 = u__3 * t463;
      t541 = u__3 * t517;
      t543 = t448 * t72;
      t545 = t450 * t46;
      t549 = lambda * t450;
      t552 = t3 * x__1;
      t554 = t33 * t2;
      t557 = -3 * V_y58KN_1 * u__1 * t3 - 3 * V_y58KN_2 * t3 * u__2 - 3 * V_y58KN_1 * t7 * u__1 + 2 * u__1 * t495 - 3 * V_y58KN_2 * t511 - u__3 * t543 + u__3 * t545 + 2 * u__2 * t549 + V_y58KN_2 * t552 + 3 * V_y58KN_2 * t554 - 4 * t539 - 4 * t541;
      t560 = t11 * t1;
      t563 = t5 * t41;
      t566 = t6 * t31;
      t569 = t7 * x__2;
      t577 = t25 * t2;
      t585 = -2 * u__1 * t240 * t27 + 3 * t347 * t174 + t361 * t194 - t199 * t66 + 3 * t245 * t292 + 3 * t316 * t432 - 3 * t316 * t577 + 3 * V_y58KN_2 * t560 - 3 * V_y58KN_1 * t563 - 3 * V_y58KN_1 * t566 - V_y58KN_1 * t569;
      t586 = t26 * x__2;
      t588 = lambda * r * u__2;
      t591 = u__3 * t377;
      t594 = u__3 * t385;
      t607 = t7 * t10;
      t611 = V_y58KN_1 * t195;
      t613 = r * t523;
      t614 = t613 * t50;
      t615 = 6 * t274 * t103 + 6 * t277 * t107 + 6 * t265 * t111 + 6 * t268 * t117 + 2 * t607 * t121 + 2 * t271 * t47 - t293 * t432 + t611 * t370 + 24 * t591 * t54 + 24 * t594 * t58 - 2 * t588 * t586 + t614;
      t617 = t231 * t117;
      t626 = u__2 * t92;
      t637 = x__1 * t179;
      t640 = t5 * t244;
      t643 = 3 * u__1 * t190 * t280 - 2 * t195 * t261 * t301 - 3 * t207 * t125 + 3 * t176 * t91 - 3 * t181 * t637 + 3 * t207 * t226 + 3 * t237 * t85 - 2 * t305 * t296 - 3 * t316 * t640 + 3 * t626 * t396 + t617;
      t644 = t33 * t248;
      t654 = r * t256;
      t659 = t343 * t296;
      t660 = t227 * t301;
      t667 = t356 * t130 * t77 - 6 * t176 * t393 - 3 * t181 * t644 - t196 * t355 - 3 * t207 * t640 - 3 * t213 * t637 - 3 * t213 * t644 - 2 * t381 * t308 - 6 * t347 * t390 - 2 * t654 * t376 + t659 + t660;
      t671 = t445 ^ 2;
      t673 = 0.1e1 / t671 * (t471 + t498 + t527 + t557 + t585 + t615 + t643 + t667);
      t702 = -6 * r * t11 * t25 + 12 * t417 * t33 * t1 + 6 * t417 * x__1 * t2 + 6 * t11 * t413 + 6 * t417 * t11 - 12 * t190 * t244 - 8 * t240 * t432 - 6 * t240 * t577 + 12 * t33 * t429 + 6 * x__1 * t419 + 8 * t448 + 8 * t552 + 24 * t554 + 24 * t560 - 8 * t613;
      out_7_1 = -t446 * (t62 + t115 + t154 + t210 + t260 + t312 + t359 + t408) / 2 + t702 * t673 / 2;
      t705 = V_y58KN_1 * t3;
      t707 = V_y58KN_1 * t7;
      t714 = x__3 * t41;
      t719 = x__3 * t72;
      t728 = x__3 * t31;
      t731 = x__2 * x__3;
      t734 = 14 * t10 * t138 + 30 * t514 * t15 + 12 * t151 * t37 + 18 * t508 * t19 - 2 * t372 * t27 + 24 * t500 * t32 + 12 * t505 * t42 + 2 * t51 * t719 + 48 * t518 * t714 - 48 * t74 * t728 - 24 * t78 * t731 - 7 * t705 - t707;
      t761 = u__1 * t31;
      t764 = -36 * t133 * t31 * u__2 + 3 * t195 * t25 * t173 + 15 * t74 * t103 - 15 * t104 * t73 + 9 * t78 * t107 - 9 * t108 * t77 - 6 * t55 * t111 - 12 * t59 * t117 - 12 * t118 * t66 - 6 * t12 * t121 - 6 * t122 * t69 - 18 * t474 * t389 - 36 * t465 * t761;
      t766 = x__2 * u__1;
      t773 = t131 * t465;
      t776 = 3 * t131 * V_y58KN_1 * t1;
      t793 = -18 * V_y58KN_1 * u__1 * t41 + u__3 * t7 * t46 - 6 * t112 * t63 - 7 * x__3 * t138 + 14 * u__2 * t143 + 3 * t180 * t577 - 18 * t468 * t766 + 7 * u__3 * t47 + 2 * u__2 * t51 - t7 * t719 - 24 * u__3 * t714 + t773 + t776;
      t797 = V_y58KN_1 * t169;
      t800 = 9 * V_y58KN_1 * t166;
      t808 = 3 * t611 * t244;
      t823 = -18 * V_y58KN_2 * t41 * u__2 + 6 * V_y58KN_2 * t157 + 12 * V_y58KN_2 * t160 + 6 * V_y58KN_2 * t163 + 30 * t265 * t73 + 12 * t271 * t63 + 24 * t274 * t66 + 12 * t277 * t69 - 10 * t588 * t432 + 96 * t591 * t728 + 48 * t594 * t731 - 15 * t797 - t800 + t808;
      t833 = t130 * t46;
      t844 = t89 * t1;
      t861 = 3 * u__2 * r * t184 * t89 * t2 + 3 * t217 * t1 * t173 - 3 * u__3 * t92 * t103 + 6 * t176 * t90 * x__2 - 3 * t316 * t184 * t41 - 6 * t347 * t89 * u__2 - 3 * t199 * t107 - 3 * t181 * t220 - t196 * t833 - 3 * t213 * t220 + 6 * t237 * t766 + 18 * t268 * t77 + 9 * t626 * t844;
      t874 = r * x__1 * t184;
      t885 = 3 * t191 * t248;
      t887 = 3 * t293 * t179;
      t888 = x__2 * r;
      t892 = x__3 * t69;
      t895 = x__3 * t66;
      t898 = x__3 * t77;
      t901 = -3 * t316 * t179 + 6 * t316 * t370 + t227 * t719 + 3 * t231 * t77 + 9 * V_y58KN_1 * t92 * t761 + 3 * t874 * t90 * t31 + 3 * r * t25 * x__3 * t73 - 2 * t130 * t126 * t236 - t885 - t887 - 6 * t888 * t256 * t384 - 4 * t305 * t892 - 6 * t309 * t895 - 6 * t298 * t898;
      t904 = x__2 * t28;
      t934 = x__1 * t323;
      t941 = -6 * r * t297 * x__3 * t73 - 12 * t176 * u__1 * x__2 * t172 - 6 * t874 * u__1 * t31 * t172 - 2 * t378 * t130 * t719 - 6 * t217 * t89 * t99 - 10 * t904 * x__1 * t261 + 3 * t904 * t33 * t288 - 3 * t181 * t315 - 9 * t181 * t337 - 3 * t181 * t934 - 3 * t316 * t330 + 3 * t316 * t340 - 6 * t381 * t898;
      t942 = t130 * t121;
      t981 = -3 * V_y58KN_1 * u__1 * x__2 * r * t6 * t184 + 3 * r * u__3 * x__2 * t33 * t201 - 3 * t196 * t25 * t107 + 3 * t356 * t25 * t117 + 3 * x__2 * t190 * t384 + 3 * t176 * t895 - 3 * t207 * t330 + 3 * t207 * t340 - 3 * t213 * t315 - 9 * t213 * t337 - 3 * t213 * t934 + 2 * t343 * t892 + 3 * t347 * t898 + 2 * t356 * t942;
      t1017 = -6 * r * t25 * t41 + 12 * t5 * t413 * t31 + 12 * t417 * t5 * t31 + 6 * t6 * t413 * x__2 + 6 * t417 * t6 * x__2 - 8 * r * t452 - 6 * t888 * t125 - 12 * t195 * t179 - 8 * t195 * t370 + 6 * t413 * t41 + 6 * t417 * t41 + 8 * t450 + 24 * t563 + 24 * t566 + 8 * t569;
      out_7_2 = -t446 * (t734 + t764 + t793 + t823 + t861 + t901 + t941 + t981) / 2 + t1017 * t673 / 2;
      out_6_3 = 2 * lambda - 1;
      t1048 = 6 * t11 * lambda * t107 + 6 * t256 * t103 + t343 * t107 + 6 * t377 * t111 - 2 * t381 * t117 + 6 * t385 * t117 + t227 * t121 + 2 * t51 * t121 + 24 * t74 * t15 + 24 * t78 * t19 + 2 * t252 * t47 - 4 * u__3 * t3 - t448 * t46 - 2 * t654 * t833 - 4 * t483 - t492;
      t1080 = -2 * r * t252 * t130 * t107 + 2 * t448 * lambda * t46 + 2 * lambda * t492 - 3 * t33 * t103 - 3 * t11 * t107 - 3 * t5 * t111 + t131 * t117 - 3 * t6 * t117 - t7 * t121 + 8 * u__3 * t143 - 12 * u__3 * t166 - 12 * u__3 * t169 + t190 * t833 - 2 * t378 * t942 - x__1 * t47 + 8 * u__3 * t51;
      t1084 = t6 * t58;
      t1086 = t5 * t54;
      out_7_3 = -t446 * (t1048 + t1080) / 2 + (2 * t463 + 6 * t1084 + 6 * t1086 + 2 * t517) * t673 / 2;
      out_1_4 = 1;
      t1118 = -12 * t347 * t389 * u__1 + 6 * t11 * t19 - 3 * t125 * t180 + 2 * t143 * x__1 + 6 * t15 * t33 - 6 * t176 * t283 + 9 * t176 * t844 + 3 * t190 * t280 - 2 * t240 * t27 + 6 * t626 * t761 + 2 * t495 - 3 * t705 - 3 * t707 + 3 * t773 + t776 - 9 * t797 - t800 - t808 - t885 - t887;
      out_7_4 = -t446 * t1118 / 2;
      out_2_5 = 1;
      t1132 = r * t89;
      t1153 = 2 * t549 - 3 * t4 - 3 * t8 + 9 * r * t172 * t5 * t248 - 2 * t888 * t27 - 3 * t126 * t577 + 3 * t1132 * t179 + 3 * t132 + 6 * t626 * t500 + t135 - 6 * t25 * t1132 * x__2 * t5 - 12 * u__2 * u__1 * r * t337 - t243 - t247 - t251 + 6 * t6 * t32 + 2 * t7 * t37 + 6 * t5 * t42 - t171 - 9 * t167;
      out_7_5 = -t446 * t1153 / 2;
      out_3_6 = 1;
      t1181 = 8 * lambda * t517 - 3 * t11 * t77 - t131 * t66 - t138 * x__1 + t190 * t194 - t227 * t69 - 3 * t33 * t73 + t343 * t77 + 24 * t377 * t54 + 24 * t385 * t58 + 3 * t5 * t63 + 3 * t6 * t66 + t69 * t7 - 12 * t1084 - 12 * t1086 - 4 * t463 - 4 * t517 - t543 + t545 + 8 * t607;
      out_7_6 = -t446 * t1181 / 2;
      out_6_7 = 2 * x__3;
      t1203 = -2 * t26 * t28 * x__1 - 2 * t372 * t586 + 2 * t448 * u__1 + 2 * t450 * u__2 + 6 * t554 * u__1 + 2 * t454 + 6 * t455 + 6 * t457 + 6 * t459 + 6 * t461 + 2 * t464 + 24 * t477 + 24 * t479;
      t1222 = 2 * t552 * u__1 + 6 * t560 * u__1 + 6 * t563 * u__2 + 6 * t566 * u__2 + 2 * t569 * u__2 + 2 * t525 + 2 * t526 + 8 * t539 + 8 * t541 - 2 * t614 - 2 * t617 - 2 * t659 - 2 * t660;
      out_7_7 = -t446 * (t1203 + t1222) / 2;

      % Store outputs
      out_Jf_x = zeros(7, 7);
      out_Jf_x(7, 1) = out_7_1;
      out_Jf_x(7, 2) = out_7_2;
      out_Jf_x(6, 3) = out_6_3;
      out_Jf_x(7, 3) = out_7_3;
      out_Jf_x(1, 4) = out_1_4;
      out_Jf_x(7, 4) = out_7_4;
      out_Jf_x(2, 5) = out_2_5;
      out_Jf_x(7, 5) = out_7_5;
      out_Jf_x(3, 6) = out_3_6;
      out_Jf_x(7, 6) = out_7_6;
      out_Jf_x(6, 7) = out_6_7;
      out_Jf_x(7, 7) = out_7_7;
    end % Jf_x
    %
    % - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    %
    function out_Jf_v = Jf_v( ~, ~, ~, ~ )
      % Evaluate the Jacobian of f with respect to v.

      % Extract properties
      % No properties

      % Extract inputs

      % Evaluate function
      % No body

      % Store outputs
      out_Jf_v = zeros(7, 9);
    end % Jf_v
    %
    % - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    %
    function out_v = v( this, in_1, t )
      % Evaluate the the veils v.

      % Extract properties
      r = this.m_r;

      % Extract inputs
      x__1 = in_1(1);
      x__2 = in_1(2);
      x__3 = in_1(3);
      u__1 = in_1(4);
      u__2 = in_1(5);
      u__3 = in_1(6);
      lambda = in_1(7);

      % Evaluate function
      t1 = x__1 * lambda;
      t2 = x__1 ^ 2;
      t3 = x__2 ^ 2;
      t4 = t2 + t3;
      t5 = sqrt(t4);
      t10 = cos(t);
      t13 = sin(t);
      t18 = 0.1e1 / t5;
      V_y58KN_1 = -t18 * (t5 * t10 * u__3 - t5 * t13 * x__3 - 2 * r * t1 + 2 * t5 * t1 - u__2 * t5);
      t20 = x__2 * lambda;
      V_y58KN_2 = -t18 * (t5 * t10 * x__3 + t5 * t13 * u__3 - 2 * r * t20 + 2 * t5 * t20 + t5 * u__1);
      t32 = x__1 * u__1;
      t35 = x__2 * u__2;
      V_y58KN_3 = -t18 * (t5 * u__3 * x__3 - r * t32 - r * t35 + t5 * t32 + t5 * t35);
      t42 = x__3 ^ 2;
      t43 = t5 * t4;
      t44 = t43 * t42;
      t47 = t2 * x__1;
      t49 = r * V_y58KN_1 * t47;
      t50 = t2 * x__2;
      t51 = V_y58KN_2 * r;
      t53 = u__2 ^ 2;
      t55 = r * t53 * t2;
      t56 = t3 * x__1;
      t57 = V_y58KN_1 * r;
      t59 = x__1 * x__2;
      t61 = u__1 * u__2 * r;
      t66 = t3 * x__2;
      t69 = u__1 ^ 2;
      t75 = u__3 ^ 2;
      t78 = -r * t69 * t3 + r * V_y58KN_2 * t66 - t43 * V_y58KN_1 * x__1 - t43 * V_y58KN_2 * x__2 + 2 * lambda * t44 + t43 * t53 + t43 * t69 + t43 * t75 + t51 * t50 + t57 * t56 + 2 * t61 * t59 - t44 + t49 - t55;
      t79 = 0.1e1 / t43;
      V_y58KN_4 = -t79 * t78;
      t81 = t4 ^ 2;
      t87 = t3 ^ 2;
      t96 = t2 ^ 2;
      t99 = t96 * t2;
      t103 = t43 * r;
      t114 = u__2 * r;
      t122 = t5 * t66;
      t130 = t5 * t3;
      t138 = t5 * x__2;
      t152 = 3 * x__1 * r * V_y58KN_1 * t122 + 3 * V_y58KN_2 * r * t2 * t130 - 3 * r * t69 * t122 + 6 * t61 * x__1 * t130 + 3 * V_y58KN_2 * t2 * t87 + V_y58KN_2 * t87 * t3 + 3 * V_y58KN_2 * t96 * t3 + 3 * t51 * t5 * t87 + 3 * t49 * t138 - 3 * t55 * t138 + V_y58KN_2 * t99;
      V_y58KN_5 = 0.1e1 / t81 / t4 * (2 * x__2 * r * lambda * t5 * t81 - 6 * t2 * t87 * x__2 * lambda - 2 * t87 * t66 * lambda - 6 * t96 * t66 * lambda - t103 * V_y58KN_2 * t2 - 3 * t103 * V_y58KN_2 * t3 + 2 * t103 * t69 * x__2 - 2 * t43 * t114 * t32 - 2 * t43 * t57 * t59 - 2 * t99 * t20 + t152);
      t156 = t43 * x__3;
      t161 = r * t10;
      t163 = r * t13;
      V_y58KN_6 = -t79 * (-r * t10 * t66 + r * t13 * t47 + t43 * t10 * x__2 - t43 * t13 * x__1 + 4 * lambda * t156 - t161 * t50 + t163 * t56 - 2 * t156);
      V_y58KN_7 = -t79 * (-2 * r * u__1 * t3 - r * t50 - r * t66 + 2 * t114 * t59 + 2 * t43 * u__1 + t43 * x__2);
      V_y58KN_8 = -t79 * (2 * r * u__2 * t2 - 2 * u__1 * r * t59 - r * t47 - r * t56 - 2 * t43 * u__2 + t43 * x__1);
      V_y58KN_9 = -t79 * (-r * t10 * t47 - r * t13 * t66 + t43 * t10 * x__1 + t43 * t13 * x__2 - t161 * t56 - t163 * t50 + 2 * t43 * u__3);

      % Store outputs
      out_v = zeros(9, 1);
      out_v(1) = V_y58KN_1;
      out_v(2) = V_y58KN_2;
      out_v(3) = V_y58KN_3;
      out_v(4) = V_y58KN_4;
      out_v(5) = V_y58KN_5;
      out_v(6) = V_y58KN_6;
      out_v(7) = V_y58KN_7;
      out_v(8) = V_y58KN_8;
      out_v(9) = V_y58KN_9;
    end % v
    %
    % - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    %
    function out_Jv_x = Jv_x( this, in_1, in_2, t )
      % Evaluate the Jacobian of v with respect to x.

      % Extract properties
      r = this.m_r;

      % Extract inputs
      x__1 = in_1(1);
      x__2 = in_1(2);
      x__3 = in_1(3);
      u__1 = in_1(4);
      u__2 = in_1(5);
      u__3 = in_1(6);
      lambda = in_1(7);
      V_y58KN_1 = in_2(1);
      V_y58KN_2 = in_2(2);

      % Evaluate function
      t1 = x__1 ^ 2;
      t2 = x__2 ^ 2;
      t3 = t1 + t2;
      t4 = sqrt(t3);
      t6 = 2 * t4 * lambda;
      t8 = 0.1e1 / t4;
      t12 = 2 * lambda * r;
      t13 = cos(t);
      t14 = t13 * u__3;
      t15 = x__1 * t8;
      t17 = sin(t);
      t18 = t17 * x__3;
      t20 = t8 * u__2;
      t24 = x__1 * lambda;
      t31 = t4 * u__2;
      t33 = t4 * t3;
      t34 = 0.1e1 / t33;
      t35 = t34 * (-2 * r * t24 + t4 * t14 - t4 * t18 + 2 * t4 * t24 - t31);
      D_V_y58KN_1_1 = -t8 * (2 * t8 * lambda * t1 + t15 * t14 - t15 * t18 - x__1 * t20 - t12 + t6) + x__1 * t35;
      t37 = x__2 * lambda;
      t39 = 2 * t15 * t37;
      t40 = t17 * u__3;
      t42 = t13 * x__3;
      t44 = t8 * u__1;
      t54 = t4 * u__1;
      t56 = t34 * (-2 * r * t37 + 2 * t4 * t37 + t4 * t40 + t4 * t42 + t54);
      D_V_y58KN_2_1 = -t8 * (t15 * t40 + t15 * t42 + x__1 * t44 + t39) + x__1 * t56;
      t58 = u__1 * t1;
      t60 = u__1 * r;
      t61 = x__2 * u__2;
      t63 = x__3 * u__3;
      t67 = x__1 * u__1;
      t68 = t4 * t67;
      t69 = r * t67;
      t70 = t4 * t61;
      t71 = r * t61;
      t74 = t34 * (t4 * t63 + t68 - t69 + t70 - t71);
      D_V_y58KN_3_1 = -t8 * (t15 * t61 + t15 * t63 + t8 * t58 + t54 - t60) + x__1 * t74;
      t76 = x__3 ^ 2;
      t77 = t4 * t76;
      t80 = V_y58KN_1 * t1;
      t81 = r * t80;
      t83 = t1 * x__1;
      t85 = r * D_V_y58KN_1_1 * t83;
      t86 = x__1 * x__2;
      t87 = V_y58KN_2 * r;
      t90 = t1 * x__2;
      t91 = D_V_y58KN_2_1 * r;
      t93 = u__2 ^ 2;
      t95 = r * t93 * x__1;
      t99 = t2 * x__1;
      t100 = D_V_y58KN_1_1 * r;
      t102 = x__2 * u__1;
      t103 = u__2 * r;
      t107 = D_V_y58KN_1_1 * x__1;
      t111 = t2 * x__2;
      t116 = x__2 * V_y58KN_2;
      t117 = t4 * x__1;
      t120 = u__1 ^ 2;
      t121 = t4 * t120;
      t124 = u__3 ^ 2;
      t125 = t4 * t124;
      t130 = t4 * t93;
      t133 = r * D_V_y58KN_2_1 * t111 + r * V_y58KN_1 * t2 - t33 * D_V_y58KN_2_1 * x__2 + t100 * t99 + 2 * t103 * t102 - t33 * t107 - 3 * t117 * t116 + 3 * x__1 * t121 + 3 * x__1 * t125 + 3 * x__1 * t130 + 6 * t24 * t77 - t33 * V_y58KN_1 - 3 * t4 * t80 - 3 * x__1 * t77 + 2 * t87 * t86 + t91 * t90 + 3 * t81 + t85 - 2 * t95;
      t135 = t33 * t76;
      t139 = r * V_y58KN_1 * t83;
      t142 = r * t93 * t1;
      t143 = V_y58KN_1 * r;
      t145 = u__2 * u__1;
      t146 = r * t145;
      t149 = V_y58KN_1 * x__1;
      t151 = V_y58KN_2 * t111;
      t153 = t120 * t2;
      t159 = 2 * lambda * t135 + r * t151 - r * t153 - t33 * t116 + t33 * t120 + t33 * t124 + t143 * t99 + 2 * t146 * t86 - t33 * t149 + t33 * t93 + t87 * t90 - t135 + t139 - t142;
      t160 = t3 ^ 2;
      t161 = t4 * t160;
      t162 = 0.1e1 / t161;
      t163 = t162 * t159;
      D_V_y58KN_4_1 = -t34 * t133 + 3 * x__1 * t163;
      t166 = t2 * t8;
      t170 = t2 ^ 2;
      t171 = t170 * t2;
      t173 = t1 ^ 2;
      t174 = t173 * x__1;
      t177 = t173 * t1;
      t179 = t170 * x__2;
      t180 = t179 * lambda;
      t183 = t111 * lambda;
      t194 = t1 * t170;
      t197 = t173 * t2;
      t200 = r * t33;
      t203 = t170 * t4;
      t209 = t111 * t4;
      t218 = V_y58KN_2 * t83;
      t219 = t4 * r;
      t222 = 6 * t146 * t1 * t166 + 6 * V_y58KN_2 * x__1 * t170 - 3 * t200 * D_V_y58KN_2_1 * t2 + 12 * V_y58KN_2 * t83 * t2 - 2 * t200 * x__1 * V_y58KN_2 - 2 * t200 * x__2 * V_y58KN_1 + 3 * t143 * t209 - 2 * t200 * t145 + D_V_y58KN_2_1 * t171 - 12 * t174 * t37 + 6 * V_y58KN_2 * t174 + D_V_y58KN_2_1 * t177 - 12 * x__1 * t180 - 24 * t83 * t183 + 3 * D_V_y58KN_2_1 * t194 + 3 * D_V_y58KN_2_1 * t197 + 3 * t91 * t203 - 3 * t219 * t218;
      t223 = D_V_y58KN_2_1 * t1;
      t225 = t120 * x__2;
      t226 = x__1 * t219;
      t229 = t111 * t8;
      t230 = r * t120;
      t237 = t4 * t2;
      t240 = x__2 * t8;
      t245 = t4 * x__2;
      t248 = t33 * lambda;
      t249 = r * t86;
      t252 = t170 * t8;
      t256 = V_y58KN_2 * t2;
      t274 = t4 * t143;
      t282 = -t200 * t223 + 6 * t226 * t225 - 3 * x__1 * t230 * t229 - 6 * t4 * t103 * t58 + 6 * t146 * t237 - 3 * r * t93 * t83 * t240 - 6 * t95 * t245 + 10 * t249 * t248 + 3 * x__1 * t87 * t252 - 3 * t226 * t256 + 3 * t85 * t245 - 2 * t33 * t100 * t86 + 3 * r * t107 * t209 + 3 * r * t223 * t237 + 3 * r * V_y58KN_1 * t173 * t240 + 3 * t274 * t90 + 3 * t81 * t229 + 3 * r * t218 * t166;
      t285 = 0.1e1 / t160 / t3;
      t287 = lambda * t161;
      t288 = x__2 * r;
      t291 = t170 * t111;
      t307 = V_y58KN_2 * t1;
      t315 = x__1 * r;
      t316 = V_y58KN_1 * t315;
      t321 = r * t307;
      t337 = 6 * t146 * x__1 * t237 + 3 * t139 * t245 - 3 * t142 * t245 + V_y58KN_2 * t171 + V_y58KN_2 * t177 + 3 * V_y58KN_2 * t194 + 3 * V_y58KN_2 * t197 + 3 * t87 * t203 - 3 * t230 * t209 + 3 * t316 * t209 + 3 * t321 * t237;
      t339 = t160 ^ 2;
      t341 = 0.1e1 / t339 * (-2 * t33 * t103 * t67 - 2 * t33 * t143 * t86 - 2 * t291 * lambda - 6 * t1 * t180 - 6 * t173 * t183 - 2 * t177 * t37 + 2 * t200 * t225 - 3 * t200 * t256 - t200 * t307 + 2 * t288 * t287 + t337);
      D_V_y58KN_5_1 = t285 * (t222 + t282) - 6 * x__1 * t341;
      t344 = t4 * x__3;
      t347 = t17 * t1;
      t348 = r * t347;
      t350 = r * t13;
      t352 = 2 * t350 * t86;
      t353 = t17 * t2;
      t354 = r * t353;
      t355 = t33 * t17;
      t358 = t13 * x__2;
      t360 = 3 * t117 * t358;
      t365 = t33 * x__3;
      t367 = 4 * lambda * t365;
      t371 = r * t17;
      t373 = t17 * x__1;
      t378 = 2 * t365;
      t380 = t162 * (-r * t13 * t111 + r * t17 * t83 + t33 * t358 - t33 * t373 - t350 * t90 + t371 * t99 + t367 - t378);
      D_V_y58KN_6_1 = -t34 * (12 * t24 * t344 - 6 * x__1 * t344 - 3 * t4 * t347 + 3 * t348 - t352 + t354 - t355 + t360) + 3 * x__1 * t380;
      t383 = 2 * t249;
      t386 = 3 * x__1 * t245;
      t400 = -2 * r * u__1 * t2 - r * t111 - r * t90 + 2 * t103 * t86 + 2 * u__1 * t33 + t33 * x__2;
      t401 = t162 * t400;
      D_V_y58KN_7_1 = -t34 * (-t383 + 2 * t71 + t386 + 6 * t68) + 3 * x__1 * t401;
      t404 = t4 * t1;
      t408 = r * t2;
      t409 = r * t102;
      t411 = r * t1;
      t413 = u__2 * x__1;
      t414 = r * t413;
      t424 = r * t83;
      t426 = r * u__2 * t1;
      t428 = -r * t99 - 2 * t33 * u__2 + t33 * x__1 - 2 * t60 * t86 - t424 + 2 * t426;
      t429 = t162 * t428;
      D_V_y58KN_8_1 = -t34 * (-6 * x__1 * t31 + t33 + 3 * t404 - t408 - 2 * t409 - 3 * t411 + 4 * t414) + 3 * x__1 * t429;
      t432 = t13 * t1;
      t433 = r * t432;
      t436 = 2 * t371 * t86;
      t437 = t13 * t2;
      t438 = r * t437;
      t439 = t33 * t13;
      t443 = 3 * t245 * t373;
      t444 = t4 * u__3;
      t460 = 2 * u__3 * t33;
      t462 = t162 * (-r * t17 * t111 - r * t13 * t83 + t33 * t13 * x__1 + t33 * t17 * x__2 - t350 * t99 - t371 * t90 + t460);
      D_V_y58KN_9_1 = -t34 * (3 * t4 * t432 + 6 * x__1 * t444 - 3 * t433 - t436 - t438 + t439 + t443) + 3 * x__1 * t462;
      D_V_y58KN_1_2 = -t8 * (t240 * t14 - t240 * t18 - x__2 * t20 + t39) + x__2 * t35;
      t471 = lambda * t2;
      D_V_y58KN_2_2 = -t8 * (t240 * t40 + t240 * t42 + x__2 * t44 + 2 * t8 * t471 - t12 + t6) + x__2 * t56;
      D_V_y58KN_3_2 = -t8 * (t8 * u__2 * t2 + t240 * t63 + t240 * t67 - t103 + t31) + x__2 * t74;
      t490 = r * D_V_y58KN_1_2 * t83;
      t491 = D_V_y58KN_2_2 * r;
      t495 = D_V_y58KN_1_2 * r;
      t499 = D_V_y58KN_1_2 * x__1;
      t522 = r * D_V_y58KN_2_2 * t111 - t33 * D_V_y58KN_2_2 * x__2 - 2 * r * t225 + 3 * r * t256 + 2 * t103 * t67 + 3 * x__2 * t121 + 3 * x__2 * t125 + 3 * t130 * x__2 + 2 * t143 * t86 - 3 * t245 * t149 - 3 * t4 * t256 - t33 * t499 - t33 * V_y58KN_2 + 6 * t37 * t77 + t491 * t90 + t495 * t99 - 3 * x__2 * t77 + t321 + t490;
      D_V_y58KN_4_2 = 3 * x__2 * t163 - t34 * t522;
      t530 = x__2 * t219;
      t541 = D_V_y58KN_2_2 * t1;
      t567 = 6 * t146 * x__1 * t229 + 6 * t530 * u__2 * t67 - 14 * t171 * lambda - 2 * t177 * lambda + 6 * V_y58KN_2 * t179 + D_V_y58KN_2_2 * t171 + D_V_y58KN_2_2 * t177 - t200 * t541 + 3 * t491 * t203 - 3 * t200 * D_V_y58KN_2_2 * t2 + 3 * t143 * t83 * t4 - 2 * t200 * t149 - 3 * r * t93 * t404 + 10 * t408 * t248 - 3 * t230 * t252 - 3 * t219 * t153 - 6 * t200 * t116 + 3 * t87 * t179 * t8;
      t612 = 3 * t219 * t151 + 3 * D_V_y58KN_2_2 * t197 + 12 * V_y58KN_2 * t1 * t111 + 6 * V_y58KN_2 * t173 * x__2 + 3 * D_V_y58KN_2_2 * t194 + 2 * r * t287 - 30 * t1 * t170 * lambda - 18 * t173 * t471 + 2 * t33 * t230 - 3 * t142 * t166 + 3 * r * t499 * t209 + 3 * t490 * t245 - 2 * t33 * t495 * t86 + 3 * r * t541 * t237 + 3 * t274 * t99 + 3 * t316 * t252 + 3 * t139 * t166 + 3 * t530 * t307 + 3 * t321 * t229;
      D_V_y58KN_5_2 = t285 * (t567 + t612) - 6 * x__2 * t341;
      D_V_y58KN_6_2 = -t34 * (12 * t37 * t344 - 6 * x__2 * t344 + 3 * t4 * t437 - t433 + t436 - 3 * t438 + t439 - t443) + 3 * x__2 * t380;
      D_V_y58KN_7_2 = -t34 * (6 * x__2 * t54 + 3 * t237 + t33 - 3 * t408 - 4 * t409 - t411 + 2 * t414) + 3 * x__2 * t401;
      D_V_y58KN_8_2 = -t34 * (t386 - 6 * t70 - t383 - 2 * t69) + 3 * x__2 * t429;
      D_V_y58KN_9_2 = -t34 * (3 * t4 * t353 + 6 * x__2 * t444 - t348 - t352 - 3 * t354 + t355 + t360) + 3 * x__2 * t462;
      D_V_y58KN_1_3 = t17;
      D_V_y58KN_2_3 = -t13;
      D_V_y58KN_3_3 = -u__3;
      t654 = r * D_V_y58KN_1_3 * t83;
      t655 = D_V_y58KN_2_3 * r;
      t657 = D_V_y58KN_1_3 * r;
      t659 = D_V_y58KN_1_3 * x__1;
      D_V_y58KN_4_3 = -t34 * (r * D_V_y58KN_2_3 * t111 - t33 * D_V_y58KN_2_3 * x__2 - t33 * t659 + t655 * t90 + t657 * t99 + t367 - t378 + t654);
      t673 = D_V_y58KN_2_3 * t1;
      t691 = 3 * r * t659 * t209 + 3 * r * t673 * t237 - 3 * t200 * D_V_y58KN_2_3 * t2 - 2 * t33 * t657 * t86 + D_V_y58KN_2_3 * t171 + D_V_y58KN_2_3 * t177 + 3 * D_V_y58KN_2_3 * t194 + 3 * D_V_y58KN_2_3 * t197 - t200 * t673 + 3 * t655 * t203 + 3 * t654 * t245;
      D_V_y58KN_5_3 = t285 * t691;
      D_V_y58KN_6_3 = -t34 * (4 * t248 - 2 * t33);
      D_V_y58KN_7_3 = 0;
      D_V_y58KN_8_3 = 0;
      D_V_y58KN_9_3 = 0;
      D_V_y58KN_1_4 = 0;
      D_V_y58KN_2_4 = -1;
      t696 = t117 - t315;
      D_V_y58KN_3_4 = -t8 * t696;
      D_V_y58KN_4_4 = -t34 * t400;
      t716 = -3 * r * t203 + 4 * t200 * t102 - 2 * t200 * t413 - 6 * t60 * t209 - 3 * t411 * t237 + 6 * t414 * t237 + 3 * t33 * t408 + t33 * t411 - t171 - t177 - 3 * t194 - 3 * t197;
      D_V_y58KN_5_4 = t285 * t716;
      D_V_y58KN_6_4 = 0;
      D_V_y58KN_7_4 = -t34 * (-2 * t408 + 2 * t33);
      D_V_y58KN_8_4 = 2 * t34 * r * t86;
      D_V_y58KN_9_4 = 0;
      D_V_y58KN_1_5 = 1;
      D_V_y58KN_2_5 = 0;
      t722 = t245 - t288;
      D_V_y58KN_3_5 = -t8 * t722;
      D_V_y58KN_4_5 = t34 * t428;
      D_V_y58KN_5_5 = t285 * (-2 * t200 * t67 - 2 * t200 * t86 + 3 * t315 * t209 + 6 * t69 * t237 + 3 * t424 * t245 - 6 * t426 * t245);
      D_V_y58KN_6_5 = 0;
      D_V_y58KN_7_5 = -D_V_y58KN_8_4;
      D_V_y58KN_8_5 = -t34 * (-2 * t33 + 2 * t411);
      D_V_y58KN_9_5 = 0;
      D_V_y58KN_1_6 = D_V_y58KN_2_3;
      D_V_y58KN_2_6 = -D_V_y58KN_1_3;
      D_V_y58KN_3_6 = -x__3;
      t743 = r * D_V_y58KN_1_6 * t83;
      t744 = D_V_y58KN_2_6 * r;
      t746 = D_V_y58KN_1_6 * r;
      t748 = D_V_y58KN_1_6 * x__1;
      D_V_y58KN_4_6 = -t34 * (r * D_V_y58KN_2_6 * t111 - t33 * D_V_y58KN_2_6 * x__2 - t33 * t748 + t744 * t90 + t746 * t99 + t460 + t743);
      t762 = D_V_y58KN_2_6 * t1;
      t780 = 3 * r * t748 * t209 + 3 * r * t762 * t237 - 3 * t200 * D_V_y58KN_2_6 * t2 - 2 * t33 * t746 * t86 + D_V_y58KN_2_6 * t171 + D_V_y58KN_2_6 * t177 + 3 * D_V_y58KN_2_6 * t194 + 3 * D_V_y58KN_2_6 * t197 - t200 * t762 + 3 * t744 * t203 + 3 * t743 * t245;
      D_V_y58KN_5_6 = t285 * t780;
      D_V_y58KN_6_6 = 0;
      D_V_y58KN_7_6 = 0;
      D_V_y58KN_8_6 = 0;
      D_V_y58KN_9_6 = -2;
      D_V_y58KN_1_7 = -2 * t8 * t696;
      D_V_y58KN_2_7 = -2 * t8 * t722;
      D_V_y58KN_3_7 = 0;
      t787 = r * D_V_y58KN_1_7 * t83;
      t788 = D_V_y58KN_2_7 * r;
      t790 = D_V_y58KN_1_7 * r;
      t792 = D_V_y58KN_1_7 * x__1;
      D_V_y58KN_4_7 = -t34 * (r * D_V_y58KN_2_7 * t111 - t33 * D_V_y58KN_2_7 * x__2 - t33 * t792 + t788 * t90 + t790 * t99 + 2 * t135 + t787);
      t816 = D_V_y58KN_2_7 * t1;
      t834 = 2 * r * x__2 * t161 + 3 * r * t792 * t209 + 3 * r * t816 * t237 - 3 * t200 * D_V_y58KN_2_7 * t2 - 2 * t33 * t790 * t86 - 6 * t1 * t179 - 6 * t173 * t111 + D_V_y58KN_2_7 * t171 - 2 * t177 * x__2 + D_V_y58KN_2_7 * t177 + 3 * D_V_y58KN_2_7 * t194 + 3 * D_V_y58KN_2_7 * t197 - t200 * t816 + 3 * t788 * t203 + 3 * t787 * t245 - 2 * t291;
      D_V_y58KN_5_7 = t285 * t834;
      D_V_y58KN_6_7 = -4 * x__3;
      D_V_y58KN_7_7 = 0;
      D_V_y58KN_8_7 = 0;
      D_V_y58KN_9_7 = 0;

      % Store outputs
      out_Jv_x = zeros(9, 7);
      out_Jv_x(1, 1) = D_V_y58KN_1_1;
      out_Jv_x(2, 1) = D_V_y58KN_2_1;
      out_Jv_x(3, 1) = D_V_y58KN_3_1;
      out_Jv_x(4, 1) = D_V_y58KN_4_1;
      out_Jv_x(5, 1) = D_V_y58KN_5_1;
      out_Jv_x(6, 1) = D_V_y58KN_6_1;
      out_Jv_x(7, 1) = D_V_y58KN_7_1;
      out_Jv_x(8, 1) = D_V_y58KN_8_1;
      out_Jv_x(9, 1) = D_V_y58KN_9_1;
      out_Jv_x(1, 2) = D_V_y58KN_1_2;
      out_Jv_x(2, 2) = D_V_y58KN_2_2;
      out_Jv_x(3, 2) = D_V_y58KN_3_2;
      out_Jv_x(4, 2) = D_V_y58KN_4_2;
      out_Jv_x(5, 2) = D_V_y58KN_5_2;
      out_Jv_x(6, 2) = D_V_y58KN_6_2;
      out_Jv_x(7, 2) = D_V_y58KN_7_2;
      out_Jv_x(8, 2) = D_V_y58KN_8_2;
      out_Jv_x(9, 2) = D_V_y58KN_9_2;
      out_Jv_x(1, 3) = D_V_y58KN_1_3;
      out_Jv_x(2, 3) = D_V_y58KN_2_3;
      out_Jv_x(3, 3) = D_V_y58KN_3_3;
      out_Jv_x(4, 3) = D_V_y58KN_4_3;
      out_Jv_x(5, 3) = D_V_y58KN_5_3;
      out_Jv_x(6, 3) = D_V_y58KN_6_3;
      out_Jv_x(7, 3) = D_V_y58KN_7_3;
      out_Jv_x(8, 3) = D_V_y58KN_8_3;
      out_Jv_x(9, 3) = D_V_y58KN_9_3;
      out_Jv_x(1, 4) = D_V_y58KN_1_4;
      out_Jv_x(2, 4) = D_V_y58KN_2_4;
      out_Jv_x(3, 4) = D_V_y58KN_3_4;
      out_Jv_x(4, 4) = D_V_y58KN_4_4;
      out_Jv_x(5, 4) = D_V_y58KN_5_4;
      out_Jv_x(6, 4) = D_V_y58KN_6_4;
      out_Jv_x(7, 4) = D_V_y58KN_7_4;
      out_Jv_x(8, 4) = D_V_y58KN_8_4;
      out_Jv_x(9, 4) = D_V_y58KN_9_4;
      out_Jv_x(1, 5) = D_V_y58KN_1_5;
      out_Jv_x(2, 5) = D_V_y58KN_2_5;
      out_Jv_x(3, 5) = D_V_y58KN_3_5;
      out_Jv_x(4, 5) = D_V_y58KN_4_5;
      out_Jv_x(5, 5) = D_V_y58KN_5_5;
      out_Jv_x(6, 5) = D_V_y58KN_6_5;
      out_Jv_x(7, 5) = D_V_y58KN_7_5;
      out_Jv_x(8, 5) = D_V_y58KN_8_5;
      out_Jv_x(9, 5) = D_V_y58KN_9_5;
      out_Jv_x(1, 6) = D_V_y58KN_1_6;
      out_Jv_x(2, 6) = D_V_y58KN_2_6;
      out_Jv_x(3, 6) = D_V_y58KN_3_6;
      out_Jv_x(4, 6) = D_V_y58KN_4_6;
      out_Jv_x(5, 6) = D_V_y58KN_5_6;
      out_Jv_x(6, 6) = D_V_y58KN_6_6;
      out_Jv_x(7, 6) = D_V_y58KN_7_6;
      out_Jv_x(8, 6) = D_V_y58KN_8_6;
      out_Jv_x(9, 6) = D_V_y58KN_9_6;
      out_Jv_x(1, 7) = D_V_y58KN_1_7;
      out_Jv_x(2, 7) = D_V_y58KN_2_7;
      out_Jv_x(3, 7) = D_V_y58KN_3_7;
      out_Jv_x(4, 7) = D_V_y58KN_4_7;
      out_Jv_x(5, 7) = D_V_y58KN_5_7;
      out_Jv_x(6, 7) = D_V_y58KN_6_7;
      out_Jv_x(7, 7) = D_V_y58KN_7_7;
      out_Jv_x(8, 7) = D_V_y58KN_8_7;
      out_Jv_x(9, 7) = D_V_y58KN_9_7;
    end % Jv_x
    %
    % - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    %
    function out_h = h( this, in_1, in_2, ~ )
      % Calculate the residual of the invariants h.

      % Extract properties
      r = this.m_r;
      rho = this.m_rho;

      % Extract inputs
      x__1 = in_1(1);
      x__2 = in_1(2);
      x__3 = in_1(3);
      V_y58KN_3 = in_2(3);
      V_y58KN_4 = in_2(4);

      % Evaluate function
      t1 = x__1 ^ 2;
      t2 = x__2 ^ 2;
      t3 = x__3 ^ 2;
      t5 = sqrt(t1 + t2);
      t8 = r ^ 2;
      t9 = rho ^ 2;
      out_1 = 2 * r * t5 - t1 - t2 - t3 - t8 + t9;
      out_2 = -2 * V_y58KN_3;
      out_3 = 2 * V_y58KN_4;

      % Store outputs
      out_h = zeros(3, 1);
      out_h(1) = out_1;
      out_h(2) = out_2;
      out_h(3) = out_3;
    end % h
    %
    % - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    %
    function out_Jh_x = Jh_x( this, in_1, ~, ~ )
      % Calculate the Jacobian of h with respect to x.

      % Extract properties
      r = this.m_r;

      % Extract inputs
      x__1 = in_1(1);
      x__2 = in_1(2);
      x__3 = in_1(3);

      % Evaluate function
      t1 = x__1 ^ 2;
      t2 = x__2 ^ 2;
      t4 = sqrt(t1 + t2);
      t6 = 0.1e1 / t4 * r;
      out_1_1 = 2 * t6 * x__1 - 2 * x__1;
      out_1_2 = 2 * x__2 * t6 - 2 * x__2;
      out_1_3 = -2 * x__3;

      % Store outputs
      out_Jh_x = zeros(3, 7);
      out_Jh_x(1, 1) = out_1_1;
      out_Jh_x(1, 2) = out_1_2;
      out_Jh_x(1, 3) = out_1_3;
    end % Jh_x
    %
    % - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    %
    function out_Jh_v = Jh_v( ~, ~, ~, ~ )
      % Calculate the Jacobian of h with respect to v.

      % Extract properties
      % No properties

      % Extract inputs

      % Evaluate function
      out_2_3 = -2;
      out_3_4 = 2;

      % Store outputs
      out_Jh_v = zeros(3, 9);
      out_Jh_v(2, 3) = out_2_3;
      out_Jh_v(3, 4) = out_3_4;
    end % Jh_v
    %
    % - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    %
    function out = in_domain( ~, ~, ~ )
      out = true;
    end % in_domain
    %
    % - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    %
  end
end % Torus

% That's All Folks!
