% +--------------------------------------------------------------------------+
% | 'Indigo' module version 1.0 - BSD 3-Clause License - Copyright (c) 2023  |
% | Current version authors:                                                 |
% |   Davide Stocco and Enrico Bertolazzi.                                   |
% +--------------------------------------------------------------------------+

% Matlab generated code for implicit system: Torus
% This file has been automatically generated by Indigo.
% DISCLAIMER: If you need to edit it, do it wisely!

classdef Torus < Indigo.DAE.Explicit
  %
  % No class description provided.
  %
  properties (SetAccess = protected, Hidden = true)
    % User data
    m_r = 10.0;
    m_rho = 5.0;
  end
  %
  methods
    %
    % - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    %
    function this = Torus( varargin )
      % Class constructor.

      % Superclass constructor
      num_eqns = 7;
      num_veil = 0;
      num_invs = 3;
      this = this@Indigo.DAE.Explicit('Torus', num_eqns, num_veil, num_invs);

      % User data
      if (nargin == 0)
        % Keep default values
      elseif (nargin == 1 && isstruct(varargin{1}))
        this.m_r = varargin{1}.r;
        this.m_rho = varargin{1}.rho;
      elseif (nargin == 2)
        this.m_r = varargin{1};
        this.m_rho = varargin{2};
      else
        error('wrong number of input arguments.');
      end
    end % Torus
    %
    % - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    %
    function out_f = f( this, in_1, ~, t )
      % Evaluate the function f.

      % Extract properties
      r = this.m_r;

      % Extract inputs
      x__1 = in_1(1);
      x__2 = in_1(2);
      x__3 = in_1(3);
      u__1 = in_1(4);
      u__2 = in_1(5);
      u__3 = in_1(6);
      lambda = in_1(7);

      % Evaluate function
      out_1 = u__1;
      out_2 = u__2;
      out_3 = u__3;
      t1 = x__1 * lambda;
      t2 = x__1 ^ 2;
      t3 = x__2 ^ 2;
      t5 = sqrt(t2 + t3);
      t10 = cos(t);
      t11 = t10 * u__3;
      t12 = t5 * t11;
      t13 = sin(t);
      t14 = t13 * x__3;
      t15 = t5 * t14;
      t16 = t5 * u__2;
      t18 = 0.1e1 / t5;
      out_4 = t18 * (-2 * r * t1 + 2 * t5 * t1 + t12 - t15 - t16);
      t19 = x__2 * lambda;
      t24 = t13 * u__3;
      t25 = t5 * t24;
      t26 = t10 * x__3;
      t27 = t5 * t26;
      t28 = t5 * u__1;
      out_5 = t18 * (-2 * r * t19 + 2 * t5 * t19 + t25 + t27 + t28);
      t30 = x__3 * lambda;
      out_6 = 2 * t30 - x__3;
      t32 = t2 ^ 2;
      t33 = t32 * x__1;
      t36 = t5 * t33;
      t38 = t3 ^ 2;
      t39 = t38 * x__2;
      t40 = t5 * t39;
      t44 = t3 * x__2;
      t45 = t44 * t2;
      t48 = u__2 * r;
      t51 = t44 * x__1;
      t52 = u__2 ^ 2;
      t53 = r * t52;
      t56 = t2 * x__1;
      t57 = x__2 * t56;
      t60 = x__2 * t2;
      t66 = u__1 * r;
      t70 = u__1 ^ 2;
      t71 = r * t70;
      t80 = -3 * r * t52 * u__2 * t60 - r * u__1 * t33 - r * u__2 * t39 + 3 * t48 * u__1 * t32 - 3 * t66 * u__2 * t38 - 3 * t71 * u__2 * t44 - 3 * t66 * t52 * t56 + 2 * t16 * t45 + u__1 * t36 + u__2 * t40 - 2 * t48 * t45 + 3 * t53 * t51 + 3 * t53 * t57;
      t83 = r * u__1 * t10;
      t86 = t5 * t38;
      t87 = u__1 * t11;
      t90 = t5 * t32;
      t93 = t13 * t38;
      t95 = u__2 * u__3 * t5;
      t98 = t38 * x__1;
      t101 = x__2 * t32;
      t104 = t3 * t56;
      t109 = r * t11;
      t112 = r * t24;
      t120 = lambda * r * u__2;
      t123 = 3 * t83 * u__3 * t38 + 3 * t109 * t101 - 3 * t12 * t101 + 8 * t120 * t101 - 6 * t112 * t104 + 6 * t25 * t104 + 6 * t109 * t45 - 3 * t112 * t98 - 6 * t12 * t45 + 3 * t25 * t98 - 3 * t87 * t86 - 3 * t87 * t90 - 3 * t95 * t93;
      t127 = u__3 * x__3;
      t128 = lambda * t127;
      t133 = t10 * t30;
      t136 = t13 * t39;
      t137 = x__3 * t5;
      t138 = lambda * t137;
      t141 = r * t30;
      t144 = x__3 * t33;
      t146 = r * t10 * lambda;
      t149 = u__1 * lambda;
      t150 = r * t149;
      t155 = lambda * t5;
      t156 = u__1 * t155;
      t161 = u__2 * t155;
      t166 = -8 * t161 * t101 + 16 * t150 * t104 - 16 * t156 * t104 + 16 * t120 * t45 - 8 * t128 * t86 - 8 * t128 * t90 - 2 * t133 * t36 - 2 * t138 * t136 + 2 * t141 * t136 + 2 * t146 * t144 + 8 * t150 * t98 - 8 * t156 * t98 - 16 * t161 * t45;
      t175 = r * t14;
      t178 = r * t26;
      t185 = u__1 * t137;
      t188 = t13 * t32;
      t192 = x__3 * u__1 * r;
      t195 = u__2 * t26;
      t201 = r * t10;
      t202 = u__2 * t201;
      t205 = 3 * t202 * x__3 * t32 + 3 * t15 * t101 - 3 * t175 * t101 - 6 * t178 * t104 + 6 * t27 * t104 + 6 * t15 * t45 - 6 * t175 * t45 - 3 * t178 * t98 + 3 * t185 * t188 + 3 * t185 * t93 - 3 * t192 * t93 - 3 * t195 * t86 - 3 * t195 * t90 + 3 * t27 * t98;
      t212 = t3 * x__1;
      t220 = u__3 * r * u__2;
      t223 = t3 * t2;
      t231 = u__3 * t33;
      t232 = r * t13;
      t235 = u__3 * t39;
      t249 = 6 * r * u__1 * t52 * t212 + 6 * r * t70 * u__2 * t60 + 8 * t66 * lambda * t33 - 3 * t5 * t10 * t235 + 3 * t5 * t13 * t231 + 8 * u__3 * t137 * t223 + 4 * t127 * t86 + 4 * t127 * t90 - 8 * t149 * t36 + 3 * t220 * t188 - 3 * t95 * t188 + 3 * t201 * t235 - 3 * t232 * t231;
      t280 = -3 * r * t70 * u__1 * t212 + 8 * t48 * lambda * t39 - 8 * lambda * u__2 * t40 + 3 * t137 * t10 * t33 - 3 * t232 * x__3 * t39 + 2 * t28 * t104 - 2 * t66 * t104 + 3 * t137 * t136 - 3 * t201 * t144 + t28 * t98 - 3 * t71 * t51 - 3 * t71 * t57 - t66 * t98;
      t284 = t13 * t45;
      t287 = t13 * t101;
      t301 = t13 * t223;
      t309 = t5 * t223;
      t312 = t13 * t57;
      t314 = x__3 * r * u__2;
      t317 = 4 * t146 * x__3 * t104 + 2 * t146 * x__3 * t98 - 3 * t83 * x__3 * t51 - 3 * t83 * x__3 * t57 + t16 * t101 - t48 * t101 - 4 * t138 * t284 + 4 * t141 * t284 + 2 * t141 * t287 + 6 * t185 * t301 - 3 * t192 * t301 - 6 * t195 * t309 + 3 * t314 * t312;
      t321 = t13 * t51;
      t331 = u__3 * u__1 * r;
      t355 = -4 * t133 * t5 * t104 - 2 * t133 * t5 * t98 + 3 * t202 * x__3 * t223 - 3 * t202 * u__3 * t51 - 3 * t202 * u__3 * t57 + 3 * t83 * u__3 * t223 - 16 * t128 * t309 - 2 * t138 * t287 + 3 * t220 * t301 - 6 * t95 * t301 - 6 * t87 * t309 - 3 * t331 * t312 + 3 * t314 * t321 - 3 * t331 * t321;
      t359 = t32 * t2;
      t363 = t3 * t32;
      t368 = x__3 ^ 2;
      t370 = r ^ 2;
      t372 = t38 * t2;
      t383 = t38 * t3;
      t389 = 2 * t368 * t5 * t223 + 2 * t370 * t5 * t223 - 2 * r * t359 - 6 * r * t363 - 6 * r * t372 - 2 * r * t383 + t5 * t359 + 3 * t5 * t363 + t368 * t86 + t368 * t90 + t370 * t86 + t370 * t90 + 3 * t5 * t372 + t5 * t383;
      out_7 = 0.1e1 / t389 * (t80 + t123 + t166 + t205 + t249 + t280 + t317 + t355) / 2;

      % Store outputs
      out_f = zeros(7, 1);
      out_f(1) = out_1;
      out_f(2) = out_2;
      out_f(3) = out_3;
      out_f(4) = out_4;
      out_f(5) = out_5;
      out_f(6) = out_6;
      out_f(7) = out_7;
    end % f
    %
    % - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    %
    function out_Jf_x = Jf_x( this, in_1, ~, t )
      % Evaluate the Jacobian of f with respect to x.

      % Extract properties
      r = this.m_r;

      % Extract inputs
      x__1 = in_1(1);
      x__2 = in_1(2);
      x__3 = in_1(3);
      u__1 = in_1(4);
      u__2 = in_1(5);
      u__3 = in_1(6);
      lambda = in_1(7);

      % Evaluate function
      t1 = x__1 ^ 2;
      t2 = x__2 ^ 2;
      t3 = t1 + t2;
      t4 = sqrt(t3);
      t5 = t4 * lambda;
      t6 = 2 * t5;
      t8 = 0.1e1 / t4;
      t11 = lambda * r;
      t12 = 2 * t11;
      t13 = cos(t);
      t14 = t13 * u__3;
      t15 = x__1 * t8;
      t17 = sin(t);
      t18 = t17 * x__3;
      t20 = t8 * u__2;
      t24 = x__1 * lambda;
      t29 = t4 * t14;
      t30 = t4 * t18;
      t31 = t4 * u__2;
      t34 = 0.1e1 / t4 / t3;
      t35 = t34 * (-2 * r * t24 + 2 * t4 * t24 + t29 - t30 - t31);
      out_4_1 = t8 * (2 * t8 * lambda * t1 + t15 * t14 - t15 * t18 - x__1 * t20 - t12 + t6) - x__1 * t35;
      t37 = x__2 * t8;
      t39 = 2 * t37 * t24;
      t40 = t17 * u__3;
      t42 = t13 * x__3;
      t44 = t8 * u__1;
      t48 = x__2 * lambda;
      t53 = t4 * t40;
      t54 = t4 * t42;
      t55 = t4 * u__1;
      t57 = t34 * (-2 * r * t48 + 2 * t4 * t48 + t53 + t54 + t55);
      out_5_1 = t8 * (t15 * t40 + t15 * t42 + x__1 * t44 + t39) - x__1 * t57;
      t59 = t1 ^ 2;
      t60 = x__3 * t59;
      t61 = t4 * t13;
      t62 = t61 * t60;
      t64 = t2 ^ 2;
      t65 = x__3 * t64;
      t67 = 3 * t61 * t65;
      t68 = r * t13;
      t69 = t68 * t60;
      t71 = t4 * t59;
      t72 = lambda * u__1;
      t75 = t4 * t64;
      t78 = t59 * t1;
      t79 = t8 * t78;
      t82 = lambda * t64;
      t83 = u__1 * r;
      t86 = lambda * t59;
      t89 = t1 * x__1;
      t90 = t2 * x__2;
      t91 = t90 * t89;
      t94 = x__1 * x__2;
      t95 = u__2 ^ 2;
      t96 = t95 * u__2;
      t97 = r * t96;
      t100 = t64 * x__2;
      t101 = t8 * t100;
      t104 = t17 * t59;
      t105 = t4 * u__3;
      t106 = t105 * t104;
      t108 = t17 * t64;
      t110 = 3 * t105 * t108;
      t111 = u__3 * r;
      t112 = t111 * t104;
      t114 = t4 * t89;
      t115 = x__3 * u__3;
      t118 = t59 * x__1;
      t119 = t8 * t118;
      t122 = u__2 * x__1 * t101 + 16 * t115 * t114 + 4 * t115 * t119 + 2 * t20 * t91 - 40 * t72 * t71 - 8 * t72 * t75 - 8 * t72 * t79 + 8 * t83 * t82 + 40 * t83 * t86 - 6 * t97 * t94 + 15 * t106 + t110 - 15 * t112 + 15 * t62 + t67 - 15 * t69;
      t124 = t8 * t17;
      t127 = u__3 * t64;
      t128 = r * t17;
      t132 = t83 * u__2 * t89;
      t134 = t90 * x__1;
      t135 = u__2 * r;
      t136 = t135 * t134;
      t138 = x__2 * t89;
      t139 = t135 * t138;
      t141 = x__2 * t1;
      t142 = r * t95;
      t144 = 9 * t142 * t141;
      t155 = x__2 * t118;
      t157 = t2 * t59;
      t160 = t64 * t1;
      t162 = t2 * t1;
      t168 = t8 * x__3;
      t173 = -9 * t83 * t95 * t1 + 3 * t124 * u__3 * t78 + 3 * t168 * t13 * t78 + 6 * t83 * t95 * t2 - 3 * t128 * t127 + 4 * t31 * t134 + 4 * t31 * t138 + t20 * t155 + 2 * t44 * t157 + t44 * t160 + 6 * t55 * t162 - 6 * t83 * t162 - 3 * t68 * t65 + 12 * t132 - 4 * t136 - 4 * t139 + t144;
      t175 = u__1 ^ 2;
      t176 = r * t175;
      t177 = t176 * t141;
      t182 = u__1 * t64;
      t183 = r * t182;
      t186 = 3 * r * t175 * t90;
      t187 = u__1 * t59;
      t188 = r * t187;
      t194 = t175 * u__1;
      t198 = t2 * t89;
      t199 = t17 * t198;
      t200 = u__1 * t168;
      t203 = t8 * t108;
      t204 = u__1 * x__3;
      t208 = t8 * t64;
      t209 = x__3 * t208;
      t210 = lambda * u__3;
      t214 = t2 * x__1;
      t215 = t4 * t214;
      t216 = lambda * t115;
      t219 = t8 * t198;
      t222 = t17 * t138;
      t223 = x__3 * t4;
      t224 = lambda * t223;
      t227 = t4 * t162;
      t228 = lambda * x__3;
      t229 = t13 * t228;
      t232 = t17 * t134;
      t235 = -3 * r * t194 * t2 + 3 * r * t95 * t90 + 3 * x__1 * t204 * t203 - 8 * x__1 * t210 * t209 + t4 * t182 + 5 * t4 * t187 + 6 * t200 * t199 - 32 * t216 * t215 - 16 * t216 * t219 - 8 * t224 * t222 - 8 * t224 * t232 - 12 * t229 * t227 + u__1 * t79 - 9 * t177 - t183 - t186 - 5 * t188;
      t236 = x__3 * t162;
      t237 = t13 * lambda;
      t238 = r * t237;
      t241 = r * t228;
      t245 = lambda * t168;
      t256 = t17 * t100;
      t264 = t17 * t214;
      t265 = u__2 * t105;
      t268 = u__3 * t141;
      t269 = u__2 * t68;
      t272 = u__2 * t111;
      t276 = u__2 * u__3 * t8;
      t279 = u__2 * u__3;
      t284 = u__1 * t13;
      t288 = u__1 * t14;
      t291 = t17 * t141;
      t293 = u__3 * u__1 * r;
      t296 = u__3 * t214;
      t297 = r * t284;
      t300 = 12 * t238 * t236 + 8 * t241 * t232 - 2 * t245 * t17 * t155 - 4 * t229 * t8 * t157 - 4 * t245 * t17 * t91 + 8 * t241 * t222 - 2 * x__1 * t228 * t8 * t256 - 2 * t229 * t8 * t160 - 12 * t265 * t264 - 9 * t269 * t268 + 6 * t272 * t264 - 6 * t276 * t199 - 3 * x__1 * t279 * t203 - 3 * x__1 * t284 * u__3 * t208 - 12 * t288 * t215 - 9 * t293 * t291 + 6 * t297 * t296;
      t305 = u__2 * t13;
      t309 = u__2 * t42;
      t312 = r * x__3;
      t313 = u__2 * t312;
      t316 = x__3 * t214;
      t321 = u__1 * t223;
      t324 = x__3 * t141;
      t327 = r * t204;
      t334 = u__2 * t5;
      t337 = u__2 * lambda;
      t341 = u__2 * t11;
      t346 = lambda * t8;
      t347 = u__2 * t346;
      t350 = -8 * x__1 * t337 * t101 - 3 * x__1 * t305 * t209 - 32 * t216 * t114 - 8 * t216 * t119 - 32 * t334 * t134 + 32 * t341 * t134 + 32 * t341 * t138 - 12 * t309 * t215 - 6 * t288 * t219 - 6 * t309 * t219 + 12 * t321 * t264 - 6 * t327 * t264 + 6 * t269 * t316 + 9 * t313 * t291 - 9 * t297 * t324 - 16 * t347 * t91;
      t355 = u__1 * t346;
      t358 = r * t72;
      t363 = u__1 * t5;
      t376 = t17 * t118;
      t379 = u__3 * t90;
      t382 = t17 * t89;
      t387 = t17 * t90;
      t392 = -3 * t288 * t119 - 32 * t334 * t138 - 8 * t347 * t155 - 16 * t355 * t157 - 8 * t355 * t160 + 48 * t358 * t162 - 48 * t363 * t162 - 10 * t229 * t71 - 2 * t229 * t75 - 2 * t229 * t79 + 10 * t238 * t60 + 2 * t238 * t65 - 12 * t265 * t382 - 3 * t269 * t379 + 12 * t272 * t382 - 3 * t276 * t376 - 3 * t293 * t387;
      t396 = u__3 * t223;
      t402 = u__3 * t168;
      t409 = u__3 * t100;
      t410 = t8 * t13;
      t414 = t8 * t40;
      t417 = t8 * t14;
      t425 = r * t175 * u__2;
      t428 = x__3 * t89;
      t437 = t53 * t162;
      t439 = 4 * x__1 * t115 * t208 - 3 * x__1 * t410 * t409 - 12 * t288 * t114 - 12 * t309 * t114 - 3 * t309 * t119 - 12 * t29 * t134 - 12 * t29 * t138 - 3 * t417 * t155 + 6 * t414 * t157 + 3 * t414 * t160 + 8 * t402 * t198 + 16 * t396 * t214 + 12 * t269 * t428 + 3 * t313 * t387 - 6 * t417 * t91 + 12 * t425 * t94 + 18 * t437;
      t440 = r * t14;
      t441 = t440 * t138;
      t443 = r * t40;
      t444 = t443 * t162;
      t446 = t440 * t134;
      t460 = t8 * t42;
      t463 = t8 * t18;
      t472 = t54 * t162;
      t474 = r * t18;
      t475 = t474 * t138;
      t477 = r * t42;
      t478 = t477 * t162;
      t480 = t474 * t134;
      t482 = 3 * x__1 * t168 * t256 - 3 * t297 * x__3 * t90 + 12 * t30 * t134 + 12 * t30 * t138 + 3 * t463 * t155 + 6 * t460 * t157 + 3 * t460 * t160 + 3 * t200 * t376 + 12 * t321 * t382 + 6 * t463 * t91 + 12 * t441 - 18 * t444 + 12 * t446 + 18 * t472 - 12 * t475 - 18 * t478 - 12 * t480;
      t493 = x__3 ^ 2;
      t495 = r ^ 2;
      t501 = t493 * t4;
      t504 = t495 * t4;
      t507 = t64 * t2;
      t513 = -6 * r * t157 - 6 * r * t160 - 2 * r * t507 - 2 * r * t78 + 3 * t4 * t157 + 3 * t4 * t160 + 2 * t501 * t162 + 2 * t504 * t162 + t4 * t507 + t4 * t78 + t493 * t71 + t493 * t75 + t495 * t71 + t495 * t75;
      t514 = 0.1e1 / t513;
      t516 = t115 * t71;
      t518 = t115 * t75;
      t520 = u__3 * t118;
      t525 = t4 * t17;
      t530 = t4 * t118;
      t533 = lambda * t118;
      t536 = t4 * t100;
      t539 = lambda * t100;
      t542 = x__3 * t118;
      t543 = t68 * t542;
      t546 = t128 * x__3 * t100;
      t548 = t13 * t118;
      t549 = t223 * t548;
      t551 = -3 * t128 * t520 + 8 * t135 * t539 - 8 * t337 * t536 - 3 * t61 * t409 + 3 * t68 * t409 + 3 * t525 * t520 - 8 * t72 * t530 + 8 * t83 * t533 + 4 * t516 + 4 * t518 - 3 * t543 - 3 * t546 + 3 * t549;
      t552 = t223 * t256;
      t554 = t55 * t198;
      t556 = t83 * t198;
      t558 = t64 * x__1;
      t559 = t55 * t558;
      t560 = t83 * t558;
      t565 = r * t194;
      t568 = x__2 * t59;
      t569 = t31 * t568;
      t570 = t135 * t568;
      t571 = t90 * t1;
      t572 = t31 * t571;
      t574 = t135 * t571;
      t578 = 3 * t142 * t134 - 3 * t176 * t134 - 3 * t176 * t138 - 3 * t565 * t214 + 3 * t552 + 2 * t554 - 2 * t556 + t559 - t560 + t569 - t570 + 2 * t572 - 2 * t574;
      t584 = u__2 * t64;
      t587 = u__2 * t90;
      t592 = t95 * t89;
      t596 = r * u__1 * t118;
      t597 = u__1 * t530;
      t598 = u__2 * t536;
      t600 = r * u__2 * t100;
      t609 = -3 * t269 * u__3 * t134 + 3 * t297 * u__3 * t162 + 3 * t135 * t187 + 3 * t142 * t138 - 3 * t97 * t141 - 3 * t176 * t587 - 3 * t293 * t232 - 3 * t83 * t584 - 3 * t83 * t592 - t596 + t597 + t598 - t600;
      t614 = t17 * t162;
      t624 = t4 * t558;
      t627 = t17 * t568;
      t630 = t4 * t198;
      t633 = t17 * t571;
      t646 = -3 * t269 * u__3 * t138 + 4 * t238 * x__3 * t198 + 2 * t238 * x__3 * t558 - 16 * t216 * t227 - 3 * t293 * t222 - 2 * t224 * t627 - 4 * t224 * t633 - 6 * t288 * t227 - 2 * t229 * t624 - 4 * t229 * t630 + 2 * t241 * t627 + 4 * t241 * t633 - 6 * t265 * t614 + 3 * t272 * t614;
      t649 = x__3 * t134;
      t654 = x__3 * t138;
      t671 = t396 * t162;
      t677 = -3 * t265 * t104 + 3 * t272 * t104 + 3 * t297 * t127 + 3 * t313 * t222 - 6 * t309 * t227 + 3 * t313 * t232 + 3 * t269 * t236 - 3 * t288 * t75 - 3 * t297 * t649 - 3 * t297 * t654 + 6 * t321 * t614 - 3 * t327 * t614 + 8 * t671;
      t704 = -3 * t265 * t108 - 6 * t443 * t198 + 6 * t53 * t198 - 8 * t216 * t75 - 3 * t288 * t71 - 3 * t29 * t568 - 6 * t29 * t571 + 8 * t341 * t568 + 16 * t341 * t571 + 3 * t440 * t568 + 6 * t440 * t571 - 3 * t443 * t558 + 3 * t53 * t558;
      t728 = t54 * t558;
      t730 = t30 * t568;
      t732 = 16 * t358 * t198 - 16 * t363 * t198 - 8 * t216 * t71 - 2 * t224 * t256 - 2 * t229 * t530 + 2 * t238 * t542 + 2 * t241 * t256 - 8 * t334 * t568 - 16 * t334 * t571 + 8 * t358 * t558 - 8 * t363 * t558 + 3 * t728 + 3 * t730;
      t733 = t54 * t198;
      t735 = t30 * t571;
      t737 = t474 * t568;
      t739 = t477 * t198;
      t741 = t474 * t571;
      t743 = t477 * t558;
      t760 = r * u__1 * t95;
      t763 = 3 * t321 * t104 + 3 * t321 * t108 - 3 * t327 * t108 + 6 * t425 * t141 + 6 * t760 * t214 + 3 * t269 * t60 - 3 * t309 * t71 - 3 * t309 * t75 + 6 * t733 + 6 * t735 - 3 * t737 - 6 * t739 - 6 * t741 - 3 * t743;
      t767 = t513 ^ 2;
      t769 = 0.1e1 / t767 * (t551 + t578 + t609 + t646 + t677 + t704 + t732 + t763);
      t773 = r * t118;
      t779 = r * t198;
      t791 = r * t558;
      t795 = t493 * t8;
      t800 = t495 * t8;
      t803 = t8 * t507;
      t809 = 3 * t8 * t2 * t118 + x__1 * t493 * t208 + x__1 * t495 * t208 + t8 * t59 * t89 + 3 * t8 * t64 * t89 + 4 * t493 * t114 + 4 * t495 * t114 + t493 * t119 + t495 * t119 + 2 * t795 * t198 + 2 * t800 * t198 + 4 * t501 * t214 + 4 * t504 * t214 + x__1 * t803 + 6 * t530 + 6 * t624 + 12 * t630 - 12 * t773 - 24 * t779 - 12 * t791;
      out_7_1 = t514 * (t122 + t173 + t235 + t300 + t350 + t392 + t439 + t482) / 2 - t809 * t769 / 2;
      out_4_2 = t8 * (t37 * t14 - t37 * t18 - x__2 * t20 + t39) - x__2 * t35;
      out_5_2 = t8 * (2 * t8 * lambda * t2 + t37 * t40 + t37 * t42 + x__2 * t44 - t12 + t6) - x__2 * t57;
      t828 = 9 * t176 * t214;
      t831 = t223 * t108;
      t834 = 3 * t223 * t104;
      t835 = t312 * t108;
      t837 = t17 * t507;
      t852 = u__3 * t59;
      t854 = 3 * t61 * t852;
      t855 = t61 * t127;
      t857 = t68 * t127;
      t859 = t4 * t90;
      t862 = 16 * t115 * t859 - 3 * t128 * t60 + 40 * t135 * t82 + 8 * t135 * t86 + 4 * t55 * t138 + 3 * t168 * t837 - 8 * t337 * t71 - 40 * t337 * t75 - 8 * t337 * t803 - t828 + 15 * t831 + t834 - 15 * t835 - t854 - 15 * t855 + 15 * t857;
      t870 = t83 * t587;
      t872 = t142 * t214;
      t891 = t100 * x__1;
      t897 = t83 * t138;
      t899 = 6 * t176 * u__2 * t1 + u__1 * x__2 * t119 - 9 * t176 * u__2 * t2 - 3 * t410 * u__3 * t507 + 4 * t115 * t101 + 4 * t55 * t134 - 6 * t135 * t162 + t20 * t157 + 2 * t20 * t160 + 6 * t31 * t162 + t44 * t891 + 2 * t44 * t91 - 6 * t565 * t94 + 3 * t68 * t852 - 12 * t870 + 9 * t872 - 4 * t897;
      t901 = t83 * t134;
      t903 = r * t584;
      t905 = u__2 * t59;
      t906 = r * t905;
      t908 = 3 * r * t592;
      t923 = t8 * t571;
      t926 = t4 * t141;
      t937 = -3 * r * t96 * t1 - 3 * r * t175 * t89 + 6 * t200 * t633 + 9 * t313 * t264 + 6 * t269 * t324 + 12 * t321 * t291 - 6 * t327 * t291 - 9 * t297 * t316 - 6 * t309 * t923 - 12 * t309 * t926 + 5 * t4 * t584 + t4 * t905 + u__2 * t803 - 4 * t901 - 5 * t903 - t906 + t908;
      t938 = t8 * t104;
      t946 = t8 * t59;
      t947 = x__3 * t946;
      t985 = 3 * x__2 * t204 * t938 - 16 * t216 * t923 - 32 * t216 * t926 - 8 * x__2 * t210 * t947 - 2 * t229 * t8 * t891 - 2 * t245 * t17 * t157 - 4 * t229 * t8 * t91 - 4 * t245 * t17 * t160 + 8 * t238 * t654 + 12 * t241 * t614 + 8 * t238 * t649 - 8 * t229 * t4 * t134 - 8 * t229 * t4 * t138 - 12 * t224 * t614 - 2 * x__2 * t237 * x__3 * t119 + 6 * t272 * t291 - 9 * t269 * t296;
      t1024 = -3 * x__2 * t284 * u__3 * t946 - 3 * x__2 * t279 * t938 - 3 * x__2 * t305 * t947 - 2 * t224 * t104 + 2 * t241 * t104 - 10 * t224 * t108 + 10 * t241 * t108 - 32 * t363 * t138 - 2 * t245 * t837 - 9 * t293 * t264 - 12 * t265 * t291 + 6 * t297 * t268 - 6 * t276 * t633 - 6 * t288 * t923 - 12 * t288 * t926 - 8 * t355 * t891;
      t1048 = t443 * t134;
      t1061 = -8 * x__2 * t72 * t119 - 3 * t269 * u__3 * t89 - 8 * t216 * t101 + 32 * t358 * t134 - 32 * t363 * t134 + 32 * t358 * t138 - 8 * t347 * t157 - 16 * t347 * t160 - 48 * t334 * t162 + 48 * t341 * t162 - 32 * t216 * t859 - 3 * t276 * t256 - 12 * t265 * t387 - 12 * t288 * t859 + 12 * t297 * t379 - 16 * t355 * t91 - 12 * t1048;
      t1089 = t29 * t162;
      t1091 = t443 * t138;
      t1093 = t440 * t162;
      t1099 = 4 * x__2 * t115 * t946 + 3 * x__2 * t124 * t520 - 3 * t288 * t101 + 12 * t53 * t134 + 12 * t53 * t138 + 16 * t396 * t141 - 3 * t417 * t157 - 6 * t417 * t160 - 3 * t293 * t382 - 12 * t309 * t859 + 8 * t402 * t571 + 3 * t414 * t891 + 6 * t414 * t91 + 12 * t760 * t94 - 18 * t1089 - 12 * t1091 + 18 * t1093;
      t1127 = t30 * t162;
      t1129 = t477 * t134;
      t1131 = t477 * t138;
      t1133 = t474 * t162;
      t1135 = 3 * x__2 * t168 * t548 - 3 * t309 * t101 + 12 * t54 * t134 + 12 * t54 * t138 + 3 * t463 * t157 + 6 * t463 * t160 + 3 * t200 * t256 - 3 * t297 * t428 + 3 * t313 * t382 + 12 * t321 * t387 - 12 * t327 * t387 + 3 * t460 * t891 + 6 * t460 * t91 + 18 * t1127 - 12 * t1129 - 12 * t1131 - 18 * t1133;
      t1141 = t4 * t568;
      t1146 = r * t568;
      t1152 = t4 * t571;
      t1157 = r * t571;
      t1170 = r * t100;
      t1178 = 3 * t8 * t100 * t1 + x__2 * t493 * t946 + x__2 * t495 * t946 + 3 * t8 * t90 * t59 + t8 * t64 * t90 + t493 * t101 + t495 * t101 + 4 * t501 * t141 + 4 * t504 * t141 + 4 * t493 * t859 + 4 * t495 * t859 + 2 * t795 * t571 + 2 * t800 * t571 + x__2 * t79 + 6 * t1141 - 12 * t1146 + 12 * t1152 - 24 * t1157 - 12 * t1170 + 6 * t536;
      out_7_2 = t514 * (t862 + t899 + t937 + t985 + t1024 + t1061 + t1099 + t1135) / 2 - t1178 * t769 / 2;
      out_4_3 = -t17;
      out_5_3 = t13;
      out_6_3 = 2 * lambda - 1;
      t1197 = u__2 * out_5_3;
      t1207 = -2 * out_5_3 * lambda * t530 + 3 * t135 * out_5_3 * t59 + 8 * t105 * t162 + 3 * t55 * t108 + 2 * t11 * t256 - 3 * t1197 * t71 - 3 * t1197 * t75 - 8 * t210 * t71 - 8 * t210 * t75 - 2 * t5 * t256 + 2 * t68 * t533;
      t1230 = 3 * t55 * t104 - 3 * t83 * t108 - 3 * t128 * t568 - 6 * t128 * t571 + 6 * t61 * t198 - 6 * t68 * t198 + 3 * t525 * t568 + 6 * t525 * t571 + 3 * t61 * t558 - 3 * t68 * t558 + 4 * u__3 * t71;
      t1236 = out_5_3 * t118;
      t1246 = out_5_3 * t5;
      t1249 = lambda * t525;
      t1257 = r * lambda * t17;
      t1260 = -16 * lambda * t105 * t162 - 3 * r * t1236 - 3 * r * t256 + 3 * t4 * t1236 - 4 * t1246 * t198 - 2 * t1246 * t558 - 2 * t1249 * t568 - 4 * t1249 * t571 + 2 * t1257 * t568 + 3 * t4 * t256 + 4 * u__3 * t75;
      t1271 = u__2 * t128;
      t1281 = r * u__1 * t17;
      t1289 = -6 * u__2 * out_5_3 * t4 * t162 + 6 * u__1 * t525 * t162 + 4 * t1257 * t571 + 3 * t1271 * t134 + 3 * t1271 * t138 - 3 * t1281 * t162 - 3 * t297 * t134 - 3 * t297 * t138 + 3 * t269 * t162 + 4 * t238 * t198 + 2 * t238 * t558;
      t1293 = x__3 * t71;
      t1295 = t223 * t162;
      t1297 = x__3 * t75;
      out_7_3 = t514 * (t1207 + t1230 + t1260 + t1289) / 2 - (2 * t1293 + 4 * t1295 + 2 * t1297) * t769 / 2;
      out_1_4 = 1;
      out_5_4 = 1;
      t1319 = u__2 * u__1 * r;
      t1322 = 16 * t11 * t198 + 8 * t11 * t558 + 12 * t1319 * t141 - 16 * t5 * t198 - 8 * t5 * t558 + t530 - t828 + 3 * t831 + t834 - 3 * t835 - t854 - 3 * t855 + 3 * t857 - 6 * t870 + 6 * t872 - 6 * t897 - 6 * t901;
      t1339 = 8 * r * t533 - 8 * t4 * t533 - 3 * t1048 - 6 * t1089 - 3 * t1091 + 3 * t1093 + 6 * t1127 - 3 * t1129 - 3 * t1131 - 3 * t1133 + t624 + 2 * t630 - t773 - 2 * t779 - t791 - 3 * t903 + 3 * t906 - t908;
      out_7_4 = t514 * (t1322 + t1339) / 2;
      out_2_5 = 1;
      out_4_5 = -1;
      t1361 = 8 * t11 * t568 + 16 * t11 * t571 + 12 * t1319 * t214 - 8 * t5 * t568 - 16 * t5 * t571 - 3 * t106 - t110 + 3 * t112 - 6 * t132 + 6 * t136 + 6 * t139 - t144 + 6 * t177 - 3 * t183 - 3 * t62 - t67 + 3 * t69;
      t1377 = 8 * r * t539 - 8 * t4 * t539 + t1141 - t1146 + 2 * t1152 - 2 * t1157 - t1170 - t186 + 3 * t188 - 6 * t437 - 3 * t441 + 3 * t444 - 3 * t446 - 6 * t472 + 3 * t475 + 3 * t478 + 3 * t480 + t536;
      out_7_5 = t514 * (t1361 + t1377) / 2;
      out_3_6 = 1;
      out_4_6 = out_5_3;
      out_5_6 = t17;
      t1394 = u__1 * out_4_6;
      t1414 = 3 * t83 * out_4_6 * t64 + 3 * t135 * t104 - 3 * t31 * t104 - 3 * t31 * t108 - 6 * t128 * t198 - 3 * t128 * t558 - 3 * t1394 * t71 - 3 * t1394 * t75 + 6 * t525 * t198 - 8 * t228 * t71 - 8 * t228 * t75 + 3 * t525 * t558 - 3 * t61 * t568 + 3 * t68 * t568 - 6 * t61 * t571 + 6 * t68 * t571;
      t1440 = out_4_6 * t100;
      t1443 = out_5_6 * t118;
      t1450 = -6 * u__1 * out_4_6 * t4 * t162 - 6 * u__2 * t4 * out_5_6 * t162 + 3 * r * t1440 - 3 * r * t1443 + 3 * t1271 * t162 - 3 * t1281 * t134 - 3 * t1281 * t138 - 3 * t269 * t134 - 3 * t269 * t138 - 3 * t4 * t1440 + 3 * t4 * t1443 - 16 * t224 * t162 + 3 * t297 * t162 + 4 * t1293 + 8 * t1295 + 4 * t1297;
      out_7_6 = t514 * (t1414 + t1450) / 2;
      out_4_7 = t8 * (-2 * x__1 * r + 2 * t4 * x__1);
      out_5_7 = t8 * (-2 * x__2 * r + 2 * t4 * x__2);
      out_6_7 = 2 * x__3;
      t1474 = -8 * t516 - 8 * t518 + 2 * t543 + 2 * t546 - 2 * t549 - 2 * t552 - 16 * t554 + 16 * t556 - 8 * t559 + 8 * t560 - 8 * t569 + 8 * t570 - 16 * t572;
      t1489 = 16 * t574 + 8 * t596 - 8 * t597 - 8 * t598 + 8 * t600 - 16 * t671 - 2 * t728 - 2 * t730 - 4 * t733 - 4 * t735 + 2 * t737 + 4 * t739 + 4 * t741 + 2 * t743;
      out_7_7 = t514 * (t1474 + t1489) / 2;

      % Store outputs
      out_Jf_x = zeros(7, 7);
      out_Jf_x(4, 1) = out_4_1;
      out_Jf_x(5, 1) = out_5_1;
      out_Jf_x(7, 1) = out_7_1;
      out_Jf_x(4, 2) = out_4_2;
      out_Jf_x(5, 2) = out_5_2;
      out_Jf_x(7, 2) = out_7_2;
      out_Jf_x(4, 3) = out_4_3;
      out_Jf_x(5, 3) = out_5_3;
      out_Jf_x(6, 3) = out_6_3;
      out_Jf_x(7, 3) = out_7_3;
      out_Jf_x(1, 4) = out_1_4;
      out_Jf_x(5, 4) = out_5_4;
      out_Jf_x(7, 4) = out_7_4;
      out_Jf_x(2, 5) = out_2_5;
      out_Jf_x(4, 5) = out_4_5;
      out_Jf_x(7, 5) = out_7_5;
      out_Jf_x(3, 6) = out_3_6;
      out_Jf_x(4, 6) = out_4_6;
      out_Jf_x(5, 6) = out_5_6;
      out_Jf_x(7, 6) = out_7_6;
      out_Jf_x(4, 7) = out_4_7;
      out_Jf_x(5, 7) = out_5_7;
      out_Jf_x(6, 7) = out_6_7;
      out_Jf_x(7, 7) = out_7_7;
    end % Jf_x
    %
    % - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    %
    function out_Jf_v = Jf_v( ~, ~, ~, ~ )
      % Evaluate the Jacobian of f with respect to v.

      % Extract properties
      % No properties

      % Extract inputs

      % Evaluate function
      % No body

      % Store outputs
      out_Jf_v = zeros(7, 0);
    end % Jf_v
    %
    % - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    %
    function out_v = v( ~, ~, ~ )
      % Evaluate the the veils v.

      % Extract properties
      % No properties

      % Extract inputs

      % Evaluate function
      % No body

      % Store outputs
      out_v = zeros(0, 1);
    end % v
    %
    % - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    %
    function out_Jv_x = Jv_x( ~, ~, ~, ~ )
      % Evaluate the Jacobian of v with respect to x.

      % Extract properties
      % No properties

      % Extract inputs

      % Evaluate function
      % No body

      % Store outputs
      out_Jv_x = zeros(0, 7);
    end % Jv_x
    %
    % - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    %
    function out_h = h( this, in_1, ~, t )
      % Calculate the residual of the invariants h.

      % Extract properties
      r = this.m_r;
      rho = this.m_rho;

      % Extract inputs
      x__1 = in_1(1);
      x__2 = in_1(2);
      x__3 = in_1(3);
      u__1 = in_1(4);
      u__2 = in_1(5);
      u__3 = in_1(6);
      lambda = in_1(7);

      % Evaluate function
      t1 = x__1 ^ 2;
      t2 = x__2 ^ 2;
      t3 = x__3 ^ 2;
      t4 = t1 + t2;
      t5 = sqrt(t4);
      t8 = r ^ 2;
      t9 = rho ^ 2;
      out_1 = 2 * t5 * r - t1 - t2 - t3 - t8 + t9;
      t11 = t5 - r;
      out_2 = 2 * (x__1 * t11 * u__1 + x__2 * u__2 * t11 + t5 * u__3 * x__3) / t5;
      t20 = t5 * t4;
      t22 = sin(t);
      t24 = cos(t);
      t26 = -t22 * x__3 + t24 * u__3 - u__2;
      t29 = lambda * t2;
      t32 = t22 * u__3 + t24 * x__3 + u__1;
      t38 = u__1 ^ 2;
      t40 = u__2 ^ 2;
      t42 = u__3 ^ 2;
      t46 = t1 ^ 2;
      t52 = x__2 * t32;
      out_3 = -4 / t20 * ((lambda * t1 + x__1 * t26 / 2 + t29 + x__2 * t32 / 2 + t3 * (lambda - 0.1e1 / 0.2e1) + lambda * t8 + t38 / 2 + t40 / 2 + t42 / 2) * t20 - r * (4 * lambda * t46 + t1 * x__1 * t26 + t1 * (8 * t29 + t52 + t40) - x__1 * (-x__2 * t26 + 2 * u__1 * u__2) * x__2 + (4 * t29 + t52 + t38) * t2) / 2);

      % Store outputs
      out_h = zeros(3, 1);
      out_h(1) = out_1;
      out_h(2) = out_2;
      out_h(3) = out_3;
    end % h
    %
    % - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    %
    function out_Jh_x = Jh_x( this, in_1, ~, t )
      % Calculate the Jacobian of h with respect to x.

      % Extract properties
      r = this.m_r;

      % Extract inputs
      x__1 = in_1(1);
      x__2 = in_1(2);
      x__3 = in_1(3);
      u__1 = in_1(4);
      u__2 = in_1(5);
      u__3 = in_1(6);
      lambda = in_1(7);

      % Evaluate function
      t1 = x__1 ^ 2;
      t2 = x__2 ^ 2;
      t3 = t1 + t2;
      t4 = sqrt(t3);
      t5 = 0.1e1 / t4;
      t6 = t5 * r;
      out_1_1 = 2 * x__1 * t6 - 2 * x__1;
      t9 = t4 * t3;
      t10 = 0.1e1 / t9;
      t11 = t4 - r;
      t12 = t11 * u__1;
      t14 = u__2 * t11;
      t16 = x__3 * u__3;
      t19 = (x__1 * t12 + x__2 * t14 + t4 * t16) * t10;
      t21 = u__1 * t5;
      t23 = x__1 * t5;
      out_2_1 = -2 * x__1 * t19 + 2 * (u__2 * x__2 * t23 + t1 * t21 + t23 * t16 + t12) * t5;
      t31 = sin(t);
      t32 = t31 * x__3;
      t33 = cos(t);
      t34 = t33 * u__3;
      t35 = -t32 + t34 - u__2;
      t38 = lambda * t2;
      t39 = t33 * x__3;
      t40 = t31 * u__3;
      t41 = t39 + t40 + u__1;
      t44 = lambda - 0.1e1 / 0.2e1;
      t45 = x__3 ^ 2;
      t47 = r ^ 2;
      t49 = u__1 ^ 2;
      t51 = u__2 ^ 2;
      t53 = u__3 ^ 2;
      t55 = lambda * t1 + x__1 * t35 / 2 + t38 + x__2 * t41 / 2 + t45 * t44 + lambda * t47 + t49 / 2 + t51 / 2 + t53 / 2;
      t56 = t55 * t4;
      t66 = t1 * x__1;
      t72 = x__2 * t41;
      t73 = 8 * t38 + t72 + t51;
      t77 = -x__2 * t35;
      t80 = 2 * u__1 * u__2 + t77;
      t81 = t80 * x__2;
      t89 = t1 ^ 2;
      t96 = 4 * t38 + t72 + t49;
      t102 = t3 ^ 2;
      t105 = 0.1e1 / t4 / t102 * (t55 * t9 - r * (4 * lambda * t89 + t1 * t73 + t96 * t2 + t66 * t35 - x__1 * t81) / 2);
      out_3_1 = -4 * t10 * (3 * x__1 * t56 + (2 * x__1 * lambda - t32 / 2 + t34 / 2 - u__2 / 2) * t9 - r * (16 * lambda * t66 + 3 * t1 * t35 + 2 * x__1 * t73 - t81) / 2) + 12 * x__1 * t105;
      out_1_2 = 2 * x__2 * t6 - 2 * x__2;
      out_2_2 = -2 * x__2 * t19 + 2 * (x__2 * t5 * t16 + u__2 * t2 * t5 + x__2 * x__1 * t21 + t14) * t5;
      t122 = x__2 * lambda;
      out_3_2 = -4 * t10 * (3 * x__2 * t56 + (2 * t122 + t39 / 2 + t40 / 2 + u__1 / 2) * t9 - r * (t1 * (16 * t122 + t39 + t40 + u__1) - x__1 * t80 - x__1 * t77 + 2 * t96 * x__2 + (8 * t122 + t39 + t40 + u__1) * t2) / 2) + 12 * x__2 * t105;
      t147 = 2 * x__3;
      out_1_3 = -t147;
      out_2_3 = 2 * u__3;
      t150 = x__2 * t33;
      t160 = t2 * x__2;
      out_3_3 = -4 * t10 * ((-x__1 * t31 / 2 + t150 / 2 + 2 * x__3 * t44) * t9 - r * (-t2 * t31 * x__1 + t1 * t150 + t160 * t33 - t31 * t66) / 2);
      out_2_4 = 2 * t5 * t11 * x__1;
      t178 = x__2 + 2 * u__1;
      out_3_4 = -4 * t10 * ((x__2 / 2 + u__1) * t9 - r * (-2 * x__1 * u__2 * x__2 + t1 * x__2 + t178 * t2) / 2);
      out_2_5 = 2 * t5 * t11 * x__2;
      out_3_5 = -4 * t10 * ((-x__1 / 2 + u__2) * t9 - r * (-t178 * x__1 * x__2 + 2 * t1 * u__2 - t66) / 2);
      out_2_6 = t147;
      t203 = x__2 * t31;
      out_3_6 = -4 * t10 * ((x__1 * t33 / 2 + t203 / 2 + u__3) * t9 - r * (t2 * t33 * x__1 + t1 * t203 + t160 * t31 + t33 * t66) / 2);
      t223 = t2 ^ 2;
      out_3_7 = -4 * t10 * ((t47 + t1 + t2 + t45) * t9 - r * (8 * t1 * t2 + 4 * t223 + 4 * t89) / 2);

      % Store outputs
      out_Jh_x = zeros(3, 7);
      out_Jh_x(1, 1) = out_1_1;
      out_Jh_x(2, 1) = out_2_1;
      out_Jh_x(3, 1) = out_3_1;
      out_Jh_x(1, 2) = out_1_2;
      out_Jh_x(2, 2) = out_2_2;
      out_Jh_x(3, 2) = out_3_2;
      out_Jh_x(1, 3) = out_1_3;
      out_Jh_x(2, 3) = out_2_3;
      out_Jh_x(3, 3) = out_3_3;
      out_Jh_x(2, 4) = out_2_4;
      out_Jh_x(3, 4) = out_3_4;
      out_Jh_x(2, 5) = out_2_5;
      out_Jh_x(3, 5) = out_3_5;
      out_Jh_x(2, 6) = out_2_6;
      out_Jh_x(3, 6) = out_3_6;
      out_Jh_x(3, 7) = out_3_7;
    end % Jh_x
    %
    % - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    %
    function out_Jh_v = Jh_v( ~, ~, ~, ~ )
      % Calculate the Jacobian of h with respect to v.

      % Extract properties
      % No properties

      % Extract inputs

      % Evaluate function
      % No body

      % Store outputs
      out_Jh_v = zeros(3, 0);
    end % Jh_v
    %
    % - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    %
    function out = in_domain( ~, ~, ~ )
      out = true;
    end % in_domain
    %
    % - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    %
  end
end % Torus

% That's All Folks!
