%% Prepare worspace

clc;
clear all; %#ok<CLALL>
close all;

%% Instantiate system object

ICS = [ ...
   15.0, ...
   0.0, ...
   0.0, ...
   0.0, ...
   15.0, ...
  -5.0, ...
   0.0 ...
];

ODES = Torus();

%% Initialize the solver and set the system

explicit_solver = {
  'ExplicitEuler',    ...
  'ExplicitMidpoint', ...
  'Heun2',            ...
  'Wray3',            ...
  'Heun3'             ...
  'Ralston2',         ...
  'Ralston3',         ...
  'Ralston4',         ...
  'RK3',              ...
  'RK4',              ...
  'RK38',             ...
  'SSPRK3',           ...
};

implicit_solver = {
  'CrankNicolson',    ...
  'GaussLegendre2',   ...
  'GaussLegendre4',   ...
  'GaussLegendre6',   ...
  'ImplicitEuler',    ...
  'ImplicitMidpoint', ...
  'LobattoIIICS2',    ...
  'LobattoIIICS4',    ...
  'LobattoIIID2',     ...
  'LobattoIIID4',     ...
  'SunGeng5',         ...
};

explicit_embedded_solver = {
  'BogackiShampine23', ...
  'CashKarp45',        ...
  'DormandPrince54',   ...
  'Fehlberg12',        ...
  'Fehlberg45I',       ...
  'Fehlberg45II',      ...
  'HeunEuler21',       ...
  'Merson45',          ...
  'Verner65',          ...
  'Zonnenveld34',      ...
};

implicit_embedded_solver = {
  'LobattoIIIA2',     ...
  'LobattoIIIA4',     ...
  'LobattoIIIB2',     ...
  'LobattoIIIB4',     ...
  'LobattoIIIC2',     ...
  'LobattoIIIC4',     ...
  'RadauIA3',         ...
  'RadauIA5',         ...
  'RadauIIA3',        ...
  'RadauIIA5',        ...
};

solver_name = { ...
  explicit_solver{end}, ...
  %implicit_solver{end}, ...
  %explicit_embedded_solver{end-1}, ...
  %implicit_embedded_solver{end}, ...
};

solver = cell(length(solver_name), 1);
for k = 1:length(solver_name)
  solver{k} = IndigoSolver(solver_name{k});
  solver{k}.set_system(ODES);
end

%% Integrate the system

% Set integration interval
d_t   = 1e-2;
t_ini = 0.0;
t_end = 10*pi;
T_vec = t_ini:d_t:t_end;

% Allocate solution arrays
X = cell(1, length(T_vec));
T = cell(1, length(T_vec));
H = cell(1, length(T_vec));

% Solve the system for each solver
for i = 1:length(solver_name)
  %solver{i}.set_max_projection_iteration(10);
  %solver{i}.set_max_newton_iteration(10);
  [X{i}, T{i}] = solver{i}.solve(T_vec, ICS);
  for j = 1:length(T{i})
    H{i}(:,j) = ODES.h(X{i}(:,j), [], T{i}(j));
  end
end

%% Plot results

linewidth = 1.1;

figure();
  color = colormap(lines(length(solver_name)));
  hold on;
  grid on;
  grid minor;
  xlabel('$t$ (s)');
  ylabel('$\mathbf{x}_l$ (-)');
  for i = 1:length(solver_name)
    t = T{i};
    x1 = X{i}(1,:);
    x2 = X{i}(2,:);
    x3 = X{i}(2,:);
    plot(t, x1, t, x2, t, x3, 'LineWidth', linewidth, 'Color', color(i,:));
  end
  legend(solver_name, 'Location', 'northwest');
  hold off;


figure();
  hold on;
  grid on;
  grid minor;
  xlabel('$t$ (s)');
  ylabel('$\mathbf{u}_l$ (-)');
  for i = 1:length(solver_name)
    t = T{i};
    u1 = X{i}(1,:);
    u2 = X{i}(2,:);
    u3 = X{i}(2,:);
    plot(t, u1, t, u2, t, u3, 'LineWidth', linewidth, 'Color', color(i,:));
  end
  %legend(solver_name, 'Location', 'northwest');
  hold off;

figure();
  hold on;
  grid on;
  grid minor;
  xlabel('$t$ (s)');
  ylabel('$\mathbf{h}$ (-)');
  for i = 1:length(solver_name)
    t  = T{i};
    h1 = H{i}(1,:);
    h2 = H{i}(2,:);
    h3 = H{i}(3,:);
    plot(t, h1, t, h2, t, h3, 'LineWidth', linewidth, 'Color', color(i,:));
  end
  %legend(solver_name, 'Location', 'northwest');
  hold off;

%% That's All Folks!
