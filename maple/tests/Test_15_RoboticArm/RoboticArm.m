% +--------------------------------------------------------------------------+
% | 'Indigo' module version 1.0 - BSD 3-Clause License - Copyright (c) 2023  |
% | Current version authors:                                                 |
% |   Davide Stocco and Enrico Bertolazzi.                                   |
% +--------------------------------------------------------------------------+

% MATLAB generated code for implicit system: RoboticArm
% This file has been automatically generated by Indigo.
% DISCLAIMER: If you need to edit this file, do it wisely, at your own risk!

classdef RoboticArm < Indigo.DAE.Implicit
  %
  % No class description provided.
  %
  properties (SetAccess = protected, Hidden = true)
    % User data
    % No Properties
  end
  %
  methods
    %
    % - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    %
    function this = RoboticArm( varargin )
      % Class constructor.

      % Superclass constructor
      num_eqns = 8;
      num_sysy = 2;
      num_invs = 2;
      this = this@Indigo.DAE.Implicit('RoboticArm', num_eqns, num_sysy, num_invs);
    end % RoboticArm
    %
    % - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    %
    function out_F = F( ~, in_1, in_2, ~, t )
      % Evaluate the function F.

      % Extract properties
      % No properties

      % Extract inputs
      x__1 = in_1(1);
      x__2 = in_1(2);
      x__3 = in_1(3);
      x__4 = in_1(4);
      x__5 = in_1(5);
      x__6 = in_1(6);
      u__1 = in_1(7);
      u__2 = in_1(8);
      x__1_dot = in_2(1);
      x__2_dot = in_2(2);
      x__3_dot = in_2(3);
      x__4_dot = in_2(4);
      x__5_dot = in_2(5);
      x__6_dot = in_2(6);

      % Evaluate function
      out_1 = -x__4 + x__1_dot;
      out_2 = -x__5 + x__2_dot;
      out_3 = -x__6 + x__3_dot;
      t1 = cos(x__3);
      t2 = t1 ^ 2;
      t3 = t2 - 2;
      t5 = sin(x__3);
      t6 = x__4 ^ 2;
      t8 = 2 * x__2;
      t9 = 4 * x__3;
      t10 = t6 * t5 - t8 + t9;
      t13 = (x__4 + x__6) ^ 2;
      t15 = 2 * t13 * t5;
      t16 = 2 * u__1;
      t17 = 2 * u__2;
      t19 = 0.1e1 / t3;
      out_4 = t19 * (t1 * t10 + t3 * x__4_dot + t15 + t16 - t17 - t8 + t9);
      out_5 = t19 * (t3 * x__5_dot + t2 * (u__2 + x__2 - 2 * x__3) - t1 * t10 - t15 - t16 - 4 * u__2 + 4 * x__2 - 8 * x__3);
      t32 = x__4 * x__6;
      t34 = x__6 ^ 2;
      out_6 = t19 * (x__6_dot * t3 + t1 * (t5 * (-2 * t6 - 2 * t32 - t34) - u__1 + u__2 + 9 * x__2 - 18 * x__3) + t5 * (-4 * t6 - 4 * t32 - 2 * t34) - t16 + t17 - t8 + t9);
      t47 = cos(x__1);
      t48 = x__1 + x__3;
      t49 = cos(t48);
      t50 = exp(t);
      t51 = t50 - 1;
      t52 = cos(t51);
      t53 = t - 1;
      t54 = cos(t53);
      out_7 = -t47 - t49 + t52 + t54;
      t55 = sin(t48);
      t56 = sin(t51);
      t57 = sin(t53);
      out_8 = -t47 - t55 - t56 - t57;

      % Store outputs
      out_F = zeros(8, 1);
      out_F(1) = out_1;
      out_F(2) = out_2;
      out_F(3) = out_3;
      out_F(4) = out_4;
      out_F(5) = out_5;
      out_F(6) = out_6;
      out_F(7) = out_7;
      out_F(8) = out_8;
    end % F
    %
    % - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    %
    function out_JF_x = JF_x( ~, in_1, in_2, ~, ~ )
      % Evaluate the Jacobian of F with respect to x.

      % Extract properties
      % No properties

      % Extract inputs
      x__1 = in_1(1);
      x__2 = in_1(2);
      x__3 = in_1(3);
      x__4 = in_1(4);
      x__6 = in_1(6);
      u__1 = in_1(7);
      u__2 = in_1(8);
      x__4_dot = in_2(4);
      x__5_dot = in_2(5);
      x__6_dot = in_2(6);

      % Evaluate function
      t1 = sin(x__1);
      t2 = x__1 + x__3;
      t3 = sin(t2);
      out_7_1 = t1 + t3;
      t4 = cos(t2);
      out_8_1 = t1 - t4;
      t5 = cos(x__3);
      t8 = t5 ^ 2;
      t9 = t8 - 2;
      t10 = 0.1e1 / t9;
      out_4_2 = t10 * (-2 - 2 * t5);
      out_5_2 = t10 * (t8 + 4 + 2 * t5);
      out_6_2 = t10 * (9 * t5 - 2);
      t16 = sin(x__3);
      t19 = x__4 ^ 2;
      t21 = t19 * t5 + 4;
      t24 = 2 * x__2;
      t25 = 4 * x__3;
      t26 = t19 * t16 - t24 + t25;
      t28 = x__4 + x__6;
      t29 = t28 ^ 2;
      t31 = 2 * t29 * t5;
      t37 = 2 * t29 * t16;
      t38 = 2 * u__1;
      t39 = 2 * u__2;
      t41 = t9 ^ 2;
      t42 = 0.1e1 / t41;
      t44 = t16 * t5;
      out_4_3 = t10 * (-2 * t16 * t5 * x__4_dot - t16 * t26 + t5 * t21 + t31 + 4) + 2 * t44 * t42 * (t5 * t26 + t9 * x__4_dot - t24 + t25 + t37 + t38 - t39);
      t52 = u__2 + x__2 - 2 * x__3;
      t58 = -t26;
      out_5_3 = t10 * (-2 * t16 * t5 * t52 - 2 * t16 * t5 * x__5_dot - t16 * t58 - t5 * t21 - t31 - 2 * t8 - 8) + 2 * t44 * t42 * (t5 * t58 + t8 * t52 + t9 * x__5_dot - t37 - t38 - 4 * u__2 + 4 * x__2 - 8 * x__3);
      t75 = x__4 * x__6;
      t77 = x__6 ^ 2;
      t78 = -2 * t19 - 2 * t75 - t77;
      t85 = t16 * t78 - u__1 + u__2 + 9 * x__2 - 18 * x__3;
      t90 = -4 * t19 - 4 * t75 - 2 * t77;
      out_6_3 = t10 * (-2 * x__6_dot * t44 + t5 * (t5 * t78 - 18) - t16 * t85 + t5 * t90 + 4) + 2 * t44 * t42 * (t16 * t90 + t5 * t85 + x__6_dot * t9 - t24 + t25 - t38 + t39);
      out_7_3 = t3;
      out_8_3 = -t4;
      out_1_4 = -1;
      t104 = t28 * t16;
      t106 = 2 * t5 * x__4 * t16 + 4 * t104;
      out_4_4 = t10 * t106;
      out_5_4 = -t10 * t106;
      out_6_4 = t10 * (t5 * t16 * (-4 * x__4 - 2 * x__6) + t16 * (-8 * x__4 - 4 * x__6));
      out_2_5 = -1;
      out_3_6 = -1;
      out_4_6 = 4 * t10 * t104;
      out_5_6 = -out_4_6;
      t119 = -t28;
      out_6_6 = t10 * (2 * t5 * t16 * t119 + 4 * t16 * t119);
      out_4_7 = 2 * t10;
      out_5_7 = -out_4_7;
      t126 = -t5 - 2;
      out_6_7 = t10 * t126;
      out_4_8 = out_5_7;
      out_5_8 = t10 * (t8 - 4);
      out_6_8 = -t10 * t126;

      % Store outputs
      out_JF_x = zeros(8, 8);
      out_JF_x(7, 1) = out_7_1;
      out_JF_x(8, 1) = out_8_1;
      out_JF_x(4, 2) = out_4_2;
      out_JF_x(5, 2) = out_5_2;
      out_JF_x(6, 2) = out_6_2;
      out_JF_x(4, 3) = out_4_3;
      out_JF_x(5, 3) = out_5_3;
      out_JF_x(6, 3) = out_6_3;
      out_JF_x(7, 3) = out_7_3;
      out_JF_x(8, 3) = out_8_3;
      out_JF_x(1, 4) = out_1_4;
      out_JF_x(4, 4) = out_4_4;
      out_JF_x(5, 4) = out_5_4;
      out_JF_x(6, 4) = out_6_4;
      out_JF_x(2, 5) = out_2_5;
      out_JF_x(3, 6) = out_3_6;
      out_JF_x(4, 6) = out_4_6;
      out_JF_x(5, 6) = out_5_6;
      out_JF_x(6, 6) = out_6_6;
      out_JF_x(4, 7) = out_4_7;
      out_JF_x(5, 7) = out_5_7;
      out_JF_x(6, 7) = out_6_7;
      out_JF_x(4, 8) = out_4_8;
      out_JF_x(5, 8) = out_5_8;
      out_JF_x(6, 8) = out_6_8;
    end % JF_x
    %
    % - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    %
    function out_JF_y = JF_y( ~, ~, ~, ~, ~ )
      % Evaluate the Jacobian of F with respect to y.

      % Extract properties
      % No properties

      % Extract inputs

      % Evaluate function
      % No body

      % Store outputs
      out_JF_y = zeros(8, 0);
    end % JF_y
    %
    % - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    %
    function out_JF_x_dot = JF_x_dot( ~, ~, ~, ~, ~ )
      % Evaluate the Jacobian of F with respect to x_dot.

      % Extract properties
      % No properties

      % Extract inputs

      % Evaluate function
      out_1_1 = 1;
      out_2_2 = 1;
      out_3_3 = 1;
      out_4_4 = 1;
      out_5_5 = 1;
      out_6_6 = 1;

      % Store outputs
      out_JF_x_dot = zeros(8, 8);
      out_JF_x_dot(1, 1) = out_1_1;
      out_JF_x_dot(2, 2) = out_2_2;
      out_JF_x_dot(3, 3) = out_3_3;
      out_JF_x_dot(4, 4) = out_4_4;
      out_JF_x_dot(5, 5) = out_5_5;
      out_JF_x_dot(6, 6) = out_6_6;
    end % JF_x_dot
    %
    % - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    %
    function out_A = A( ~, ~, ~ )
      % Evaluate the matrix A.

      % Extract properties
      % No properties

      % Extract inputs

      % Evaluate function
      % No body

      % Store outputs
      out_A = zeros(2, 0);
    end % A
    %
    % - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    %
    function out_TA_x = TA_x( ~, ~, ~ )
      % Evaluate tensor of A with respect to x.

      % Extract properties
      % No properties

      % Extract inputs

      % Evaluate function
      % No body

      % Store outputs
      out_TA_x = zeros(2, 0, 8);
    end % TA_x
    %
    % - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    %
    function out_b = b( ~, in_1, t )
      % Evaluate the vector b.

      % Extract properties
      % No properties

      % Extract inputs
      x__1 = in_1(1);
      x__3 = in_1(3);

      % Evaluate function
      t1 = cos(x__1);
      t2 = x__1 + x__3;
      t3 = cos(t2);
      t4 = exp(t);
      t5 = t4 - 1;
      t6 = cos(t5);
      t7 = t - 1;
      t8 = cos(t7);
      out_1 = t1 + t3 - t6 - t8;
      t9 = sin(t2);
      t10 = sin(t5);
      t11 = sin(t7);
      out_2 = t1 + t9 + t10 + t11;

      % Store outputs
      out_b = zeros(2, 1);
      out_b(1) = out_1;
      out_b(2) = out_2;
    end % b
    %
    % - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    %
    function out_Jb_x = Jb_x( ~, in_1, ~ )
      % Evaluate the Jacobian of b with respect to x.

      % Extract properties
      % No properties

      % Extract inputs
      x__1 = in_1(1);
      x__3 = in_1(3);

      % Evaluate function
      t1 = sin(x__1);
      t2 = x__1 + x__3;
      t3 = sin(t2);
      out_1_1 = -t1 - t3;
      t4 = cos(t2);
      out_2_1 = -t1 + t4;
      out_1_3 = -t3;
      out_2_3 = t4;

      % Store outputs
      out_Jb_x = zeros(2, 8);
      out_Jb_x(1, 1) = out_1_1;
      out_Jb_x(2, 1) = out_2_1;
      out_Jb_x(1, 3) = out_1_3;
      out_Jb_x(2, 3) = out_2_3;
    end % Jb_x
    %
    % - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    %
    function out_h = h( ~, in_1, ~, t )
      % Evaluate the invariants h.

      % Extract properties
      % No properties

      % Extract inputs
      x__1 = in_1(1);
      x__3 = in_1(3);

      % Evaluate function
      t1 = cos(x__1);
      t2 = x__1 + x__3;
      t3 = cos(t2);
      t4 = exp(t);
      t5 = t4 - 1;
      t6 = cos(t5);
      t7 = t - 1;
      t8 = cos(t7);
      out_1 = -t1 - t3 + t6 + t8;
      t9 = sin(t2);
      t10 = sin(t5);
      t11 = sin(t7);
      out_2 = -t1 - t9 - t10 - t11;

      % Store outputs
      out_h = zeros(2, 1);
      out_h(1) = out_1;
      out_h(2) = out_2;
    end % h
    %
    % - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    %
    function out_Jh_x = Jh_x( ~, in_1, ~, ~ )
      % Evaluate the Jacobian of h with respect to x.

      % Extract properties
      % No properties

      % Extract inputs
      x__1 = in_1(1);
      x__3 = in_1(3);

      % Evaluate function
      t1 = sin(x__1);
      t2 = x__1 + x__3;
      t3 = sin(t2);
      out_1_1 = t1 + t3;
      t4 = cos(t2);
      out_2_1 = t1 - t4;
      out_1_3 = t3;
      out_2_3 = -t4;

      % Store outputs
      out_Jh_x = zeros(2, 8);
      out_Jh_x(1, 1) = out_1_1;
      out_Jh_x(2, 1) = out_2_1;
      out_Jh_x(1, 3) = out_1_3;
      out_Jh_x(2, 3) = out_2_3;
    end % Jh_x
    %
    % - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    %
    function out_Jh_y = Jh_y( ~, ~, ~, ~ )
      % Evaluate the Jacobian of h with respect to y.

      % Extract properties
      % No properties

      % Extract inputs

      % Evaluate function
      % No body

      % Store outputs
      out_Jh_y = zeros(2, 0);
    end % Jh_y
    %
    % - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    %
    function out_pivots = pivots( ~, ~, ~, ~ )
      % Evaluate the pivoting values

      % Extract properties
      % No properties

      % Extract inputs

      % Evaluate function
      out_1_1 = 1;
      out_2_1 = 1;
      out_3_1 = 1;
      out_4_1 = 1;
      out_5_1 = 1;
      out_6_1 = 1;
      out_7_1 = -1;
      out_8_1 = -1;

      % Store outputs
      out_pivots = zeros(8, 1);
      out_pivots(1, 1) = out_1_1;
      out_pivots(2, 1) = out_2_1;
      out_pivots(3, 1) = out_3_1;
      out_pivots(4, 1) = out_4_1;
      out_pivots(5, 1) = out_5_1;
      out_pivots(6, 1) = out_6_1;
      out_pivots(7, 1) = out_7_1;
      out_pivots(8, 1) = out_8_1;
    end % pivots
    %
    % - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    %
    function out = in_domain( ~, ~, ~ )
      out = true;
    end % in_domain
    %
    % - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    %
  end
end % RoboticArm

% That's All Folks!
