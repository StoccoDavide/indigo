% +--------------------------------------------------------------------------+
% | 'Indigo' module version 1.0 - BSD 3-Clause License - Copyright (c) 2023  |
% | Current version authors:                                                 |
% |   Davide Stocco and Enrico Bertolazzi.                                   |
% +--------------------------------------------------------------------------+

% Matlab generated code for implicit system: SliderCrankRecursive
% This file has been automatically generated by Indigo.
% DISCLAIMER: If you need to edit it, do it wisely!

classdef SliderCrankRecursive < Indigo.DAE.Implicit
  %
  % No class description provided.
  %
  properties (SetAccess = protected, Hidden = true)
    % User data
    m_l__1 = 1.0;
    m_l__2 = 2.0;
    m_m__1 = 1.0;
    m_m__2 = 1.0;
    m_m__3 = 2.0;
    m_g = 9.8;
    m_J__1 = 4.5;
    m_J__2 = 5.5;
  end
  %
  methods
    %
    % - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    %
    function this = SliderCrankRecursive( varargin )
      % Class constructor.

      % Superclass constructor
      num_eqns = 5;
      num_veil = 8;
      num_invs = 3;
      this = this@Indigo.DAE.Implicit('SliderCrankRecursive', num_eqns, num_veil, num_invs);

      % User data
      if (nargin == 0)
        % Keep default values
      elseif (nargin == 1 && isstruct(varargin{1}))
        this.m_l__1 = varargin{1}.l__1;
        this.m_l__2 = varargin{1}.l__2;
        this.m_m__1 = varargin{1}.m__1;
        this.m_m__2 = varargin{1}.m__2;
        this.m_m__3 = varargin{1}.m__3;
        this.m_g = varargin{1}.g;
        this.m_J__1 = varargin{1}.J__1;
        this.m_J__2 = varargin{1}.J__2;
      elseif (nargin == 8)
        this.m_l__1 = varargin{1};
        this.m_l__2 = varargin{2};
        this.m_m__1 = varargin{3};
        this.m_m__2 = varargin{4};
        this.m_m__3 = varargin{5};
        this.m_g = varargin{6};
        this.m_J__1 = varargin{7};
        this.m_J__2 = varargin{8};
      else
        error('wrong number of input arguments.');
      end
    end % SliderCrankRecursive
    %
    % - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    %
    function out_F = F( this, in_1, in_2, in_3, ~ )
      % Evaluate the function F.

      % Extract properties
      l__1 = this.m_l__1;
      l__2 = this.m_l__2;
      m__1 = this.m_m__1;
      m__2 = this.m_m__2;
      m__3 = this.m_m__3;
      g = this.m_g;
      J__2 = this.m_J__2;

      % Extract inputs
      theta__1 = in_1(1);
      theta__2 = in_1(2);
      omega__1 = in_1(3);
      omega__2 = in_1(4);
      lambda = in_1(5);
      theta__1_dot = in_2(1);
      theta__2_dot = in_2(2);
      omega__1_dot = in_2(3);
      omega__2_dot = in_2(4);
      lambda_dot = in_2(5);
      V_y58KN_1 = in_3(1);
      V_y58KN_2 = in_3(2);
      V_y58KN_3 = in_3(3);

      % Evaluate function
      out_1 = -omega__1 + theta__1_dot;
      out_2 = -omega__2 + theta__2_dot;
      out_3 = V_y58KN_1 * omega__1_dot + 2 * V_y58KN_2;
      t3 = cos(theta__2);
      t6 = sin(theta__2);
      t7 = omega__2 ^ 2;
      t8 = t7 * t6;
      t9 = l__2 * V_y58KN_1;
      t11 = sin(theta__1);
      t12 = omega__1 ^ 2;
      t13 = t12 * t11;
      t14 = l__1 * V_y58KN_1;
      t16 = cos(theta__1);
      t21 = 0.1e1 / V_y58KN_1;
      out_4 = -omega__2_dot * l__2 * t3 - t21 * (2 * V_y58KN_2 * l__1 * t16 + t14 * t13 - t9 * t8);
      t23 = theta__2 + theta__1;
      t24 = cos(t23);
      t25 = l__1 ^ 2;
      t26 = t25 * t24;
      t27 = l__2 ^ 2;
      t28 = m__2 ^ 2;
      t29 = t28 * t27;
      t30 = sin(t23);
      t35 = m__2 * m__3;
      t39 = m__3 ^ 2;
      t40 = t39 * t27;
      t44 = 32 * t30 * t35 * t27 * t26 + 8 * t30 * t29 * t26 + 32 * t30 * t40 * t26;
      t45 = t44 * t8;
      t46 = m__2 * t27;
      t47 = m__3 * t27;
      t51 = 0.1e1 / (t46 + 4 * t47 + 4 * J__2);
      t52 = t27 * l__2;
      t53 = t52 * t51;
      t55 = m__2 * t53 * t45;
      t58 = 4 * m__3 * t53 * t45;
      t60 = V_y58KN_1 * t12 * t16;
      t61 = t27 * l__1;
      t62 = m__2 * t61;
      t64 = t44 * t13;
      t65 = l__1 * t51;
      t67 = t46 * t65 * t64;
      t68 = m__3 * t61;
      t73 = 4 * t47 * t65 * t64;
      t74 = t6 * J__2;
      t76 = t51 * t44;
      t77 = l__2 * t76;
      t79 = 4 * t77 * t7 * t74;
      t80 = t16 * J__2;
      t82 = l__1 * V_y58KN_1 * t12;
      t85 = t11 * J__2;
      t89 = 4 * l__1 * t76 * t12 * t85;
      t90 = V_y58KN_2 * t11;
      t93 = t25 * t16;
      t94 = t24 * t7;
      t95 = t28 * t52;
      t96 = t95 * t94;
      t97 = t39 * t52;
      t99 = 8 * t97 * t94;
      t100 = lambda * t11;
      t105 = g * m__2;
      t108 = g * m__3;
      t111 = g * t11;
      t119 = m__1 * t27;
      t125 = m__3 * t46;
      t128 = t30 * t3;
      t129 = t27 * g;
      t130 = t39 * t129;
      t132 = 8 * t130 * t128;
      t133 = -4 * g * m__1 * t85 - m__2 * t119 * t111 - 4 * m__3 * t119 * t111 - 2 * t46 * t100 - 8 * t47 * t100 - 8 * t105 * t85 - 8 * t108 * t85 - 10 * t125 * t111 - 2 * t29 * t111 - 8 * t40 * t111 + t132 + t96 + t99;
      t134 = t28 * t129;
      t136 = 2 * t134 * t128;
      t137 = t24 ^ 2;
      t138 = t137 * t12;
      t139 = t28 * t61;
      t141 = 2 * t139 * t138;
      t142 = t39 * t61;
      t144 = 8 * t142 * t138;
      t145 = t30 ^ 2;
      t146 = t145 * t12;
      t148 = 2 * t139 * t146;
      t150 = 8 * t142 * t146;
      t151 = t7 * J__2;
      t152 = l__2 * t24;
      t155 = 4 * m__2 * t152 * t151;
      t158 = 8 * m__3 * t152 * t151;
      t160 = m__3 * m__2 * t52;
      t162 = 6 * t160 * t94;
      t163 = lambda * t3;
      t164 = t27 * t30;
      t167 = 8 * m__3 * t164 * t163;
      t170 = 4 * m__2 * t164 * t163;
      t175 = 8 * t125 * l__1 * t146;
      t178 = 8 * t125 * l__1 * t138;
      t181 = 8 * t125 * g * t128;
      t182 = -8 * lambda * t85 + t136 + t141 + t144 - t148 - t150 + t155 + t158 + t162 + t167 + t170 - t175 + t178 + t181;
      t183 = t133 + t182;
      t184 = t183 * t93;
      t185 = t27 * t51;
      t186 = m__2 * t185;
      t191 = m__3 * t185;
      t194 = V_y58KN_2 * l__1;
      t201 = t24 * t12;
      t202 = m__2 * t14;
      t203 = t202 * t201;
      t204 = t30 * t12;
      t205 = t44 * t204;
      t207 = m__2 * t65 * t205;
      t208 = m__3 * t14;
      t210 = 2 * t208 * t201;
      t213 = 2 * m__3 * t65 * t205;
      t214 = t44 * t3;
      t215 = g * t51;
      t217 = m__2 * t215 * t214;
      t220 = 2 * m__3 * t215 * t214;
      t221 = l__1 * t30;
      t222 = V_y58KN_2 * m__2;
      t224 = 2 * t222 * t221;
      t225 = t51 * t183;
      t229 = V_y58KN_2 * m__3;
      t231 = 4 * t229 * t221;
      t236 = 2 * t76 * t163;
      t237 = 2 * m__2 * t225 * t26 + 4 * m__3 * t225 * t26 + t203 + t207 + t210 + t213 - t217 - t220 - t224 - t231 - t236;
      t243 = V_y58KN_1 * t3;
      t247 = l__1 * t24;
      t256 = V_y58KN_1 ^ 2;
      t259 = t51 * t44 / t256;
      t260 = t259 * (-t105 * t243 - 2 * t108 * t243 - 2 * V_y58KN_1 * t163 + t202 * t204 + 2 * t208 * t204 + 2 * t222 * t247 + 4 * t229 * t247) * l__2;
      t265 = t3 * V_y58KN_3;
      t267 = 2 * t77 * t265;
      t268 = t55 + t58 - t62 * t60 - t67 - 4 * t68 * t60 - t73 + t79 - 4 * t82 * t80 - t89 + 2 * t62 * t90 - 2 * t186 * t184 + 8 * t68 * t90 - 8 * t191 * t184 + 8 * t194 * t85 - 8 * t51 * t183 * t25 * t80 - 2 * t9 * t3 * (-t21 * t237 * l__2 + t260) - t267;
      t269 = 0.1e1 / t3;
      t271 = 0.1e1 / l__2;
      t272 = t21 * t271;
      t274 = t52 * V_y58KN_1;
      t275 = m__2 * t274;
      t277 = m__3 * t274;
      t280 = V_y58KN_1 * t13;
      t285 = l__2 * V_y58KN_1 * t7;
      t290 = V_y58KN_2 * t16;
      t299 = -8 * t194 * t80 - 2 * t9 * t265 + t275 * t8 + 4 * t277 * t8 - t62 * t280 - 4 * t68 * t280 + 4 * t285 * t74 - 2 * t62 * t290 - 8 * t68 * t290 - 4 * t82 * t85;
      t302 = t259 * t271 * t269 * t299;
      t305 = t7 * t3;
      t312 = t24 * t6;
      t321 = lambda * t6;
      t322 = t27 * t24;
      t329 = 8 * g * t125 * t312 + 4 * m__2 * t321 * t322 + 8 * m__3 * t321 * t322 + 8 * t130 * t312 + t132 + t136 + t155 + t158 + t167 + t170 + t181;
      t330 = 2 * t134 * t312 + t141 + t144 - t148 - t150 + t162 - t175 + t178 + t329 + t96 + t99;
      t331 = t330 * t93;
      t340 = V_y58KN_1 * t6;
      t344 = t51 * t330;
      t353 = 2 * m__2 * t26 * t344 + 4 * m__3 * t26 * t344 + t105 * t340 + 2 * t108 * t340 + 2 * t321 * V_y58KN_1 + t203 + t207 + t210 + t213 - t217 - t220 - t224 - t231 - t236;
      t363 = t275 * t305 + t55 + 4 * t277 * t305 + t58 - t67 - t73 + 4 * t285 * t3 * J__2 + t79 - t89 - 2 * t186 * t331 - 8 * t191 * t331 - 8 * t51 * t330 * t25 * t80 - 2 * t9 * t3 * (-l__2 * t21 * t353 + t260) + 2 * t9 * t6 * V_y58KN_3 - t267;
      t366 = t3 ^ 2;
      t374 = V_y58KN_1 * omega__1 * t11;
      t383 = t30 * omega__1;
      t384 = t24 * t383;
      t392 = 16 * t35 * t384 * t61 + 4 * t139 * t384 + 16 * t142 * t384;
      t393 = t392 * t93;
      t406 = t51 * t392;
      t421 = omega__2 * t6;
      t430 = t30 * omega__2;
      t437 = J__2 * omega__2;
      t438 = l__2 * t30;
      t445 = 8 * m__2 * t437 * t438 + 16 * m__3 * t437 * t438 + 12 * t160 * t430 + 2 * t430 * t95 + 16 * t430 * t97;
      t446 = t445 * t93;
      t455 = t51 * t445;
      t470 = t24 * t3;
      t475 = t27 * t16;
      t481 = 2 * m__2 * t475 + 8 * m__3 * t475 - 4 * t46 * t470 - 8 * t47 * t470 + 8 * t80;
      t482 = t481 * t93;
      t491 = t51 * t481;
      out_5 = theta__1_dot * (-t268 * t269 * t272 + t302) + theta__2_dot * (-t272 * t269 * t363 - t6 * t272 / t366 * t299 + t302) - omega__1_dot * t272 * t269 * (-2 * t62 * t374 - 8 * t68 * t374 - 8 * omega__1 * V_y58KN_1 * l__1 * t85 - 2 * t186 * t393 - 8 * t191 * t393 - 8 * t51 * t392 * t25 * t80 + 2 * t3 * (2 * m__2 * t26 * t406 + 4 * m__3 * t26 * t406 + 2 * t202 * t383 + 4 * t208 * t383) * t27) - omega__2_dot * t272 * t269 * (2 * t275 * t421 + 8 * t277 * t421 + 8 * omega__2 * V_y58KN_1 * l__2 * t74 - 2 * t186 * t446 - 8 * t191 * t446 - 8 * t51 * t445 * t25 * t80 + 2 * t3 * (2 * m__2 * t26 * t455 + 4 * m__3 * t26 * t455) * t27) - lambda_dot * t272 * t269 * (-2 * t186 * t482 - 8 * t191 * t482 - 8 * t51 * t481 * t25 * t80 + 2 * t3 * (2 * m__2 * t26 * t491 + 4 * m__3 * t26 * t491 - 2 * t243) * t27);

      % Store outputs
      out_F = zeros(5, 1);
      out_F(1) = out_1;
      out_F(2) = out_2;
      out_F(3) = out_3;
      out_F(4) = out_4;
      out_F(5) = out_5;
    end % F
    %
    % - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    %
    function out_JF_x = JF_x( this, in_1, in_2, in_3, ~ )
      % Evaluate the Jacobian of F with respect to x.

      % Extract properties
      l__1 = this.m_l__1;
      l__2 = this.m_l__2;
      m__1 = this.m_m__1;
      m__2 = this.m_m__2;
      m__3 = this.m_m__3;
      g = this.m_g;
      J__2 = this.m_J__2;

      % Extract inputs
      theta__1 = in_1(1);
      theta__2 = in_1(2);
      omega__1 = in_1(3);
      omega__2 = in_1(4);
      lambda = in_1(5);
      theta__1_dot = in_2(1);
      theta__2_dot = in_2(2);
      omega__1_dot = in_2(3);
      omega__2_dot = in_2(4);
      lambda_dot = in_2(5);
      V_y58KN_1 = in_3(1);
      V_y58KN_2 = in_3(2);
      V_y58KN_3 = in_3(3);

      % Evaluate function
      t1 = cos(theta__1);
      t2 = omega__1 ^ 2;
      t3 = t2 * t1;
      t4 = l__1 * V_y58KN_1;
      t6 = sin(theta__1);
      t11 = 0.1e1 / V_y58KN_1;
      out_4_1 = -t11 * (-2 * V_y58KN_2 * l__1 * t6 + t4 * t3);
      t13 = sin(theta__2);
      t14 = omega__2 ^ 2;
      t15 = t14 * t13;
      t16 = theta__2 + theta__1;
      t17 = sin(t16);
      t18 = t17 ^ 2;
      t19 = l__1 ^ 2;
      t20 = t19 * t18;
      t21 = l__2 ^ 2;
      t22 = m__2 ^ 2;
      t23 = t22 * t21;
      t26 = cos(t16);
      t27 = t26 ^ 2;
      t28 = t19 * t27;
      t31 = m__2 * t21;
      t32 = m__3 * t31;
      t37 = m__3 ^ 2;
      t38 = t37 * t21;
      t43 = -8 * t23 * t20 - 32 * t32 * t20 - 32 * t38 * t20 + 8 * t23 * t28 + 32 * t32 * t28 + 32 * t38 * t28;
      t44 = t43 * t15;
      t45 = m__3 * t21;
      t49 = 0.1e1 / (t31 + 4 * t45 + 4 * J__2);
      t50 = t21 * l__2;
      t51 = t50 * t49;
      t52 = m__2 * t51;
      t53 = t52 * t44;
      t54 = m__3 * t51;
      t56 = 4 * t54 * t44;
      t57 = t2 * t6;
      t58 = V_y58KN_1 * t57;
      t59 = t21 * l__1;
      t60 = m__2 * t59;
      t61 = t60 * t58;
      t62 = t19 * t26;
      t67 = m__2 * m__3;
      t74 = 32 * t17 * t67 * t21 * t62 + 8 * t17 * t23 * t62 + 32 * t17 * t38 * t62;
      t75 = t74 * t3;
      t76 = l__1 * t49;
      t77 = t31 * t76;
      t78 = t77 * t75;
      t79 = t43 * t57;
      t80 = t77 * t79;
      t81 = m__3 * t59;
      t83 = 4 * t81 * t58;
      t84 = t45 * t76;
      t86 = 4 * t84 * t75;
      t88 = 4 * t84 * t79;
      t89 = t13 * J__2;
      t90 = t14 * t89;
      t91 = t49 * t43;
      t92 = l__2 * t91;
      t94 = 4 * t92 * t90;
      t95 = t6 * J__2;
      t97 = l__1 * V_y58KN_1 * t2;
      t99 = 4 * t97 * t95;
      t100 = t1 * J__2;
      t102 = t49 * t74;
      t103 = l__1 * t102;
      t105 = 4 * t103 * t2 * t100;
      t106 = t53 + t56 + t61 - t78 - t80 + t83 - t86 - t88 + t94 + t99 - t105;
      t107 = t2 * t95;
      t110 = 4 * l__1 * t91 * t107;
      t111 = V_y58KN_2 * t1;
      t113 = 2 * t60 * t111;
      t114 = t19 * t6;
      t117 = t26 * t14;
      t118 = t22 * t50;
      t119 = t118 * t117;
      t120 = t37 * t50;
      t122 = 8 * t120 * t117;
      t123 = lambda * t6;
      t128 = g * m__2;
      t131 = g * m__3;
      t134 = g * t6;
      t139 = g * m__1;
      t142 = m__1 * t21;
      t143 = m__2 * t142;
      t145 = m__3 * t142;
      t150 = -8 * lambda * t95 - 2 * t31 * t123 - 8 * t45 * t123 - 8 * t128 * t95 - 8 * t131 * t95 - t143 * t134 - 4 * t145 * t134 - 2 * t23 * t134 - 10 * t32 * t134 - 8 * t38 * t134 - 4 * t139 * t95 + t119 + t122;
      t151 = cos(theta__2);
      t152 = t17 * t151;
      t153 = t21 * g;
      t154 = t37 * t153;
      t156 = 8 * t154 * t152;
      t157 = t22 * t153;
      t159 = 2 * t157 * t152;
      t160 = t27 * t2;
      t161 = t22 * t59;
      t163 = 2 * t161 * t160;
      t164 = t37 * t59;
      t166 = 8 * t164 * t160;
      t167 = t18 * t2;
      t169 = 2 * t161 * t167;
      t171 = 8 * t164 * t167;
      t172 = t14 * J__2;
      t173 = l__2 * t26;
      t174 = m__2 * t173;
      t176 = 4 * t174 * t172;
      t177 = m__3 * t173;
      t179 = 8 * t177 * t172;
      t180 = m__2 * t50;
      t181 = m__3 * t180;
      t183 = 6 * t181 * t117;
      t184 = lambda * t151;
      t185 = t21 * t17;
      t186 = m__3 * t185;
      t188 = 8 * t186 * t184;
      t189 = m__2 * t185;
      t191 = 4 * t189 * t184;
      t194 = 8 * t32 * l__1 * t167;
      t197 = 8 * t32 * l__1 * t160;
      t200 = 8 * t32 * g * t152;
      t201 = t156 + t159 + t163 + t166 - t169 - t171 + t176 + t179 + t183 + t188 + t191 - t194 + t197 + t200;
      t202 = t150 + t201;
      t203 = t202 * t114;
      t204 = t21 * t49;
      t205 = m__2 * t204;
      t208 = t19 * t1;
      t209 = t17 * t14;
      t211 = 6 * t181 * t209;
      t212 = t26 * t151;
      t213 = t157 * t212;
      t214 = 2 * t213;
      t215 = t21 * t26;
      t216 = m__3 * t215;
      t217 = t216 * t184;
      t218 = 8 * t217;
      t219 = t154 * t212;
      t220 = 8 * t219;
      t221 = l__2 * t17;
      t222 = m__2 * t221;
      t224 = 4 * t222 * t172;
      t225 = m__3 * t221;
      t227 = 8 * t225 * t172;
      t228 = g * t1;
      t234 = m__2 * t215;
      t235 = t234 * t184;
      t236 = 4 * t235;
      t241 = -8 * t128 * t100 - 8 * t131 * t100 - t143 * t228 - 4 * t145 * t228 - 10 * t32 * t228 - t211 + t214 + t218 + t220 - t224 - t227 + t236;
      t242 = t118 * t209;
      t244 = 8 * t120 * t209;
      t249 = lambda * t1;
      t257 = t32 * g * t212;
      t258 = 8 * t257;
      t259 = t17 * t2;
      t260 = t26 * t259;
      t262 = 8 * t161 * t260;
      t264 = 32 * t164 * t260;
      t267 = t67 * t59;
      t269 = 32 * t267 * t260;
      t270 = -8 * lambda * t100 - 4 * t139 * t100 - 2 * t23 * t228 - 8 * t38 * t228 - 2 * t31 * t249 - 8 * t45 * t249 - t242 - t244 + t258 - t262 - t264 - t269;
      t271 = t241 + t270;
      t272 = t271 * t208;
      t276 = 8 * t81 * t111;
      t277 = m__3 * t204;
      t282 = V_y58KN_2 * l__1;
      t284 = 8 * t282 * t100;
      t286 = t49 * t202 * t19;
      t293 = m__2 * t4;
      t294 = t293 * t259;
      t295 = t26 * t2;
      t296 = t74 * t295;
      t297 = m__2 * t76;
      t298 = t297 * t296;
      t299 = t43 * t259;
      t300 = t297 * t299;
      t301 = m__3 * t4;
      t303 = 2 * t301 * t259;
      t304 = m__3 * t76;
      t306 = 2 * t304 * t296;
      t308 = 2 * t304 * t299;
      t309 = t43 * t151;
      t310 = g * t49;
      t311 = m__2 * t310;
      t312 = t311 * t309;
      t313 = m__3 * t310;
      t315 = 2 * t313 * t309;
      t316 = l__1 * t26;
      t317 = V_y58KN_2 * m__2;
      t319 = 2 * t317 * t316;
      t320 = t19 * t17;
      t321 = t49 * t202;
      t322 = m__2 * t321;
      t324 = 2 * t322 * t320;
      t325 = t49 * t271;
      t329 = V_y58KN_2 * m__3;
      t331 = 4 * t329 * t316;
      t332 = m__3 * t321;
      t334 = 4 * t332 * t320;
      t339 = 2 * t91 * t184;
      t340 = 2 * m__2 * t325 * t62 + 4 * m__3 * t325 * t62 - t294 + t298 + t300 - t303 + t306 + t308 - t312 - t315 - t319 - t324 - t331 - t334 - t339;
      t343 = t293 * t295;
      t345 = 2 * t301 * t295;
      t346 = l__1 * t17;
      t348 = 2 * t317 * t346;
      t350 = 4 * t329 * t346;
      t353 = V_y58KN_1 ^ 2;
      t354 = 0.1e1 / t353;
      t355 = t74 * t354;
      t356 = t49 * t355;
      t357 = t356 * (t343 + t345 - t348 - t350) * l__2;
      t358 = V_y58KN_1 * t151;
      t359 = t128 * t358;
      t361 = 2 * t131 * t358;
      t363 = 2 * V_y58KN_1 * t184;
      t365 = (t294 + t303 - t359 - t361 + t319 + t331 - t363) * l__2;
      t367 = t49 * t43 * t354;
      t368 = t367 * t365;
      t371 = l__2 * V_y58KN_1;
      t374 = t151 * V_y58KN_3;
      t376 = 2 * t92 * t374;
      t377 = -t110 + t113 + 2 * t205 * t203 - 2 * t205 * t272 + t276 + 8 * t277 * t203 - 8 * t277 * t272 + t284 + 8 * t286 * t95 - 8 * t49 * t271 * t19 * t100 - 2 * t371 * t151 * (-t11 * t340 * l__2 + t357 + t368) - t376;
      t379 = 0.1e1 / t151;
      t381 = 0.1e1 / l__2;
      t382 = t11 * t381;
      t384 = V_y58KN_1 * t3;
      t385 = t60 * t384;
      t387 = 4 * t81 * t384;
      t389 = 4 * t97 * t100;
      t390 = V_y58KN_2 * t6;
      t392 = 2 * t60 * t390;
      t394 = 8 * t81 * t390;
      t396 = 8 * t282 * t95;
      t397 = -t385 - t387 - t389 + t392 + t394 + t396;
      t400 = t356 * t381 * t379 * t397;
      t401 = t50 * V_y58KN_1;
      t402 = m__2 * t401;
      t403 = t402 * t15;
      t404 = m__3 * t401;
      t406 = 4 * t404 * t15;
      t408 = l__2 * V_y58KN_1 * t14;
      t410 = 4 * t408 * t89;
      t412 = 2 * t371 * t374;
      t413 = t403 + t406 - t61 - t83 + t410 - t99 - t113 - t276 - t284 - t412;
      t414 = t379 * t413;
      t416 = t367 * t381 * t414;
      t419 = t26 * t13;
      t428 = lambda * t13;
      t433 = 8 * t32 * g * t419 + 8 * t154 * t419 + 8 * t216 * t428 + 4 * t234 * t428 + t156 + t159 + t176 + t179 + t188 + t191 + t200;
      t434 = 2 * t157 * t419 + t119 + t122 + t163 + t166 - t169 - t171 + t183 - t194 + t197 + t433;
      t435 = t434 * t114;
      t438 = t17 * t13;
      t439 = t157 * t438;
      t442 = t32 * g * t438;
      t444 = t154 * t438;
      t446 = t189 * t428;
      t448 = t186 * t428;
      t450 = -t262 - t269 - t264 - t242 - t211 - t244 - 2 * t439 + t214 - 8 * t442 + t258 - 8 * t444 + t220 - t224 - t227 - 4 * t446 + t236 - 8 * t448 + t218;
      t451 = t450 * t208;
      t453 = 2 * t205 * t451;
      t457 = 8 * t277 * t451;
      t459 = t49 * t434 * t19;
      t465 = 8 * t49 * t450 * t19 * t100;
      t466 = t49 * t434;
      t467 = m__2 * t466;
      t469 = 2 * t467 * t320;
      t470 = t49 * t450;
      t473 = 2 * m__2 * t470 * t62;
      t474 = m__3 * t466;
      t476 = 4 * t474 * t320;
      t479 = 4 * m__3 * t470 * t62;
      t480 = -t294 + t298 + t300 - t303 + t306 + t308 - t312 - t315 - t319 - t469 + t473 - t331 - t476 + t479 - t339;
      t487 = t53 + t56 - t78 - t80 - t86 - t88 + t94 - t105 - t110 + 2 * t205 * t435 - t453 + 8 * t277 * t435 - t457 + 8 * t459 * t95 - t465 - 2 * t371 * t151 * (-t11 * t480 * l__2 + t357 + t368) - t376;
      t490 = t151 ^ 2;
      t491 = 0.1e1 / t490;
      t493 = t13 * t382;
      t498 = V_y58KN_1 * omega__1 * t1;
      t500 = 2 * t60 * t498;
      t502 = 8 * t81 * t498;
      t504 = omega__1 * V_y58KN_1 * l__1;
      t506 = 8 * t504 * t100;
      t507 = t17 * omega__1;
      t508 = t26 * t507;
      t515 = 4 * t161 * t508 + 16 * t164 * t508 + 16 * t267 * t508;
      t516 = t515 * t114;
      t519 = t27 * omega__1;
      t522 = t18 * omega__1;
      t535 = 16 * t32 * l__1 * t519 - 16 * t32 * l__1 * t522 + 4 * t161 * t519 - 4 * t161 * t522 + 16 * t164 * t519 - 16 * t164 * t522;
      t536 = t535 * t208;
      t538 = 2 * t205 * t536;
      t542 = 8 * t277 * t536;
      t544 = t49 * t515 * t19;
      t550 = 8 * t49 * t535 * t19 * t100;
      t551 = t26 * omega__1;
      t553 = 2 * t293 * t551;
      t555 = 4 * t301 * t551;
      t556 = t49 * t515;
      t557 = m__2 * t556;
      t560 = t49 * t535;
      t563 = 2 * m__2 * t560 * t62;
      t564 = m__3 * t556;
      t569 = 4 * m__3 * t560 * t62;
      t573 = 2 * t151 * (-2 * t557 * t320 - 4 * t564 * t320 + t553 + t555 + t563 + t569) * t21;
      t576 = omega__1_dot * t382;
      t578 = t17 * omega__2;
      t585 = J__2 * omega__2;
      t590 = 2 * t118 * t578 + 16 * t120 * t578 + 12 * t181 * t578 + 8 * t222 * t585 + 16 * t225 * t585;
      t591 = t590 * t114;
      t594 = t26 * omega__2;
      t605 = 2 * t118 * t594 + 16 * t120 * t594 + 8 * t174 * t585 + 16 * t177 * t585 + 12 * t181 * t594;
      t606 = t605 * t208;
      t608 = 2 * t205 * t606;
      t612 = 8 * t277 * t606;
      t614 = t49 * t590 * t19;
      t620 = 8 * t49 * t605 * t19 * t100;
      t621 = t49 * t590;
      t622 = m__2 * t621;
      t625 = t49 * t605;
      t628 = 2 * m__2 * t625 * t62;
      t629 = m__3 * t621;
      t634 = 4 * m__3 * t625 * t62;
      t638 = 2 * t151 * (-2 * t622 * t320 - 4 * t629 * t320 + t628 + t634) * t21;
      t641 = omega__2_dot * t382;
      t647 = t21 * t1;
      t653 = 2 * m__2 * t647 + 8 * m__3 * t647 - 4 * t31 * t212 - 8 * t45 * t212 + 8 * t100;
      t654 = t653 * t114;
      t658 = 4 * t31 * t152;
      t660 = 8 * t45 * t152;
      t661 = t21 * t6;
      t667 = -2 * m__2 * t661 - 8 * m__3 * t661 + t658 + t660 - 8 * t95;
      t668 = t667 * t208;
      t670 = 2 * t205 * t668;
      t674 = 8 * t277 * t668;
      t676 = t49 * t653 * t19;
      t682 = 8 * t49 * t667 * t19 * t100;
      t683 = t49 * t653;
      t684 = m__2 * t683;
      t686 = 2 * t684 * t320;
      t687 = t49 * t667;
      t690 = 2 * m__2 * t687 * t62;
      t691 = m__3 * t683;
      t693 = 4 * t691 * t320;
      t696 = 4 * m__3 * t687 * t62;
      t703 = lambda_dot * t382;
      out_5_1 = theta__1_dot * (-t382 * t379 * (t106 + t377) + t400 + t416) + theta__2_dot * (-t382 * t379 * t487 - t493 * t491 * t397 + t400 + t416) - t576 * t379 * (2 * t205 * t516 + 8 * t277 * t516 + 8 * t544 * t95 - t500 - t502 - t506 - t538 - t542 - t550 + t573) - t641 * t379 * (2 * t205 * t591 + 8 * t277 * t591 + 8 * t614 * t95 - t608 - t612 - t620 + t638) - t703 * t379 * (2 * t205 * t654 - t670 + 8 * t277 * t654 - t674 + 8 * t676 * t95 - t682 + 2 * t151 * (-t686 + t690 - t693 + t696) * t21);
      t707 = t14 * t151;
      out_4_2 = omega__2_dot * l__2 * t13 + l__2 * t707;
      t709 = t74 * t707;
      t710 = t52 * t709;
      t712 = 4 * t54 * t709;
      t713 = t151 * J__2;
      t715 = l__2 * t102;
      t717 = 4 * t715 * t14 * t713;
      t718 = t74 * t13;
      t719 = t311 * t718;
      t721 = 2 * t313 * t718;
      t723 = 2 * t102 * t428;
      t724 = -t294 + t298 + t300 - t303 + t306 + t308 + t719 - t312 + t721 - t315 - t319 - t324 + t473 - t331 - t334 + t479 + t723 - t339;
      t727 = V_y58KN_1 * t13;
      t728 = t128 * t727;
      t730 = 2 * t131 * t727;
      t732 = 2 * V_y58KN_1 * t428;
      t735 = t356 * (t343 + t345 + t728 + t730 - t348 - t350 + t732) * l__2;
      t740 = t74 * t259;
      t741 = t297 * t740;
      t743 = 2 * t304 * t740;
      t744 = t74 * t151;
      t745 = t311 * t744;
      t747 = 2 * t313 * t744;
      t753 = 2 * t102 * t184;
      t754 = 2 * t322 * t62 + 4 * t332 * t62 + t343 + t345 - t348 - t350 + t741 + t743 - t745 - t747 - t753;
      t757 = t356 * t365;
      t758 = -t11 * t754 * l__2 + t757;
      t762 = t13 * V_y58KN_3;
      t764 = 2 * t715 * t762;
      t765 = t710 + t53 + t712 + t56 - t80 - t88 + t717 + t94 - t110 - t453 - t457 - t465 - 2 * t371 * t151 * (-t11 * t724 * l__2 + t368 + t735) + 2 * t371 * t13 * t758 + t764 - t376;
      t768 = t74 * t15;
      t769 = t52 * t768;
      t771 = 4 * t54 * t768;
      t772 = t74 * t57;
      t773 = t77 * t772;
      t775 = 4 * t84 * t772;
      t777 = 4 * t715 * t90;
      t779 = 4 * t103 * t107;
      t780 = t202 * t208;
      t791 = 2 * t715 * t374;
      t792 = -2 * t371 * t151 * t758 - 8 * t286 * t100 - 2 * t205 * t780 - 8 * t277 * t780 - t385 - t387 - t389 + t392 + t394 + t396 + t769 + t771 - t773 - t775 + t777 - t779 - t791;
      t795 = t402 * t707;
      t797 = 4 * t404 * t707;
      t799 = 4 * t408 * t713;
      t801 = 2 * t371 * t762;
      t802 = t795 + t797 + t799 + t801;
      t805 = t356 * t381 * t379 * t802;
      t810 = t13 * t49 * t355 * t381 * t491 * t413;
      t823 = -t242 - t244 + 16 * t257 - 16 * t442 - t262 - t264 - 8 * t446 - t211 + 4 * t213 - 4 * t439 + 16 * t217 - 16 * t448 + 16 * t219 - 16 * t444 - t224 - t227 + 8 * t235 - t269;
      t824 = t823 * t208;
      t834 = t49 * t823;
      t841 = 2 * m__2 * t834 * t62 + 4 * m__3 * t834 * t62 - t315 - t319 - t331 - t339 + t363 - t469 - t476 + t721 + t723;
      t853 = 2 * t467 * t62 + 4 * t474 * t62 + t343 + t345 - t348 - t350 + t728 + t730 + t732 + t741 + t743 - t745 - t747 - t753;
      t856 = -t11 * t853 * l__2 + t757;
      t860 = -t403 + t710 + t53 - t406 + t712 + t56 - t80 - t88 - t410 + t717 + t94 - t110 - 2 * t205 * t824 - 8 * t277 * t824 - 8 * t49 * t823 * t19 * t100 - 2 * t371 * t151 * (-t11 * (-t294 + t298 + t300 - t303 + t306 + t308 + t359 + t719 - t312 + t361 + t841) * l__2 + t735 + t368) + 2 * t371 * t13 * t856 + t412 + t764 - t376;
      t863 = t434 * t208;
      t873 = -2 * t371 * t151 * t856 - 8 * t459 * t100 - 2 * t205 * t863 - 8 * t277 * t863 + t769 + t771 - t773 - t775 + t777 - t779 - t791 + t795 + t797 + t799 + t801;
      t881 = t13 ^ 2;
      t889 = 2 * t293 * t507;
      t891 = 4 * t301 * t507;
      t897 = (2 * t557 * t62 + 4 * t564 * t62 + t889 + t891) * t21;
      t903 = omega__1 * t6;
      t904 = V_y58KN_1 * t903;
      t906 = 2 * t60 * t904;
      t908 = 8 * t81 * t904;
      t910 = 8 * t504 * t95;
      t911 = t515 * t208;
      t926 = omega__2 * t151;
      t928 = 2 * t402 * t926;
      t930 = 8 * t404 * t926;
      t932 = omega__2 * V_y58KN_1 * l__2;
      t934 = 8 * t932 * t713;
      t940 = (2 * t622 * t62 + 4 * t629 * t62) * t21;
      t946 = omega__2 * t13;
      t948 = 2 * t402 * t946;
      t950 = 8 * t404 * t946;
      t952 = 8 * t932 * t89;
      t953 = t590 * t208;
      t972 = 4 * t31 * t419 + 8 * t45 * t419 + t658 + t660;
      t973 = t972 * t208;
      t975 = 2 * t205 * t973;
      t977 = 8 * t277 * t973;
      t981 = 8 * t49 * t972 * t19 * t100;
      t982 = t49 * t972;
      t985 = 2 * m__2 * t982 * t62;
      t988 = 4 * m__3 * t982 * t62;
      t989 = 2 * t727;
      t1000 = (2 * t684 * t62 + 4 * t691 * t62 - 2 * t358) * t21;
      t1006 = t653 * t208;
      out_5_2 = theta__1_dot * (-t382 * t379 * t765 - t493 * t491 * t792 + t416 + t805 + t810) + theta__2_dot * (-t382 * t379 * t860 - t493 * t491 * t873 - t493 * t491 * t802 - 2 * t881 * t382 / t490 / t151 * t413 - t382 * t414 + t805 + t810 + t416) - t576 * t379 * (-2 * t13 * t897 - t538 - t542 - t550 + t573) - t13 * omega__1_dot * t11 * t381 * t491 * (-8 * t544 * t100 + 2 * t151 * t897 - 2 * t205 * t911 - 8 * t277 * t911 - t906 - t908 - t910) - t641 * t379 * (-2 * t13 * t940 - t608 - t612 - t620 + t638 + t928 + t930 + t934) - t13 * omega__2_dot * t11 * t381 * t491 * (-8 * t614 * t100 + 2 * t151 * t940 - 2 * t205 * t953 - 8 * t277 * t953 + t948 + t950 + t952) - t703 * t379 * (-t975 - t977 - t981 + 2 * t151 * (-t686 + t985 - t693 + t988 + t989) * t21 - 2 * t13 * t1000) - t13 * lambda_dot * t11 * t381 * t491 * (-8 * t676 * t100 + 2 * t151 * t1000 - 2 * t205 * t1006 - 8 * t277 * t1006);
      out_1_3 = -1;
      out_4_3 = -2 * l__1 * t903;
      t1023 = t74 * t903;
      t1025 = 2 * t77 * t1023;
      t1027 = 8 * t84 * t1023;
      t1030 = 8 * t103 * omega__1 * t95;
      t1031 = t74 * t507;
      t1045 = 2 * t371 * t151 * (-t11 * (2 * t297 * t1031 + 4 * t304 * t1031 + t553 + t555 + t563 + t569) * l__2 + t356 * (t889 + t891) * l__2);
      t1049 = -t906 - t908 - t910;
      t1052 = t356 * t381 * t379 * t1049;
      t1062 = V_y58KN_1 * t6;
      t1069 = t26 * t17;
      t1077 = 16 * t32 * l__1 * t1069 + 4 * t161 * t1069 + 16 * t164 * t1069;
      t1078 = t1077 * t208;
      t1087 = V_y58KN_1 * t17;
      t1094 = t49 * t1077;
      out_5_3 = theta__1_dot * (-t382 * t379 * (-t500 - t1025 - t502 - t1027 - t506 - t1030 - t538 - t542 - t550 - t1045) + t1052) + theta__2_dot * (-t382 * t379 * (-t1025 - t1027 - t1030 - t538 - t542 - t550 - t1045) - t493 * t491 * t1049 + t1052) - t576 * t379 * (-2 * t60 * t1062 - 8 * t81 * t1062 - 8 * t4 * t95 - 2 * t205 * t1078 - 8 * t277 * t1078 - 8 * t49 * t1077 * t19 * t100 + 2 * t151 * (2 * l__1 * m__2 * t1087 + 4 * l__1 * m__3 * t1087 + 2 * m__2 * t1094 * t62 + 4 * m__3 * t1094 * t62) * t21);
      out_2_4 = -1;
      out_4_4 = 2 * l__2 * t946;
      t1109 = t74 * t946;
      t1111 = 2 * t52 * t1109;
      t1113 = 8 * t54 * t1109;
      t1116 = 8 * t715 * omega__2 * t89;
      t1120 = 2 * t151 * (t628 + t634) * t21;
      t1124 = t948 + t950 + t952;
      t1127 = t356 * t381 * t379 * t1124;
      t1144 = t50 * t17;
      t1151 = t17 * J__2;
      t1158 = 8 * l__2 * m__2 * t1151 + 16 * l__2 * m__3 * t1151 + 2 * t22 * t1144 + 16 * t37 * t1144 + 12 * t67 * t1144;
      t1159 = t1158 * t208;
      t1168 = t49 * t1158;
      out_5_4 = theta__1_dot * (-t382 * t379 * (t1111 + t1113 + t1116 - t608 - t612 - t620 + t1120) + t1127) + theta__2_dot * (-t382 * t379 * (t928 + t1111 + t930 + t1113 + t934 + t1116 - t608 - t612 - t620 + t1120) - t493 * t491 * t1124 + t1127) - t641 * t379 * (2 * t180 * t727 + 8 * m__3 * t50 * t727 + 8 * t371 * t89 - 2 * t205 * t1159 - 8 * t277 * t1159 - 8 * t49 * t1158 * t19 * t100 + 2 * t151 * (2 * m__2 * t1168 * t62 + 4 * m__3 * t1168 * t62) * t21);
      t1183 = 2 * t49 * t744;
      t1191 = 2 * t49 * t74 * t11 * t151 * l__2;
      out_5_5 = -theta__1_dot * t382 * t379 * (-t670 - t674 - t682 - 2 * t371 * t151 * (-t11 * (t690 + t696 - t1183) * l__2 - t1191)) - theta__2_dot * t382 * t379 * (-t975 - t977 - t981 - 2 * t371 * t151 * (-t11 * (t985 + t988 + t989 - t1183) * l__2 - t1191));

      % Store outputs
      out_JF_x = zeros(5, 5);
      out_JF_x(4, 1) = out_4_1;
      out_JF_x(5, 1) = out_5_1;
      out_JF_x(4, 2) = out_4_2;
      out_JF_x(5, 2) = out_5_2;
      out_JF_x(1, 3) = out_1_3;
      out_JF_x(4, 3) = out_4_3;
      out_JF_x(5, 3) = out_5_3;
      out_JF_x(2, 4) = out_2_4;
      out_JF_x(4, 4) = out_4_4;
      out_JF_x(5, 4) = out_5_4;
      out_JF_x(5, 5) = out_5_5;
    end % JF_x
    %
    % - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    %
    function out_JF_x_dot = JF_x_dot( this, in_1, ~, in_3, ~ )
      % Evaluate the Jacobian of F with respect to x_dot.

      % Extract properties
      l__1 = this.m_l__1;
      l__2 = this.m_l__2;
      m__1 = this.m_m__1;
      m__2 = this.m_m__2;
      m__3 = this.m_m__3;
      g = this.m_g;
      J__2 = this.m_J__2;

      % Extract inputs
      theta__1 = in_1(1);
      theta__2 = in_1(2);
      omega__1 = in_1(3);
      omega__2 = in_1(4);
      lambda = in_1(5);
      V_y58KN_1 = in_3(1);
      V_y58KN_2 = in_3(2);
      V_y58KN_3 = in_3(3);

      % Evaluate function
      out_1_1 = 1;
      t1 = sin(theta__2);
      t2 = omega__2 ^ 2;
      t3 = t2 * t1;
      t4 = theta__2 + theta__1;
      t5 = cos(t4);
      t6 = l__1 ^ 2;
      t7 = t6 * t5;
      t8 = l__2 ^ 2;
      t9 = m__2 ^ 2;
      t10 = t9 * t8;
      t11 = sin(t4);
      t16 = m__2 * m__3;
      t20 = m__3 ^ 2;
      t21 = t20 * t8;
      t25 = 32 * t11 * t16 * t8 * t7 + 8 * t11 * t10 * t7 + 32 * t11 * t21 * t7;
      t26 = t25 * t3;
      t27 = m__2 * t8;
      t28 = m__3 * t8;
      t32 = 0.1e1 / (t27 + 4 * t28 + 4 * J__2);
      t33 = t8 * l__2;
      t34 = t33 * t32;
      t36 = m__2 * t34 * t26;
      t39 = 4 * m__3 * t34 * t26;
      t40 = cos(theta__1);
      t41 = omega__1 ^ 2;
      t43 = V_y58KN_1 * t41 * t40;
      t44 = t8 * l__1;
      t45 = m__2 * t44;
      t47 = sin(theta__1);
      t48 = t41 * t47;
      t49 = t25 * t48;
      t50 = l__1 * t32;
      t52 = t27 * t50 * t49;
      t53 = m__3 * t44;
      t58 = 4 * t28 * t50 * t49;
      t59 = t1 * J__2;
      t61 = t32 * t25;
      t62 = l__2 * t61;
      t64 = 4 * t62 * t2 * t59;
      t65 = t40 * J__2;
      t67 = l__1 * V_y58KN_1 * t41;
      t70 = t47 * J__2;
      t74 = 4 * l__1 * t61 * t41 * t70;
      t75 = V_y58KN_2 * t47;
      t78 = t6 * t40;
      t79 = t5 * t2;
      t80 = t9 * t33;
      t81 = t80 * t79;
      t82 = t20 * t33;
      t84 = 8 * t82 * t79;
      t85 = lambda * t47;
      t90 = g * m__2;
      t93 = g * m__3;
      t96 = g * t47;
      t106 = t11 ^ 2;
      t107 = t106 * t41;
      t109 = m__3 * t27;
      t111 = 8 * t109 * l__1 * t107;
      t112 = t5 ^ 2;
      t113 = t112 * t41;
      t116 = 8 * t109 * l__1 * t113;
      t117 = cos(theta__2);
      t118 = t11 * t117;
      t121 = 8 * t109 * g * t118;
      t122 = -4 * g * m__1 * t70 - 8 * lambda * t70 - 2 * t10 * t96 - 8 * t21 * t96 - 2 * t27 * t85 - 8 * t28 * t85 - 8 * t90 * t70 - 8 * t93 * t70 - t111 + t116 + t121 + t81 + t84;
      t123 = m__1 * t8;
      t131 = t8 * g;
      t132 = t20 * t131;
      t134 = 8 * t132 * t118;
      t135 = t9 * t131;
      t137 = 2 * t135 * t118;
      t138 = t9 * t44;
      t140 = 2 * t138 * t113;
      t141 = t20 * t44;
      t143 = 8 * t141 * t113;
      t145 = 2 * t138 * t107;
      t147 = 8 * t141 * t107;
      t148 = t2 * J__2;
      t149 = l__2 * t5;
      t152 = 4 * m__2 * t149 * t148;
      t155 = 8 * m__3 * t149 * t148;
      t157 = m__3 * m__2 * t33;
      t159 = 6 * t157 * t79;
      t160 = lambda * t117;
      t161 = t8 * t11;
      t164 = 8 * m__3 * t161 * t160;
      t167 = 4 * m__2 * t161 * t160;
      t168 = -m__2 * t123 * t96 - 4 * m__3 * t123 * t96 - 10 * t109 * t96 + t134 + t137 + t140 + t143 - t145 - t147 + t152 + t155 + t159 + t164 + t167;
      t169 = t122 + t168;
      t170 = t169 * t78;
      t171 = t8 * t32;
      t172 = m__2 * t171;
      t177 = m__3 * t171;
      t180 = V_y58KN_2 * l__1;
      t187 = t5 * t41;
      t188 = l__1 * V_y58KN_1;
      t189 = m__2 * t188;
      t190 = t189 * t187;
      t191 = t11 * t41;
      t192 = t25 * t191;
      t194 = m__2 * t50 * t192;
      t195 = m__3 * t188;
      t197 = 2 * t195 * t187;
      t200 = 2 * m__3 * t50 * t192;
      t201 = t25 * t117;
      t202 = g * t32;
      t204 = m__2 * t202 * t201;
      t207 = 2 * m__3 * t202 * t201;
      t208 = l__1 * t11;
      t209 = V_y58KN_2 * m__2;
      t211 = 2 * t209 * t208;
      t212 = t32 * t169;
      t216 = V_y58KN_2 * m__3;
      t218 = 4 * t216 * t208;
      t223 = 2 * t61 * t160;
      t224 = 2 * m__2 * t212 * t7 + 4 * m__3 * t212 * t7 + t190 + t194 + t197 + t200 - t204 - t207 - t211 - t218 - t223;
      t226 = 0.1e1 / V_y58KN_1;
      t231 = V_y58KN_1 * t117;
      t235 = l__1 * t5;
      t244 = V_y58KN_1 ^ 2;
      t247 = t32 * t25 / t244;
      t248 = t247 * (-2 * V_y58KN_1 * t160 + t189 * t191 + 2 * t195 * t191 + 2 * t209 * t235 + 4 * t216 * t235 - t90 * t231 - 2 * t93 * t231) * l__2;
      t251 = l__2 * V_y58KN_1;
      t254 = t117 * V_y58KN_3;
      t256 = 2 * t62 * t254;
      t257 = t36 + t39 - t45 * t43 - t52 - 4 * t53 * t43 - t58 + t64 - 4 * t67 * t65 - t74 + 2 * t45 * t75 - 2 * t172 * t170 + 8 * t53 * t75 - 8 * t177 * t170 + 8 * t180 * t70 - 8 * t32 * t169 * t6 * t65 - 2 * t251 * t117 * (-t226 * t224 * l__2 + t248) - t256;
      t258 = 0.1e1 / t117;
      t260 = 0.1e1 / l__2;
      t261 = t226 * t260;
      t263 = t33 * V_y58KN_1;
      t264 = m__2 * t263;
      t266 = m__3 * t263;
      t269 = V_y58KN_1 * t48;
      t274 = l__2 * V_y58KN_1 * t2;
      t279 = V_y58KN_2 * t40;
      t288 = -8 * t180 * t65 - 2 * t251 * t254 + t264 * t3 + 4 * t266 * t3 - t45 * t269 - 4 * t53 * t269 + 4 * t274 * t59 - 2 * t45 * t279 - 8 * t53 * t279 - 4 * t67 * t70;
      t291 = t247 * t260 * t258 * t288;
      out_5_1 = -t257 * t258 * t261 + t291;
      out_2_2 = 1;
      t292 = t2 * t117;
      t299 = t5 * t1;
      t308 = lambda * t1;
      t309 = t8 * t5;
      t316 = 8 * g * t109 * t299 + 4 * m__2 * t308 * t309 + 8 * m__3 * t308 * t309 + 8 * t132 * t299 + t121 + t134 + t137 + t152 + t155 + t164 + t167;
      t317 = 2 * t135 * t299 - t111 + t116 + t140 + t143 - t145 - t147 + t159 + t316 + t81 + t84;
      t318 = t317 * t78;
      t327 = V_y58KN_1 * t1;
      t331 = t32 * t317;
      t340 = 2 * m__2 * t331 * t7 + 4 * m__3 * t331 * t7 + 2 * t308 * V_y58KN_1 + t327 * t90 + 2 * t327 * t93 + t190 + t194 + t197 + t200 - t204 - t207 - t211 - t218 - t223;
      t350 = t264 * t292 + t36 + 4 * t266 * t292 + t39 - t52 - t58 + 4 * t274 * t117 * J__2 + t64 - t74 - 2 * t172 * t318 - 8 * t177 * t318 - 8 * t32 * t317 * t6 * t65 - 2 * t251 * t117 * (-l__2 * t226 * t340 + t248) + 2 * t251 * t1 * V_y58KN_3 - t256;
      t353 = t117 ^ 2;
      out_5_2 = -t261 * t258 * t350 - t1 * t261 / t353 * t288 + t291;
      out_3_3 = V_y58KN_1;
      t359 = V_y58KN_1 * omega__1 * t47;
      t368 = t11 * omega__1;
      t369 = t5 * t368;
      t377 = 16 * t16 * t369 * t44 + 4 * t138 * t369 + 16 * t141 * t369;
      t378 = t377 * t78;
      t391 = t32 * t377;
      out_5_3 = -t261 * t258 * (-2 * t45 * t359 - 8 * t53 * t359 - 8 * omega__1 * V_y58KN_1 * l__1 * t70 - 2 * t172 * t378 - 8 * t177 * t378 - 8 * t32 * t377 * t6 * t65 + 2 * t117 * (2 * m__2 * t391 * t7 + 4 * m__3 * t391 * t7 + 2 * t189 * t368 + 4 * t195 * t368) * t8);
      out_4_4 = -l__2 * t117;
      t406 = omega__2 * t1;
      t415 = t11 * omega__2;
      t422 = J__2 * omega__2;
      t423 = l__2 * t11;
      t430 = 8 * m__2 * t422 * t423 + 16 * m__3 * t422 * t423 + 12 * t157 * t415 + 2 * t415 * t80 + 16 * t415 * t82;
      t431 = t430 * t78;
      t440 = t32 * t430;
      out_5_4 = -t261 * t258 * (2 * t264 * t406 + 8 * t266 * t406 + 8 * omega__2 * V_y58KN_1 * l__2 * t59 - 2 * t172 * t431 - 8 * t177 * t431 - 8 * t32 * t430 * t6 * t65 + 2 * t117 * (2 * m__2 * t440 * t7 + 4 * m__3 * t440 * t7) * t8);
      t454 = t5 * t117;
      t459 = t8 * t40;
      t465 = 2 * m__2 * t459 + 8 * m__3 * t459 - 4 * t27 * t454 - 8 * t28 * t454 + 8 * t65;
      t466 = t465 * t78;
      t475 = t32 * t465;
      out_5_5 = -t261 * t258 * (-2 * t172 * t466 - 8 * t177 * t466 - 8 * t32 * t465 * t6 * t65 + 2 * t117 * (2 * m__2 * t475 * t7 + 4 * m__3 * t475 * t7 - 2 * t231) * t8);

      % Store outputs
      out_JF_x_dot = zeros(5, 5);
      out_JF_x_dot(1, 1) = out_1_1;
      out_JF_x_dot(5, 1) = out_5_1;
      out_JF_x_dot(2, 2) = out_2_2;
      out_JF_x_dot(5, 2) = out_5_2;
      out_JF_x_dot(3, 3) = out_3_3;
      out_JF_x_dot(5, 3) = out_5_3;
      out_JF_x_dot(4, 4) = out_4_4;
      out_JF_x_dot(5, 4) = out_5_4;
      out_JF_x_dot(5, 5) = out_5_5;
    end % JF_x_dot
    %
    % - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    %
    function out_JF_v = JF_v( ~, ~, ~, ~, ~ )
      % Evaluate the Jacobian of F with respect to v.

      % Extract properties
      % No properties

      % Extract inputs

      % Evaluate function
      % No body

      % Store outputs
      out_JF_v = zeros(5, 8);
    end % JF_v
    %
    % - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    %
    function out_v = v( this, in_1, ~ )
      % Evaluate the the veils v.

      % Extract properties
      l__1 = this.m_l__1;
      l__2 = this.m_l__2;
      m__1 = this.m_m__1;
      m__2 = this.m_m__2;
      m__3 = this.m_m__3;
      g = this.m_g;
      J__1 = this.m_J__1;
      J__2 = this.m_J__2;

      % Extract inputs
      theta__1 = in_1(1);
      theta__2 = in_1(2);
      omega__1 = in_1(3);
      omega__2 = in_1(4);
      lambda = in_1(5);

      % Evaluate function
      t1 = l__1 ^ 2;
      t2 = l__2 ^ 2;
      t3 = t2 * t1;
      t4 = 2 * m__3;
      t5 = m__2 + t4;
      t6 = t5 ^ 2;
      t7 = theta__2 + theta__1;
      t8 = cos(t7);
      t9 = t8 ^ 2;
      t16 = t2 * (m__2 / 4 + m__3) + J__2;
      t29 = 0.1e1 / (t2 * (m__2 + 4 * m__3) + 4 * J__2);
      V_y58KN_1 = t29 * (-4 * t9 * t6 * t3 + 16 * (t1 * (m__1 / 4 + m__2 + m__3) + J__1) * t16);
      t30 = omega__1 ^ 2;
      t31 = l__1 * t30;
      t32 = t6 * t2;
      t33 = 2 * t7;
      t34 = sin(t33);
      t38 = 2 * lambda;
      t40 = t5 * g + t38;
      t42 = 2 * theta__2;
      t43 = theta__1 + t42;
      t44 = cos(t43);
      t48 = omega__2 ^ 2;
      t49 = t48 * t16;
      t50 = l__2 * t5;
      t51 = sin(t7);
      t54 = m__3 * t2;
      t58 = m__3 ^ 2;
      t73 = cos(theta__1);
      V_y58KN_2 = 4 * t29 * (t34 * t32 * t31 / 4 - t44 * t2 * t5 * t40 / 4 + t51 * t50 * t49 + t73 * (lambda * (t54 + 2 * J__2) + (t2 * (t58 + (m__1 + 0.3e1 / 0.2e1 * m__2) * m__3 + m__2 * (m__1 + m__2) / 4) + (m__1 + 2 * m__2 + t4) * J__2) * g)) * l__1;
      t84 = cos(theta__2);
      t88 = g * m__2 + 2 * g * m__3 + t38;
      t94 = 0.1e1 / V_y58KN_1;
      V_y58KN_3 = t94 * (-2 * V_y58KN_2 * t5 * l__1 * t8 + (-t51 * t5 * t31 + t88 * t84) * V_y58KN_1) * l__2;
      t101 = sin(theta__1);
      t103 = sin(theta__2);
      t104 = l__2 * t103;
      t113 = 0.1e1 / t84;
      t115 = 0.1e1 / l__2;
      t116 = t94 * t115;
      V_y58KN_4 = t116 * t113 * (8 * l__1 * V_y58KN_2 * t73 * t16 + 2 * (l__2 * V_y58KN_3 * t84 + 2 * t16 * (t101 * t31 - t48 * t104)) * V_y58KN_1);
      t119 = -m__2 * t2 / 4 + J__2;
      t120 = t1 * t119;
      t122 = t5 * t2;
      t123 = 2 * theta__1;
      t124 = 3 * theta__2;
      t126 = sin(t123 + t124);
      t132 = cos(t33);
      t137 = t16 * t1;
      t141 = 4 * theta__2;
      t143 = cos(t141 + t123);
      t149 = t2 ^ 2;
      t152 = 5 * theta__2;
      t154 = sin(t123 + t152);
      t158 = t1 * l__1;
      t159 = t158 * t119;
      t161 = 3 * t7;
      t162 = cos(t161);
      t168 = sin(t161);
      t174 = t6 * t5;
      t176 = 3 * theta__1;
      t177 = t152 + t176;
      t178 = cos(t177);
      t184 = sin(t177);
      t188 = V_y58KN_1 * t16;
      t190 = t54 / 2 + J__2;
      t191 = t190 * t1;
      t192 = t5 * t191;
      t194 = t188 - 2 * t192;
      t196 = theta__1 + t124;
      t197 = sin(t196);
      t201 = V_y58KN_1 * t190 * t16;
      t203 = t149 * t1;
      t204 = t174 * t203;
      t207 = -theta__2 + theta__1;
      t208 = sin(t207);
      t210 = t176 + theta__2;
      t211 = sin(t210);
      t223 = V_y58KN_1 * (t2 * (0.3e1 / 0.4e1 * m__2 + t4) + J__2) * t16 - t32 * t120 / 2;
      t231 = cos(t196);
      t237 = sin(theta__2 + t123);
      t243 = cos(t207);
      t249 = cos(t210);
      t258 = sin(t124);
      t262 = t5 * t48;
      t263 = cos(t123);
      t268 = cos(t42);
      t296 = 0.1e1 / t16;
      t298 = V_y58KN_1 ^ 2;
      V_y58KN_5 = 0.1e1 / t298 * t115 * t296 / (t268 + 1) * (8 * t126 * V_y58KN_1 * t122 * t88 * t120 + 16 * t132 * V_y58KN_1 * t50 * t49 * t120 - 4 * t143 * V_y58KN_1 * t2 * l__2 * t6 * t48 * t137 - 2 * t154 * t88 * t6 * t149 * t1 * V_y58KN_1 + 8 * t162 * V_y58KN_1 * t32 * t30 * t159 - 16 * t168 * t32 * V_y58KN_2 * t159 - 2 * t178 * t174 * t30 * t149 * t158 * V_y58KN_1 + 4 * t184 * t174 * t149 * t158 * V_y58KN_2 + 8 * V_y58KN_2 * l__1 * (t197 * t2 * t5 * t194 + t208 * (-4 * t201 + t204 / 2) - 2 * t211 * t32 * t191 + 4 * t51 * t223) - 4 * V_y58KN_1 * (t231 * t122 * t194 * t31 - 2 * t237 * t122 * t190 * t40 * t1 - 4 * t243 * (t201 - t204 / 8) * t31 - 2 * t249 * t32 * t190 * t30 * t158 + 4 * t8 * t30 * l__1 * t223 + l__2 * (t258 * l__2 * t194 * t88 - 4 * t263 * t262 * t190 * t137 - 4 * t268 * t262 * t16 * t120 + V_y58KN_1 * (t103 * l__2 * t40 + 8 * t49) * t16 - 2 * t5 * (t104 * t190 * t40 + 2 * t48 * t16 * t119) * t1))) / 4;
      t304 = sin(t176 + t42);
      t309 = sin(t176 + t141);
      t315 = sin(t43);
      V_y58KN_6 = 4 * t113 * t296 * t116 * l__1 * omega__1 * (t304 * t3 * t6 * t190 / 4 - t309 * t174 * t203 / 16 - t315 * t2 * t5 * (t188 - t192) / 4 + (t201 - t204 / 16) * t101);
      V_y58KN_7 = -4 * t113 * t94 * omega__2 * (t126 * t6 * t3 / 4 - t237 * t1 * t5 * t190 + t16 * t103 * (-t5 * t1 + V_y58KN_1));
      t343 = t84 ^ 2;
      t357 = t73 ^ 2;
      V_y58KN_8 = t113 * t94 * t296 * t115 * (4 * t9 * t6 * t149 * t1 * t343 - 16 * t8 * t1 * t84 * t16 * t73 * t122 + 4 * t16 * (4 * t1 * t16 * t357 + t2 * V_y58KN_1 * t343)) / 4;

      % Store outputs
      out_v = zeros(8, 1);
      out_v(1) = V_y58KN_1;
      out_v(2) = V_y58KN_2;
      out_v(3) = V_y58KN_3;
      out_v(4) = V_y58KN_4;
      out_v(5) = V_y58KN_5;
      out_v(6) = V_y58KN_6;
      out_v(7) = V_y58KN_7;
      out_v(8) = V_y58KN_8;
    end % v
    %
    % - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    %
    function out_Jv_x = Jv_x( this, in_1, in_2, ~ )
      % Evaluate the Jacobian of v with respect to x.

      % Extract properties
      l__1 = this.m_l__1;
      l__2 = this.m_l__2;
      m__1 = this.m_m__1;
      m__2 = this.m_m__2;
      m__3 = this.m_m__3;
      g = this.m_g;
      J__2 = this.m_J__2;

      % Extract inputs
      theta__1 = in_1(1);
      theta__2 = in_1(2);
      omega__1 = in_1(3);
      omega__2 = in_1(4);
      lambda = in_1(5);
      V_y58KN_1 = in_2(1);
      V_y58KN_2 = in_2(2);
      V_y58KN_3 = in_2(3);

      % Evaluate function
      t1 = l__1 ^ 2;
      t2 = l__2 ^ 2;
      t3 = t2 * t1;
      t4 = 2 * m__3;
      t5 = m__2 + t4;
      t6 = t5 ^ 2;
      t8 = theta__2 + theta__1;
      t9 = cos(t8);
      t10 = sin(t8);
      t17 = 0.1e1 / (t2 * (m__2 + 4 * m__3) + 4 * J__2);
      D_V_y58KN_1_1 = 8 * t17 * t10 * t9 * t6 * t3;
      t20 = omega__1 ^ 2;
      t21 = l__1 * t20;
      t22 = t6 * t2;
      t23 = 2 * t8;
      t24 = cos(t23);
      t27 = t24 * t22 * t21 / 2;
      t28 = 2 * lambda;
      t30 = t5 * g + t28;
      t32 = 2 * theta__2;
      t33 = theta__1 + t32;
      t34 = sin(t33);
      t35 = t34 * t2;
      t36 = t35 * t5 * t30;
      t41 = t2 * (m__2 / 4 + m__3) + J__2;
      t42 = omega__2 ^ 2;
      t43 = t42 * t41;
      t44 = l__2 * t5;
      t46 = t9 * t44 * t43;
      t47 = m__3 * t2;
      t49 = t47 + 2 * J__2;
      t51 = m__3 ^ 2;
      t66 = sin(theta__1);
      D_V_y58KN_2_1 = 4 * t17 * (t27 + t36 / 4 + t46 - t66 * (lambda * t49 + (t2 * (t51 + (m__1 + 0.3e1 / 0.2e1 * m__2) * m__3 + m__2 * (m__1 + m__2) / 4) + (m__1 + 2 * m__2 + t4) * J__2) * g)) * l__1;
      t72 = V_y58KN_2 * t5;
      t74 = 2 * t72 * l__1 * t10;
      t75 = l__1 * t9;
      t81 = cos(theta__2);
      t85 = g * m__2 + 2 * g * m__3 + t28;
      t87 = -t10 * t5 * t21 + t85 * t81;
      t89 = l__1 * V_y58KN_1;
      t95 = 0.1e1 / V_y58KN_1;
      t101 = (-2 * t72 * t75 + t87 * V_y58KN_1) * l__2;
      t102 = V_y58KN_1 ^ 2;
      t103 = 0.1e1 / t102;
      D_V_y58KN_3_1 = t95 * (-t9 * t5 * t20 * t89 - 2 * D_V_y58KN_2_1 * t5 * t75 + t87 * D_V_y58KN_1_1 + t74) * l__2 - D_V_y58KN_1_1 * t103 * t101;
      t106 = t66 * t41;
      t107 = V_y58KN_2 * l__1;
      t110 = cos(theta__1);
      t111 = t110 * t41;
      t118 = sin(theta__2);
      t119 = l__2 * t118;
      t124 = l__2 * V_y58KN_3 * t81 + 2 * t41 * (-t42 * t119 + t66 * t21);
      t135 = 0.1e1 / t81;
      t137 = 0.1e1 / l__2;
      t138 = t95 * t137;
      t144 = 8 * t107 * t111 + 2 * t124 * V_y58KN_1;
      t145 = t135 * t144;
      t146 = t103 * t137;
      D_V_y58KN_4_1 = t138 * t135 * (-8 * t107 * t106 + 8 * l__1 * D_V_y58KN_2_1 * t111 + 2 * t124 * D_V_y58KN_1_1 + 2 * (l__2 * D_V_y58KN_3_1 * t81 + 2 * t111 * t21) * V_y58KN_1) - D_V_y58KN_1_1 * t146 * t145;
      t151 = -m__2 * t2 / 4 + J__2;
      t152 = t1 * t151;
      t153 = t85 * t152;
      t154 = t5 * t2;
      t155 = 2 * theta__1;
      t156 = 3 * theta__2;
      t157 = t155 + t156;
      t158 = sin(t157);
      t163 = cos(t157);
      t166 = t163 * V_y58KN_1 * t154 * t153;
      t168 = t43 * t152;
      t173 = sin(t23);
      t177 = 32 * t173 * V_y58KN_1 * t44 * t168;
      t178 = t41 * t1;
      t179 = t42 * t178;
      t181 = t2 * l__2 * t6;
      t182 = 4 * theta__2;
      t183 = t182 + t155;
      t184 = cos(t183);
      t189 = sin(t183);
      t192 = t189 * V_y58KN_1 * t181 * t179;
      t195 = t2 ^ 2;
      t197 = t85 * t6;
      t198 = 5 * theta__2;
      t199 = t155 + t198;
      t200 = sin(t199);
      t201 = t200 * t197;
      t204 = V_y58KN_1 * t1;
      t205 = t195 * t204;
      t206 = cos(t199);
      t208 = t206 * t197 * t205;
      t210 = t1 * l__1;
      t211 = t210 * t151;
      t212 = t20 * t211;
      t213 = 3 * t8;
      t214 = cos(t213);
      t219 = sin(t213);
      t223 = 24 * t219 * V_y58KN_1 * t22 * t212;
      t225 = t219 * t22;
      t228 = V_y58KN_2 * t211;
      t231 = 48 * t214 * t22 * t228;
      t234 = t6 * t5;
      t235 = t234 * t20;
      t236 = 3 * theta__1;
      t237 = t198 + t236;
      t238 = cos(t237);
      t239 = t238 * t235;
      t243 = t195 * t210 * V_y58KN_1;
      t244 = sin(t237);
      t246 = t244 * t235 * t243;
      t249 = t234 * t195;
      t250 = t244 * t249;
      t253 = t210 * V_y58KN_2;
      t255 = t238 * t249 * t253;
      t257 = D_V_y58KN_1_1 * t41;
      t258 = theta__1 + t156;
      t259 = sin(t258);
      t260 = t259 * t154;
      t262 = V_y58KN_1 * t41;
      t264 = t47 / 2 + J__2;
      t265 = t264 * t1;
      t266 = t5 * t265;
      t268 = t262 - 2 * t266;
      t269 = t5 * t268;
      t270 = cos(t258);
      t271 = t270 * t2;
      t272 = t271 * t269;
      t273 = t264 * t41;
      t274 = -theta__2 + theta__1;
      t275 = sin(t274);
      t279 = V_y58KN_1 * t273;
      t281 = t195 * t1;
      t282 = t234 * t281;
      t284 = -4 * t279 + t282 / 2;
      t285 = cos(t274);
      t287 = t236 + theta__2;
      t288 = cos(t287);
      t289 = t288 * t22;
      t290 = t289 * t265;
      t296 = (t2 * (0.3e1 / 0.4e1 * m__2 + t4) + J__2) * t41;
      t303 = V_y58KN_1 * t296 - t22 * t152 / 2;
      t305 = 4 * t9 * t303;
      t313 = sin(t287);
      t314 = t313 * t22;
      t320 = l__1 * (t259 * t2 * t269 + 4 * t10 * t303 - 2 * t314 * t265 + t275 * t284);
      t323 = t41 * t21;
      t327 = t268 * t21;
      t328 = t260 * t327;
      t330 = t264 * t30 * t1;
      t331 = theta__2 + t155;
      t332 = cos(t331);
      t334 = t332 * t154 * t330;
      t336 = D_V_y58KN_1_1 * t264;
      t341 = t279 - t282 / 8;
      t346 = t264 * t20 * t210;
      t347 = t314 * t346;
      t350 = t9 * t21;
      t353 = l__1 * t303;
      t356 = 4 * t10 * t20 * t353;
      t357 = t41 * t85;
      t359 = sin(t156);
      t362 = t264 * t178;
      t363 = t5 * t42;
      t364 = sin(t155);
      t372 = (t118 * l__2 * t30 + 8 * t43) * t41;
      t379 = t270 * t154;
      t381 = sin(t331);
      t382 = t381 * t154;
      t385 = t285 * t341;
      t393 = t268 * t85;
      t396 = cos(t155);
      t400 = t41 * t152;
      t401 = cos(t32);
      t417 = t379 * t327 - 2 * t382 * t330 - 4 * t385 * t21 - 2 * t289 * t346 + 4 * t9 * t20 * t353 + l__2 * (t359 * l__2 * t393 - 4 * t396 * t363 * t362 - 4 * t401 * t363 * t400 + V_y58KN_1 * t372 - 2 * t5 * (t119 * t264 * t30 + 2 * t42 * t41 * t151) * t1);
      t420 = 8 * t158 * D_V_y58KN_1_1 * t154 * t153 + 16 * t166 + 16 * t24 * D_V_y58KN_1_1 * t44 * t168 - t177 - 4 * t184 * D_V_y58KN_1_1 * t181 * t179 + 8 * t192 - 2 * t201 * t195 * t1 * D_V_y58KN_1_1 - 4 * t208 + 8 * t214 * D_V_y58KN_1_1 * t22 * t212 - t223 - 16 * t225 * D_V_y58KN_2_1 * t211 - t231 - 2 * t239 * t195 * t210 * D_V_y58KN_1_1 + 6 * t246 + 4 * t250 * t210 * D_V_y58KN_2_1 + 12 * t255 + 8 * V_y58KN_2 * l__1 * (4 * t10 * D_V_y58KN_1_1 * t296 - 4 * t275 * D_V_y58KN_1_1 * t273 + t260 * t257 + t285 * t284 + t272 - 6 * t290 + t305) + 8 * D_V_y58KN_2_1 * t320 - 4 * V_y58KN_1 * (t271 * t5 * D_V_y58KN_1_1 * t323 - t328 - 4 * t334 - 4 * t285 * t336 * t323 + 4 * t275 * t341 * t21 + 6 * t347 + 4 * t350 * D_V_y58KN_1_1 * t296 - t356 + l__2 * (t359 * l__2 * D_V_y58KN_1_1 * t357 + 8 * t364 * t363 * t362 + D_V_y58KN_1_1 * t372)) - 4 * D_V_y58KN_1_1 * t417;
      t421 = t401 + 1;
      t422 = 0.1e1 / t421;
      t424 = 0.1e1 / t41;
      t426 = t103 * t137 * t424;
      t434 = t24 * V_y58KN_1 * t44;
      t438 = t184 * V_y58KN_1 * t181;
      t444 = t214 * V_y58KN_1 * t22;
      t457 = 8 * t158 * V_y58KN_1 * t154 * t153 + 16 * t434 * t168 - 4 * t438 * t179 - 2 * t201 * t205 + 8 * t444 * t212 - 16 * t225 * t228 - 2 * t239 * t243 + 4 * t250 * t253 + 8 * V_y58KN_2 * t320 - 4 * V_y58KN_1 * t417;
      t459 = t424 * t422 * t457;
      t462 = 0.1e1 / t102 / V_y58KN_1 * t137;
      D_V_y58KN_5_1 = t426 * t422 * t420 / 4 - D_V_y58KN_1_1 * t462 * t459 / 2;
      t466 = t6 * t264;
      t467 = t236 + t32;
      t468 = cos(t467);
      t470 = t468 * t3 * t466;
      t472 = t236 + t182;
      t473 = cos(t472);
      t475 = t473 * t234 * t281;
      t477 = t34 * t154;
      t481 = t5 * (t262 - t266);
      t482 = cos(t33);
      t484 = t482 * t2 * t481;
      t487 = t279 - t282 / 16;
      t494 = t135 * t424 * t138;
      t496 = sin(t467);
      t500 = sin(t472);
      t507 = t496 * t3 * t466 / 4 - t500 * t234 * t281 / 16 - t35 * t481 / 4 + t487 * t66;
      t510 = t137 * l__1 * omega__1 * t507;
      t511 = t424 * t103;
      D_V_y58KN_6_1 = 4 * t494 * l__1 * omega__1 * (0.3e1 / 0.4e1 * t470 - 0.3e1 / 0.16e2 * t475 - t477 * t257 / 4 - t484 / 4 + t487 * t110 + t336 * t106) - 4 * D_V_y58KN_1_1 * t135 * t511 * t510;
      t517 = t163 * t6 * t3;
      t519 = t5 * t264;
      t521 = t332 * t1 * t519;
      t527 = t135 * t95;
      t535 = -t5 * t1 + V_y58KN_1;
      t538 = t158 * t6 * t3 / 4 - t381 * t1 * t519 + t41 * t118 * t535;
      t539 = omega__2 * t538;
      t540 = t135 * t103;
      t541 = D_V_y58KN_1_1 * t540;
      D_V_y58KN_7_1 = -4 * t527 * omega__2 * (t517 / 2 - 2 * t521 + t41 * t118 * D_V_y58KN_1_1) + 4 * t541 * t539;
      t544 = t81 ^ 2;
      t545 = t1 * t544;
      t550 = 8 * t10 * t9 * t6 * t195 * t545;
      t552 = t81 * t41;
      t553 = t9 * t1;
      t554 = t553 * t552;
      t557 = t110 * t154;
      t561 = 16 * t10 * t1 * t552 * t557;
      t572 = t95 * t424;
      t573 = t135 * t572;
      t575 = t6 * t195;
      t576 = t9 ^ 2;
      t584 = t110 ^ 2;
      t593 = t424 * t137 * (4 * t576 * t575 * t545 - 16 * t554 * t557 + 4 * t41 * (4 * t1 * t41 * t584 + t2 * V_y58KN_1 * t544));
      D_V_y58KN_8_1 = t573 * t137 * (-t550 + 16 * t554 * t66 * t154 + t561 + 4 * t41 * (-8 * t66 * t1 * t111 + t2 * D_V_y58KN_1_1 * t544)) / 4 - t541 * t593 / 4;
      D_V_y58KN_1_2 = D_V_y58KN_1_1;
      D_V_y58KN_2_2 = 4 * t17 * (t27 + t36 / 2 + t46) * l__1;
      D_V_y58KN_3_2 = t95 * (t74 - 2 * D_V_y58KN_2_2 * t5 * t75 + t87 * D_V_y58KN_1_2 + (-t9 * t5 * t21 - t85 * t118) * V_y58KN_1) * l__2 - D_V_y58KN_1_2 * t103 * t101;
      t623 = l__2 * t81;
      t632 = 0.1e1 / t544;
      D_V_y58KN_4_2 = t138 * t135 * (8 * l__1 * D_V_y58KN_2_2 * t111 + 2 * t124 * D_V_y58KN_1_2 + 2 * (-l__2 * V_y58KN_3 * t118 + l__2 * D_V_y58KN_3_2 * t81 - 2 * t43 * t623) * V_y58KN_1) + t118 * t138 * t632 * t144 - D_V_y58KN_1_2 * t146 * t145;
      t673 = D_V_y58KN_1_2 * t41;
      t679 = -t274;
      t680 = cos(t679);
      t697 = D_V_y58KN_1_2 * t264;
      t701 = sin(t679);
      t712 = cos(t156);
      t716 = sin(t32);
      t734 = 8 * t158 * D_V_y58KN_1_2 * t154 * t153 + 24 * t166 + 16 * t24 * D_V_y58KN_1_2 * t44 * t168 - t177 - 4 * t184 * D_V_y58KN_1_2 * t181 * t179 + 16 * t192 - 2 * t201 * t195 * t1 * D_V_y58KN_1_2 - 10 * t208 + 8 * t214 * D_V_y58KN_1_2 * t22 * t212 - t223 - 16 * t225 * D_V_y58KN_2_2 * t211 - t231 - 2 * t239 * t195 * t210 * D_V_y58KN_1_2 + 10 * t246 + 4 * t250 * t210 * D_V_y58KN_2_2 + 20 * t255 + 8 * V_y58KN_2 * l__1 * (4 * t10 * D_V_y58KN_1_2 * t296 - 4 * t275 * D_V_y58KN_1_2 * t273 + t260 * t673 - t680 * t284 + 3 * t272 - 2 * t290 + t305) + 8 * D_V_y58KN_2_2 * t320 - 4 * V_y58KN_1 * (t271 * t5 * D_V_y58KN_1_2 * t323 - 3 * t328 - 2 * t334 - 4 * t285 * t697 * t323 + 4 * t701 * t341 * t21 + 2 * t347 + 4 * t350 * D_V_y58KN_1_2 * t296 - t356 + l__2 * (t359 * l__2 * D_V_y58KN_1_2 * t357 + V_y58KN_1 * t623 * t30 * t41 + 3 * t712 * l__2 * t393 - 2 * t5 * t623 * t330 + 8 * t716 * t363 * t400 + D_V_y58KN_1_2 * t372)) - 4 * D_V_y58KN_1_2 * t417;
      t738 = t421 ^ 2;
      D_V_y58KN_5_2 = t426 * t422 * t734 / 4 + t716 * t146 * t424 / t738 * t457 / 2 - D_V_y58KN_1_2 * t462 * t459 / 2;
      D_V_y58KN_6_2 = 4 * t494 * l__1 * omega__1 * (t470 / 2 - t475 / 4 - t477 * t673 / 4 - t484 / 2 + t697 * t106) - 4 * D_V_y58KN_1_2 * t135 * t511 * t510 + 4 * t118 * t632 * t572 * t510;
      t773 = D_V_y58KN_1_2 * t540;
      t776 = t118 * t632 * t95;
      D_V_y58KN_7_2 = -4 * t527 * omega__2 * (0.3e1 / 0.4e1 * t517 - t521 + t41 * t118 * D_V_y58KN_1_2 + t41 * t81 * t535) + 4 * t773 * t539 - 4 * t776 * t539;
      t785 = t118 * t41;
      t789 = V_y58KN_1 * t81;
      D_V_y58KN_8_2 = t573 * t137 * (-8 * t118 * t576 * t6 * t195 * t1 * t81 - t550 + 16 * t553 * t785 * t557 + t561 + 4 * t41 * (-2 * t118 * t2 * t789 + t2 * D_V_y58KN_1_2 * t544)) / 4 - t773 * t593 / 4 + t776 * t593 / 4;
      D_V_y58KN_1_3 = 0;
      D_V_y58KN_2_3 = 2 * t17 * t173 * t6 * t2 * omega__1 * t1;
      D_V_y58KN_3_3 = t95 * (-2 * t10 * t5 * omega__1 * t89 - 2 * D_V_y58KN_2_3 * t5 * t75) * l__2;
      t822 = l__1 * omega__1;
      D_V_y58KN_4_3 = t138 * t135 * (8 * l__1 * D_V_y58KN_2_3 * t111 + 2 * (l__2 * D_V_y58KN_3_3 * t81 + 4 * t106 * t822) * V_y58KN_1);
      D_V_y58KN_5_3 = t426 * t422 * (16 * t444 * omega__1 * t211 - 16 * t225 * D_V_y58KN_2_3 * t211 - 4 * t238 * t234 * omega__1 * t243 + 4 * t250 * t210 * D_V_y58KN_2_3 + 8 * D_V_y58KN_2_3 * t320 - 4 * V_y58KN_1 * (-4 * t289 * t264 * omega__1 * t210 + 2 * t379 * t268 * t822 + 8 * t9 * omega__1 * t353 - 8 * t385 * t822)) / 4;
      D_V_y58KN_6_3 = 4 * t573 * t137 * l__1 * t507;
      D_V_y58KN_7_3 = 0;
      D_V_y58KN_8_3 = 0;
      D_V_y58KN_1_4 = 0;
      D_V_y58KN_2_4 = 8 * t17 * t10 * t44 * omega__2 * t41 * l__1;
      D_V_y58KN_3_4 = -2 * t95 * D_V_y58KN_2_4 * t5 * l__1 * t9 * l__2;
      t882 = t41 * omega__2;
      D_V_y58KN_4_4 = t138 * t135 * (8 * l__1 * D_V_y58KN_2_4 * t111 + 2 * (l__2 * D_V_y58KN_3_4 * t81 - 4 * t882 * t119) * V_y58KN_1);
      t904 = t5 * omega__2;
      t911 = t41 ^ 2;
      D_V_y58KN_5_4 = t426 * t422 * (32 * t434 * t882 * t152 - 8 * t438 * omega__2 * t178 - 16 * t225 * D_V_y58KN_2_4 * t211 + 4 * t250 * t210 * D_V_y58KN_2_4 + 8 * D_V_y58KN_2_4 * t320 - 4 * V_y58KN_1 * l__2 * (-8 * t5 * t882 * t152 - 8 * t396 * t904 * t362 - 8 * t401 * t904 * t400 + 16 * V_y58KN_1 * omega__2 * t911)) / 4;
      D_V_y58KN_6_4 = 0;
      D_V_y58KN_7_4 = -4 * t135 * t95 * t538;
      D_V_y58KN_8_4 = 0;
      D_V_y58KN_1_5 = 0;
      D_V_y58KN_2_5 = 4 * t17 * (-t482 * t154 / 2 + t110 * t49) * l__1;
      D_V_y58KN_3_5 = t95 * (-2 * D_V_y58KN_2_5 * t5 * t75 + 2 * t789) * l__2;
      D_V_y58KN_4_5 = t138 * t135 * (8 * l__1 * D_V_y58KN_2_5 * t111 + 2 * D_V_y58KN_3_5 * l__2 * t789);
      D_V_y58KN_5_5 = t426 * t422 * (16 * t158 * V_y58KN_1 * t2 * t5 * t152 - 4 * t200 * t575 * t204 - 16 * t225 * D_V_y58KN_2_5 * t211 + 4 * t250 * t210 * D_V_y58KN_2_5 + 8 * D_V_y58KN_2_5 * t320 - 4 * V_y58KN_1 * (-4 * t382 * t265 + l__2 * (2 * t359 * l__2 * t268 + 2 * l__2 * V_y58KN_1 * t785 - 4 * t5 * t119 * t265))) / 4;
      D_V_y58KN_6_5 = 0;
      D_V_y58KN_7_5 = 0;
      D_V_y58KN_8_5 = 0;

      % Store outputs
      out_Jv_x = zeros(8, 5);
      out_Jv_x(1, 1) = D_V_y58KN_1_1;
      out_Jv_x(2, 1) = D_V_y58KN_2_1;
      out_Jv_x(3, 1) = D_V_y58KN_3_1;
      out_Jv_x(4, 1) = D_V_y58KN_4_1;
      out_Jv_x(5, 1) = D_V_y58KN_5_1;
      out_Jv_x(6, 1) = D_V_y58KN_6_1;
      out_Jv_x(7, 1) = D_V_y58KN_7_1;
      out_Jv_x(8, 1) = D_V_y58KN_8_1;
      out_Jv_x(1, 2) = D_V_y58KN_1_2;
      out_Jv_x(2, 2) = D_V_y58KN_2_2;
      out_Jv_x(3, 2) = D_V_y58KN_3_2;
      out_Jv_x(4, 2) = D_V_y58KN_4_2;
      out_Jv_x(5, 2) = D_V_y58KN_5_2;
      out_Jv_x(6, 2) = D_V_y58KN_6_2;
      out_Jv_x(7, 2) = D_V_y58KN_7_2;
      out_Jv_x(8, 2) = D_V_y58KN_8_2;
      out_Jv_x(1, 3) = D_V_y58KN_1_3;
      out_Jv_x(2, 3) = D_V_y58KN_2_3;
      out_Jv_x(3, 3) = D_V_y58KN_3_3;
      out_Jv_x(4, 3) = D_V_y58KN_4_3;
      out_Jv_x(5, 3) = D_V_y58KN_5_3;
      out_Jv_x(6, 3) = D_V_y58KN_6_3;
      out_Jv_x(7, 3) = D_V_y58KN_7_3;
      out_Jv_x(8, 3) = D_V_y58KN_8_3;
      out_Jv_x(1, 4) = D_V_y58KN_1_4;
      out_Jv_x(2, 4) = D_V_y58KN_2_4;
      out_Jv_x(3, 4) = D_V_y58KN_3_4;
      out_Jv_x(4, 4) = D_V_y58KN_4_4;
      out_Jv_x(5, 4) = D_V_y58KN_5_4;
      out_Jv_x(6, 4) = D_V_y58KN_6_4;
      out_Jv_x(7, 4) = D_V_y58KN_7_4;
      out_Jv_x(8, 4) = D_V_y58KN_8_4;
      out_Jv_x(1, 5) = D_V_y58KN_1_5;
      out_Jv_x(2, 5) = D_V_y58KN_2_5;
      out_Jv_x(3, 5) = D_V_y58KN_3_5;
      out_Jv_x(4, 5) = D_V_y58KN_4_5;
      out_Jv_x(5, 5) = D_V_y58KN_5_5;
      out_Jv_x(6, 5) = D_V_y58KN_6_5;
      out_Jv_x(7, 5) = D_V_y58KN_7_5;
      out_Jv_x(8, 5) = D_V_y58KN_8_5;
    end % Jv_x
    %
    % - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    %
    function out_h = h( this, in_1, in_2, ~ )
      % Calculate the residual of the invariants h.

      % Extract properties
      l__1 = this.m_l__1;
      l__2 = this.m_l__2;

      % Extract inputs
      theta__1 = in_1(1);
      theta__2 = in_1(2);
      omega__1 = in_1(3);
      omega__2 = in_1(4);
      V_y58KN_4 = in_2(4);

      % Evaluate function
      t1 = sin(theta__2);
      t3 = sin(theta__1);
      out_1 = -l__1 * t3 + l__2 * t1;
      t5 = cos(theta__1);
      t8 = cos(theta__2);
      out_2 = omega__1 * l__1 * t5 - omega__2 * l__2 * t8;
      out_3 = V_y58KN_4;

      % Store outputs
      out_h = zeros(3, 1);
      out_h(1) = out_1;
      out_h(2) = out_2;
      out_h(3) = out_3;
    end % h
    %
    % - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    %
    function out_Jh_x = Jh_x( this, in_1, ~, ~ )
      % Calculate the Jacobian of h with respect to x.

      % Extract properties
      l__1 = this.m_l__1;
      l__2 = this.m_l__2;

      % Extract inputs
      theta__1 = in_1(1);
      theta__2 = in_1(2);
      omega__1 = in_1(3);
      omega__2 = in_1(4);

      % Evaluate function
      t1 = cos(theta__1);
      t2 = t1 * l__1;
      out_1_1 = -t2;
      t3 = sin(theta__1);
      out_2_1 = -l__1 * omega__1 * t3;
      t6 = cos(theta__2);
      out_1_2 = l__2 * t6;
      t7 = sin(theta__2);
      out_2_2 = l__2 * omega__2 * t7;
      out_2_3 = t2;
      out_2_4 = -out_1_2;

      % Store outputs
      out_Jh_x = zeros(3, 5);
      out_Jh_x(1, 1) = out_1_1;
      out_Jh_x(2, 1) = out_2_1;
      out_Jh_x(1, 2) = out_1_2;
      out_Jh_x(2, 2) = out_2_2;
      out_Jh_x(2, 3) = out_2_3;
      out_Jh_x(2, 4) = out_2_4;
    end % Jh_x
    %
    % - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    %
    function out_Jh_v = Jh_v( ~, ~, ~, ~ )
      % Calculate the Jacobian of h with respect to v.

      % Extract properties
      % No properties

      % Extract inputs

      % Evaluate function
      out_3_4 = 1;

      % Store outputs
      out_Jh_v = zeros(3, 8);
      out_Jh_v(3, 4) = out_3_4;
    end % Jh_v
    %
    % - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    %
    function out = in_domain( ~, ~, ~ )
      out = true;
    end % in_domain
    %
    % - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    %
  end
end % SliderCrankRecursive

% That's All Folks!
