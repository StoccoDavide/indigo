 % +--------------------------------------------------------------------------+
% | 'Indigo' module version 1.0 - BSD 3-Clause License - Copyright (c) 2023  |
% | Current version authors:                                                 |
% |   Davide Stocco and Enrico Bertolazzi.                                   |
% +--------------------------------------------------------------------------+

% Matlab generated code for implicit system: Pendulum
% This file has been automatically generated by Indigo.
% DISCLAIMER: If you need to edit it, do it wisely!

classdef Pendulum < Indigo.Systems.SemiExplicit
  %
  % No class description provided.
  %
  properties (SetAccess = protected, Hidden = true)
    % User data
    m_m = 1.0;
    m_ell = 1.0;
    m_g = 9.81;
  end
  %
  methods
    %
    % - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    %
    function this = Pendulum( varargin )
      % Constructor for 'Pendulum' class.

      % Superclass constructor
      num_eqns = 5;
      num_veil = 2;
      num_invs = 3;
      this = this@Indigo.Systems.SemiExplicit('Pendulum', num_eqns, num_veil, num_invs);

      % User data
      if (nargin == 0)
        % Keep default values
      elseif (nargin == 3)
        this.m_m = varargin{1};
        this.m_ell = varargin{2};
        this.m_g = varargin{3};
      else
        error('wrong number of input arguments.');
      end
    end % Pendulum
    %
    % - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    %
    function out_A = A( this, in_1, in_2, t )
      % Evaluate the matrix A.

      % Extract properties
      m = this.m_m;
      ell = this.m_ell;
      g = this.m_g;

      % Extract inputs
      x = in_1(1);
      y = in_1(2);
      u = in_1(3);
      v = in_1(4);
      lambda = in_1(5);
      V_y58KN_1 = in_2(1);
      V_y58KN_2 = in_2(2);

      % Evaluate function
      out_1_1 = 4 * lambda * x / m;
      out_3_1 = 1;
      out_1_2 = 2 * V_y58KN_2;
      out_2_2 = 1;
      out_1_3 = -4 * u;
      out_5_3 = m;
      out_1_4 = -4 * v;
      out_4_4 = m;
      out_1_5 = 2 * V_y58KN_1;

      % Store outputs
      out_A = zeros(5, 5);
      out_A(1, 1) = out_1_1;
      out_A(3, 1) = out_3_1;
      out_A(1, 2) = out_1_2;
      out_A(2, 2) = out_2_2;
      out_A(1, 3) = out_1_3;
      out_A(5, 3) = out_5_3;
      out_A(1, 4) = out_1_4;
      out_A(4, 4) = out_4_4;
      out_A(1, 5) = out_1_5;
    end % A
    %
    % - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    %
    function out_TA_x = TA_x( this, in_1, in_2, t )
      % Evaluate the tensor of A with respect to x.

      % Extract properties
      m = this.m_m;
      ell = this.m_ell;
      g = this.m_g;

      % Extract inputs
      x = in_1(1);
      y = in_1(2);
      u = in_1(3);
      v = in_1(4);
      lambda = in_1(5);
      V_y58KN_1 = in_2(1);
      V_y58KN_2 = in_2(2);

      % Evaluate function
      t1 = 0.1e1 / m;
      out_1_1_1 = 4 * t1 * lambda;
      out_1_3_3 = -4;
      out_1_4_4 = -4;
      out_1_1_5 = 4 * t1 * x;

      % Store outputs
      out_TA_x = zeros(5, 5, 5);
      out_TA_x(1, 1, 1) = out_1_1_1;
      out_TA_x(1, 3, 3) = out_1_3_3;
      out_TA_x(1, 4, 4) = out_1_4_4;
      out_TA_x(1, 1, 5) = out_1_1_5;
    end % TA_x
    %
    % - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    %
    function out_TA_v = TA_v( this, in_1, in_2, t )
      % Evaluate the tensor of A with respect to v.

      % Extract properties
      m = this.m_m;
      ell = this.m_ell;
      g = this.m_g;

      % Extract inputs
      x = in_1(1);
      y = in_1(2);
      u = in_1(3);
      v = in_1(4);
      lambda = in_1(5);
      V_y58KN_1 = in_2(1);
      V_y58KN_2 = in_2(2);

      % Evaluate function
      % No elements

      % Store outputs
      out_TA_v = zeros(5, 5, 2);
    end % TA_v
    %
    % - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    %
    function out_b = b( this, in_1, in_2, t )
      % Calculate the vector b of the explicit system.

      % Extract properties
      m = this.m_m;
      ell = this.m_ell;
      g = this.m_g;

      % Extract inputs
      x = in_1(1);
      y = in_1(2);
      u = in_1(3);
      v = in_1(4);
      lambda = in_1(5);
      V_y58KN_1 = in_2(1);
      V_y58KN_2 = in_2(2);

      % Evaluate function
      out_2 = v;
      out_3 = u;
      out_4 = -m * g - lambda * y;
      out_5 = -lambda * x;

      % Store outputs
      out_b = zeros(5, 1);
      out_b(2) = out_2;
      out_b(3) = out_3;
      out_b(4) = out_4;
      out_b(5) = out_5;
    end % b
    %
    % - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    %
    function out_Jb_x = Jb_x( this, in_1, in_2, t )
      % Calculate the Jacobian of b with respect to x.

      % Extract properties
      m = this.m_m;
      ell = this.m_ell;
      g = this.m_g;

      % Extract inputs
      x = in_1(1);
      y = in_1(2);
      u = in_1(3);
      v = in_1(4);
      lambda = in_1(5);
      V_y58KN_1 = in_2(1);
      V_y58KN_2 = in_2(2);

      % Evaluate function
      out_5_1 = -lambda;
      out_4_2 = out_5_1;
      out_3_3 = 1;
      out_2_4 = 1;
      out_4_5 = -y;
      out_5_5 = -x;

      % Store outputs
      out_Jb_x = zeros(5, 5);
      out_Jb_x(5, 1) = out_5_1;
      out_Jb_x(4, 2) = out_4_2;
      out_Jb_x(3, 3) = out_3_3;
      out_Jb_x(2, 4) = out_2_4;
      out_Jb_x(4, 5) = out_4_5;
      out_Jb_x(5, 5) = out_5_5;
    end % Jb_x
    %
    % - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    %
    function out_Jb_v = Jb_v( this, in_1, in_2, t )
      % Calculate the Jacobian of b with respect to v.

      % Extract properties
      m = this.m_m;
      ell = this.m_ell;
      g = this.m_g;

      % Extract inputs
      x = in_1(1);
      y = in_1(2);
      u = in_1(3);
      v = in_1(4);
      lambda = in_1(5);
      V_y58KN_1 = in_2(1);
      V_y58KN_2 = in_2(2);

      % Evaluate function
      % No elements

      % Store outputs
      out_Jb_v = zeros(5, 2);
    end % Jb_v
    %
    % - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    %
    function out_v = v( this, in_1, t )
      % Evaluate the the veils v.

      % Extract properties
      m = this.m_m;
      ell = this.m_ell;
      g = this.m_g;

      % Extract inputs
      x = in_1(1);
      y = in_1(2);
      u = in_1(3);
      v = in_1(4);
      lambda = in_1(5);

      % Evaluate function
      t1 = x ^ 2;
      t2 = y ^ 2;
      t4 = 0.1e1 / m;
      out_1 = t4 * (t1 + t2);
      out_2 = t4 * (m * g + 2 * lambda * y);

      % Store outputs
      out_v = zeros(2, 1);
      out_v(1) = out_1;
      out_v(2) = out_2;
    end % v
    %
    % - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    %
    function out_Jv_x = Jv_x( this, in_1, t )
      % Evaluate the Jacobian of v with respect to x.

      % Extract properties
      m = this.m_m;
      ell = this.m_ell;
      g = this.m_g;

      % Extract inputs
      x = in_1(1);
      y = in_1(2);
      u = in_1(3);
      v = in_1(4);
      lambda = in_1(5);

      % Evaluate function
      t1 = 0.1e1 / m;
      out_1_1 = 2 * t1 * x;
      out_1_2 = 2 * t1 * y;
      out_2_2 = 2 * t1 * lambda;
      out_2_5 = out_1_2;

      % Store outputs
      out_Jv_x = zeros(2, 5);
      out_Jv_x(1, 1) = out_1_1;
      out_Jv_x(1, 2) = out_1_2;
      out_Jv_x(2, 2) = out_2_2;
      out_Jv_x(2, 5) = out_2_5;
    end % Jv_x
    %
    % - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    %
    function out_h = h( this, in_1, in_2, t )
      % Calculate the residual of the invariants h.

      % Extract properties
      m = this.m_m;
      ell = this.m_ell;
      g = this.m_g;

      % Extract inputs
      x = in_1(1);
      y = in_1(2);
      u = in_1(3);
      v = in_1(4);
      lambda = in_1(5);
      V_y58KN_1 = in_2(1);
      V_y58KN_2 = in_2(2);

      % Evaluate function
      t1 = ell ^ 2;
      t2 = x ^ 2;
      t3 = y ^ 2;
      out_1 = t1 - t2 - t3;
      out_2 = 2 * u * x + 2 * v * y;
      t11 = u ^ 2;
      t13 = v ^ 2;
      out_3 = -2 / m * (-g * m * y - lambda * t2 - lambda * t3 + m * t11 + m * t13);

      % Store outputs
      out_h = zeros(3, 1);
      out_h(1) = out_1;
      out_h(2) = out_2;
      out_h(3) = out_3;
    end % h
    %
    % - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    %
    function out_Jh_x = Jh_x( this, in_1, in_2, t )
      % Calculate the Jacobian of h with respect to x.

      % Extract properties
      m = this.m_m;
      ell = this.m_ell;
      g = this.m_g;

      % Extract inputs
      x = in_1(1);
      y = in_1(2);
      u = in_1(3);
      v = in_1(4);
      lambda = in_1(5);
      V_y58KN_1 = in_2(1);
      V_y58KN_2 = in_2(2);

      % Evaluate function
      t1 = 2 * x;
      out_1_1 = -t1;
      out_2_1 = 2 * u;
      t3 = 0.1e1 / m;
      out_3_1 = 4 * t3 * x * lambda;
      t5 = 2 * y;
      out_1_2 = -t5;
      out_2_2 = 2 * v;
      out_3_2 = -2 * t3 * (-m * g - 2 * lambda * y);
      out_2_3 = t1;
      out_3_3 = -4 * u;
      out_2_4 = t5;
      out_3_4 = -4 * v;
      t14 = x ^ 2;
      t15 = y ^ 2;
      out_3_5 = -2 * t3 * (-t14 - t15);

      % Store outputs
      out_Jh_x = zeros(3, 5);
      out_Jh_x(1, 1) = out_1_1;
      out_Jh_x(2, 1) = out_2_1;
      out_Jh_x(3, 1) = out_3_1;
      out_Jh_x(1, 2) = out_1_2;
      out_Jh_x(2, 2) = out_2_2;
      out_Jh_x(3, 2) = out_3_2;
      out_Jh_x(2, 3) = out_2_3;
      out_Jh_x(3, 3) = out_3_3;
      out_Jh_x(2, 4) = out_2_4;
      out_Jh_x(3, 4) = out_3_4;
      out_Jh_x(3, 5) = out_3_5;
    end % Jh_x
    %
    % - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    %
    function out_Jh_v = Jh_v( this, in_1, in_2, t )
      % Calculate the Jacobian of h with respect to v.

      % Extract properties
      m = this.m_m;
      ell = this.m_ell;
      g = this.m_g;

      % Extract inputs
      x = in_1(1);
      y = in_1(2);
      u = in_1(3);
      v = in_1(4);
      lambda = in_1(5);
      V_y58KN_1 = in_2(1);
      V_y58KN_2 = in_2(2);

      % Evaluate function
      % No elements

      % Store outputs
      out_Jh_v = zeros(3, 2);
    end % Jh_v
    %
    % - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    %
  end
end % Pendulum

% That's All Folks!
