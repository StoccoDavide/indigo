% +--------------------------------------------------------------------------+
% | 'Indigo' module version 1.0 - BSD 3-Clause License - Copyright (c) 2023  |
% | Current version authors:                                                 |
% |   Davide Stocco and Enrico Bertolazzi.                                   |
% +--------------------------------------------------------------------------+

% Matlab generated code for implicit system: Pendulum
% This file has been automatically generated by Indigo.
% DISCLAIMER: If you need to edit it, do it wisely!

classdef Pendulum < ImplicitSystem
  %
  % No class description provided.
  %
  properties (SetAccess = protected, Hidden = true)
    % User data
    m_m = 1.0;
    m_ell = 1.0;
    m_g = 9.81;
  end
  %
  methods
    %
    % - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    %
    function this = Pendulum( varargin )
      % Constructor for 'Pendulum' class.

      % Superclass constructor
      num_eqns = 5;
      num_invs = 3;
      this = this@ImplicitSystem('Pendulum', num_eqns, num_invs);

      % User data
      if (nargin == 0)
        % Keep default values
      elseif (nargin == 3)
        this.m_m = varargin{1};
        this.m_ell = varargin{2};
        this.m_g = varargin{3};
      else
        error('wrong number of input arguments.');
      end
    end % Pendulum
    %
    % - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    %
    function out_F = F( this, in_1, in_2, t )
      % Calculate the residual of the implicit system F(x, x_dot).

      % Extract properties
      m = this.m_m;
      ell = this.m_ell;
      g = this.m_g;

      % Extract inputs
      x = in_1(1);
      y = in_1(2);
      u = in_1(3);
      v = in_1(4);
      lambda = in_1(5);
      x_dot = in_2(1);
      y_dot = in_2(2);
      u_dot = in_2(3);
      v_dot = in_2(4);
      lambda_dot = in_2(5);

      % Evaluate assignments
      t1 = x ^ 2;
      t2 = y ^ 2;
      t4 = 0.1e1 / m;
      V_y58KN_1 = t4 * (t1 + t2);
      V_y58KN_2 = t4 * (m * g + 2 * lambda * y);

      % Evaluate vector elements
      t1 = lambda * x;
      out_1 = 4 / m * x_dot * t1 + 2 * V_y58KN_2 * y_dot - 4 * u * u_dot - 4 * v * v_dot + 2 * V_y58KN_1 * lambda_dot;
      out_2 = y_dot - v;
      out_3 = x_dot - u;
      out_4 = m * g + lambda * y + m * v_dot;
      out_5 = m * u_dot + t1;

      % Store outputs
      out_F = zeros(5, 1);
      out_F(1) = out_1;
      out_F(2) = out_2;
      out_F(3) = out_3;
      out_F(4) = out_4;
      out_F(5) = out_5;
    end % F
    %
    % - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    %
    function out_JF_x = JF_x( this, in_1, in_2, t )
      % Calculate the Jacobian of F with respect to x.

      % Extract properties
      m = this.m_m;
      ell = this.m_ell;
      g = this.m_g;

      % Extract inputs
      x = in_1(1);
      y = in_1(2);
      u = in_1(3);
      v = in_1(4);
      lambda = in_1(5);
      x_dot = in_2(1);
      y_dot = in_2(2);
      u_dot = in_2(3);
      v_dot = in_2(4);
      lambda_dot = in_2(5);

      % Evaluate assignments
      t1 = x ^ 2;
      t2 = y ^ 2;
      t4 = 0.1e1 / m;
      V_y58KN_1 = t4 * (t1 + t2);
      V_y58KN_2 = t4 * (m * g + 2 * lambda * y);
      D_1_V_y58KN_1 = 2 * t4 * x;
      D_2_V_y58KN_1 = 2 * t4 * y;
      D_2_V_y58KN_2 = 2 * t4 * lambda;
      D_1_V_y58KN_2 = D_2_V_y58KN_1;

      % Evaluate vector elements
      out_1_5 = 4 * x / m * x_dot + 2 * D_1_V_y58KN_2 * y_dot;
      out_4_5 = y;
      out_5_1 = lambda;
      out_5_5 = x;

      % Store outputs
      out_JF_x = zeros(5, 5);
      out_JF_x(1, 5) = out_1, 5;
      out_JF_x(4, 5) = out_4, 5;
      out_JF_x(5, 5) = out_5, 5;
      out_JF_x(5, 1) = out_5, 1;
      out_JF_x(5, 5) = out_5, 5;
    end % JF_x
    %
    % - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    %
    function out_JF_x_dot = JF_x_dot( this, in_1, in_2, t )
      % Calculate the Jacobian of F with respect to x_dot.

      % Extract properties
      m = this.m_m;
      ell = this.m_ell;
      g = this.m_g;

      % Extract inputs
      x = in_1(1);
      y = in_1(2);
      u = in_1(3);
      v = in_1(4);
      lambda = in_1(5);
      x_dot = in_2(1);
      y_dot = in_2(2);
      u_dot = in_2(3);
      v_dot = in_2(4);
      lambda_dot = in_2(5);

      % Evaluate assignments
      t1 = x ^ 2;
      t2 = y ^ 2;
      t4 = 0.1e1 / m;
      V_y58KN_1 = t4 * (t1 + t2);
      V_y58KN_2 = t4 * (m * g + 2 * lambda * y);
      D_1_V_y58KN_1 = 2 * t4 * x;
      D_2_V_y58KN_1 = 2 * t4 * y;
      D_2_V_y58KN_2 = 2 * t4 * lambda;
      D_1_V_y58KN_2 = D_2_V_y58KN_1;

      % Evaluate vector elements
      out_1_5 = 2 * V_y58KN_1;
      out_5_3 = m;

      % Store outputs
      out_JF_x_dot = zeros(5, 5);
      out_JF_x_dot(1, 5) = out_1, 5;
      out_JF_x_dot(5, 3) = out_5, 3;
    end % JF_x_dot
    %
    % - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    %
    function out_h = h( this, in_1, t )
      % Calculate the residual of the invariants h.

      % Extract properties
      m = this.m_m;
      ell = this.m_ell;
      g = this.m_g;

      % Extract inputs
      x = in_1(1);
      y = in_1(2);
      u = in_1(3);
      v = in_1(4);
      lambda = in_1(5);

      % Evaluate assignments
      t1 = x ^ 2;
      t2 = y ^ 2;
      t4 = 0.1e1 / m;
      V_y58KN_1 = t4 * (t1 + t2);
      V_y58KN_2 = t4 * (m * g + 2 * lambda * y);

      % Evaluate vector elements
      t1 = ell ^ 2;
      t2 = x ^ 2;
      t3 = y ^ 2;
      out_1 = t1 - t2 - t3;
      out_2 = 2 * u * x + 2 * v * y;
      t11 = u ^ 2;
      t13 = v ^ 2;
      out_3 = -2 / m * (-g * m * y - t2 * lambda - t3 * lambda + t11 * m + t13 * m);

      % Store outputs
      out_h = zeros(3, 1);
      out_h(1) = out_1;
      out_h(2) = out_2;
      out_h(3) = out_3;
    end % h
    %
    % - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    %
    function out_Jh = Jh( this, in_1, t )
      % Calculate the Jacobian of h with respect to x.

      % Extract properties
      m = this.m_m;
      ell = this.m_ell;
      g = this.m_g;

      % Extract inputs
      x = in_1(1);
      y = in_1(2);
      u = in_1(3);
      v = in_1(4);
      lambda = in_1(5);

      % Evaluate assignments
      t1 = x ^ 2;
      t2 = y ^ 2;
      t4 = 0.1e1 / m;
      V_y58KN_1 = t4 * (t1 + t2);
      V_y58KN_2 = t4 * (m * g + 2 * lambda * y);
      D_1_V_y58KN_1 = 2 * t4 * x;
      D_2_V_y58KN_1 = 2 * t4 * y;
      D_2_V_y58KN_2 = 2 * t4 * lambda;
      D_1_V_y58KN_2 = D_2_V_y58KN_1;

      % Evaluate vector elements
      t1 = x ^ 2;
      t2 = y ^ 2;
      t4 = 0.1e1 / m;
      out_3_1 = 4 * t4 * x * lambda;
      out_3_2 = -2 * t4 * (-m * g - 2 * lambda * y);
      out_3_3 = -4 * u;
      out_3_4 = -4 * v;
      out_3_5 = -2 * t4 * (-t1 - t2);

      % Store outputs
      out_Jh = zeros(3, 5);
      out_Jh(3, 5) = out_3, 5;
      out_Jh(3, 1) = out_3, 1;
      out_Jh(3, 2) = out_3, 2;
      out_Jh(3, 3) = out_3, 3;
      out_Jh(3, 4) = out_3, 4;
      out_Jh(3, 5) = out_3, 5;
    end % Jh
    %
    % - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    %
  end
end % Pendulum

% That's All Folks!
