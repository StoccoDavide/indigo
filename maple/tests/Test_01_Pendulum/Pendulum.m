% +--------------------------------------------------------------------------+
% | 'Indigo' module version 1.0 - BSD 3-Clause License - Copyright (c) 2023  |
% | Current version authors:                                                 |
% |   Davide Stocco and Enrico Bertolazzi.                                   |
% +--------------------------------------------------------------------------+

% Matlab generated code for implicit system: Pendulum
% This file has been automatically generated by Indigo.
% DISCLAIMER: If you need to edit it, do it wisely!

classdef Pendulum < Indigo.DAE.Explicit
  %
  % No class description provided.
  %
  properties (SetAccess = protected, Hidden = true)
    % User data
    m_x__0 = 0;
    m_y__0 = 0;
    m_u__0 = 0;
    m_v__0 = 0;
    m_m = 1.0;
    m_g = 9.81;
    m_ell = 1.0;
  end
  %
  methods
    %
    % - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    %
    function this = Pendulum( varargin )
      % Class constructor.

      % Superclass constructor
      num_eqns = 5;
      num_veil = 0;
      num_invs = 4;
      this = this@Indigo.DAE.Explicit('Pendulum', num_eqns, num_veil, num_invs);

      % User data
      if (nargin == 0)
        % Keep default values
      elseif (nargin == 1 && isstruct(varargin{1}))
        this.m_x__0 = varargin{1}.x__0;
        this.m_y__0 = varargin{1}.y__0;
        this.m_u__0 = varargin{1}.u__0;
        this.m_v__0 = varargin{1}.v__0;
        this.m_m = varargin{1}.m;
        this.m_g = varargin{1}.g;
        this.m_ell = varargin{1}.ell;
      elseif (nargin == 7)
        this.m_x__0 = varargin{1};
        this.m_y__0 = varargin{2};
        this.m_u__0 = varargin{3};
        this.m_v__0 = varargin{4};
        this.m_m = varargin{5};
        this.m_g = varargin{6};
        this.m_ell = varargin{7};
      else
        error('wrong number of input arguments.');
      end
    end % Pendulum
    %
    % - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    %
    function out_f = f( this, in_1, ~, ~ )
      % Evaluate the function f.

      % Extract properties
      m = this.m_m;
      g = this.m_g;

      % Extract inputs
      x = in_1(1);
      y = in_1(2);
      u = in_1(3);
      v = in_1(4);
      lambda = in_1(5);

      % Evaluate function
      out_1 = u;
      out_2 = v;
      t2 = 0.1e1 / m;
      out_3 = -2 * t2 * lambda * x;
      t5 = g * m;
      out_4 = -(2 * lambda * y + t5) * t2;
      t19 = x ^ 2;
      t20 = y ^ 2;
      out_5 = -0.1e1 / (t19 + t20) * (8 * lambda * u * x + 8 * lambda * v * y + 3 * v * t5) / 2;

      % Store outputs
      out_f = zeros(5, 1);
      out_f(1) = out_1;
      out_f(2) = out_2;
      out_f(3) = out_3;
      out_f(4) = out_4;
      out_f(5) = out_5;
    end % f
    %
    % - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    %
    function out_Jf_x = Jf_x( this, in_1, ~, ~ )
      % Evaluate the Jacobian of f with respect to x.

      % Extract properties
      m = this.m_m;
      g = this.m_g;

      % Extract inputs
      x = in_1(1);
      y = in_1(2);
      u = in_1(3);
      v = in_1(4);
      lambda = in_1(5);

      % Evaluate function
      t1 = 0.1e1 / m;
      out_3_1 = -2 * t1 * lambda;
      t4 = u * lambda;
      t5 = x ^ 2;
      t6 = y ^ 2;
      t7 = t5 + t6;
      t8 = 0.1e1 / t7;
      t11 = g * m;
      t16 = v * lambda;
      t20 = t7 ^ 2;
      t22 = 0.1e1 / t20 * (3 * v * t11 + 8 * y * t16 + 8 * x * t4);
      out_5_1 = x * t22 - 4 * t8 * t4;
      out_4_2 = out_3_1;
      out_5_2 = -4 * t8 * t16 + y * t22;
      out_1_3 = 1;
      out_5_3 = -4 * t8 * lambda * x;
      out_2_4 = 1;
      out_5_4 = -t8 * (8 * lambda * y + 3 * t11) / 2;
      out_3_5 = -2 * t1 * x;
      out_4_5 = -2 * t1 * y;
      out_5_5 = -t8 * (8 * u * x + 8 * v * y) / 2;

      % Store outputs
      out_Jf_x = zeros(5, 5);
      out_Jf_x(3, 1) = out_3_1;
      out_Jf_x(5, 1) = out_5_1;
      out_Jf_x(4, 2) = out_4_2;
      out_Jf_x(5, 2) = out_5_2;
      out_Jf_x(1, 3) = out_1_3;
      out_Jf_x(5, 3) = out_5_3;
      out_Jf_x(2, 4) = out_2_4;
      out_Jf_x(5, 4) = out_5_4;
      out_Jf_x(3, 5) = out_3_5;
      out_Jf_x(4, 5) = out_4_5;
      out_Jf_x(5, 5) = out_5_5;
    end % Jf_x
    %
    % - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    %
    function out_Jf_v = Jf_v( ~, ~, ~, ~ )
      % Evaluate the Jacobian of f with respect to v.

      % Extract properties
      % No properties

      % Extract inputs

      % Evaluate function
      % No body

      % Store outputs
      out_Jf_v = zeros(5, 0);
    end % Jf_v
    %
    % - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    %
    function out_v = v( ~, ~, ~ )
      % Evaluate the the veils v.

      % Extract properties
      % No properties

      % Extract inputs

      % Evaluate function
      % No body

      % Store outputs
      out_v = zeros(0, 1);
    end % v
    %
    % - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    %
    function out_Jv_x = Jv_x( ~, ~, ~, ~ )
      % Evaluate the Jacobian of v with respect to x.

      % Extract properties
      % No properties

      % Extract inputs

      % Evaluate function
      % No body

      % Store outputs
      out_Jv_x = zeros(0, 5);
    end % Jv_x
    %
    % - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    %
    function out_h = h( this, in_1, ~, ~ )
      % Calculate the residual of the invariants h.

      % Extract properties
      y__0 = this.m_y__0;
      u__0 = this.m_u__0;
      v__0 = this.m_v__0;
      m = this.m_m;
      g = this.m_g;
      ell = this.m_ell;

      % Extract inputs
      x = in_1(1);
      y = in_1(2);
      u = in_1(3);
      v = in_1(4);
      lambda = in_1(5);

      % Evaluate function
      t1 = u ^ 2;
      t2 = u__0 ^ 2;
      t3 = v ^ 2;
      t4 = v__0 ^ 2;
      out_1 = (t1 - t2 + t3 - t4) * m / 2 + m * g * (y - y__0);
      t11 = ell ^ 2;
      t12 = x ^ 2;
      t13 = y ^ 2;
      out_2 = t11 - t12 - t13;
      out_3 = 2 * u * x + 2 * v * y;
      out_4 = 0.1e1 / m * (lambda * (4 * t12 + 4 * t13) + 2 * (g * y - t1 - t3) * m);

      % Store outputs
      out_h = zeros(4, 1);
      out_h(1) = out_1;
      out_h(2) = out_2;
      out_h(3) = out_3;
      out_h(4) = out_4;
    end % h
    %
    % - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    %
    function out_Jh_x = Jh_x( this, in_1, ~, ~ )
      % Calculate the Jacobian of h with respect to x.

      % Extract properties
      m = this.m_m;
      g = this.m_g;

      % Extract inputs
      x = in_1(1);
      y = in_1(2);
      u = in_1(3);
      v = in_1(4);
      lambda = in_1(5);

      % Evaluate function
      t1 = 2 * x;
      out_2_1 = -t1;
      out_3_1 = 2 * u;
      t3 = 0.1e1 / m;
      out_4_1 = 8 * t3 * lambda * x;
      out_1_2 = g * m;
      t5 = 2 * y;
      out_2_2 = -t5;
      out_3_2 = 2 * v;
      out_4_2 = t3 * (8 * lambda * y + 2 * out_1_2);
      out_1_3 = m * u;
      out_3_3 = t1;
      out_4_3 = -4 * u;
      out_1_4 = m * v;
      out_3_4 = t5;
      out_4_4 = -4 * v;
      t12 = x ^ 2;
      t13 = y ^ 2;
      out_4_5 = t3 * (4 * t12 + 4 * t13);

      % Store outputs
      out_Jh_x = zeros(4, 5);
      out_Jh_x(2, 1) = out_2_1;
      out_Jh_x(3, 1) = out_3_1;
      out_Jh_x(4, 1) = out_4_1;
      out_Jh_x(1, 2) = out_1_2;
      out_Jh_x(2, 2) = out_2_2;
      out_Jh_x(3, 2) = out_3_2;
      out_Jh_x(4, 2) = out_4_2;
      out_Jh_x(1, 3) = out_1_3;
      out_Jh_x(3, 3) = out_3_3;
      out_Jh_x(4, 3) = out_4_3;
      out_Jh_x(1, 4) = out_1_4;
      out_Jh_x(3, 4) = out_3_4;
      out_Jh_x(4, 4) = out_4_4;
      out_Jh_x(4, 5) = out_4_5;
    end % Jh_x
    %
    % - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    %
    function out_Jh_v = Jh_v( ~, ~, ~, ~ )
      % Calculate the Jacobian of h with respect to v.

      % Extract properties
      % No properties

      % Extract inputs

      % Evaluate function
      % No body

      % Store outputs
      out_Jh_v = zeros(4, 0);
    end % Jh_v
    %
    % - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    %
    function out_pivots = pivots( this, in_1, ~, ~ )
      % Calculate the pivoting values

      % Extract properties
      m = this.m_m;

      % Extract inputs
      x = in_1(1);
      y = in_1(2);

      % Evaluate function
      out_1_1 = 1;
      out_2_1 = 1;
      out_3_1 = m;
      out_4_1 = m;
      out_1_2 = m;
      out_2_2 = m;
      out_3_2 = 1;
      out_4_2 = 1;
      out_1_3 = 1;
      out_2_3 = 1;
      out_3_3 = m;
      out_4_3 = m;
      out_1_4 = 1;
      out_2_4 = 1;
      out_3_4 = m;
      out_4_4 = m;
      t1 = x ^ 2;
      t2 = y ^ 2;
      out_5_4 = 0.1e1 / m * (4 * t1 + 4 * t2);

      % Store outputs
      out_pivots = zeros(5, 4);
      out_pivots(1, 1) = out_1_1;
      out_pivots(2, 1) = out_2_1;
      out_pivots(3, 1) = out_3_1;
      out_pivots(4, 1) = out_4_1;
      out_pivots(1, 2) = out_1_2;
      out_pivots(2, 2) = out_2_2;
      out_pivots(3, 2) = out_3_2;
      out_pivots(4, 2) = out_4_2;
      out_pivots(1, 3) = out_1_3;
      out_pivots(2, 3) = out_2_3;
      out_pivots(3, 3) = out_3_3;
      out_pivots(4, 3) = out_4_3;
      out_pivots(1, 4) = out_1_4;
      out_pivots(2, 4) = out_2_4;
      out_pivots(3, 4) = out_3_4;
      out_pivots(4, 4) = out_4_4;
      out_pivots(5, 4) = out_5_4;
    end % pivots
    %
    % - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    %
    function out = in_domain( ~, ~, ~ )
      out = true;
    end % in_domain
    %
    % - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    %
  end
end % Pendulum

% That's All Folks!
