% +--------------------------------------------------------------------------+
% | 'Indigo' module version 1.0 - BSD 3-Clause License - Copyright (c) 2023  |
% | Current version authors:                                                 |
% |   Davide Stocco and Enrico Bertolazzi.                                   |
% +--------------------------------------------------------------------------+

% Matlab generated code for implicit system: Pendulum
% This file has been automatically generated by Indigo.
% DISCLAIMER: If you need to edit it, do it wisely!

classdef Pendulum < Indigo.Systems.SemiExplicit
  %
  % No class description provided.
  %
  properties (SetAccess = protected, Hidden = true)
    % User data
    m_x__0 = 0;
    m_y__0 = 0;
    m_u__0 = 0;
    m_v__0 = 0;
    m_m = 1.0;
    m_g = 9.81;
    m_ell = 1.0;
  end
  %
  methods
    %
    % - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    %
    function this = Pendulum( varargin )
      % Class constructor.

      % Superclass constructor
      num_eqns = 5;
      num_veil = 0;
      num_invs = 4;
      this = this@Indigo.Systems.SemiExplicit('Pendulum', num_eqns, num_veil, num_invs);

      % User data
      if (nargin == 0)
        % Keep default values
      elseif (nargin == 1 && isstruct(varargin{1}))
        this.m_x__0 = varargin{1}.x__0;
        this.m_y__0 = varargin{1}.y__0;
        this.m_u__0 = varargin{1}.u__0;
        this.m_v__0 = varargin{1}.v__0;
        this.m_m = varargin{1}.m;
        this.m_g = varargin{1}.g;
        this.m_ell = varargin{1}.ell;
      elseif (nargin == 7)
        this.m_x__0 = varargin{1};
        this.m_y__0 = varargin{2};
        this.m_u__0 = varargin{3};
        this.m_v__0 = varargin{4};
        this.m_m = varargin{5};
        this.m_g = varargin{6};
        this.m_ell = varargin{7};
      else
        error('wrong number of input arguments.');
      end
    end % Pendulum
    %
    % - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    %
    function out_A = A( this, in_1, in_2, t )
      % Evaluate the matrix A.

      % Extract properties
      x__0 = this.m_x__0;
      y__0 = this.m_y__0;
      u__0 = this.m_u__0;
      v__0 = this.m_v__0;
      m = this.m_m;
      g = this.m_g;
      ell = this.m_ell;

      % Extract inputs
      x = in_1(1);
      y = in_1(2);
      u = in_1(3);
      v = in_1(4);
      lambda = in_1(5);

      % Evaluate function
      out_1_1 = 1;
      t2 = 0.1e1 / m;
      out_5_1 = 4 * t2 * lambda * x;
      out_2_2 = 1;
      out_5_2 = t2 * (g * m + 4 * y * lambda);
      out_3_3 = 1;
      out_5_3 = -2 * u;
      out_4_4 = 1;
      out_5_4 = -2 * v;
      t10 = x ^ 2;
      t11 = y ^ 2;
      out_5_5 = t2 * (2 * t10 + 2 * t11);

      % Store outputs
      out_A = zeros(5, 5);
      out_A(1, 1) = out_1_1;
      out_A(5, 1) = out_5_1;
      out_A(2, 2) = out_2_2;
      out_A(5, 2) = out_5_2;
      out_A(3, 3) = out_3_3;
      out_A(5, 3) = out_5_3;
      out_A(4, 4) = out_4_4;
      out_A(5, 4) = out_5_4;
      out_A(5, 5) = out_5_5;
    end % A
    %
    % - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    %
    function out_TA_x = TA_x( this, in_1, in_2, t )
      % Evaluate the tensor of A with respect to x.

      % Extract properties
      x__0 = this.m_x__0;
      y__0 = this.m_y__0;
      u__0 = this.m_u__0;
      v__0 = this.m_v__0;
      m = this.m_m;
      g = this.m_g;
      ell = this.m_ell;

      % Extract inputs
      x = in_1(1);
      y = in_1(2);
      u = in_1(3);
      v = in_1(4);
      lambda = in_1(5);

      % Evaluate function
      t1 = 0.1e1 / m;
      out_5_1_1 = 4 * t1 * lambda;
      out_5_5_1 = 4 * t1 * x;
      out_5_2_2 = out_5_1_1;
      out_5_5_2 = 4 * t1 * y;
      out_5_3_3 = -2;
      out_5_4_4 = -2;
      out_5_1_5 = out_5_5_1;
      out_5_2_5 = out_5_5_2;

      % Store outputs
      out_TA_x = zeros(5, 5, 5);
      out_TA_x(5, 1, 1) = out_5_1_1;
      out_TA_x(5, 5, 1) = out_5_5_1;
      out_TA_x(5, 2, 2) = out_5_2_2;
      out_TA_x(5, 5, 2) = out_5_5_2;
      out_TA_x(5, 3, 3) = out_5_3_3;
      out_TA_x(5, 4, 4) = out_5_4_4;
      out_TA_x(5, 1, 5) = out_5_1_5;
      out_TA_x(5, 2, 5) = out_5_2_5;
    end % TA_x
    %
    % - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    %
    function out_TA_v = TA_v( this, in_1, in_2, t )
      % Evaluate the tensor of A with respect to v.

      % Extract properties
      x__0 = this.m_x__0;
      y__0 = this.m_y__0;
      u__0 = this.m_u__0;
      v__0 = this.m_v__0;
      m = this.m_m;
      g = this.m_g;
      ell = this.m_ell;

      % Extract inputs
      x = in_1(1);
      y = in_1(2);
      u = in_1(3);
      v = in_1(4);
      lambda = in_1(5);

      % Evaluate function
      % No body

      % Store outputs
      out_TA_v = zeros(5, 5, 0);
    end % TA_v
    %
    % - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    %
    function out_b = b( this, in_1, in_2, t )
      % Calculate the vector b of the explicit system.

      % Extract properties
      x__0 = this.m_x__0;
      y__0 = this.m_y__0;
      u__0 = this.m_u__0;
      v__0 = this.m_v__0;
      m = this.m_m;
      g = this.m_g;
      ell = this.m_ell;

      % Extract inputs
      x = in_1(1);
      y = in_1(2);
      u = in_1(3);
      v = in_1(4);
      lambda = in_1(5);

      % Evaluate function
      out_1 = u;
      out_2 = v;
      t2 = 0.1e1 / m;
      out_3 = -2 * t2 * lambda * x;
      out_4 = -t2 * (g * m + 2 * y * lambda);

      % Store outputs
      out_b = zeros(5, 1);
      out_b(1) = out_1;
      out_b(2) = out_2;
      out_b(3) = out_3;
      out_b(4) = out_4;
    end % b
    %
    % - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    %
    function out_Jb_x = Jb_x( this, in_1, in_2, t )
      % Calculate the Jacobian of b with respect to x.

      % Extract properties
      x__0 = this.m_x__0;
      y__0 = this.m_y__0;
      u__0 = this.m_u__0;
      v__0 = this.m_v__0;
      m = this.m_m;
      g = this.m_g;
      ell = this.m_ell;

      % Extract inputs
      x = in_1(1);
      y = in_1(2);
      u = in_1(3);
      v = in_1(4);
      lambda = in_1(5);

      % Evaluate function
      t1 = 0.1e1 / m;
      out_3_1 = -2 * t1 * lambda;
      out_4_2 = out_3_1;
      out_1_3 = 1;
      out_2_4 = 1;
      out_3_5 = -2 * t1 * x;
      out_4_5 = -2 * t1 * y;

      % Store outputs
      out_Jb_x = zeros(5, 5);
      out_Jb_x(3, 1) = out_3_1;
      out_Jb_x(4, 2) = out_4_2;
      out_Jb_x(1, 3) = out_1_3;
      out_Jb_x(2, 4) = out_2_4;
      out_Jb_x(3, 5) = out_3_5;
      out_Jb_x(4, 5) = out_4_5;
    end % Jb_x
    %
    % - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    %
    function out_Jb_v = Jb_v( this, in_1, in_2, t )
      % Calculate the Jacobian of b with respect to v.

      % Extract properties
      x__0 = this.m_x__0;
      y__0 = this.m_y__0;
      u__0 = this.m_u__0;
      v__0 = this.m_v__0;
      m = this.m_m;
      g = this.m_g;
      ell = this.m_ell;

      % Extract inputs
      x = in_1(1);
      y = in_1(2);
      u = in_1(3);
      v = in_1(4);
      lambda = in_1(5);

      % Evaluate function
      % No body

      % Store outputs
      out_Jb_v = zeros(5, 0);
    end % Jb_v
    %
    % - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    %
    function out_v = v( this, in_1, t )
      % Evaluate the the veils v.

      % Extract properties
      x__0 = this.m_x__0;
      y__0 = this.m_y__0;
      u__0 = this.m_u__0;
      v__0 = this.m_v__0;
      m = this.m_m;
      g = this.m_g;
      ell = this.m_ell;

      % Extract inputs
      x = in_1(1);
      y = in_1(2);
      u = in_1(3);
      v = in_1(4);
      lambda = in_1(5);

      % Evaluate function
      % No body

      % Store outputs
      out_v = zeros(0, 1);
    end % v
    %
    % - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    %
    function out_Jv_x = Jv_x( this, in_1, in_2, t )
      % Evaluate the Jacobian of v with respect to x.

      % Extract properties
      x__0 = this.m_x__0;
      y__0 = this.m_y__0;
      u__0 = this.m_u__0;
      v__0 = this.m_v__0;
      m = this.m_m;
      g = this.m_g;
      ell = this.m_ell;

      % Extract inputs
      x = in_1(1);
      y = in_1(2);
      u = in_1(3);
      v = in_1(4);
      lambda = in_1(5);

      % Evaluate function
      % No body

      % Store outputs
      out_Jv_x = zeros(0, 5);
    end % Jv_x
    %
    % - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    %
    function out_h = h( this, in_1, in_2, t )
      % Calculate the residual of the invariants h.

      % Extract properties
      x__0 = this.m_x__0;
      y__0 = this.m_y__0;
      u__0 = this.m_u__0;
      v__0 = this.m_v__0;
      m = this.m_m;
      g = this.m_g;
      ell = this.m_ell;

      % Extract inputs
      x = in_1(1);
      y = in_1(2);
      u = in_1(3);
      v = in_1(4);
      lambda = in_1(5);

      % Evaluate function
      t1 = u ^ 2;
      t2 = u__0 ^ 2;
      t3 = v ^ 2;
      t4 = v__0 ^ 2;
      out_1 = (t1 - t2 + t3 - t4) * m / 2 + m * g * (y - y__0);
      t11 = ell ^ 2;
      t12 = x ^ 2;
      t13 = y ^ 2;
      out_2 = t11 - t12 - t13;
      out_3 = u * x + v * y;
      out_4 = 0.1e1 / m * (lambda * (2 * t12 + 2 * t13) + (g * y - t1 - t3) * m);

      % Store outputs
      out_h = zeros(4, 1);
      out_h(1) = out_1;
      out_h(2) = out_2;
      out_h(3) = out_3;
      out_h(4) = out_4;
    end % h
    %
    % - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    %
    function out_Jh_x = Jh_x( this, in_1, in_2, t )
      % Calculate the Jacobian of h with respect to x.

      % Extract properties
      x__0 = this.m_x__0;
      y__0 = this.m_y__0;
      u__0 = this.m_u__0;
      v__0 = this.m_v__0;
      m = this.m_m;
      g = this.m_g;
      ell = this.m_ell;

      % Extract inputs
      x = in_1(1);
      y = in_1(2);
      u = in_1(3);
      v = in_1(4);
      lambda = in_1(5);

      % Evaluate function
      out_2_1 = -2 * x;
      out_3_1 = u;
      t3 = 0.1e1 / m;
      out_4_1 = 4 * t3 * lambda * x;
      out_1_2 = g * m;
      out_2_2 = -2 * y;
      out_3_2 = v;
      out_4_2 = t3 * (4 * lambda * y + out_1_2);
      out_1_3 = m * u;
      out_3_3 = x;
      out_4_3 = -2 * u;
      out_1_4 = m * v;
      out_3_4 = y;
      out_4_4 = -2 * v;
      t11 = x ^ 2;
      t12 = y ^ 2;
      out_4_5 = t3 * (2 * t11 + 2 * t12);

      % Store outputs
      out_Jh_x = zeros(4, 5);
      out_Jh_x(2, 1) = out_2_1;
      out_Jh_x(3, 1) = out_3_1;
      out_Jh_x(4, 1) = out_4_1;
      out_Jh_x(1, 2) = out_1_2;
      out_Jh_x(2, 2) = out_2_2;
      out_Jh_x(3, 2) = out_3_2;
      out_Jh_x(4, 2) = out_4_2;
      out_Jh_x(1, 3) = out_1_3;
      out_Jh_x(3, 3) = out_3_3;
      out_Jh_x(4, 3) = out_4_3;
      out_Jh_x(1, 4) = out_1_4;
      out_Jh_x(3, 4) = out_3_4;
      out_Jh_x(4, 4) = out_4_4;
      out_Jh_x(4, 5) = out_4_5;
    end % Jh_x
    %
    % - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    %
    function out_Jh_v = Jh_v( this, in_1, in_2, t )
      % Calculate the Jacobian of h with respect to v.

      % Extract properties
      x__0 = this.m_x__0;
      y__0 = this.m_y__0;
      u__0 = this.m_u__0;
      v__0 = this.m_v__0;
      m = this.m_m;
      g = this.m_g;
      ell = this.m_ell;

      % Extract inputs
      x = in_1(1);
      y = in_1(2);
      u = in_1(3);
      v = in_1(4);
      lambda = in_1(5);

      % Evaluate function
      % No body

      % Store outputs
      out_Jh_v = zeros(4, 0);
    end % Jh_v
    %
    % - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    %
  end
end % Pendulum

% That's All Folks!
