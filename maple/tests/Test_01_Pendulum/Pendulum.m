% +--------------------------------------------------------------------------+
% | 'Indigo' module version 1.0 - BSD 3-Clause License - Copyright (c) 2023  |
% | Current version authors:                                                 |
% |   Davide Stocco and Enrico Bertolazzi.                                   |
% +--------------------------------------------------------------------------+

% Matlab generated code for implicit system: Pendulum
% This file has been automatically generated by Indigo.
% DISCLAIMER: If you need to edit it, do it wisely!

classdef Pendulum < SemiExplicitSystem
  %
  % No class description provided.
  %
  properties (SetAccess = protected, Hidden = true)
    % User data
    m_m = 1.0;
    m_ell = 1.0;
    m_g = 9.81;
  end
  %
  methods
    %
    % - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    %
    function this = Pendulum( varargin )
      % Constructor for 'Pendulum' class.

      % Superclass constructor
      num_equations  = 5;
      num_invariants = 3;
      this = this@SemiExplicitSystem('Pendulum', num_equations, num_invariants);

      % User data
      if (nargin == 0)
        % Keep default values
      elseif (nargin == 3)
        this.m_m = varargin{1};
        this.m_ell = varargin{2};
        this.m_g = varargin{3};
      else
        error('wrong number of input arguments.');
      end
    end
    %
    % - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    %
    function out_A = A( this, in_1, t )
      % Calculate the matrix A of the explicit system.

      % Extract properties
      m = this.m_m;
      ell = this.m_ell;
      g = this.m_g;

      % Extract inputs
      x = in_1(1);
      y = in_1(2);
      u = in_1(3);
      v = in_1(4);
      lambda = in_1(5);

      % Evaluate assignments
      t1 = x ^ 2;
      t2 = y ^ 2;
      t4 = 0.1e1 / m;
      V_y58KN_1 = t4 * (t1 + t2);
      V_y58KN_2 = t4 * (m * g + 2 * lambda * y);

      % Evaluate function
      out_1_1 = 4 * lambda * x / m;
      out_1_2 = 2 * V_y58KN_2;
      out_1_3 = -4 * u;
      out_1_4 = -4 * v;
      out_1_5 = 2 * V_y58KN_1;
      out_2_2 = 1;
      out_3_1 = 1;
      out_4_4 = m;
      out_5_3 = m;

      % Store outputs
      out_A = zeros(5,5);
      out_A(1,1) = out_1_1;
      out_A(1,2) = out_1_2;
      out_A(1,3) = out_1_3;
      out_A(1,4) = out_1_4;
      out_A(1,5) = out_1_5;
      out_A(2,2) = out_2_2;
      out_A(3,1) = out_3_1;
      out_A(4,4) = out_4_4;
      out_A(5,3) = out_5_3;
    end % A
    %
    % - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    %
    function out_TA = TA( this, in_1, t )
      % Calculate the tensor of A with respect to x.

      % Extract properties
      m = this.m_m;
      ell = this.m_ell;
      g = this.m_g;

      % Extract inputs
      x = in_1(1);
      y = in_1(2);
      u = in_1(3);
      v = in_1(4);
      lambda = in_1(5);

      % Evaluate assignments
      t1 = x ^ 2;
      t2 = y ^ 2;
      t4 = 0.1e1 / m;
      V_y58KN_1 = t4 * (t1 + t2);
      V_y58KN_2 = t4 * (m * g + 2 * lambda * y);
      D_1_V_y58KN_1 = 2 * x * t4;
      D_2_V_y58KN_1 = 2 * y * t4;
      D_2_V_y58KN_2 = 2 * t4 * lambda;
      D_1_V_y58KN_2 = D_2_V_y58KN_1;

      % Evaluate function
      t1 = 0.1e1 / m;
      out_1_1_1 = 4 * t1 * lambda;
      out_1_1_5 = 4 * x * t1;
      out_1_2_2 = 2 * D_2_V_y58KN_2;
      out_1_2_5 = 2 * D_1_V_y58KN_2;
      out_1_3_3 = -4;
      out_1_4_4 = -4;
      out_1_5_1 = 2 * D_1_V_y58KN_1;
      out_1_5_2 = 2 * D_2_V_y58KN_1;

      % Store outputs
      out_TA = zeros(5, 5, 5);
      out_TA(1,1,1) = out_1_1_1;
      out_TA(1,1,5) = out_1_1_5;
      out_TA(1,2,2) = out_1_2_2;
      out_TA(1,2,5) = out_1_2_5;
      out_TA(1,3,3) = out_1_3_3;
      out_TA(1,4,4) = out_1_4_4;
      out_TA(1,5,1) = out_1_5_1;
      out_TA(1,5,2) = out_1_5_2;
    end % TA
    %
    % - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    %
    function out_b = b( this, in_1, t )
      % Calculate the vector b of the explicit system.
      % Extract properties
      m = this.m_m;
      ell = this.m_ell;
      g = this.m_g;

      % Extract inputs
      x = in_1(1);
      y = in_1(2);
      u = in_1(3);
      v = in_1(4);
      lambda = in_1(5);

      % Evaluate assignments
      t1 = x ^ 2;
      t2 = y ^ 2;
      t4 = 0.1e1 / m;
      V_y58KN_1 = t4 * (t1 + t2);
      V_y58KN_2 = t4 * (m * g + 2 * lambda * y);

      % Evaluate elements
      out_1 = 0;
      out_2 = v;
      out_3 = u;
      out_4 = -m * g - lambda * y;
      out_5 = -lambda * x;

      % Store outputs
      out_b = zeros(5,1);
      out_b(1) = out_1;
      out_b(2) = out_2;
      out_b(3) = out_3;
      out_b(4) = out_4;
      out_b(5) = out_5;
    end % b
    %
    % - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    %
    function out_Jb = Jb( this, in_1, t )
      % Calculate the Jacobian of b with respect to x.

      % Extract properties
      m = this.m_m;
      ell = this.m_ell;
      g = this.m_g;

      % Extract inputs
      x = in_1(1);
      y = in_1(2);
      u = in_1(3);
      v = in_1(4);
      lambda = in_1(5);

      % Evaluate assignments
      t1 = x ^ 2;
      t2 = y ^ 2;
      t4 = 0.1e1 / m;
      V_y58KN_1 = t4 * (t1 + t2);
      V_y58KN_2 = t4 * (m * g + 2 * lambda * y);
      D_1_V_y58KN_1 = 2 * x * t4;
      D_2_V_y58KN_1 = 2 * y * t4;
      D_2_V_y58KN_2 = 2 * t4 * lambda;
      D_1_V_y58KN_2 = D_2_V_y58KN_1;

      % Evaluate function
      out_2_4 = 1;
      out_3_3 = 1;
      out_4_2 = -lambda;
      out_4_5 = -y;
      out_5_1 = out_4_2;
      out_5_5 = -x;

      % Store outputs
      out_Jb = zeros(5,5);
      out_Jb(2,4) = out_2_4;
      out_Jb(3,3) = out_3_3;
      out_Jb(4,2) = out_4_2;
      out_Jb(4,5) = out_4_5;
      out_Jb(5,1) = out_5_1;
      out_Jb(5,5) = out_5_5;
    end % Jb
    %
    % - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    %
    function out_h = h( this, in_1, t )
      % Calculate the residual of the invariants h.
      % Extract properties
      m = this.m_m;
      ell = this.m_ell;
      g = this.m_g;

      % Extract inputs
      x = in_1(1);
      y = in_1(2);
      u = in_1(3);
      v = in_1(4);
      lambda = in_1(5);

      % Evaluate assignments
      t1 = x ^ 2;
      t2 = y ^ 2;
      t4 = 0.1e1 / m;
      V_y58KN_1 = t4 * (t1 + t2);
      V_y58KN_2 = t4 * (m * g + 2 * lambda * y);

      % Evaluate elements
      t1 = ell ^ 2;
      t2 = x ^ 2;
      t3 = y ^ 2;
      out_1 = t1 - t2 - t3;
      out_2 = 2 * u * x + 2 * v * y;
      t11 = u ^ 2;
      t13 = v ^ 2;
      out_3 = -2 / m * (-g * m * y - t2 * lambda - t3 * lambda + t11 * m + t13 * m);

      % Store outputs
      out_h = zeros(3,1);
      out_h(1) = out_1;
      out_h(2) = out_2;
      out_h(3) = out_3;
    end % h
    %
    % - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    %
    function out_Jh = Jh( this, in_1, t )
      % Calculate the Jacobian of h with respect to x.

      % Extract properties
      m = this.m_m;
      ell = this.m_ell;
      g = this.m_g;

      % Extract inputs
      x = in_1(1);
      y = in_1(2);
      u = in_1(3);
      v = in_1(4);
      lambda = in_1(5);

      % Evaluate assignments
      t1 = x ^ 2;
      t2 = y ^ 2;
      t4 = 0.1e1 / m;
      V_y58KN_1 = t4 * (t1 + t2);
      V_y58KN_2 = t4 * (m * g + 2 * lambda * y);
      D_1_V_y58KN_1 = 2 * x * t4;
      D_2_V_y58KN_1 = 2 * y * t4;
      D_2_V_y58KN_2 = 2 * t4 * lambda;
      D_1_V_y58KN_2 = D_2_V_y58KN_1;

      % Evaluate function
      t1 = 2 * x;
      out_1_1 = -t1;
      t2 = 2 * y;
      out_1_2 = -t2;
      out_2_1 = 2 * u;
      out_2_2 = 2 * v;
      out_2_3 = t1;
      out_2_4 = t2;
      t4 = 0.1e1 / m;
      out_3_1 = 4 * t4 * x * lambda;
      out_3_2 = -2 * t4 * (-m * g - 2 * lambda * y);
      out_3_3 = -4 * u;
      out_3_4 = -4 * v;
      t14 = x ^ 2;
      t15 = y ^ 2;
      out_3_5 = -2 * t4 * (-t14 - t15);

      % Store outputs
      out_Jh = zeros(3,5);
      out_Jh(1,1) = out_1_1;
      out_Jh(1,2) = out_1_2;
      out_Jh(2,1) = out_2_1;
      out_Jh(2,2) = out_2_2;
      out_Jh(2,3) = out_2_3;
      out_Jh(2,4) = out_2_4;
      out_Jh(3,1) = out_3_1;
      out_Jh(3,2) = out_3_2;
      out_Jh(3,3) = out_3_3;
      out_Jh(3,4) = out_3_4;
      out_Jh(3,5) = out_3_5;
    end % Jh
    %
    % - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    %
  end
end % Pendulum

% That's All Folks!
