% +--------------------------------------------------------------------------+
% | 'Indigo' module version 1.0 - BSD 3-Clause License - Copyright (c) 2023  |
% | Current version authors:                                                 |
% |   Davide Stocco and Enrico Bertolazzi.                                   |
% +--------------------------------------------------------------------------+

% Matlab generated code for implicit system: Transistor8
% This file has been automatically generated by Indigo.
% DISCLAIMER: If you need to edit it, do it wisely!

classdef Transistor8 < Indigo.DAE.Implicit
  %
  % No class description provided.
  %
  properties (SetAccess = protected, Hidden = true)
    % User data
    m_U__b = 6.0;
    m_U__f = .26e-1;
    m_alpha = .99;
    m_beta = .1e-5;
    m_R__0 = .1e4;
    m_R__1 = .9e4;
    m_R__2 = .9e4;
    m_R__3 = .9e4;
    m_R__4 = .9e4;
    m_R__5 = .9e4;
    m_R__6 = .9e4;
    m_R__7 = .9e4;
    m_R__8 = .9e4;
    m_R__9 = .9e4;
    m_C__1 = .1e-5;
    m_C__2 = .2e-5;
    m_C__3 = .3e-5;
    m_C__4 = .4e-5;
    m_C__5 = .5e-5;
  end
  %
  methods
    %
    % - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    %
    function this = Transistor8( varargin )
      % Class constructor.

      % Superclass constructor
      num_eqns = 8;
      num_veil = 2;
      num_invs = 3;
      this = this@Indigo.DAE.Implicit('Transistor8', num_eqns, num_veil, num_invs);

      % User data
      if (nargin == 0)
        % Keep default values
      elseif (nargin == 1 && isstruct(varargin{1}))
        this.m_U__b = varargin{1}.U__b;
        this.m_U__f = varargin{1}.U__f;
        this.m_alpha = varargin{1}.alpha;
        this.m_beta = varargin{1}.beta;
        this.m_R__0 = varargin{1}.R__0;
        this.m_R__1 = varargin{1}.R__1;
        this.m_R__2 = varargin{1}.R__2;
        this.m_R__3 = varargin{1}.R__3;
        this.m_R__4 = varargin{1}.R__4;
        this.m_R__5 = varargin{1}.R__5;
        this.m_R__6 = varargin{1}.R__6;
        this.m_R__7 = varargin{1}.R__7;
        this.m_R__8 = varargin{1}.R__8;
        this.m_R__9 = varargin{1}.R__9;
        this.m_C__1 = varargin{1}.C__1;
        this.m_C__2 = varargin{1}.C__2;
        this.m_C__3 = varargin{1}.C__3;
        this.m_C__4 = varargin{1}.C__4;
        this.m_C__5 = varargin{1}.C__5;
      elseif (nargin == 19)
        this.m_U__b = varargin{1};
        this.m_U__f = varargin{2};
        this.m_alpha = varargin{3};
        this.m_beta = varargin{4};
        this.m_R__0 = varargin{5};
        this.m_R__1 = varargin{6};
        this.m_R__2 = varargin{7};
        this.m_R__3 = varargin{8};
        this.m_R__4 = varargin{9};
        this.m_R__5 = varargin{10};
        this.m_R__6 = varargin{11};
        this.m_R__7 = varargin{12};
        this.m_R__8 = varargin{13};
        this.m_R__9 = varargin{14};
        this.m_C__1 = varargin{15};
        this.m_C__2 = varargin{16};
        this.m_C__3 = varargin{17};
        this.m_C__4 = varargin{18};
        this.m_C__5 = varargin{19};
      else
        error('wrong number of input arguments.');
      end
    end % Transistor8
    %
    % - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    %
    function out_F = F( this, in_1, in_2, ~, t )
      % Evaluate the function F.

      % Extract properties
      U__b = this.m_U__b;
      U__f = this.m_U__f;
      alpha = this.m_alpha;
      beta = this.m_beta;
      R__0 = this.m_R__0;
      R__1 = this.m_R__1;
      R__2 = this.m_R__2;
      R__3 = this.m_R__3;
      R__4 = this.m_R__4;
      R__5 = this.m_R__5;
      R__6 = this.m_R__6;
      R__7 = this.m_R__7;
      R__8 = this.m_R__8;
      R__9 = this.m_R__9;
      C__1 = this.m_C__1;
      C__2 = this.m_C__2;
      C__3 = this.m_C__3;
      C__4 = this.m_C__4;
      C__5 = this.m_C__5;

      % Extract inputs
      y__1 = in_1(1);
      y__2 = in_1(2);
      y__3 = in_1(3);
      y__4 = in_1(4);
      y__5 = in_1(5);
      y__6 = in_1(6);
      y__7 = in_1(7);
      y__1_dot = in_2(1);
      y__2_dot = in_2(2);
      y__3_dot = in_2(3);
      y__4_dot = in_2(4);
      y__5_dot = in_2(5);
      y__6_dot = in_2(6);
      y__7_dot = in_2(7);
      y__8_dot = in_2(8);

      % Evaluate function
      t3 = beta * R__3;
      t5 = 0.1e1 / U__f;
      t7 = exp(t5 * (y__2 - y__3));
      out_1 = 0.1e1 / R__3 * (-C__2 * y__3_dot * R__3 + t7 * t3 - t3 - y__3);
      t13 = beta * R__7;
      t16 = exp(t5 * (y__5 - y__6));
      out_2 = 0.1e1 / C__4 / R__7 * (y__6_dot * R__7 * C__4 - t16 * t13 + t13 + y__6);
      t28 = sin(200 * pi * t);
      t31 = 0.1e1 / R__0;
      t33 = 0.1e1 / C__1;
      out_3 = t33 * t31 * (y__1_dot * R__0 * C__1 - y__2_dot * R__0 * C__1 + 0.1e0 * t28 + y__1);
      t34 = alpha * beta;
      t43 = 0.1e1 / R__4;
      t45 = 0.1e1 / C__3;
      out_4 = t45 * t43 * (y__4_dot * R__4 * C__3 - y__5_dot * R__4 * C__3 + t7 * R__4 * t34 - R__4 * t34 - U__b + y__4);
      t50 = y__8_dot * R__8;
      t54 = 0.1e1 / R__8;
      t56 = 0.1e1 / C__5;
      out_5 = t56 * t54 * (y__7_dot * R__8 * C__5 + t16 * R__8 * t34 - C__5 * t50 - R__8 * t34 - U__b + y__7);
      t60 = beta * (alpha - 1);
      t62 = t7 * (y__2_dot - y__3_dot);
      out_6 = 0.1e1 / R__2 / R__1 * t33 * t31 * t5 * (t62 * t60 * R__0 * R__1 * R__2 - (R__0 * (R__1 + R__2) * y__2_dot + y__1_dot * R__1 * R__2) * U__f);
      t80 = R__4 * R__5 * R__6;
      t81 = y__5_dot - y__6_dot;
      out_7 = 0.1e1 / R__6 / R__5 * t45 * t43 * t5 * (t16 * t81 * t60 * t80 - t62 * t34 * t80 - U__f * (R__4 * (R__5 + R__6) * y__5_dot + y__4_dot * R__5 * R__6));
      out_8 = t5 / R__9 * t56 * t54 * (-t16 * t81 * alpha * R__8 * R__9 * beta - (y__7_dot * R__9 + t50) * U__f);

      % Store outputs
      out_F = zeros(8, 1);
      out_F(1) = out_1;
      out_F(2) = out_2;
      out_F(3) = out_3;
      out_F(4) = out_4;
      out_F(5) = out_5;
      out_F(6) = out_6;
      out_F(7) = out_7;
      out_F(8) = out_8;
    end % F
    %
    % - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    %
    function out_JF_x = JF_x( this, in_1, in_2, ~, ~ )
      % Evaluate the Jacobian of F with respect to x.

      % Extract properties
      U__f = this.m_U__f;
      alpha = this.m_alpha;
      beta = this.m_beta;
      R__0 = this.m_R__0;
      R__3 = this.m_R__3;
      R__4 = this.m_R__4;
      R__7 = this.m_R__7;
      R__8 = this.m_R__8;
      C__1 = this.m_C__1;
      C__3 = this.m_C__3;
      C__4 = this.m_C__4;
      C__5 = this.m_C__5;

      % Extract inputs
      y__2 = in_1(2);
      y__3 = in_1(3);
      y__5 = in_1(5);
      y__6 = in_1(6);
      y__2_dot = in_2(2);
      y__3_dot = in_2(3);
      y__5_dot = in_2(5);
      y__6_dot = in_2(6);

      % Evaluate function
      t2 = 0.1e1 / C__1;
      out_3_1 = t2 / R__0;
      t3 = 0.1e1 / U__f;
      t4 = t3 * beta;
      t7 = exp(t3 * (y__2 - y__3));
      out_1_2 = t7 * t4;
      t8 = t7 * t3;
      t9 = alpha * beta;
      t10 = 0.1e1 / C__3;
      out_4_2 = t10 * t9 * t8;
      t13 = beta * (alpha - 1);
      t14 = y__2_dot - y__3_dot;
      t16 = U__f ^ 2;
      t17 = 0.1e1 / t16;
      t18 = t7 * t17;
      out_6_2 = t2 * t18 * t14 * t13;
      t22 = t10 * t18 * t14 * t9;
      out_7_2 = -t22;
      out_1_3 = 0.1e1 / R__3 * (-t8 * beta * R__3 - 1);
      out_4_3 = -out_4_2;
      out_6_3 = -out_6_2;
      out_7_3 = t22;
      out_4_4 = t10 / R__4;
      t30 = exp(t3 * (y__5 - y__6));
      t31 = 0.1e1 / C__4;
      out_2_5 = -t31 * t30 * t4;
      t34 = t30 * t3;
      t35 = 0.1e1 / C__5;
      out_5_5 = t35 * t9 * t34;
      t37 = y__5_dot - y__6_dot;
      t39 = t30 * t17;
      out_7_5 = t10 * t39 * t37 * t13;
      t43 = t35 * t39 * t37 * t9;
      out_8_5 = -t43;
      out_2_6 = t31 / R__7 * (t34 * beta * R__7 + 1);
      out_5_6 = -out_5_5;
      out_7_6 = -out_7_5;
      out_8_6 = t43;
      out_5_7 = t35 / R__8;

      % Store outputs
      out_JF_x = zeros(8, 8);
      out_JF_x(3, 1) = out_3_1;
      out_JF_x(1, 2) = out_1_2;
      out_JF_x(4, 2) = out_4_2;
      out_JF_x(6, 2) = out_6_2;
      out_JF_x(7, 2) = out_7_2;
      out_JF_x(1, 3) = out_1_3;
      out_JF_x(4, 3) = out_4_3;
      out_JF_x(6, 3) = out_6_3;
      out_JF_x(7, 3) = out_7_3;
      out_JF_x(4, 4) = out_4_4;
      out_JF_x(2, 5) = out_2_5;
      out_JF_x(5, 5) = out_5_5;
      out_JF_x(7, 5) = out_7_5;
      out_JF_x(8, 5) = out_8_5;
      out_JF_x(2, 6) = out_2_6;
      out_JF_x(5, 6) = out_5_6;
      out_JF_x(7, 6) = out_7_6;
      out_JF_x(8, 6) = out_8_6;
      out_JF_x(5, 7) = out_5_7;
    end % JF_x
    %
    % - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    %
    function out_JF_x_dot = JF_x_dot( this, in_1, ~, ~, ~ )
      % Evaluate the Jacobian of F with respect to x_dot.

      % Extract properties
      U__f = this.m_U__f;
      alpha = this.m_alpha;
      beta = this.m_beta;
      R__0 = this.m_R__0;
      R__1 = this.m_R__1;
      R__2 = this.m_R__2;
      R__4 = this.m_R__4;
      R__5 = this.m_R__5;
      R__6 = this.m_R__6;
      R__8 = this.m_R__8;
      R__9 = this.m_R__9;
      C__1 = this.m_C__1;
      C__2 = this.m_C__2;
      C__3 = this.m_C__3;
      C__5 = this.m_C__5;

      % Extract inputs
      y__2 = in_1(2);
      y__3 = in_1(3);
      y__5 = in_1(5);
      y__6 = in_1(6);

      % Evaluate function
      out_3_1 = 1;
      t1 = 0.1e1 / R__0;
      t2 = 0.1e1 / C__1;
      out_6_1 = -t2 * t1;
      out_3_2 = -1;
      t7 = beta * (alpha - 1);
      t9 = 0.1e1 / U__f;
      t11 = exp(t9 * (y__2 - y__3));
      out_6_2 = 0.1e1 / R__2 / R__1 * t2 * t1 * t9 * (t11 * t7 * R__0 * R__1 * R__2 - R__0 * (R__1 + R__2) * U__f);
      t24 = t11 * t9;
      t25 = alpha * beta;
      t26 = 0.1e1 / C__3;
      t28 = t26 * t25 * t24;
      out_7_2 = -t28;
      out_1_3 = -C__2;
      out_6_3 = -t2 * t24 * t7;
      out_7_3 = t28;
      out_4_4 = 1;
      t31 = 0.1e1 / R__4;
      out_7_4 = -t26 * t31;
      out_4_5 = -1;
      t37 = exp(t9 * (y__5 - y__6));
      out_7_5 = 0.1e1 / R__6 / R__5 * t26 * t31 * t9 * (t37 * t7 * R__4 * R__5 * R__6 - U__f * R__4 * (R__5 + R__6));
      t50 = t37 * t9;
      t51 = 0.1e1 / C__5;
      t53 = t51 * t25 * t50;
      out_8_5 = -t53;
      out_2_6 = 1;
      out_7_6 = -t26 * t50 * t7;
      out_8_6 = t53;
      out_5_7 = 1;
      out_8_7 = -t51 / R__8;
      out_5_8 = -1;
      out_8_8 = -0.1e1 / R__9 * t51;

      % Store outputs
      out_JF_x_dot = zeros(8, 8);
      out_JF_x_dot(3, 1) = out_3_1;
      out_JF_x_dot(6, 1) = out_6_1;
      out_JF_x_dot(3, 2) = out_3_2;
      out_JF_x_dot(6, 2) = out_6_2;
      out_JF_x_dot(7, 2) = out_7_2;
      out_JF_x_dot(1, 3) = out_1_3;
      out_JF_x_dot(6, 3) = out_6_3;
      out_JF_x_dot(7, 3) = out_7_3;
      out_JF_x_dot(4, 4) = out_4_4;
      out_JF_x_dot(7, 4) = out_7_4;
      out_JF_x_dot(4, 5) = out_4_5;
      out_JF_x_dot(7, 5) = out_7_5;
      out_JF_x_dot(8, 5) = out_8_5;
      out_JF_x_dot(2, 6) = out_2_6;
      out_JF_x_dot(7, 6) = out_7_6;
      out_JF_x_dot(8, 6) = out_8_6;
      out_JF_x_dot(5, 7) = out_5_7;
      out_JF_x_dot(8, 7) = out_8_7;
      out_JF_x_dot(5, 8) = out_5_8;
      out_JF_x_dot(8, 8) = out_8_8;
    end % JF_x_dot
    %
    % - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    %
    function out_JF_v = JF_v( ~, ~, ~, ~, ~ )
      % Evaluate the Jacobian of F with respect to v.

      % Extract properties
      % No properties

      % Extract inputs

      % Evaluate function
      % No body

      % Store outputs
      out_JF_v = zeros(8, 2);
    end % JF_v
    %
    % - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    %
    function out_v = v( this, in_1, t )
      % Evaluate the the veils v.

      % Extract properties
      U__b = this.m_U__b;
      U__f = this.m_U__f;
      alpha = this.m_alpha;
      beta = this.m_beta;
      R__0 = this.m_R__0;
      R__1 = this.m_R__1;
      R__2 = this.m_R__2;
      R__4 = this.m_R__4;
      R__5 = this.m_R__5;
      R__6 = this.m_R__6;
      C__1 = this.m_C__1;
      C__3 = this.m_C__3;

      % Extract inputs
      y__1 = in_1(1);
      y__2 = in_1(2);
      y__3 = in_1(3);
      y__4 = in_1(4);
      y__5 = in_1(5);
      y__6 = in_1(6);

      % Evaluate function
      t4 = R__0 * R__1;
      t6 = 0.1e1 / U__f;
      t8 = exp(t6 * (y__2 - y__3));
      t11 = R__1 * R__2;
      t14 = sin(200 * pi * t);
      V_y58KN_1 = 0.1e1 / C__1 / R__1 / R__2 / R__0 * (t8 * t4 * (alpha - 0.1e1) * beta * R__2 - 0.1e0 * t14 * t11 + y__2 * (-0.1e1 * t4 - 0.1e1 * R__0 * R__2) - 0.1e1 * y__1 * t11 + ((-0.1e1 * alpha + 0.1e1) * beta * R__2 + U__b) * R__0 * R__1);
      t45 = exp(t6 * (y__5 - y__6));
      V_y58KN_2 = 0.1e1 / C__3 / R__5 / R__6 / R__4 * (-t45 * (alpha - 1) * beta * R__4 * R__5 * R__6 + R__6 * alpha * beta * R__5 * R__4 * t8 + R__4 * (R__5 + R__6) * y__5 + (y__4 * R__6 + (-R__6 * beta - U__b) * R__4 - R__6 * U__b) * R__5);

      % Store outputs
      out_v = zeros(2, 1);
      out_v(1) = V_y58KN_1;
      out_v(2) = V_y58KN_2;
    end % v
    %
    % - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    %
    function out_Jv_x = Jv_x( this, in_1, ~, ~ )
      % Evaluate the Jacobian of v with respect to x.

      % Extract properties
      U__f = this.m_U__f;
      alpha = this.m_alpha;
      beta = this.m_beta;
      R__0 = this.m_R__0;
      R__1 = this.m_R__1;
      R__2 = this.m_R__2;
      R__4 = this.m_R__4;
      R__5 = this.m_R__5;
      R__6 = this.m_R__6;
      C__1 = this.m_C__1;
      C__3 = this.m_C__3;

      % Extract inputs
      y__2 = in_1(2);
      y__3 = in_1(3);
      y__5 = in_1(5);
      y__6 = in_1(6);

      % Evaluate function
      t1 = 0.1e1 / R__0;
      t2 = 0.1e1 / C__1;
      D_V_y58KN_1_1 = -0.1e1 * t2 * t1;
      D_V_y58KN_2_1 = 0;
      t6 = (alpha - 0.1e1) * beta;
      t8 = R__0 * R__1;
      t9 = 0.1e1 / U__f;
      t12 = exp(t9 * (y__2 - y__3));
      t13 = t12 * t9;
      D_V_y58KN_1_2 = 0.1e1 / R__2 / R__1 * t2 * t1 * (t13 * t8 * R__2 * t6 - 0.1e1 * t8 - 0.1e1 * R__0 * R__2);
      t26 = 0.1e1 / C__3;
      D_V_y58KN_2_2 = t26 * beta * alpha * t13;
      D_V_y58KN_1_3 = -t2 * t13 * t6;
      D_V_y58KN_2_3 = -D_V_y58KN_2_2;
      D_V_y58KN_1_4 = 0;
      t30 = 0.1e1 / R__4;
      D_V_y58KN_2_4 = t26 * t30;
      D_V_y58KN_1_5 = 0;
      t34 = beta * (alpha - 1);
      t37 = exp(t9 * (y__5 - y__6));
      t38 = t37 * t9;
      D_V_y58KN_2_5 = 0.1e1 / R__6 / R__5 * t26 * t30 * (-t38 * t34 * R__4 * R__5 * R__6 + R__4 * (R__5 + R__6));
      D_V_y58KN_1_6 = 0;
      D_V_y58KN_2_6 = t26 * t38 * t34;
      D_V_y58KN_1_7 = 0;
      D_V_y58KN_2_7 = 0;
      D_V_y58KN_1_8 = 0;
      D_V_y58KN_2_8 = 0;

      % Store outputs
      out_Jv_x = zeros(2, 8);
      out_Jv_x(1, 1) = D_V_y58KN_1_1;
      out_Jv_x(2, 1) = D_V_y58KN_2_1;
      out_Jv_x(1, 2) = D_V_y58KN_1_2;
      out_Jv_x(2, 2) = D_V_y58KN_2_2;
      out_Jv_x(1, 3) = D_V_y58KN_1_3;
      out_Jv_x(2, 3) = D_V_y58KN_2_3;
      out_Jv_x(1, 4) = D_V_y58KN_1_4;
      out_Jv_x(2, 4) = D_V_y58KN_2_4;
      out_Jv_x(1, 5) = D_V_y58KN_1_5;
      out_Jv_x(2, 5) = D_V_y58KN_2_5;
      out_Jv_x(1, 6) = D_V_y58KN_1_6;
      out_Jv_x(2, 6) = D_V_y58KN_2_6;
      out_Jv_x(1, 7) = D_V_y58KN_1_7;
      out_Jv_x(2, 7) = D_V_y58KN_2_7;
      out_Jv_x(1, 8) = D_V_y58KN_1_8;
      out_Jv_x(2, 8) = D_V_y58KN_2_8;
    end % Jv_x
    %
    % - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    %
    function out_h = h( this, in_1, in_2, ~ )
      % Calculate the residual of the invariants h.

      % Extract properties
      U__b = this.m_U__b;
      U__f = this.m_U__f;
      alpha = this.m_alpha;
      beta = this.m_beta;
      R__8 = this.m_R__8;
      R__9 = this.m_R__9;
      C__5 = this.m_C__5;

      % Extract inputs
      y__5 = in_1(5);
      y__6 = in_1(6);
      y__7 = in_1(7);
      y__8 = in_1(8);
      V_y58KN_1 = in_2(1);
      V_y58KN_2 = in_2(2);

      % Evaluate function
      out_1 = V_y58KN_1;
      out_2 = -V_y58KN_2;
      t4 = exp((y__5 - y__6) / U__f);
      out_3 = 0.1e1 / C__5 / R__9 / R__8 * (-R__9 * alpha * beta * R__8 * t4 - y__7 * R__9 - y__8 * R__8 + R__9 * (alpha * beta * R__8 + U__b));

      % Store outputs
      out_h = zeros(3, 1);
      out_h(1) = out_1;
      out_h(2) = out_2;
      out_h(3) = out_3;
    end % h
    %
    % - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    %
    function out_Jh_x = Jh_x( this, in_1, ~, ~ )
      % Calculate the Jacobian of h with respect to x.

      % Extract properties
      U__f = this.m_U__f;
      alpha = this.m_alpha;
      beta = this.m_beta;
      R__8 = this.m_R__8;
      R__9 = this.m_R__9;
      C__5 = this.m_C__5;

      % Extract inputs
      y__5 = in_1(5);
      y__6 = in_1(6);

      % Evaluate function
      t1 = 0.1e1 / U__f;
      t4 = exp(t1 * (y__5 - y__6));
      t7 = 0.1e1 / C__5;
      t9 = t7 * beta * alpha * t4 * t1;
      out_3_5 = -t9;
      out_3_6 = t9;
      out_3_7 = -t7 / R__8;
      out_3_8 = -0.1e1 / R__9 * t7;

      % Store outputs
      out_Jh_x = zeros(3, 8);
      out_Jh_x(3, 5) = out_3_5;
      out_Jh_x(3, 6) = out_3_6;
      out_Jh_x(3, 7) = out_3_7;
      out_Jh_x(3, 8) = out_3_8;
    end % Jh_x
    %
    % - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    %
    function out_Jh_v = Jh_v( ~, ~, ~, ~ )
      % Calculate the Jacobian of h with respect to v.

      % Extract properties
      % No properties

      % Extract inputs

      % Evaluate function
      out_1_1 = 1;
      out_2_2 = -1;

      % Store outputs
      out_Jh_v = zeros(3, 2);
      out_Jh_v(1, 1) = out_1_1;
      out_Jh_v(2, 2) = out_2_2;
    end % Jh_v
    %
    % - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    %
    function out = in_domain( ~, ~, ~ )
      out = true;
    end % in_domain
    %
    % - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    %
  end
end % Transistor8

% That's All Folks!
