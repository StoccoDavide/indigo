% +--------------------------------------------------------------------------+
% | 'Indigo' module version 1.0 - BSD 3-Clause License - Copyright (c) 2023  |
% | Current version authors:                                                 |
% |   Davide Stocco and Enrico Bertolazzi.                                   |
% +--------------------------------------------------------------------------+

% Matlab generated code for implicit system: Transistor8
% This file has been automatically generated by Indigo.
% DISCLAIMER: If you need to edit it, do it wisely!

classdef Transistor8 < Indigo.DAE.Explicit
  %
  % No class description provided.
  %
  properties (SetAccess = protected, Hidden = true)
    % User data
    m_U__b = 6.0;
    m_U__f = .26e-1;
    m_alpha = .99;
    m_beta = .1e-5;
    m_R__0 = .1e4;
    m_R__1 = .9e4;
    m_R__2 = .9e4;
    m_R__3 = .9e4;
    m_R__4 = .9e4;
    m_R__5 = .9e4;
    m_R__6 = .9e4;
    m_R__7 = .9e4;
    m_R__8 = .9e4;
    m_R__9 = .9e4;
    m_C__1 = .1e-5;
    m_C__2 = .2e-5;
    m_C__3 = .3e-5;
    m_C__4 = .4e-5;
    m_C__5 = .5e-5;
  end
  %
  methods
    %
    % - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    %
    function this = Transistor8( varargin )
      % Class constructor.

      % Superclass constructor
      num_eqns = 8;
      num_veil = 0;
      num_invs = 3;
      this = this@Indigo.DAE.Explicit('Transistor8', num_eqns, num_veil, num_invs);

      % User data
      if (nargin == 0)
        % Keep default values
      elseif (nargin == 1 && isstruct(varargin{1}))
        this.m_U__b = varargin{1}.U__b;
        this.m_U__f = varargin{1}.U__f;
        this.m_alpha = varargin{1}.alpha;
        this.m_beta = varargin{1}.beta;
        this.m_R__0 = varargin{1}.R__0;
        this.m_R__1 = varargin{1}.R__1;
        this.m_R__2 = varargin{1}.R__2;
        this.m_R__3 = varargin{1}.R__3;
        this.m_R__4 = varargin{1}.R__4;
        this.m_R__5 = varargin{1}.R__5;
        this.m_R__6 = varargin{1}.R__6;
        this.m_R__7 = varargin{1}.R__7;
        this.m_R__8 = varargin{1}.R__8;
        this.m_R__9 = varargin{1}.R__9;
        this.m_C__1 = varargin{1}.C__1;
        this.m_C__2 = varargin{1}.C__2;
        this.m_C__3 = varargin{1}.C__3;
        this.m_C__4 = varargin{1}.C__4;
        this.m_C__5 = varargin{1}.C__5;
      elseif (nargin == 19)
        this.m_U__b = varargin{1};
        this.m_U__f = varargin{2};
        this.m_alpha = varargin{3};
        this.m_beta = varargin{4};
        this.m_R__0 = varargin{5};
        this.m_R__1 = varargin{6};
        this.m_R__2 = varargin{7};
        this.m_R__3 = varargin{8};
        this.m_R__4 = varargin{9};
        this.m_R__5 = varargin{10};
        this.m_R__6 = varargin{11};
        this.m_R__7 = varargin{12};
        this.m_R__8 = varargin{13};
        this.m_R__9 = varargin{14};
        this.m_C__1 = varargin{15};
        this.m_C__2 = varargin{16};
        this.m_C__3 = varargin{17};
        this.m_C__4 = varargin{18};
        this.m_C__5 = varargin{19};
      else
        error('wrong number of input arguments.');
      end
    end % Transistor8
    %
    % - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    %
    function out_f = f( this, in_1, ~, t )
      % Evaluate the function f.

      % Extract properties
      U__b = this.m_U__b;
      U__f = this.m_U__f;
      alpha = this.m_alpha;
      beta = this.m_beta;
      R__0 = this.m_R__0;
      R__1 = this.m_R__1;
      R__2 = this.m_R__2;
      R__3 = this.m_R__3;
      R__4 = this.m_R__4;
      R__5 = this.m_R__5;
      R__6 = this.m_R__6;
      R__7 = this.m_R__7;
      R__8 = this.m_R__8;
      R__9 = this.m_R__9;
      C__1 = this.m_C__1;
      C__2 = this.m_C__2;
      C__3 = this.m_C__3;
      C__4 = this.m_C__4;
      C__5 = this.m_C__5;

      % Extract inputs
      y__1 = in_1(1);
      y__2 = in_1(2);
      y__3 = in_1(3);
      y__4 = in_1(4);
      y__5 = in_1(5);
      y__6 = in_1(6);
      y__7 = in_1(7);

      % Evaluate function
      t1 = beta ^ 2;
      t2 = 0.1e1 * y__3;
      t4 = 0.1e1 / U__f;
      t6 = exp(t4 * (y__2 - t2));
      t7 = t6 * t1;
      t8 = C__1 * R__0;
      t10 = R__1 * R__2;
      t11 = alpha * R__3;
      t12 = t11 * t10;
      t15 = 0.1e1 * y__2;
      t19 = exp(-0.2e1 * t4 * (-t15 + y__3));
      t20 = t19 * t1;
      t24 = t6 * beta;
      t31 = C__1 * R__2;
      t32 = R__1 * R__3;
      t33 = t32 * t31;
      t39 = C__2 * R__3;
      t42 = t6 * R__1;
      t49 = 0.6283185308e3 * t;
      t50 = sin(t49);
      t55 = cos(t49);
      t66 = y__1 * t6;
      t67 = t66 * t10;
      t71 = t50 * R__3;
      t79 = U__f * R__2;
      t87 = U__f * C__2;
      t91 = -0.25000000e8 * t12 * t8 * t7 + 0.25000000e8 * t12 * t8 * t20 - 0.25000000e8 * alpha * y__3 * t10 * t8 * t24 + 0.25000000e8 * t33 * R__0 * t7 - 0.25000000e8 * t33 * R__0 * t20 - 0.25000000e8 * alpha * y__1 * t42 * beta * R__2 * t39 - 0.2500000e7 * alpha * t50 * t32 * C__2 * R__2 * t24 + 0.1570796327e10 * t33 * U__f * C__2 * t55 + 0.25000000e8 * R__1 * y__3 * t31 * R__0 * t24 + 0.25000000e8 * t67 * beta * t39 + 0.2500000e7 * t71 * t10 * C__2 * t24 + 0.25000000e8 * U__f * R__1 * y__1 * t39 + 0.25000000e8 * y__1 * t79 * t39 + 0.2500000e7 * C__2 * R__1 * U__f * t71 + 0.2500000e7 * R__2 * t87 * t71;
      t92 = 0.1e1 / C__1;
      t94 = 0.1e1 / C__2;
      t95 = 0.1e1 / R__3;
      t96 = t95 * t94;
      t97 = R__0 * t6;
      t98 = R__1 * t97;
      t105 = U__f * R__0;
      t113 = 0.1e1 / (R__2 * alpha * beta * t98 - 0.1e1 * beta * t10 * t97 - 0.1e1 * R__1 * t105 - 0.1e1 * R__2 * t105 - 0.1e1 * R__1 * t79);
      out_1 = 0.4000000000e-7 * t113 * t96 * t92 * t91;
      t116 = t6 * C__1;
      t117 = R__0 ^ 2;
      t119 = t1 * t11;
      t122 = t19 * C__1;
      t126 = y__3 * C__1;
      t132 = R__3 * t117;
      t133 = t1 * t132;
      t138 = C__2 * C__1;
      t140 = R__3 * R__0;
      t144 = t117 * t6;
      t158 = 0.1e1 / R__0;
      out_2 = 0.4000000000e-7 * t113 * t95 * t158 * t94 * t92 * (-0.25000000e8 * t119 * t117 * t116 + 0.25000000e8 * t119 * t117 * t122 - 0.25000000e8 * beta * alpha * t117 * t6 * t126 + 0.25000000e8 * t133 * t116 - 0.25000000e8 * t133 * t122 + 0.1570796327e10 * U__f * t140 * t55 * t138 + 0.25000000e8 * beta * t144 * t126 - 0.25000000e8 * R__3 * y__1 * t87 - 0.2500000e7 * R__3 * U__f * t50 * C__2) * t10;
      t163 = beta * R__3;
      out_3 = t95 * t94 * (t6 * t163 - 0.1e1 * t163 - t2);
      t168 = y__4 * C__4;
      t170 = R__0 * t168 * t138;
      t171 = R__3 * t10;
      t172 = R__7 * R__5;
      t173 = U__f ^ 2;
      t174 = t173 * t172;
      t178 = R__7 * R__6;
      t179 = t173 * t178;
      t185 = C__4 * R__0 * R__1 * t138;
      t186 = R__3 * R__2;
      t187 = R__5 * t186;
      t188 = U__b * R__7;
      t189 = t173 * t188;
      t193 = R__6 * t186;
      t198 = t117 * t168 * t138;
      t211 = t117 * C__4;
      t213 = R__1 * t211 * t138;
      t214 = R__3 * R__5;
      t215 = t189 * t214;
      t219 = R__2 * t211 * t138;
      t222 = R__3 * R__6;
      t223 = t189 * t222;
      t228 = C__3 * C__1;
      t229 = C__4 * t228;
      t232 = R__5 * R__4;
      t233 = R__6 * t232;
      t234 = R__7 * U__f;
      t235 = t1 * alpha;
      t236 = t235 * t234;
      t237 = t236 * t233;
      t244 = -0.25000000e8 * t174 * t171 * t170 - 0.25000000e8 * t179 * t171 * t170 + 0.25000000e8 * t189 * t187 * t185 + 0.25000000e8 * t189 * t193 * t185 - 0.25000000e8 * t174 * t32 * t198 - 0.25000000e8 * t179 * t32 * t198 - 0.25000000e8 * t174 * t186 * t198 - 0.25000000e8 * t179 * t186 * t198 + 0.25000000e8 * t215 * t213 + 0.25000000e8 * t215 * t219 + 0.25000000e8 * t223 * t213 + 0.25000000e8 * t223 * t219 - 0.25000000e8 * t237 * t32 * t144 * t229 - 0.25000000e8 * t237 * t186 * t144 * t229;
      t245 = C__4 * t138;
      t246 = t6 ^ 2;
      t247 = t117 * t246;
      t249 = t10 * t247 * t245;
      t250 = R__4 * R__3;
      t251 = R__5 * t250;
      t252 = alpha ^ 2;
      t253 = t1 * t252;
      t254 = t253 * t234;
      t255 = t254 * t251;
      t258 = R__6 * t250;
      t259 = t254 * t258;
      t263 = t10 * t144 * t245;
      t264 = R__7 * t214;
      t265 = U__b * U__f;
      t266 = alpha * beta;
      t267 = t266 * t265;
      t271 = 0.1e1 * y__5;
      t275 = exp(-0.1e1 * t4 * (-t271 + y__6 - t15 + y__3));
      t276 = t275 * t6;
      t277 = R__1 * t117;
      t279 = t277 * t276 * t245;
      t280 = t232 * t186;
      t281 = t252 * alpha;
      t282 = t1 * beta;
      t283 = t282 * t281;
      t285 = t283 * t178 * t280;
      t288 = C__3 * t138;
      t289 = 0.1e1 * y__6;
      t292 = exp(t4 * (y__5 - t289));
      t293 = t6 * t292;
      t294 = t277 * t293;
      t295 = t294 * t288;
      t296 = t282 * t252;
      t298 = t296 * t178 * t280;
      t304 = exp(-0.2e1 * t4 * (-t271 + y__6));
      t305 = t304 * t6;
      t307 = t277 * t305 * t288;
      t310 = t294 * t245;
      t315 = y__6 * t292;
      t317 = t144 * t315 * t288;
      t318 = t250 * t10;
      t319 = R__5 * R__6;
      t324 = t282 * alpha;
      t326 = t324 * t178 * t280;
      t331 = R__0 * t19;
      t334 = t319 * t250;
      t335 = t236 * t334;
      t338 = C__3 * C__2;
      t339 = C__4 * t338;
      t341 = t266 * t234;
      t342 = t341 * t334;
      t345 = t6 * y__3;
      t346 = R__0 * R__1;
      t349 = R__2 * R__4;
      t350 = t319 * t349;
      t354 = 0.25000000e8 * t255 * t249 + 0.25000000e8 * t259 * t249 - 0.25000000e8 * t267 * t264 * t263 - 0.25000000e8 * t285 * t279 - 0.25000000e8 * t298 * t295 + 0.25000000e8 * t298 * t307 - 0.50000000e8 * t298 * t310 + 0.50000000e8 * t298 * t279 - 0.25000000e8 * t253 * t319 * t318 * t317 + 0.50000000e8 * t326 * t295 - 0.50000000e8 * t326 * t307 + 0.25000000e8 * t335 * t10 * t331 * t229 - 0.25000000e8 * t342 * t67 * t339 - 0.25000000e8 * t341 * t350 * t346 * t345 * t229;
      t356 = t6 * t50;
      t361 = t10 * t97;
      t365 = y__4 * t292;
      t367 = t117 * t365 * t245;
      t369 = U__f * beta;
      t370 = t369 * t178;
      t374 = t370 * t187;
      t377 = t117 * t292;
      t378 = R__1 * t377;
      t379 = t378 * t288;
      t382 = t1 * U__f * t178 * t251;
      t385 = R__2 * t377;
      t386 = t385 * t288;
      t389 = t117 * t304;
      t391 = R__1 * t389 * t288;
      t395 = R__2 * t389 * t288;
      t399 = t117 * t315 * t288;
      t401 = t369 * t319;
      t405 = t6 * y__4;
      t407 = t117 * t405 * t245;
      t408 = t369 * t172;
      t415 = R__1 * t144;
      t416 = t415 * t245;
      t417 = t369 * t188;
      t424 = t173 * R__7;
      t425 = t266 * t424;
      t426 = t425 * t251;
      t429 = -0.2500000e7 * t342 * t10 * t356 * t339 - 0.25000000e8 * t335 * t361 * t229 - 0.25000000e8 * t370 * R__5 * t32 * t367 - 0.25000000e8 * t374 * t367 - 0.25000000e8 * t382 * t379 - 0.25000000e8 * t382 * t386 + 0.25000000e8 * t382 * t391 + 0.25000000e8 * t382 * t395 - 0.25000000e8 * t401 * R__4 * t32 * t399 - 0.25000000e8 * t408 * t171 * t407 - 0.25000000e8 * t370 * t171 * t407 + 0.25000000e8 * t417 * t187 * t416 + 0.25000000e8 * t417 * t193 * t416 - 0.25000000e8 * t426 * t416;
      t430 = t425 * t258;
      t433 = R__2 * t144;
      t434 = t433 * t245;
      t440 = R__2 * t346 * t245;
      t445 = R__4 * t186;
      t446 = t401 * t445;
      t450 = R__6 * t214;
      t451 = t417 * t450;
      t457 = C__3 * C__4;
      t462 = alpha * U__f;
      t463 = beta * t462;
      t464 = t463 * t178;
      t468 = t319 * t186;
      t483 = R__0 * t292;
      t484 = t10 * t483;
      t485 = t484 * t245;
      t486 = t178 * t214;
      t490 = t254 * t334;
      t493 = -0.25000000e8 * t430 * t416 - 0.25000000e8 * t426 * t434 - 0.25000000e8 * t430 * t434 + 0.25000000e8 * t426 * t440 + 0.25000000e8 * t430 * t440 - 0.25000000e8 * t446 * t399 + 0.25000000e8 * t451 * t378 * t245 + 0.25000000e8 * t451 * t385 * t245 + 0.1570796327e10 * t464 * t280 * t346 * t6 * t55 * t457 * t138 + 0.25000000e8 * t253 * t188 * t468 * t310 - 0.25000000e8 * t326 * t279 + 0.50000000e8 * t235 * t319 * t318 * t317 - 0.50000000e8 * t235 * t188 * t468 * t310 - 0.25000000e8 * t267 * t486 * t485 - 0.25000000e8 * t490 * t485;
      t496 = t484 * t288;
      t499 = R__0 * t304;
      t501 = t10 * t499 * t288;
      t507 = t346 * t315 * t288;
      t508 = U__f * R__6;
      t509 = t266 * t508;
      t514 = t346 * t365 * t245;
      t518 = R__0 * t275;
      t520 = t10 * t518 * t245;
      t526 = t144 * t365 * t245;
      t527 = t214 * t10;
      t540 = t186 * t377;
      t541 = t540 * t245;
      t545 = t1 * R__7 * t319;
      t550 = t277 * t405 * t245;
      t554 = 0.25000000e8 * t335 * t496 - 0.25000000e8 * t335 * t501 + 0.25000000e8 * t335 * t485 + 0.25000000e8 * t509 * t280 * t507 + 0.25000000e8 * t341 * t468 * t514 + 0.25000000e8 * t490 * t520 - 0.25000000e8 * t335 * t520 - 0.25000000e8 * t253 * t178 * t527 * t526 + 0.50000000e8 * t235 * t178 * t527 * t526 + 0.25000000e8 * t285 * t310 + 0.25000000e8 * t326 * t310 + 0.25000000e8 * t237 * t541 - 0.25000000e8 * t545 * t171 * t526 + 0.25000000e8 * t341 * t193 * t550;
      t555 = t236 * t251;
      t558 = t236 * t258;
      t567 = t341 * t233;
      t570 = R__2 * t117;
      t575 = t117 * t19;
      t587 = R__7 * t222;
      t591 = t361 * t245;
      t600 = t117 * t275;
      t602 = t32 * t600 * t245;
      t603 = t254 * t233;
      t606 = -0.25000000e8 * t555 * t249 - 0.25000000e8 * t558 * t249 - 0.25000000e8 * t255 * t263 - 0.25000000e8 * t259 * t263 - 0.25000000e8 * t567 * t277 * t345 * t229 - 0.25000000e8 * t567 * t570 * t345 * t229 + 0.25000000e8 * t237 * t32 * t575 * t229 + 0.25000000e8 * t237 * t186 * t575 * t229 + 0.25000000e8 * t341 * t187 * t550 - 0.25000000e8 * t267 * t587 * t263 - 0.25000000e8 * t426 * t591 - 0.25000000e8 * t430 * t591 + 0.25000000e8 * t555 * t263 + 0.25000000e8 * t558 * t263 + 0.25000000e8 * t603 * t602;
      t612 = t341 * t450;
      t620 = t186 * t600 * t245;
      t629 = t1 * U__b * t178;
      t639 = t282 * R__7 * t319 * t445;
      t644 = t32 * t377;
      t645 = t644 * t245;
      t654 = -0.25000000e8 * t374 * t514 + 0.25000000e8 * t612 * t277 * t365 * t245 + 0.25000000e8 * t612 * t570 * t365 * t245 + 0.25000000e8 * t603 * t620 - 0.25000000e8 * t1 * R__6 * t232 * t171 * t317 + 0.25000000e8 * t629 * t187 * t310 - 0.25000000e8 * t237 * t602 - 0.25000000e8 * t237 * t620 - 0.25000000e8 * t639 * t295 + 0.25000000e8 * t639 * t307 - 0.25000000e8 * t603 * t645 - 0.25000000e8 * t603 * t541 - 0.25000000e8 * t446 * t507 + 0.25000000e8 * t451 * t485;
      t657 = t509 * t251;
      t668 = R__7 * t319;
      t669 = t267 * t668;
      t690 = R__3 * t277;
      t691 = t690 * t245;
      t694 = beta * alpha * t173;
      t695 = t694 * R__7 * t232;
      t698 = R__3 * t570;
      t699 = t698 * t245;
      t702 = R__4 * R__6;
      t704 = t694 * R__7 * t702;
      t709 = 0.25000000e8 * t657 * t277 * t315 * t288 + 0.25000000e8 * t657 * t570 * t315 * t288 - 0.25000000e8 * t382 * t496 + 0.25000000e8 * t382 * t501 - 0.25000000e8 * t669 * t645 - 0.25000000e8 * t669 * t541 + 0.25000000e8 * t237 * t644 * t288 + 0.25000000e8 * t237 * t540 * t288 - 0.25000000e8 * t237 * t32 * t389 * t288 - 0.25000000e8 * t237 * t186 * t389 * t288 + 0.25000000e8 * t237 * t645 + 0.25000000e8 * t695 * t691 + 0.25000000e8 * t695 * t699 + 0.25000000e8 * t704 * t691 + 0.25000000e8 * t704 * t699;
      t714 = 0.1e1 / C__4;
      t716 = 0.1e1 / R__7;
      t717 = t716 * t714 * t95;
      t719 = t158 * t92;
      t720 = 0.1e1 / C__3;
      t721 = R__4 * t292;
      t736 = 0.1e1 / (R__6 * alpha * beta * R__5 * t721 - 0.1e1 * beta * t319 * t721 - 0.1e1 * U__f * t232 - 0.1e1 * U__f * t702 - 0.1e1 * R__5 * t508);
      t737 = t736 * t720;
      out_4 = 0.4000000000e-7 * t113 * t737 * t719 * t717 * t94 * (t244 + t354 + t429 + t493 + t554 + t606 + t654 + t709);
      t742 = t694 * R__7 * t250;
      t748 = t173 * R__7 * R__3;
      t752 = t189 * t186;
      t755 = t211 * t138;
      t761 = t168 * t138;
      t768 = t292 * C__3;
      t770 = t117 * t768 * t138;
      t771 = R__4 ^ 2;
      t772 = t771 * t32;
      t773 = t1 * t234;
      t774 = t773 * t772;
      t777 = t771 * t186;
      t778 = t773 * t777;
      t783 = t117 * t304 * C__3 * t138;
      t789 = y__6 * t768 * t138;
      t790 = U__f * t771;
      t791 = beta * t790;
      t799 = t346 * t293 * t245;
      t800 = t254 * t777;
      t803 = t236 * t777;
      t806 = t55 * C__4;
      t809 = t771 * R__3;
      t815 = R__1 * t518 * t245;
      t821 = -0.25000000e8 * t742 * t213 - 0.25000000e8 * t742 * t219 + 0.25000000e8 * t748 * t10 * t170 - 0.25000000e8 * t752 * t185 - 0.25000000e8 * t189 * t32 * t755 - 0.25000000e8 * t752 * t755 + 0.25000000e8 * t748 * t277 * t761 + 0.25000000e8 * t748 * t570 * t761 - 0.25000000e8 * t774 * t770 - 0.25000000e8 * t778 * t770 + 0.25000000e8 * t774 * t783 + 0.25000000e8 * t778 * t783 - 0.25000000e8 * t791 * t690 * t789 - 0.25000000e8 * t791 * t698 * t789 - 0.25000000e8 * t800 * t799 + 0.25000000e8 * t803 * t799 + 0.1570796327e10 * t341 * t809 * t10 * t97 * t806 * t288 - 0.25000000e8 * t803 * t815 - 0.25000000e8 * t341 * t171 * t407;
      t823 = R__1 * t247 * t245;
      t824 = t254 * t445;
      t827 = t236 * t445;
      t841 = R__7 * t186;
      t851 = t771 * t10;
      t857 = t341 * t777;
      t865 = R__0 * t315 * t288;
      t872 = t117 * t246 * t292 * t245;
      t873 = R__7 * t771;
      t875 = t283 * t873 * t171;
      t879 = t296 * t873 * t171;
      t883 = t117 * t276 * t245;
      t886 = t117 * t293;
      t887 = t886 * t288;
      t891 = t117 * t305 * t288;
      t895 = t324 * t873 * t171;
      t900 = -0.25000000e8 * t824 * t823 + 0.25000000e8 * t827 * t823 + 0.25000000e8 * t824 * t416 - 0.25000000e8 * t827 * t416 - 0.25000000e8 * t803 * t98 * t229 + 0.25000000e8 * t803 * R__1 * t331 * t229 + 0.25000000e8 * t267 * t841 * t416 + 0.25000000e8 * t425 * t445 * t98 * t245 - 0.25000000e8 * t341 * t851 * R__0 * t345 * t229 - 0.2500000e7 * t857 * R__1 * t356 * t339 - 0.25000000e8 * t857 * R__1 * t66 * t339 + 0.25000000e8 * t266 * t790 * t171 * t865 + 0.25000000e8 * t875 * t872 - 0.50000000e8 * t879 * t872 - 0.25000000e8 * t875 * t883 - 0.25000000e8 * t879 * t887 + 0.25000000e8 * t879 * t891 + 0.25000000e8 * t895 * t872 + 0.50000000e8 * t879 * t883;
      t902 = t6 * t315;
      t903 = t902 * t288;
      t904 = R__2 * t277;
      t913 = t886 * t245;
      t933 = R__1 * t483 * t288;
      t937 = R__1 * t499 * t288;
      t941 = t117 * t345 * t229;
      t942 = t771 * R__2;
      t952 = R__7 * t809;
      t953 = t1 * t462;
      t954 = t953 * t952;
      t971 = -0.25000000e8 * t253 * t809 * t904 * t903 + 0.50000000e8 * t895 * t887 - 0.50000000e8 * t895 * t891 - 0.25000000e8 * t254 * t772 * t913 - 0.25000000e8 * t800 * t913 - 0.25000000e8 * t895 * t883 + 0.50000000e8 * t235 * t809 * t904 * t903 + 0.25000000e8 * t236 * t772 * t913 + 0.25000000e8 * t803 * t913 + 0.25000000e8 * t800 * t815 + 0.25000000e8 * t803 * t933 - 0.25000000e8 * t803 * t937 - 0.25000000e8 * t463 * R__7 * t942 * t941 + 0.25000000e8 * beta * t234 * t171 * t407 - 0.25000000e8 * t954 * t415 * t229 - 0.25000000e8 * t954 * t433 * t229 + 0.25000000e8 * t954 * R__1 * t575 * t229 + 0.25000000e8 * t954 * R__2 * t575 * t229 + 0.25000000e8 * t463 * t772 * t399;
      t987 = t282 * t873 * t171;
      t993 = R__1 * t600 * t245;
      t995 = t1 * t252 * U__f;
      t996 = t995 * t952;
      t1000 = R__2 * t600 * t245;
      t1023 = t771 * R__1;
      t1030 = -0.25000000e8 * t791 * t171 * t865 + 0.25000000e8 * t954 * t379 + 0.25000000e8 * t954 * t386 - 0.25000000e8 * t778 * t933 + 0.25000000e8 * t778 * t937 + 0.25000000e8 * t463 * t777 * t399 - 0.25000000e8 * t987 * t887 + 0.25000000e8 * t987 * t891 + 0.25000000e8 * t996 * t993 + 0.25000000e8 * t996 * t1000 - 0.25000000e8 * t1 * t809 * t904 * t903 - 0.25000000e8 * t954 * t993 - 0.25000000e8 * t954 * t1000 - 0.25000000e8 * t954 * t391 - 0.25000000e8 * t954 * t395 - 0.25000000e8 * beta * t265 * t841 * t416 + 0.25000000e8 * t742 * t416 + 0.25000000e8 * t742 * t434 - 0.25000000e8 * t463 * R__7 * t1023 * t941 - 0.25000000e8 * t742 * t440;
      t1038 = 0.1e1 / R__4;
      out_5 = 0.4000000000e-7 * t1038 * t113 * t737 * t158 * t92 * t716 * t714 * t96 * (t821 + t900 + t971 + t1030) * t319;
      t1043 = t716 * t714;
      t1044 = beta * R__7;
      out_6 = (t292 * t1044 - 0.1e1 * t1044 - t289) * t1043;
      t1048 = R__9 * R__8;
      t1051 = t771 * C__5;
      t1052 = t288 * t1051;
      t1055 = t668 * t186;
      t1056 = t1055 * t98 * t806;
      t1059 = t132 * t138;
      t1061 = t42 * t457 * t1059;
      t1062 = t178 * t942;
      t1063 = R__8 * U__f;
      t1064 = t235 * t1063;
      t1067 = 0.25000000e8 * t1064 * t1062 * t1061;
      t1070 = 0.25000000e8 * t417 * t350 * t1061;
      t1071 = t172 * t942;
      t1072 = t253 * t1063;
      t1075 = 0.25000000e8 * t1072 * t1071 * t1061;
      t1078 = 0.25000000e8 * t1072 * t1062 * t1061;
      t1081 = 0.25000000e8 * t267 * t1071 * t1061;
      t1084 = 0.25000000e8 * t267 * t1062 * t1061;
      t1085 = R__0 * t138;
      t1086 = R__3 * C__3;
      t1088 = C__4 * y__7 * t1086;
      t1091 = t424 * t319;
      t1094 = 0.25000000e8 * t1091 * R__4 * t10 * t1088 * t1085;
      t1095 = t117 * t138;
      t1097 = C__4 * R__1 * t1086;
      t1098 = t1097 * t1095;
      t1099 = R__5 * t771;
      t1102 = t266 * t173 * R__8;
      t1103 = t1102 * R__7 * t1099;
      t1105 = 0.25000000e8 * t1103 * t1098;
      t1106 = R__6 * t771;
      t1108 = t1102 * R__7 * t1106;
      t1110 = 0.25000000e8 * t1108 * t1098;
      t1113 = C__4 * R__2 * t1086 * t1095;
      t1115 = 0.25000000e8 * t1103 * t1113;
      t1117 = 0.25000000e8 * t1108 * t1113;
      t1118 = 0.1570796327e10 * t1056 * t1052 * t292 * t1048 * t253 - t1067 - t1070 + t1075 + t1078 + t1081 + t1084 + t1094 - t1105 - t1110 - t1115 - t1117;
      t1119 = t1097 * t1085;
      t1121 = t173 * U__b;
      t1122 = t1121 * t178;
      t1123 = t1122 * R__5 * t349;
      t1125 = 0.25000000e8 * t1123 * t1119;
      t1128 = t292 * C__4 * t1086 * t1095;
      t1129 = t178 * t1023;
      t1132 = 0.25000000e8 * t1102 * t1129 * t1128;
      t1133 = t1102 * t1071;
      t1135 = 0.25000000e8 * t1133 * t1128;
      t1136 = t1102 * t1062;
      t1138 = 0.25000000e8 * t1136 * t1128;
      t1139 = t6 * C__4;
      t1141 = t1139 * t1086 * t1095;
      t1142 = t1099 * t10;
      t1145 = 0.25000000e8 * t417 * t1142 * t1141;
      t1146 = t1106 * t10;
      t1149 = 0.25000000e8 * t417 * t1146 * t1141;
      t1150 = t178 * t232;
      t1151 = t1102 * t1150;
      t1153 = 0.25000000e8 * t1151 * t1098;
      t1155 = 0.25000000e8 * t1151 * t1113;
      t1157 = 0.25000000e8 * t1133 * t1119;
      t1159 = 0.25000000e8 * t1136 * t1119;
      t1160 = t1088 * t1095;
      t1161 = t942 * t42;
      t1164 = 0.25000000e8 * t370 * t1161 * t1160;
      t1165 = y__7 * R__2;
      t1169 = 0.25000000e8 * t370 * t1099 * t1165 * t1128;
      t1170 = -t1125 + t1132 + t1135 + t1138 - t1145 - t1149 - t1153 - t1155 - t1157 - t1159 + t1164 + t1169;
      t1172 = y__7 * R__1;
      t1176 = 0.25000000e8 * t370 * t1099 * t1172 * t1128;
      t1179 = 0.25000000e8 * t408 * t1161 * t1160;
      t1180 = t319 * t1023;
      t1183 = 0.25000000e8 * t417 * t1180 * t1128;
      t1184 = t319 * t942;
      t1185 = t417 * t1184;
      t1187 = 0.25000000e8 * t1185 * t1128;
      t1188 = t172 * t1023;
      t1191 = 0.25000000e8 * t1102 * t1188 * t1128;
      t1192 = C__4 * t1086;
      t1193 = t1192 * t1095;
      t1194 = R__4 * R__1;
      t1198 = 0.25000000e8 * t1122 * R__5 * t1194 * t1193;
      t1200 = 0.25000000e8 * t1123 * t1193;
      t1201 = t1192 * t1085;
      t1205 = 0.25000000e8 * t1121 * t172 * t851 * t1201;
      t1208 = 0.25000000e8 * t1122 * t851 * t1201;
      t1209 = R__2 * t1172;
      t1213 = 0.25000000e8 * t424 * t1099 * t1209 * t1201;
      t1217 = 0.25000000e8 * t424 * t1106 * t1209 * t1201;
      t1221 = 0.25000000e8 * t1091 * R__4 * t1172 * t1193;
      t1222 = t1176 + t1179 - t1183 - t1187 + t1191 - t1198 - t1200 - t1205 - t1208 + t1213 + t1217 + t1221;
      t1226 = 0.25000000e8 * t1091 * R__4 * t1165 * t1193;
      t1227 = R__7 * R__8;
      t1228 = t953 * t1227;
      t1229 = t1228 * t350;
      t1231 = 0.25000000e8 * t1229 * t1061;
      t1232 = t463 * t188;
      t1235 = 0.25000000e8 * t1232 * t350 * t1061;
      t1236 = t995 * t1227;
      t1237 = t1236 * t350;
      t1239 = 0.25000000e8 * t1237 * t1061;
      t1240 = t292 ^ 2;
      t1243 = t6 * t1240 * t457 * t1059;
      t1247 = t282 * t281 * R__8 * t178 * t1142;
      t1249 = 0.25000000e8 * t1247 * t1243;
      t1250 = C__4 * C__5;
      t1252 = t276 * t1250 * t1059;
      t1255 = t282 * t281 * R__9 * t1227;
      t1263 = C__5 * t292;
      t1264 = C__1 * t771;
      t1265 = t1264 * t1263;
      t1266 = t1265 * t1048 * t283;
      t1267 = C__2 * C__4;
      t1268 = t247 * t1267;
      t1270 = t587 * t10 * t1268;
      t1275 = R__2 * t275 * t1250 * t1059;
      t1276 = t995 * t1048;
      t1277 = t1276 * t1150;
      t1280 = C__3 * C__5;
      t1282 = t305 * t1280 * t1059;
      t1283 = alpha * R__9;
      t1285 = t282 * t1283 * t1227;
      t1286 = t1285 * t1146;
      t1290 = t293 * t457 * t1059;
      t1293 = 0.25000000e8 * t1236 * t1142 * t1290;
      t1294 = t315 * t1280;
      t1295 = t1294 * t1059;
      t1296 = R__6 * R__8;
      t1297 = t1 * t1283;
      t1298 = t1297 * t1296;
      t1302 = t1226 - t1231 + t1235 + t1239 + t1249 - 0.25000000e8 * t1255 * t1142 * t1252 - 0.25000000e8 * t1255 * t1146 * t1252 + 0.25000000e8 * t1270 * t1266 + 0.25000000e8 * t1277 * t1275 - 0.25000000e8 * t1286 * t1282 - t1293 + 0.25000000e8 * t1298 * t1161 * t1295;
      t1305 = t1048 * t253;
      t1306 = t1265 * t1305;
      t1307 = t345 * t457;
      t1317 = t293 * t1280 * t1059;
      t1318 = t252 * R__9;
      t1320 = t282 * t1318 * t1227;
      t1321 = t1320 * t1142;
      t1324 = t1320 * t1146;
      t1331 = R__5 * R__8;
      t1332 = t1 * t1318;
      t1338 = t1 * t252 * U__b;
      t1342 = 0.25000000e8 * t1338 * t178 * t1142 * t1290;
      t1343 = t1332 * t1296;
      t1347 = t365 * t1250;
      t1348 = t1347 * t1059;
      t1349 = R__2 * R__5;
      t1350 = t178 * t1349;
      t1351 = t463 * t1048;
      t1352 = t1351 * t1350;
      t1356 = t178 * R__1 * R__5;
      t1360 = t144 * t1267;
      t1361 = U__f * t178;
      t1362 = t1361 * t186;
      t1366 = -0.25000000e8 * t668 * t277 * t1307 * t1306 - 0.25000000e8 * t668 * t570 * t1307 * t1306 - 0.25000000e8 * t1321 * t1317 - 0.25000000e8 * t1324 * t1317 + 0.25000000e8 * t1321 * t1282 + 0.25000000e8 * t1324 * t1282 - 0.25000000e8 * t1332 * t1331 * t1161 * t1295 - t1342 - 0.25000000e8 * t1343 * t1161 * t1295 + 0.25000000e8 * t1352 * t1348 + 0.25000000e8 * t1351 * t1356 * t1348 - 0.25000000e8 * t1362 * t1360 * t1306;
      t1367 = R__1 * t275;
      t1368 = t1367 * t1250;
      t1369 = t1368 * t1059;
      t1372 = t140 * t138;
      t1373 = t1368 * t1372;
      t1380 = t282 * alpha * R__8 * t178 * t1142;
      t1382 = 0.25000000e8 * t1380 * t1243;
      t1386 = t282 * t252 * R__8 * t178 * t1142;
      t1388 = 0.50000000e8 * t1386 * t1290;
      t1391 = t1285 * t1142;
      t1395 = 0.50000000e8 * t1386 * t1243;
      t1397 = 0.25000000e8 * t1247 * t1290;
      t1399 = t1 * alpha * U__b;
      t1403 = 0.50000000e8 * t1399 * t178 * t1142 * t1290;
      t1410 = t1048 * t296;
      t1411 = t1265 * t1410;
      t1414 = 0.25000000e8 * t1277 * t1369 + 0.25000000e8 * t1276 * t1071 * t1373 + t1382 + t1388 + 0.25000000e8 * t1286 * t1317 - 0.25000000e8 * t1391 * t1282 - t1395 - t1397 + t1403 + 0.25000000e8 * t1297 * t1331 * t1161 * t1295 + 0.25000000e8 * t1391 * t1317 - 0.25000000e8 * t1270 * t1411;
      t1417 = t264 * t10 * t1268;
      t1420 = R__2 * t292;
      t1422 = t1420 * t1250 * t1059;
      t1426 = t463 * R__9 * U__b * t1227 * t319;
      t1429 = R__1 * t292;
      t1430 = t1429 * t457;
      t1431 = t1430 * t1372;
      t1434 = 0.25000000e8 * t1232 * t1184 * t1431;
      t1438 = 0.25000000e8 * t694 * t1227 * t350 * t1431;
      t1439 = t1228 * t1184;
      t1441 = 0.25000000e8 * t1439 * t1431;
      t1444 = 0.25000000e8 * t1236 * t1146 * t1290;
      t1447 = 0.25000000e8 * t1228 * t1142 * t1290;
      t1450 = 0.25000000e8 * t1228 * t1146 * t1290;
      t1451 = t144 * t457;
      t1452 = t668 * t32;
      t1463 = 0.25000000e8 * t1417 * t1266 - 0.25000000e8 * t1426 * t1422 + t1434 + t1438 - t1441 - t1444 + t1447 + t1450 - 0.25000000e8 * t1452 * t1451 * t1411 - 0.25000000e8 * t1055 * t1451 * t1411 + 0.25000000e8 * t1321 * t1252 + 0.25000000e8 * t1324 * t1252;
      t1465 = 0.25000000e8 * t1380 * t1290;
      t1467 = R__1 * t1240 * t457;
      t1468 = t1467 * t1372;
      t1469 = t1236 * t1184;
      t1471 = 0.25000000e8 * t1469 * t1468;
      t1472 = t1429 * t1250;
      t1473 = t1472 * t1059;
      t1476 = t1429 * t1280;
      t1477 = t1476 * t1059;
      t1478 = t953 * t1048;
      t1479 = t1478 * t1150;
      t1484 = t1294 * t1372;
      t1491 = R__1 * t304;
      t1492 = t1491 * t1280;
      t1493 = t1492 * t1372;
      t1494 = t1478 * t1062;
      t1500 = U__f * t172;
      t1509 = t1500 * t186;
      t1513 = -t1465 - t1471 - 0.25000000e8 * t1277 * t1473 + 0.25000000e8 * t1479 * t1477 - 0.25000000e8 * t1277 * t1422 + 0.25000000e8 * t1351 * t1142 * t1484 + 0.25000000e8 * t1351 * t1146 * t1484 - 0.25000000e8 * t1494 * t1493 + 0.25000000e8 * t1276 * t1062 * t1373 - 0.25000000e8 * t1500 * t32 * t1360 * t1306 - 0.25000000e8 * t1361 * t32 * t1360 * t1306 - 0.25000000e8 * t1509 * t1360 * t1306;
      t1517 = t575 * t457;
      t1527 = y__7 * t292 * t457;
      t1528 = t1527 * t1372;
      t1531 = 0.25000000e8 * t464 * t1142 * t1528;
      t1532 = t1527 * t1059;
      t1538 = 0.25000000e8 * t1 * t252 * R__7 * t319 * t1161 * t1532;
      t1544 = 0.50000000e8 * t1 * alpha * R__7 * t319 * t1161 * t1532;
      t1545 = t1492 * t1059;
      t1550 = R__2 * t304 * t1280 * t1059;
      t1553 = t319 * t1194;
      t1559 = t1476 * t1372;
      t1560 = t1478 * t1071;
      t1565 = 0.25000000e8 * t1452 * t1517 * t1411 + 0.25000000e8 * t1055 * t1517 * t1411 - 0.25000000e8 * t1417 * t1411 - t1531 + t1538 - t1544 - 0.25000000e8 * t1479 * t1545 - 0.25000000e8 * t1479 * t1550 + 0.25000000e8 * t1351 * t1553 * t1295 - 0.25000000e8 * t1426 * t1473 + 0.25000000e8 * t1560 * t1559 + 0.25000000e8 * t1494 * t1559;
      t1569 = t1420 * t1280 * t1059;
      t1572 = t1351 * t350;
      t1576 = 0.25000000e8 * t1439 * t1468;
      t1578 = 0.25000000e8 * t1469 * t1431;
      t1581 = t6 * y__7 * t457 * t1059;
      t1582 = t232 * t10;
      t1585 = 0.25000000e8 * t464 * t1582 * t1581;
      t1587 = t902 * t1280 * t1059;
      t1593 = C__2 * t1264 * t1263 * t1305;
      t1594 = t346 * t1139;
      t1595 = t1362 * t1594;
      t1599 = C__3 * t1264 * t1263;
      t1600 = t1599 * t1410;
      t1601 = t1055 * t1594;
      t1604 = t19 * C__4;
      t1606 = t1055 * t346 * t1604;
      t1610 = C__4 * y__3;
      t1613 = t668 * t10 * t97 * t1610;
      t1616 = R__1 * t293;
      t1618 = t1616 * t1250 * t1059;
      t1619 = t1255 * t350;
      t1622 = -0.25000000e8 * t1560 * t1493 + 0.25000000e8 * t1479 * t1569 + 0.25000000e8 * t1572 * t1295 + t1576 + t1578 - t1585 + 0.25000000e8 * t1298 * t1582 * t1587 - 0.25000000e8 * t1595 * t1593 - 0.25000000e8 * t1601 * t1600 + 0.25000000e8 * t1606 * t1600 - 0.25000000e8 * t1613 * t1599 * t1305 + 0.25000000e8 * t1619 * t1618;
      t1626 = R__1 * t276 * t1250 * t1059;
      t1630 = t1616 * t1280 * t1059;
      t1631 = t1285 * t350;
      t1640 = t1616 * t457 * t1059;
      t1642 = 0.25000000e8 * t1237 * t1640;
      t1645 = R__1 * t305 * t1280 * t1059;
      t1646 = t1320 * t350;
      t1653 = R__2 * t1429;
      t1673 = C__3 * C__2 * t771 * t1263 * t1305;
      t1676 = t1055 * t42 * t50 * C__4;
      t1679 = -0.25000000e8 * t1619 * t1626 + 0.25000000e8 * t1631 * t1630 + 0.25000000e8 * t1277 * R__2 * t1367 * t1250 * t1372 - t1642 + 0.25000000e8 * t1646 * t1645 - 0.25000000e8 * t1646 * t1618 + 0.25000000e8 * t1646 * t1626 + 0.25000000e8 * t1479 * t1653 * t1280 * t1372 - 0.25000000e8 * t1479 * R__2 * t1491 * t1280 * t1372 + 0.25000000e8 * t1572 * R__1 * t315 * t1280 * t1372 - 0.25000000e8 * t1646 * t1630 - 0.2500000e7 * t1676 * t1673;
      t1698 = t6 * t365 * t1250 * t1059;
      t1699 = t319 * t10;
      t1710 = t1055 * t42 * C__4 * y__1;
      t1714 = 0.25000000e8 * t1229 * t1640;
      t1715 = t1509 * t1594;
      t1719 = t1653 * t1250 * t1372;
      t1726 = 0.25000000e8 * t1338 * t1048 * t1350 * t1618 - 0.25000000e8 * t1399 * t1048 * t1350 * t1618 - 0.25000000e8 * t1343 * t1582 * t1587 + 0.25000000e8 * t1352 * R__1 * t365 * t1250 * t1372 - 0.25000000e8 * t1332 * t1227 * t1699 * t1698 + 0.25000000e8 * t1297 * t1227 * t1699 * t1698 - 0.25000000e8 * t1710 * t1673 + t1714 - 0.25000000e8 * t1715 * t1593 - 0.25000000e8 * t1277 * t1719 - 0.25000000e8 * t1426 * t1719 - 0.25000000e8 * t1631 * t1645;
      t1729 = t1430 * t1059;
      t1730 = t178 * t1099;
      t1731 = t1072 * t1730;
      t1733 = 0.25000000e8 * t1731 * t1729;
      t1736 = 0.25000000e8 * t629 * t1142 * t1290;
      t1737 = t1227 * t1099;
      t1738 = R__9 * U__f;
      t1739 = t253 * t1738;
      t1740 = t1739 * t1737;
      t1743 = t1227 * t1106;
      t1744 = t1739 * t1743;
      t1751 = t235 * t1738;
      t1752 = t1751 * t1737;
      t1755 = t1751 * t1743;
      t1758 = t267 * t1730;
      t1760 = 0.25000000e8 * t1758 * t1729;
      t1762 = 0.25000000e8 * t1151 * t1729;
      t1764 = t1420 * t457 * t1059;
      t1766 = 0.25000000e8 * t1758 * t1764;
      t1768 = 0.25000000e8 * t1185 * t1431;
      t1769 = t1733 - t1736 + 0.25000000e8 * t1740 * t1369 + 0.25000000e8 * t1744 * t1369 + 0.25000000e8 * t1740 * t1275 + 0.25000000e8 * t1744 * t1275 - 0.25000000e8 * t1752 * t1550 - 0.25000000e8 * t1755 * t1550 + t1760 + t1762 + t1766 - t1768;
      t1776 = 0.25000000e8 * t1064 * t1071 * t1061;
      t1778 = t266 * t1738;
      t1782 = t1064 * t1730;
      t1784 = 0.25000000e8 * t1782 * t1729;
      t1786 = 0.25000000e8 * t1782 * t1764;
      t1787 = t1467 * t1059;
      t1789 = 0.25000000e8 * t1731 * t1787;
      t1792 = R__2 * t1240 * t457 * t1059;
      t1794 = 0.25000000e8 * t1731 * t1792;
      t1796 = 0.25000000e8 * t1133 * t1431;
      t1798 = 0.25000000e8 * t1136 * t1431;
      t1807 = 0.25000000e8 * t1755 * t1569 - 0.25000000e8 * t1752 * t1545 - t1776 + 0.25000000e8 * t1778 * t1296 * t1023 * t1295 - t1784 - t1786 - t1789 - t1794 + t1796 + t1798 + 0.25000000e8 * t1778 * t1331 * t942 * t1295 + 0.25000000e8 * t1778 * t1296 * t942 * t1295;
      t1818 = 0.25000000e8 * t1782 * t1787;
      t1820 = 0.25000000e8 * t1782 * t1792;
      t1824 = 0.25000000e8 * t1151 * t10 * t457 * t1372;
      t1827 = 0.25000000e8 * t341 * t1184 * t1532;
      t1830 = 0.25000000e8 * t545 * t1161 * t1532;
      t1833 = 0.25000000e8 * t370 * t1142 * t1528;
      t1836 = 0.25000000e8 * t370 * t1582 * t1581;
      t1839 = 0.25000000e8 * t341 * t1142 * t1581;
      t1840 = 0.25000000e8 * t1752 * t1477 + 0.25000000e8 * t1755 * t1477 + 0.25000000e8 * t1752 * t1569 - 0.25000000e8 * t1755 * t1545 + t1818 + t1820 - t1824 - t1827 + t1830 + t1833 + t1836 - t1839;
      t1843 = 0.25000000e8 * t341 * t1146 * t1581;
      t1846 = 0.25000000e8 * t341 * t1180 * t1532;
      t1848 = 0.25000000e8 * t1151 * t1764;
      t1850 = 0.25000000e8 * t1731 * t1764;
      t1858 = 0.25000000e8 * t189 * R__5 * t1023 * t1193;
      t1862 = 0.25000000e8 * t189 * R__6 * t1023 * t1193;
      t1866 = 0.25000000e8 * t189 * R__5 * t942 * t1193;
      t1870 = 0.25000000e8 * t189 * R__6 * t942 * t1193;
      t1871 = t771 * t1172;
      t1874 = 0.25000000e8 * t179 * t1871 * t1193;
      t1875 = t771 * t1165;
      t1878 = 0.25000000e8 * t174 * t1875 * t1193;
      t1881 = 0.25000000e8 * t179 * t1875 * t1193;
      t1884 = 0.25000000e8 * t174 * t1871 * t1193;
      t1885 = -t1843 - t1846 + t1848 + t1850 + 0.25000000e8 * t1778 * t1331 * t1023 * t1295 - t1858 - t1862 - t1866 - t1870 + t1874 + t1878 + t1881 + t1884;
      t1891 = 0.1e1 / (R__9 + R__8);
      t1897 = 0.1e1 / C__5;
      out_7 = -0.4000000000e-7 * t1038 * t1897 * t113 * t736 * t720 * t719 * t717 * t94 * t1891 * (t1118 + t1170 + t1222 + t1302 + t1366 + t1414 + t1463 + t1513 + t1565 + t1622 + t1679 + t1726 + t1769 + t1807 + t1840 + t1885);
      t1903 = R__8 ^ 2;
      t1904 = t1903 * R__6;
      t1909 = t1903 * R__7;
      t1910 = t296 * t1909;
      t1911 = t1910 * t1142;
      t1914 = t1910 * t1146;
      t1917 = t1903 * R__5;
      t1922 = U__f * t1903;
      t1923 = t253 * t1922;
      t1924 = t1923 * t1062;
      t1931 = t292 * t1903;
      t1932 = t1931 * t296;
      t1933 = t228 * t1051;
      t1934 = t1933 * t1932;
      t1939 = t324 * t1909;
      t1940 = t1939 * t1142;
      t1944 = t138 * t1051;
      t1945 = t1944 * t1931 * t283;
      t1947 = t277 * t246 * C__4;
      t1949 = t172 * t186 * t1947;
      t1953 = t178 * t186 * t1947;
      t1960 = -0.25000000e8 * t253 * t1904 * t1161 * t1295 - 0.25000000e8 * t1911 * t1317 + 0.25000000e8 * t1914 * t1252 - 0.25000000e8 * t253 * t1917 * t1161 * t1295 + 0.25000000e8 * t1924 * t1373 + 0.25000000e8 * t1911 * t1282 + 0.25000000e8 * t1914 * t1282 + 0.25000000e8 * t486 * t570 * t1604 * t1934 - 0.25000000e8 * t1940 * t1282 + 0.25000000e8 * t1949 * t1945 + 0.25000000e8 * t1953 * t1945 + 0.25000000e8 * t486 * t277 * t1604 * t1934;
      t1961 = t1931 * t253;
      t1962 = t1944 * t1961;
      t1963 = t277 * t1139;
      t1964 = t234 * t214;
      t1968 = t234 * t222;
      t1972 = t266 * t1922;
      t1979 = t570 * t1139;
      t1988 = t1933 * t1961;
      t1989 = t144 * t1610;
      t2002 = t1923 * t1150;
      t2005 = -0.25000000e8 * t1964 * t1963 * t1962 - 0.25000000e8 * t1968 * t1963 * t1962 + 0.25000000e8 * t1972 * t1350 * t1348 + 0.25000000e8 * t1972 * t1356 * t1348 - 0.25000000e8 * t1964 * t1979 * t1962 - 0.25000000e8 * t1968 * t1979 * t1962 + 0.25000000e8 * t1940 * t1317 - 0.25000000e8 * t1356 * t1989 * t1988 - 0.25000000e8 * t1350 * t1989 * t1988 - 0.25000000e8 * t486 * t1963 * t1934 - 0.25000000e8 * t486 * t1979 * t1934 + 0.25000000e8 * t2002 * t1275;
      t2016 = t235 * t1922;
      t2017 = t2016 * t1062;
      t2020 = t2016 * t1150;
      t2031 = t1944 * t1932;
      t2036 = t283 * t1909;
      t2040 = 0.25000000e8 * t1911 * t1252 - 0.25000000e8 * t1914 * t1317 - 0.25000000e8 * t2002 * t1473 + 0.25000000e8 * t1972 * t1146 * t1484 - 0.25000000e8 * t2017 * t1493 - 0.25000000e8 * t2020 * t1545 - 0.25000000e8 * t2020 * t1550 + 0.25000000e8 * t1972 * t1553 * t1295 + 0.25000000e8 * t1972 * t350 * t1295 - 0.25000000e8 * t1949 * t2031 - 0.25000000e8 * t1953 * t2031 - 0.25000000e8 * t2036 * t1142 * t1252;
      t2044 = t1939 * t1146;
      t2047 = t2016 * t1071;
      t2051 = t267 * t1909 * t319;
      t2069 = t1923 * t1071;
      t2072 = -0.25000000e8 * t2036 * t1146 * t1252 + 0.25000000e8 * t2044 * t1317 - 0.25000000e8 * t2047 * t1493 - 0.25000000e8 * t2051 * t1473 - 0.25000000e8 * t2051 * t1422 + 0.25000000e8 * t2020 * t1477 + 0.25000000e8 * t2020 * t1569 + 0.25000000e8 * t2047 * t1559 + 0.25000000e8 * t2017 * t1559 - 0.25000000e8 * t2002 * t1422 + 0.25000000e8 * t1972 * t1142 * t1484 + 0.25000000e8 * t2069 * t1373;
      t2087 = -0.25000000e8 * t2044 * t1282 + 0.25000000e8 * t235 * t1917 * t1161 * t1295 + 0.25000000e8 * t235 * t1904 * t1161 * t1295 + 0.25000000e8 * t2002 * t1369 + t1067 + t1070 - t1075 - t1078 - t1081 - t1084 - t1094 + t1105;
      t2090 = t304 * C__5 * t1086 * t1095;
      t2091 = t2016 * t1188;
      t2094 = t2016 * t1129;
      t2104 = t275 * C__5 * R__3 * C__4 * t1095;
      t2112 = t1263 * t1086 * t1095;
      t2117 = t1110 + t1115 + t1117 + t1125 - 0.25000000e8 * t2091 * t2090 - 0.25000000e8 * t2094 * t2090 - 0.25000000e8 * t2047 * t2090 - 0.25000000e8 * t2017 * t2090 + 0.25000000e8 * t1923 * t1188 * t2104 + 0.25000000e8 * t1923 * t1129 * t2104 + 0.25000000e8 * t2091 * t2112 + 0.25000000e8 * t2094 * t2112;
      t2121 = y__6 * R__1;
      t2130 = y__6 * R__2;
      t2145 = 0.25000000e8 * t2047 * t2112 + 0.25000000e8 * t1972 * t1099 * t2121 * t2112 + 0.25000000e8 * t1972 * t1106 * t2121 * t2112 + 0.25000000e8 * t1972 * t1099 * t2130 * t2112 + 0.25000000e8 * t2069 * t2104 + 0.25000000e8 * t1924 * t2104 + 0.25000000e8 * t1972 * t1106 * t2130 * t2112 + 0.25000000e8 * t2017 * t2112 - t1132 - t1135 - t1138 + t1145;
      t2146 = t1149 + t1153 + t1155 + t1157 + t1159 - t1164 - t1169 - t1176 - t1179 + t1183 + t1187 - t1191;
      t2151 = t953 * t1909 * t350;
      t2156 = t349 * t42;
      t2157 = alpha * t1903;
      t2158 = t1 * t2157;
      t2165 = t282 * t2157 * t178 * t1582;
      t2168 = t1198 + t1200 + t1205 + t1208 - t1213 - t1217 - t1221 - t1226 - 0.25000000e8 * t2151 * t1493 + 0.25000000e8 * t1606 * t1934 + 0.25000000e8 * t2158 * t319 * t2156 * t1295 - 0.25000000e8 * t2165 * t1282;
      t2170 = t293 * t1250 * t1059;
      t2175 = t252 * t1903;
      t2178 = t282 * t2175 * t178 * t1582;
      t2182 = t338 * t1051 * t1961;
      t2186 = t995 * t1909 * t350;
      t2207 = -0.25000000e8 * t1399 * t1909 * t1699 * t2170 - 0.25000000e8 * t2178 * t1317 - 0.25000000e8 * t1710 * t2182 + 0.25000000e8 * t2186 * t1373 - 0.2500000e7 * t1676 * t2182 + 0.25000000e8 * t1338 * t1909 * t1699 * t2170 - 0.25000000e8 * t1715 * t1962 + 0.25000000e8 * t2151 * t1559 - 0.25000000e8 * t1595 * t1962 + 0.25000000e8 * t2165 * t1317 + 0.25000000e8 * t2178 * t1282 - 0.25000000e8 * t2178 * t2170;
      t2216 = t1349 * t42;
      t2221 = t1 * t2175;
      t2231 = t282 * t281 * t1903 * t178 * t1582;
      t2246 = t1472 * t1372;
      t2254 = -0.25000000e8 * t1601 * t1934 + 0.25000000e8 * t463 * t1909 * t1699 * t1347 * t1372 + 0.25000000e8 * t2158 * t178 * t2216 * t1348 - 0.25000000e8 * t2221 * t178 * t2216 * t1348 - 0.25000000e8 * t1613 * t1988 + 0.25000000e8 * t2231 * t2170 - 0.25000000e8 * t2231 * t1252 + 0.25000000e8 * t2178 * t1252 - 0.25000000e8 * t2221 * t319 * t2156 * t1295 + 0.25000000e8 * t463 * t1904 * t1582 * t1484 - 0.25000000e8 * t2186 * t2246 - 0.25000000e8 * t463 * U__b * t1903 * t1350 * t2246;
      t2255 = t1231 - t1235 - t1239 - t1249 + t1293 + t1342 - t1382 - t1388 + t1395 + t1397 - t1403 - t1434;
      t2258 = -t1438 + t1441 + t1444 - t1447 - t1450 + t1465 + t1471 + t1531 - t1538 + t1544 - t1576 - t1578;
      t2259 = t1585 + t1642 - t1714 - t1733 + t1736 - t1760 - t1762 - t1766 + t1768 + t1776 + t1784 + t1786;
      t2261 = t1789 + t1794 - t1796 - t1798 - t1818 - t1820 + t1824 + t1827 - t1830 - t1833 - t1836 + t1839;
      t2265 = t1843 + t1846 - t1848 - t1850 + t1858 + t1862 + t1866 + t1870 - t1874 - t1878 - t1881 - t1884 + 0.1570796327e10 * t1056 * t1052 * t1961;
      out_8 = -0.4000000000e-7 / R__8 * t1038 * t1897 * t113 * t737 * t719 * t1043 * t96 * t1891 * (t1960 + t2005 + t2040 + t2072 + t2087 + t2117 + t2145 + t2146 + t2168 + t2207 + t2254 + t2255 + t2258 + t2259 + t2261 + t2265) * R__9;

      % Store outputs
      out_f = zeros(8, 1);
      out_f(1) = out_1;
      out_f(2) = out_2;
      out_f(3) = out_3;
      out_f(4) = out_4;
      out_f(5) = out_5;
      out_f(6) = out_6;
      out_f(7) = out_7;
      out_f(8) = out_8;
    end % f
    %
    % - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    %
    function out_Jf_x = Jf_x( this, in_1, ~, t )
      % Evaluate the Jacobian of f with respect to x.

      % Extract properties
      U__b = this.m_U__b;
      U__f = this.m_U__f;
      alpha = this.m_alpha;
      beta = this.m_beta;
      R__0 = this.m_R__0;
      R__1 = this.m_R__1;
      R__2 = this.m_R__2;
      R__3 = this.m_R__3;
      R__4 = this.m_R__4;
      R__5 = this.m_R__5;
      R__6 = this.m_R__6;
      R__7 = this.m_R__7;
      R__8 = this.m_R__8;
      R__9 = this.m_R__9;
      C__1 = this.m_C__1;
      C__2 = this.m_C__2;
      C__3 = this.m_C__3;
      C__4 = this.m_C__4;
      C__5 = this.m_C__5;

      % Extract inputs
      y__1 = in_1(1);
      y__2 = in_1(2);
      y__3 = in_1(3);
      y__4 = in_1(4);
      y__5 = in_1(5);
      y__6 = in_1(6);
      y__7 = in_1(7);

      % Evaluate function
      t1 = C__2 * R__3;
      t2 = beta * t1;
      t3 = R__2 * R__1;
      t6 = 0.1e1 / U__f;
      t8 = exp(t6 * (y__2 - 0.1e1 * y__3));
      t9 = alpha * t8;
      t13 = t8 * t3;
      t16 = U__f * R__1;
      t19 = U__f * R__2;
      t23 = 0.1e1 / C__1;
      t25 = 0.1e1 / C__2;
      t26 = 0.1e1 / R__3;
      t27 = t26 * t25;
      t28 = R__0 * t8;
      t29 = R__1 * t28;
      t33 = beta * t3;
      t36 = U__f * R__0;
      t41 = R__1 * t19;
      t43 = beta * alpha * R__2 * t29 - 0.1e1 * t33 * t28 - 0.1e1 * R__1 * t36 - 0.1e1 * R__2 * t36 - 0.1e1 * t41;
      t44 = 0.1e1 / t43;
      t45 = t44 * t27;
      out_1_1 = 0.4000000000e-7 * t45 * t23 * (-0.25000000e8 * t9 * t3 * t2 + 0.25000000e8 * t13 * t2 + 0.25000000e8 * t16 * t1 + 0.25000000e8 * t19 * t1);
      t47 = 0.1e1 / R__0;
      t48 = t47 * t23;
      out_2_1 = -0.1000000000e1 * t44 * t48 * t41;
      t52 = R__5 * R__4;
      t53 = R__6 * t52;
      t55 = alpha * U__f;
      t56 = beta * t55;
      t60 = exp(t6 * (y__5 - 0.1e1 * y__6));
      t61 = R__4 * t60;
      t66 = R__5 * R__6;
      t67 = beta * t66;
      t72 = R__4 * R__6;
      t75 = U__f * R__6;
      t78 = beta * alpha * R__6 * R__5 * t61 - 0.1e1 * t67 * t61 - 0.1e1 * U__f * t52 - 0.1e1 * U__f * t72 - 0.1e1 * R__5 * t75;
      t79 = 0.1e1 / t78;
      t80 = t44 * t79;
      t81 = t80 * t48;
      out_4_1 = -0.1000000000e1 * t81 * t56 * t53 * t13;
      out_5_1 = out_4_1;
      t85 = alpha ^ 2;
      t86 = beta ^ 2;
      t87 = t86 * t85;
      t88 = R__8 * R__9;
      t89 = t88 * t87;
      t90 = R__1 * t8;
      t93 = R__2 * R__5;
      t95 = 0.1e1 / (R__9 + R__8);
      out_7_1 = 0.1000000000e1 * t81 * t95 * R__6 * t93 * t90 * t61 * t89;
      out_8_1 = out_7_1;
      t100 = t6 * t86;
      t101 = t28 * t100;
      t102 = C__1 * R__2;
      t103 = alpha * R__1;
      t105 = R__3 * t103 * t102;
      t107 = 0.25000000e8 * t105 * t101;
      t108 = 0.1e1 * y__2;
      t112 = exp(-0.2e1 * t6 * (-t108 + y__3));
      t113 = R__0 * t112;
      t114 = t113 * t100;
      t116 = 0.50000000e8 * t105 * t114;
      t117 = t6 * beta;
      t118 = t28 * t117;
      t122 = 0.25000000e8 * y__3 * t103 * t102 * t118;
      t123 = R__1 * R__3;
      t124 = t123 * t102;
      t126 = 0.25000000e8 * t124 * t101;
      t128 = 0.50000000e8 * t124 * t114;
      t130 = beta * R__2 * t1;
      t131 = t6 * R__1;
      t135 = 0.25000000e8 * y__1 * t9 * t131 * t130;
      t136 = t8 * t6;
      t138 = beta * C__2 * t136;
      t139 = 0.6283185308e3 * t;
      t140 = sin(t139);
      t141 = t140 * R__3;
      t145 = 0.2500000e7 * alpha * t141 * t3 * t138;
      t147 = R__1 * y__3 * t102;
      t149 = 0.25000000e8 * t147 * t118;
      t150 = y__1 * t8;
      t151 = t150 * t131;
      t153 = 0.25000000e8 * t151 * t130;
      t154 = t141 * t3;
      t156 = 0.2500000e7 * t154 * t138;
      t161 = t8 * t86;
      t162 = C__1 * R__0;
      t164 = alpha * R__3;
      t165 = t164 * t3;
      t168 = t112 * t86;
      t172 = t8 * beta;
      t194 = cos(t139);
      t199 = R__0 * t172;
      t202 = t150 * t3;
      t218 = U__f * C__2;
      t222 = -0.25000000e8 * t165 * t162 * t161 + 0.25000000e8 * t165 * t162 * t168 - 0.25000000e8 * alpha * y__3 * t3 * t162 * t172 + 0.25000000e8 * t124 * R__0 * t161 - 0.25000000e8 * t124 * R__0 * t168 - 0.25000000e8 * alpha * y__1 * t90 * t130 - 0.2500000e7 * alpha * t140 * t123 * C__2 * R__2 * t172 + 0.1570796327e10 * t124 * U__f * C__2 * t194 + 0.25000000e8 * t147 * t199 + 0.25000000e8 * t202 * t2 + 0.2500000e7 * t154 * C__2 * t172 + 0.25000000e8 * y__1 * t16 * t1 + 0.25000000e8 * y__1 * t19 * t1 + 0.2500000e7 * U__f * R__1 * C__2 * t141 + 0.2500000e7 * R__2 * t218 * t141;
      t224 = t25 * t23 * t222;
      t225 = t43 ^ 2;
      t226 = 0.1e1 / t225;
      t227 = t226 * t26;
      t228 = R__0 * t136;
      t229 = alpha * beta;
      t231 = t229 * t3 * t228;
      t233 = 0.1e1 * t33 * t228;
      t234 = t231 - t233;
      t235 = t234 * t227;
      out_1_2 = 0.4000000000e-7 * t45 * t23 * (-t107 + t116 - t122 + t126 - t128 - t135 - t145 + t149 + t153 + t156) - 0.4000000000e-7 * t235 * t224;
      t238 = t6 * C__1;
      t239 = t8 * t238;
      t240 = R__0 ^ 2;
      t241 = R__3 * t240;
      t242 = t86 * alpha;
      t243 = t242 * t241;
      t245 = 0.25000000e8 * t243 * t239;
      t246 = t112 * t238;
      t248 = 0.50000000e8 * t243 * t246;
      t249 = y__3 * C__1;
      t250 = t6 * t249;
      t251 = t240 * t8;
      t254 = 0.25000000e8 * t229 * t251 * t250;
      t255 = t86 * t241;
      t257 = 0.25000000e8 * t255 * t239;
      t259 = 0.50000000e8 * t255 * t246;
      t260 = beta * t251;
      t262 = 0.25000000e8 * t260 * t250;
      t266 = t47 * t25;
      t268 = t44 * t26 * t266;
      t271 = t8 * C__1;
      t273 = t86 * t164;
      t276 = t112 * C__1;
      t282 = beta * alpha * t240;
      t289 = C__2 * C__1;
      t291 = R__3 * R__0;
      t306 = t23 * (-0.25000000e8 * t273 * t240 * t271 + 0.25000000e8 * t273 * t240 * t276 - 0.25000000e8 * t282 * t8 * t249 + 0.25000000e8 * t255 * t271 - 0.25000000e8 * t255 * t276 + 0.1570796327e10 * U__f * t291 * t194 * t289 + 0.25000000e8 * t260 * t249 - 0.25000000e8 * R__3 * y__1 * t218 - 0.2500000e7 * R__3 * U__f * t140 * C__2) * t3;
      out_2_2 = 0.4000000000e-7 * t268 * t23 * (-t245 + t248 - t254 + t257 - t259 + t262) * t3 - 0.4000000000e-7 * t235 * t266 * t306;
      out_3_2 = t25 * t8 * t117;
      t311 = C__3 * C__2;
      t312 = C__4 * t311;
      t313 = t202 * t312;
      t314 = R__4 * R__3;
      t315 = R__5 * t314;
      t316 = R__6 * R__7;
      t317 = t229 * t316;
      t318 = t317 * t315;
      t320 = 0.25000000e8 * t318 * t313;
      t321 = C__3 * C__1;
      t322 = C__4 * t321;
      t323 = t8 * y__3;
      t324 = R__0 * R__1;
      t326 = t324 * t323 * t322;
      t327 = R__4 * R__2;
      t328 = R__5 * t327;
      t329 = t317 * t328;
      t331 = 0.25000000e8 * t329 * t326;
      t332 = t8 * t140;
      t334 = t3 * t332 * t312;
      t336 = 0.2500000e7 * t318 * t334;
      t337 = t3 * t28;
      t338 = t337 * t322;
      t339 = t242 * t316;
      t340 = t339 * t315;
      t342 = 0.25000000e8 * t340 * t338;
      t344 = t3 * t113 * t322;
      t346 = 0.50000000e8 * t340 * t344;
      t347 = C__4 * t289;
      t348 = t8 * U__f;
      t350 = t324 * t348 * t347;
      t351 = R__3 * R__2;
      t352 = R__4 * t351;
      t353 = R__5 * R__7;
      t354 = t229 * t353;
      t355 = t354 * t352;
      t357 = 0.25000000e8 * t355 * t350;
      t358 = t317 * t352;
      t360 = 0.25000000e8 * t358 * t350;
      t361 = 0.1e1 * y__5;
      t365 = exp(-0.1e1 * t6 * (-t361 + y__6 - t108 + y__3));
      t366 = R__0 * t365;
      t368 = t3 * t366 * t347;
      t369 = t87 * t316;
      t370 = t369 * t315;
      t372 = 0.25000000e8 * t370 * t368;
      t374 = 0.25000000e8 * t340 * t368;
      t375 = t8 * y__4;
      t377 = t240 * t375 * t347;
      t378 = R__3 * t3;
      t382 = 0.25000000e8 * beta * t353 * t378 * t377;
      t383 = beta * t316;
      t386 = 0.25000000e8 * t383 * t378 * t377;
      t387 = R__1 * t251;
      t388 = t387 * t347;
      t389 = R__6 * t351;
      t390 = U__b * R__7;
      t391 = beta * t390;
      t394 = 0.25000000e8 * t391 * t389 * t388;
      t395 = R__5 * t351;
      t398 = 0.25000000e8 * t391 * t395 * t388;
      t399 = t60 * C__3;
      t400 = t399 * t289;
      t403 = t251 * t6 * y__6 * t400;
      t404 = t314 * t3;
      t405 = t87 * t66;
      t406 = t405 * t404;
      t408 = 0.25000000e8 * t406 * t403;
      t409 = R__1 * t240;
      t410 = t409 * t136;
      t411 = t410 * t400;
      t412 = t52 * t351;
      t413 = t86 * beta;
      t414 = t413 * t85;
      t416 = t414 * t316 * t412;
      t418 = 0.25000000e8 * t416 * t411;
      t419 = -t320 - t331 - t336 - t342 + t346 - t357 - t360 + t372 - t374 - t382 - t386 + t394 + t398 - t408 - t418;
      t420 = t60 * C__4;
      t421 = t420 * t289;
      t422 = t410 * t421;
      t423 = t66 * t351;
      t425 = t242 * t390 * t423;
      t427 = 0.50000000e8 * t425 * t422;
      t428 = t85 * alpha;
      t429 = t413 * t428;
      t431 = t429 * t316 * t412;
      t433 = 0.25000000e8 * t431 * t422;
      t434 = t6 * C__4;
      t436 = t365 * t8;
      t437 = t409 * t436;
      t438 = t437 * t434 * t289;
      t439 = t431 * t438;
      t440 = 0.50000000e8 * t439;
      t441 = t413 * alpha;
      t443 = t441 * t316 * t412;
      t445 = 0.25000000e8 * t443 * t422;
      t446 = C__3 * C__4;
      t450 = t324 * t8 * t194 * t446 * t289;
      t453 = 0.1570796327e10 * t317 * t412 * t450;
      t455 = t87 * t390 * t423;
      t457 = 0.25000000e8 * t455 * t422;
      t458 = t443 * t438;
      t459 = 0.50000000e8 * t458;
      t460 = t242 * t66;
      t461 = t460 * t404;
      t463 = 0.50000000e8 * t461 * t403;
      t465 = 0.50000000e8 * t443 * t411;
      t471 = exp(-0.2e1 * t6 * (-t361 + y__6));
      t472 = t471 * t8;
      t473 = t409 * t472;
      t474 = t473 * t6 * C__3 * t289;
      t475 = t443 * t474;
      t476 = 0.50000000e8 * t475;
      t477 = t416 * t474;
      t478 = 0.25000000e8 * t477;
      t480 = 0.50000000e8 * t416 * t422;
      t483 = t251 * t6 * y__4 * t421;
      t484 = R__3 * R__5;
      t485 = t484 * t3;
      t486 = t339 * t485;
      t488 = 0.50000000e8 * t486 * t483;
      t489 = t369 * t485;
      t491 = 0.25000000e8 * t489 * t483;
      t492 = t416 * t438;
      t493 = 0.100000000e9 * t492;
      t494 = -t427 + t433 - t440 + t445 + t453 + t457 - t459 + t463 + t465 - t476 + t478 - t480 + t488 - t491 + t493;
      t496 = y__4 * t60;
      t499 = t351 * t409;
      t501 = t86 * R__7 * t66;
      t504 = 0.25000000e8 * t501 * t499 * t136 * t496 * t347;
      t505 = C__3 * t289;
      t506 = t6 * t60;
      t507 = t251 * t506;
      t508 = t507 * t505;
      t509 = t413 * R__7;
      t510 = t509 * t66;
      t511 = t510 * t404;
      t513 = 0.25000000e8 * t511 * t508;
      t514 = t240 * t471;
      t516 = t514 * t136 * t505;
      t517 = t511 * t516;
      t518 = 0.25000000e8 * t517;
      t521 = t86 * U__b * t316;
      t524 = 0.25000000e8 * t521 * t485 * t507 * t347;
      t525 = y__6 * t60;
      t527 = t136 * t525 * t505;
      t529 = t86 * R__6 * t52;
      t532 = 0.25000000e8 * t529 * t499 * t527;
      t533 = t369 * t352;
      t535 = 0.25000000e8 * t533 * t388;
      t536 = t339 * t352;
      t538 = 0.25000000e8 * t536 * t388;
      t539 = t229 * t390;
      t542 = 0.25000000e8 * t539 * t395 * t388;
      t545 = 0.25000000e8 * t539 * t389 * t388;
      t546 = R__2 * t251;
      t547 = t546 * t322;
      t549 = 0.25000000e8 * t340 * t547;
      t551 = t240 * t323 * t322;
      t552 = R__4 * R__1;
      t553 = R__5 * t552;
      t556 = 0.25000000e8 * t317 * t553 * t551;
      t558 = 0.25000000e8 * t329 * t551;
      t559 = t387 * t322;
      t561 = 0.25000000e8 * t340 * t559;
      t562 = t8 ^ 2;
      t563 = t240 * t562;
      t565 = R__1 * t563 * t347;
      t567 = t87 * t353 * t352;
      t569 = 0.50000000e8 * t567 * t565;
      t571 = 0.50000000e8 * t533 * t565;
      t572 = -t504 - t513 + t518 + t524 - t532 - t535 + t538 - t542 - t545 - t549 - t556 - t558 - t561 + t569 + t571;
      t574 = t242 * t353 * t352;
      t580 = t240 * t348 * t347;
      t583 = t240 * t112;
      t585 = R__1 * t583 * t322;
      t589 = R__2 * t583 * t322;
      t592 = R__4 * t123;
      t603 = t240 * t365;
      t605 = R__2 * t603 * t347;
      t607 = 0.25000000e8 * t370 * t605;
      t609 = R__1 * t603 * t347;
      t611 = 0.25000000e8 * t370 * t609;
      t613 = 0.25000000e8 * t340 * t609;
      t615 = 0.25000000e8 * t340 * t605;
      t624 = -0.50000000e8 * t574 * t565 - 0.50000000e8 * t536 * t565 - 0.25000000e8 * t358 * t580 + 0.50000000e8 * t340 * t585 + 0.50000000e8 * t340 * t589 - 0.25000000e8 * t317 * t592 * t580 - 0.25000000e8 * t354 * t592 * t580 - 0.25000000e8 * t355 * t580 - 0.25000000e8 * t567 * t388 + t607 + t611 - t613 - t615 + 0.25000000e8 * t317 * t378 * t377 + 0.25000000e8 * t354 * t378 * t377 + 0.25000000e8 * t574 * t388;
      t628 = 0.1e1 / C__4;
      t629 = t628 * t26;
      t630 = 0.1e1 / R__7;
      t631 = t630 * t629;
      t633 = 0.1e1 / C__3;
      t634 = t79 * t633;
      t636 = t44 * t634 * t48;
      t639 = y__4 * C__4;
      t641 = t240 * t639 * t289;
      t642 = U__f ^ 2;
      t643 = t642 * t316;
      t644 = t643 * t123;
      t647 = t642 * t353;
      t648 = t647 * t351;
      t651 = t643 * t351;
      t654 = t240 * C__4;
      t656 = R__1 * t654 * t289;
      t657 = t642 * t390;
      t658 = t657 * t484;
      t662 = R__2 * t654 * t289;
      t665 = R__3 * R__6;
      t666 = t657 * t665;
      t671 = t647 * t123;
      t674 = R__0 * C__4;
      t676 = R__1 * t674 * t289;
      t681 = R__0 * t639 * t289;
      t693 = R__7 * U__f;
      t694 = t242 * t693;
      t695 = t694 * t53;
      t699 = t409 * t375 * t347;
      t700 = t229 * t693;
      t701 = t700 * t395;
      t704 = -0.25000000e8 * t644 * t641 - 0.25000000e8 * t648 * t641 - 0.25000000e8 * t651 * t641 + 0.25000000e8 * t658 * t656 + 0.25000000e8 * t658 * t662 + 0.25000000e8 * t666 * t656 + 0.25000000e8 * t666 * t662 - 0.25000000e8 * t671 * t641 + 0.25000000e8 * t657 * t389 * t676 - 0.25000000e8 * t647 * t378 * t681 - 0.25000000e8 * t643 * t378 * t681 + 0.25000000e8 * t657 * t395 * t676 + 0.25000000e8 * t695 * t351 * t583 * t322 + 0.25000000e8 * t701 * t699;
      t706 = t3 * t251 * t347;
      t707 = R__7 * t665;
      t708 = U__b * U__f;
      t709 = t229 * t708;
      t713 = t337 * t347;
      t714 = t642 * R__7;
      t715 = t229 * t714;
      t716 = t715 * t315;
      t719 = R__6 * t314;
      t720 = t715 * t719;
      t723 = t694 * t315;
      t726 = t694 * t719;
      t738 = t3 * t563 * t347;
      t739 = t87 * t693;
      t740 = t739 * t315;
      t743 = t739 * t719;
      t746 = R__7 * t484;
      t750 = t473 * t505;
      t751 = t510 * t352;
      t754 = t240 * t60;
      t755 = t123 * t754;
      t756 = t755 * t347;
      t757 = t739 * t53;
      t760 = t351 * t754;
      t761 = t760 * t347;
      t765 = t324 * t525 * t505;
      t766 = U__f * beta;
      t767 = t766 * t66;
      t768 = t767 * t352;
      t771 = -0.25000000e8 * t709 * t707 * t706 - 0.25000000e8 * t716 * t713 - 0.25000000e8 * t720 * t713 + 0.25000000e8 * t723 * t706 + 0.25000000e8 * t726 * t706 - 0.25000000e8 * t695 * t123 * t251 * t322 - 0.25000000e8 * t695 * t351 * t251 * t322 + 0.25000000e8 * t740 * t738 + 0.25000000e8 * t743 * t738 - 0.25000000e8 * t709 * t746 * t706 + 0.25000000e8 * t751 * t750 - 0.25000000e8 * t757 * t756 - 0.25000000e8 * t757 * t761 - 0.25000000e8 * t768 * t765;
      t773 = R__0 * t60;
      t774 = t3 * t773;
      t775 = t774 * t347;
      t776 = R__6 * t484;
      t777 = t766 * t390;
      t778 = t777 * t776;
      t783 = t229 * t75;
      t784 = t783 * t315;
      t787 = R__2 * t240;
      t795 = t251 * t496 * t347;
      t796 = t501 * t378;
      t799 = t700 * t389;
      t812 = t700 * t53;
      t823 = R__7 * t66;
      t824 = t709 * t823;
      t827 = 0.25000000e8 * t778 * t775 + 0.25000000e8 * t784 * t409 * t525 * t505 + 0.25000000e8 * t784 * t787 * t525 * t505 + 0.25000000e8 * t695 * t761 - 0.25000000e8 * t796 * t795 + 0.25000000e8 * t799 * t699 - 0.25000000e8 * t723 * t738 - 0.25000000e8 * t726 * t738 - 0.25000000e8 * t740 * t706 - 0.25000000e8 * t743 * t706 - 0.25000000e8 * t812 * t409 * t323 * t322 - 0.25000000e8 * t812 * t787 * t323 * t322 + 0.25000000e8 * t695 * t123 * t583 * t322 - 0.25000000e8 * t824 * t756;
      t847 = t123 * t603 * t347;
      t851 = t324 * t496 * t347;
      t852 = t766 * t316;
      t853 = t852 * t395;
      t858 = t700 * t776;
      t866 = t351 * t603 * t347;
      t870 = t251 * t525 * t505;
      t871 = t529 * t378;
      t874 = t8 * t60;
      t875 = t409 * t874;
      t876 = t875 * t347;
      t884 = -0.25000000e8 * t824 * t761 + 0.25000000e8 * t695 * t755 * t505 + 0.25000000e8 * t695 * t760 * t505 - 0.25000000e8 * t695 * t123 * t514 * t505 - 0.25000000e8 * t695 * t351 * t514 * t505 + 0.25000000e8 * t695 * t756 + 0.25000000e8 * t757 * t847 - 0.25000000e8 * t853 * t851 + 0.25000000e8 * t858 * t409 * t496 * t347 + 0.25000000e8 * t858 * t787 * t496 * t347 + 0.25000000e8 * t757 * t866 - 0.25000000e8 * t871 * t870 + 0.25000000e8 * t521 * t395 * t876 - 0.25000000e8 * t695 * t847 - 0.25000000e8 * t695 * t866;
      t887 = t875 * t505;
      t890 = t774 * t505;
      t893 = t86 * U__f * t316 * t315;
      t896 = R__0 * t471;
      t898 = t3 * t896 * t505;
      t901 = t56 * t316;
      t905 = R__3 * t409;
      t906 = t905 * t347;
      t909 = beta * alpha * t642;
      t910 = t909 * R__7 * t72;
      t913 = R__3 * t787;
      t914 = t913 * t347;
      t918 = t909 * R__7 * t52;
      t923 = t66 * t327;
      t924 = t700 * t923;
      t927 = t66 * t314;
      t928 = t700 * t927;
      t931 = t694 * t927;
      t937 = t739 * t927;
      t942 = -0.25000000e8 * t751 * t887 - 0.25000000e8 * t893 * t890 + 0.25000000e8 * t893 * t898 + 0.1570796327e10 * t901 * t412 * t450 + 0.25000000e8 * t910 * t906 + 0.25000000e8 * t910 * t914 + 0.25000000e8 * t918 * t906 + 0.25000000e8 * t918 * t914 - 0.25000000e8 * t924 * t326 - 0.2500000e7 * t928 * t334 - 0.25000000e8 * t931 * t338 + 0.25000000e8 * t700 * t423 * t851 + 0.25000000e8 * t937 * t368 - 0.25000000e8 * t931 * t368;
      t949 = t437 * t347;
      t974 = -0.25000000e8 * t489 * t795 + 0.50000000e8 * t486 * t795 + 0.25000000e8 * t431 * t876 - 0.25000000e8 * t431 * t949 - 0.25000000e8 * t416 * t887 + 0.25000000e8 * t416 * t750 - 0.50000000e8 * t416 * t876 + 0.50000000e8 * t416 * t949 - 0.25000000e8 * t406 * t870 + 0.50000000e8 * t443 * t887 - 0.50000000e8 * t443 * t750 + 0.25000000e8 * t931 * t344 - 0.25000000e8 * t928 * t313 + 0.25000000e8 * t443 * t876 + 0.25000000e8 * t455 * t876;
      t982 = t316 * t484;
      t1010 = -0.25000000e8 * t443 * t949 + 0.50000000e8 * t461 * t870 - 0.50000000e8 * t425 * t876 - 0.25000000e8 * t709 * t982 * t775 - 0.25000000e8 * t937 * t775 + 0.25000000e8 * t931 * t890 - 0.25000000e8 * t931 * t898 + 0.25000000e8 * t931 * t775 + 0.25000000e8 * t783 * t412 * t765 - 0.25000000e8 * t852 * t378 * t377 + 0.25000000e8 * t777 * t395 * t388 + 0.25000000e8 * t777 * t389 * t388 - 0.25000000e8 * t716 * t388 - 0.25000000e8 * t720 * t388;
      t1011 = t546 * t347;
      t1016 = R__2 * t324;
      t1017 = t1016 * t347;
      t1023 = t240 * t525 * t505;
      t1026 = R__1 * t754;
      t1027 = t1026 * t347;
      t1030 = R__2 * t754;
      t1031 = t1030 * t347;
      t1035 = t240 * t496 * t347;
      t1036 = R__5 * t123;
      t1042 = t1026 * t505;
      t1045 = t1030 * t505;
      t1049 = R__1 * t514 * t505;
      t1053 = R__2 * t514 * t505;
      t1059 = t766 * t353;
      t1063 = -0.25000000e8 * t716 * t1011 - 0.25000000e8 * t720 * t1011 + 0.25000000e8 * t716 * t1017 + 0.25000000e8 * t720 * t1017 - 0.25000000e8 * t768 * t1023 + 0.25000000e8 * t778 * t1027 + 0.25000000e8 * t778 * t1031 - 0.25000000e8 * t852 * t1036 * t1035 - 0.25000000e8 * t853 * t1035 - 0.25000000e8 * t893 * t1042 - 0.25000000e8 * t893 * t1045 + 0.25000000e8 * t893 * t1049 + 0.25000000e8 * t893 * t1053 - 0.25000000e8 * t767 * t592 * t1023 - 0.25000000e8 * t1059 * t378 * t377;
      t1068 = t631 * t25 * (t704 + t771 + t827 + t884 + t942 + t974 + t1010 + t1063);
      t1069 = t633 * t48;
      t1070 = t226 * t79;
      out_4_2 = 0.4000000000e-7 * t636 * t631 * t25 * (t419 + t494 + t572 + t624) - 0.4000000000e-7 * t234 * t1070 * t1069 * t1068;
      t1077 = t240 * t365 * C__4 * t289;
      t1078 = R__4 ^ 2;
      t1079 = t1078 * t123;
      t1080 = alpha * R__7;
      t1081 = t86 * t1080;
      t1082 = t1081 * t1079;
      t1084 = 0.25000000e8 * t1082 * t1077;
      t1085 = t1078 * t351;
      t1086 = t1081 * t1085;
      t1088 = 0.25000000e8 * t1086 * t1077;
      t1089 = t85 * R__7;
      t1090 = t86 * t1089;
      t1091 = t1090 * t1079;
      t1093 = 0.25000000e8 * t1091 * t1077;
      t1094 = t1090 * t1085;
      t1096 = 0.25000000e8 * t1094 * t1077;
      t1099 = R__2 * t409;
      t1100 = R__7 * R__3;
      t1104 = 0.25000000e8 * beta * t1100 * t1099 * t8 * t639 * t289;
      t1105 = t112 * C__4;
      t1107 = t240 * t1105 * t321;
      t1109 = 0.50000000e8 * t1082 * t1107;
      t1111 = 0.50000000e8 * t1086 * t1107;
      t1112 = t8 * C__4;
      t1113 = t240 * t1112;
      t1114 = t1113 * t321;
      t1116 = 0.25000000e8 * t1082 * t1114;
      t1118 = 0.25000000e8 * t1086 * t1114;
      t1119 = y__3 * C__4;
      t1121 = t8 * t1119 * t321;
      t1123 = beta * t1080;
      t1126 = 0.25000000e8 * t1123 * t1078 * t409 * t1121;
      t1130 = 0.25000000e8 * t1123 * t1078 * t787 * t1121;
      t1131 = t1113 * t289;
      t1134 = 0.25000000e8 * t391 * t378 * t1131;
      t1135 = -t1084 - t1088 + t1093 + t1096 + t1104 + t1109 + t1111 - t1116 - t1118 - t1126 - t1130 - t1134;
      t1136 = t562 * t60;
      t1138 = t409 * t1136 * t347;
      t1139 = t6 * t413;
      t1142 = t1139 * t1089 * t1085 * t1138;
      t1143 = 0.100000000e9 * t1142;
      t1145 = t603 * t136 * t347;
      t1146 = R__7 * t1078;
      t1148 = t429 * t1146 * t378;
      t1149 = t1148 * t1145;
      t1150 = 0.50000000e8 * t1149;
      t1152 = t441 * t1146 * t378;
      t1153 = t1152 * t1145;
      t1154 = 0.50000000e8 * t1153;
      t1155 = t1078 * R__3;
      t1157 = t242 * t1155 * t1099;
      t1159 = 0.50000000e8 * t1157 * t527;
      t1161 = 0.50000000e8 * t1152 * t508;
      t1162 = t1152 * t516;
      t1163 = 0.50000000e8 * t1162;
      t1165 = t414 * t1146 * t378;
      t1166 = t1165 * t516;
      t1167 = 0.25000000e8 * t1166;
      t1168 = t1165 * t1145;
      t1169 = 0.100000000e9 * t1168;
      t1171 = t87 * t1155 * t1099;
      t1173 = 0.25000000e8 * t1171 * t527;
      t1174 = t194 * C__4;
      t1176 = t28 * t1174 * t505;
      t1180 = 0.1570796327e10 * t229 * t1146 * t378 * t1176;
      t1182 = 0.25000000e8 * t1165 * t508;
      t1185 = t1139 * t1080 * t1085 * t1138;
      t1186 = 0.50000000e8 * t1185;
      t1190 = t1139 * t428 * R__7 * t1085 * t1138;
      t1191 = 0.50000000e8 * t1190;
      t1192 = -t1143 - t1150 - t1154 + t1159 + t1161 - t1163 + t1167 + t1169 - t1173 + t1180 - t1182 + t1186 + t1191;
      t1194 = t240 * t874;
      t1195 = t1194 * t347;
      t1197 = 0.25000000e8 * t1091 * t1195;
      t1199 = R__1 * t366 * t347;
      t1201 = 0.25000000e8 * t1086 * t1199;
      t1204 = 0.25000000e8 * t1123 * t378 * t377;
      t1205 = R__1 * t113;
      t1206 = t1205 * t322;
      t1208 = 0.50000000e8 * t1086 * t1206;
      t1209 = t1081 * t352;
      t1211 = 0.25000000e8 * t1209 * t388;
      t1212 = t1090 * t352;
      t1214 = 0.25000000e8 * t1212 * t388;
      t1216 = R__1 * t150 * t312;
      t1217 = t1123 * t1085;
      t1219 = 0.25000000e8 * t1217 * t1216;
      t1221 = R__0 * t323 * t322;
      t1222 = t1078 * t3;
      t1225 = 0.25000000e8 * t1123 * t1222 * t1221;
      t1227 = R__1 * t332 * t312;
      t1229 = 0.2500000e7 * t1217 * t1227;
      t1230 = t29 * t322;
      t1232 = 0.25000000e8 * t1086 * t1230;
      t1233 = R__7 * t351;
      t1234 = U__b * alpha;
      t1235 = beta * t1234;
      t1238 = 0.25000000e8 * t1235 * t1233 * t388;
      t1240 = 0.50000000e8 * t1212 * t565;
      t1241 = -t1197 - t1201 - t1204 + t1208 - t1211 + t1214 - t1219 - t1225 - t1229 - t1232 + t1238 - t1240;
      t1243 = 0.50000000e8 * t1209 * t565;
      t1246 = 0.25000000e8 * t1123 * t592 * t580;
      t1249 = 0.25000000e8 * t1123 * t352 * t580;
      t1251 = 0.25000000e8 * t1094 * t1199;
      t1253 = 0.25000000e8 * t1082 * t1195;
      t1255 = 0.25000000e8 * t1086 * t1195;
      t1257 = 0.25000000e8 * t1094 * t1195;
      t1264 = 0.25000000e8 * t229 * R__4 * R__7 * t378 * R__0 * t348 * t347;
      t1265 = t8 * t506;
      t1268 = t509 * t1155 * t1099;
      t1270 = 0.25000000e8 * t1268 * t1265 * t505;
      t1271 = t471 * t136;
      t1273 = t1268 * t1271 * t505;
      t1274 = 0.25000000e8 * t1273;
      t1276 = R__0 * t874 * t347;
      t1280 = 0.25000000e8 * t87 * t1146 * t378 * t1276;
      t1284 = 0.25000000e8 * t242 * t1146 * t378 * t1276;
      t1285 = t6 * t525;
      t1291 = 0.25000000e8 * t86 * t1078 * t351 * t387 * t1285 * t505;
      t1292 = t1243 + t1246 + t1249 + t1251 + t1253 + t1255 - t1257 + t1264 - t1270 + t1274 - t1280 + t1284 - t1291;
      t1296 = t628 * t27;
      t1298 = t23 * t630;
      t1300 = 0.1e1 / R__4;
      t1303 = t1300 * t44 * t634 * t47 * t1298;
      t1306 = t642 * t1100;
      t1307 = t1306 * t3;
      t1310 = t657 * t351;
      t1314 = t909 * R__7 * t314;
      t1320 = t240 * t399 * t289;
      t1321 = t86 * t693;
      t1322 = t1321 * t1079;
      t1325 = t1321 * t1085;
      t1328 = t471 * C__3;
      t1330 = t240 * t1328 * t289;
      t1336 = y__6 * t399 * t289;
      t1337 = U__f * t1078;
      t1338 = beta * t1337;
      t1345 = t639 * t289;
      t1349 = t654 * t289;
      t1359 = t324 * t874 * t347;
      t1360 = t694 * t1085;
      t1363 = t739 * t1085;
      t1374 = 0.25000000e8 * t1307 * t681 - 0.25000000e8 * t1310 * t676 - 0.25000000e8 * t1314 * t656 - 0.25000000e8 * t1314 * t662 - 0.25000000e8 * t1322 * t1320 - 0.25000000e8 * t1325 * t1320 + 0.25000000e8 * t1322 * t1330 + 0.25000000e8 * t1325 * t1330 - 0.25000000e8 * t1338 * t905 * t1336 - 0.25000000e8 * t1338 * t913 * t1336 + 0.25000000e8 * t1306 * t787 * t1345 - 0.25000000e8 * t657 * t123 * t1349 - 0.25000000e8 * t1310 * t1349 + 0.25000000e8 * t1306 * t409 * t1345 + 0.25000000e8 * t1360 * t1359 - 0.25000000e8 * t1363 * t1359 - 0.25000000e8 * beta * t708 * t1233 * t388 + 0.25000000e8 * t1314 * t388 + 0.25000000e8 * t1314 * t1011;
      t1375 = t1078 * R__1;
      t1377 = t56 * R__7 * t1375;
      t1380 = t1078 * R__2;
      t1382 = t56 * R__7 * t1380;
      t1385 = beta * t693;
      t1386 = t1385 * t378;
      t1389 = R__7 * t1155;
      t1390 = t86 * t55;
      t1391 = t1390 * t1389;
      t1402 = t56 * t1079;
      t1406 = R__0 * t525 * t505;
      t1407 = t1338 * t378;
      t1414 = R__1 * t773;
      t1415 = t1414 * t505;
      t1419 = R__1 * t896 * t505;
      t1422 = t56 * t1085;
      t1425 = t1194 * t505;
      t1427 = t413 * t1146 * t378;
      t1431 = t240 * t472 * t505;
      t1435 = t86 * t85 * U__f;
      t1436 = t1435 * t1389;
      t1441 = -0.25000000e8 * t1377 * t551 - 0.25000000e8 * t1382 * t551 + 0.25000000e8 * t1386 * t377 - 0.25000000e8 * t1391 * t559 - 0.25000000e8 * t1391 * t547 + 0.25000000e8 * t1391 * t585 + 0.25000000e8 * t1391 * t589 - 0.25000000e8 * t1314 * t1017 + 0.25000000e8 * t1402 * t1023 - 0.25000000e8 * t1407 * t1406 + 0.25000000e8 * t1391 * t1042 + 0.25000000e8 * t1391 * t1045 - 0.25000000e8 * t1325 * t1415 + 0.25000000e8 * t1325 * t1419 + 0.25000000e8 * t1422 * t1023 - 0.25000000e8 * t1427 * t1425 + 0.25000000e8 * t1427 * t1431 + 0.25000000e8 * t1436 * t609 + 0.25000000e8 * t1436 * t605;
      t1443 = t8 * t525;
      t1444 = t1443 * t505;
      t1446 = t86 * t1155 * t1099;
      t1466 = t739 * t352;
      t1469 = t694 * t352;
      t1490 = t700 * t1085;
      t1495 = -0.25000000e8 * t1446 * t1444 - 0.25000000e8 * t1391 * t609 - 0.25000000e8 * t1391 * t605 - 0.25000000e8 * t1391 * t1049 - 0.25000000e8 * t1391 * t1053 + 0.1570796327e10 * t700 * t1155 * t3 * t1176 - 0.25000000e8 * t1360 * t1199 - 0.25000000e8 * t700 * t378 * t377 - 0.25000000e8 * t1466 * t565 + 0.25000000e8 * t1469 * t565 + 0.25000000e8 * t1466 * t388 - 0.25000000e8 * t1469 * t388 - 0.25000000e8 * t1360 * t1230 + 0.25000000e8 * t1360 * t1206 + 0.25000000e8 * t709 * t1233 * t388 + 0.25000000e8 * t715 * t352 * t29 * t347 - 0.25000000e8 * t700 * t1222 * t1221 - 0.2500000e7 * t1490 * t1227 - 0.25000000e8 * t1490 * t1216;
      t1501 = t240 * t1136 * t347;
      t1507 = t240 * t436 * t347;
      t1544 = 0.25000000e8 * t229 * t1337 * t378 * t1406 + 0.25000000e8 * t1148 * t1501 - 0.50000000e8 * t1165 * t1501 - 0.25000000e8 * t1148 * t1507 - 0.25000000e8 * t1165 * t1425 + 0.25000000e8 * t1165 * t1431 + 0.25000000e8 * t1152 * t1501 + 0.50000000e8 * t1165 * t1507 - 0.25000000e8 * t1171 * t1444 + 0.50000000e8 * t1152 * t1425 - 0.50000000e8 * t1152 * t1431 - 0.25000000e8 * t739 * t1079 * t1195 - 0.25000000e8 * t1363 * t1195 - 0.25000000e8 * t1152 * t1507 + 0.50000000e8 * t1157 * t1444 + 0.25000000e8 * t694 * t1079 * t1195 + 0.25000000e8 * t1360 * t1195 + 0.25000000e8 * t1363 * t1199 + 0.25000000e8 * t1360 * t1415 - 0.25000000e8 * t1360 * t1419;
      t1548 = t630 * t628;
      t1549 = t1548 * t27;
      t1550 = t1549 * (t1374 + t1441 + t1495 + t1544) * t66;
      t1551 = t234 * t1300;
      out_5_2 = 0.4000000000e-7 * t1303 * t1296 * (t1135 + t1192 + t1241 + t1292) * t66 - 0.4000000000e-7 * t1551 * t1070 * t1069 * t1550;
      t1556 = t241 * t289;
      t1557 = C__3 * C__5;
      t1559 = t1285 * t1557 * t1556;
      t1560 = t328 * t90;
      t1561 = R__6 * R__8;
      t1562 = t85 * R__9;
      t1563 = t86 * t1562;
      t1564 = t1563 * t1561;
      t1567 = 0.25000000e8 * t1564 * t1560 * t1559;
      t1570 = t1078 * C__5;
      t1571 = t505 * t1570;
      t1572 = t1571 * t60 * t88 * t87;
      t1577 = 0.1570796327e10 * t823 * t378 * t228 * t1174 * t1572;
      t1578 = t240 * t289;
      t1579 = R__3 * C__3;
      t1581 = C__4 * y__7 * t1579;
      t1582 = t1581 * t1578;
      t1583 = R__5 * t1078;
      t1584 = beta * R__7;
      t1588 = 0.25000000e8 * t1584 * t1583 * t13 * t1582;
      t1589 = R__6 * t1078;
      t1593 = 0.25000000e8 * t1584 * t1589 * t13 * t1582;
      t1595 = t1112 * t1579 * t1578;
      t1596 = U__b * beta;
      t1600 = 0.25000000e8 * t1596 * t353 * t1222 * t1595;
      t1601 = t1596 * t316;
      t1604 = 0.25000000e8 * t1601 * t1222 * t1595;
      t1607 = t1380 * t90;
      t1612 = 0.25000000e8 * t86 * t390 * t66 * t1607 * t506 * t446 * t1556;
      t1614 = t874 * t446 * t1556;
      t1615 = t52 * t3;
      t1616 = alpha * R__8;
      t1621 = 0.25000000e8 * t86 * t1616 * t316 * t1615 * t1614;
      t1622 = t85 * R__8;
      t1627 = 0.25000000e8 * t86 * t1622 * t316 * t1615 * t1614;
      t1628 = t291 * t289;
      t1629 = C__4 * C__5;
      t1630 = R__1 * t365;
      t1631 = t1630 * t1629;
      t1632 = t1631 * t1628;
      t1633 = R__7 * R__8;
      t1634 = t1563 * t1633;
      t1635 = t1634 * t923;
      t1637 = 0.25000000e8 * t1635 * t1632;
      t1638 = C__5 * t60;
      t1639 = C__1 * t1078;
      t1640 = t1639 * t1638;
      t1641 = t1640 * t89;
      t1642 = C__2 * C__4;
      t1643 = t28 * t1642;
      t1644 = t746 * t3;
      t1647 = 0.25000000e8 * t1644 * t1643 * t1641;
      t1648 = y__7 * t60;
      t1649 = t1648 * t446;
      t1650 = t1649 * t1556;
      t1651 = t3 * t136;
      t1652 = t86 * t316;
      t1656 = 0.25000000e8 * t1652 * t1583 * t1651 * t1650;
      t1657 = -t1567 + t1577 + t1588 + t1593 - t1600 - t1604 - t1612 + t1621 - t1627 + t1637 - t1647 + t1656;
      t1658 = t707 * t3;
      t1661 = 0.25000000e8 * t1658 * t1643 * t1641;
      t1663 = t90 * t446 * t1556;
      t1664 = t242 * t1633;
      t1667 = 0.25000000e8 * t1664 * t923 * t1663;
      t1668 = t316 * t1380;
      t1669 = t89 * t1668;
      t1671 = 0.25000000e8 * t1669 * t1632;
      t1672 = t251 * t1642;
      t1674 = t316 * t123 * t1672;
      t1676 = 0.25000000e8 * t1674 * t1641;
      t1677 = t353 * t351;
      t1678 = t1677 * t1672;
      t1680 = 0.25000000e8 * t1678 * t1641;
      t1682 = t353 * t123 * t1672;
      t1684 = 0.25000000e8 * t1682 * t1641;
      t1685 = t316 * t351;
      t1686 = t1685 * t1672;
      t1688 = 0.25000000e8 * t1686 * t1641;
      t1691 = R__2 * t365 * t1629 * t1556;
      t1692 = t316 * t52;
      t1693 = t89 * t1692;
      t1695 = 0.25000000e8 * t1693 * t1691;
      t1696 = t1631 * t1556;
      t1698 = 0.25000000e8 * t1693 * t1696;
      t1699 = t353 * t1380;
      t1700 = t89 * t1699;
      t1702 = 0.25000000e8 * t1700 * t1632;
      t1703 = t1583 * t3;
      t1704 = t87 * t1633;
      t1705 = t1704 * t1703;
      t1707 = 0.25000000e8 * t1705 * t1614;
      t1708 = t1589 * t3;
      t1709 = t1704 * t1708;
      t1711 = 0.25000000e8 * t1709 * t1614;
      t1712 = -t1661 - t1667 + t1671 - t1676 - t1680 - t1684 - t1688 + t1695 + t1698 + t1702 - t1707 - t1711;
      t1714 = t1664 * t1703;
      t1716 = 0.25000000e8 * t1714 * t1614;
      t1717 = t1664 * t1708;
      t1719 = 0.25000000e8 * t1717 * t1614;
      t1722 = 0.25000000e8 * t1704 * t923 * t1663;
      t1725 = 0.25000000e8 * t539 * t923 * t1663;
      t1728 = t8 * y__7 * t446 * t1556;
      t1731 = 0.25000000e8 * t317 * t1615 * t1728;
      t1733 = 0.25000000e8 * t1714 * t1595;
      t1735 = 0.25000000e8 * t1717 * t1595;
      t1738 = 0.25000000e8 * t539 * t1703 * t1595;
      t1741 = 0.25000000e8 * t539 * t1708 * t1595;
      t1743 = 0.25000000e8 * t1705 * t1595;
      t1745 = 0.25000000e8 * t1709 * t1595;
      t1746 = t327 * t90;
      t1747 = t1584 * t66;
      t1750 = 0.25000000e8 * t1747 * t1746 * t1582;
      t1751 = t1716 + t1719 + t1722 + t1725 - t1731 - t1733 - t1735 + t1738 + t1741 + t1743 + t1745 + t1750;
      t1754 = 0.25000000e8 * t354 * t1607 * t1582;
      t1757 = 0.25000000e8 * t317 * t1607 * t1582;
      t1758 = R__3 * C__4;
      t1760 = t365 * C__5 * t1758;
      t1761 = t1760 * t1578;
      t1762 = t316 * t1375;
      t1765 = 0.25000000e8 * t89 * t1762 * t1761;
      t1767 = 0.25000000e8 * t1700 * t1761;
      t1769 = 0.25000000e8 * t1669 * t1761;
      t1770 = t353 * t1375;
      t1773 = 0.25000000e8 * t89 * t1770 * t1761;
      t1776 = 0.25000000e8 * t1601 * t1615 * t1595;
      t1778 = t1265 * t446 * t1556;
      t1781 = t413 * t1616 * t316 * t1703;
      t1783 = 0.25000000e8 * t1781 * t1778;
      t1785 = t86 * t85 * U__b;
      t1787 = t1785 * t316 * t1703;
      t1789 = 0.25000000e8 * t1787 * t1778;
      t1790 = t60 ^ 2;
      t1794 = t8 * t6 * t1790 * t446 * t1556;
      t1795 = t1781 * t1794;
      t1796 = 0.25000000e8 * t1795;
      t1799 = t413 * t1622 * t316 * t1703;
      t1801 = 0.50000000e8 * t1799 * t1778;
      t1805 = t413 * t428 * R__8 * t316 * t1703;
      t1806 = t1805 * t1794;
      t1807 = 0.25000000e8 * t1806;
      t1808 = -t1754 - t1757 + t1765 + t1767 + t1769 + t1773 - t1776 - t1783 - t1789 + t1796 + t1801 + t1807;
      t1812 = 0.25000000e8 * t1805 * t1778;
      t1813 = t86 * t1234;
      t1815 = t1813 * t316 * t1703;
      t1817 = 0.50000000e8 * t1815 * t1778;
      t1818 = t1799 * t1794;
      t1819 = 0.50000000e8 * t1818;
      t1821 = t1271 * t1557 * t1556;
      t1823 = t413 * t1562 * t1633;
      t1824 = t1823 * t1708;
      t1825 = t1824 * t1821;
      t1826 = 0.25000000e8 * t1825;
      t1829 = t365 * t136 * t1629 * t1556;
      t1830 = t1823 * t1703;
      t1831 = t1830 * t1829;
      t1832 = 0.50000000e8 * t1831;
      t1833 = t1824 * t1829;
      t1834 = 0.50000000e8 * t1833;
      t1835 = alpha * R__9;
      t1837 = t413 * t1835 * t1633;
      t1838 = t1837 * t1703;
      t1839 = t1838 * t1821;
      t1840 = 0.25000000e8 * t1839;
      t1841 = t88 * t429;
      t1843 = C__2 * t1639 * t1638;
      t1844 = t1843 * t1841;
      t1846 = t409 * t562 * C__4;
      t1849 = t6 * t316 * t351 * t1846;
      t1850 = t1849 * t1844;
      t1851 = 0.50000000e8 * t1850;
      t1852 = t88 * t414;
      t1853 = t1843 * t1852;
      t1856 = t6 * t353 * t351 * t1846;
      t1857 = t1856 * t1853;
      t1858 = 0.50000000e8 * t1857;
      t1859 = t1856 * t1844;
      t1860 = 0.50000000e8 * t1859;
      t1861 = t1849 * t1853;
      t1862 = 0.50000000e8 * t1861;
      t1864 = C__3 * t1639 * t1638;
      t1865 = t1864 * t1852;
      t1866 = t583 * t434;
      t1867 = t823 * t123;
      t1868 = t1867 * t1866;
      t1869 = t1868 * t1865;
      t1870 = 0.50000000e8 * t1869;
      t1871 = -t1812 + t1817 - t1819 + t1826 + t1832 + t1834 - t1840 + t1851 - t1858 + t1860 - t1862 + t1870;
      t1872 = t251 * t434;
      t1873 = t823 * t351;
      t1874 = t1873 * t1872;
      t1876 = 0.25000000e8 * t1874 * t1865;
      t1877 = t1867 * t1872;
      t1879 = 0.25000000e8 * t1877 * t1865;
      t1881 = t1265 * t1557 * t1556;
      t1883 = 0.25000000e8 * t1838 * t1881;
      t1884 = t1837 * t1708;
      t1885 = t1884 * t1821;
      t1886 = 0.25000000e8 * t1885;
      t1888 = 0.25000000e8 * t1830 * t1881;
      t1890 = 0.25000000e8 * t1824 * t1881;
      t1891 = t1830 * t1821;
      t1892 = 0.25000000e8 * t1891;
      t1893 = t86 * t1835;
      t1894 = t1893 * t1561;
      t1895 = t1894 * t1607;
      t1897 = 0.25000000e8 * t1895 * t1559;
      t1899 = 0.25000000e8 * t1884 * t1881;
      t1900 = t1873 * t1866;
      t1901 = t1900 * t1865;
      t1902 = 0.50000000e8 * t1901;
      t1905 = t413 * t428 * R__9 * t1633;
      t1906 = t1905 * t1703;
      t1907 = t1906 * t1829;
      t1908 = 0.50000000e8 * t1907;
      t1909 = R__5 * R__8;
      t1911 = t1893 * t1909 * t1607;
      t1913 = 0.25000000e8 * t1911 * t1559;
      t1914 = -t1876 - t1879 + t1883 - t1886 - t1888 - t1890 + t1892 + t1897 + t1899 + t1902 - t1908 + t1913;
      t1916 = t1564 * t1607;
      t1918 = 0.25000000e8 * t1916 * t1559;
      t1920 = t1563 * t1909 * t1607;
      t1922 = 0.25000000e8 * t1920 * t1559;
      t1923 = t1864 * t89;
      t1924 = t136 * t1119;
      t1925 = t823 * t409;
      t1926 = t1925 * t1924;
      t1928 = 0.25000000e8 * t1926 * t1923;
      t1929 = t823 * t787;
      t1930 = t1929 * t1924;
      t1932 = 0.25000000e8 * t1930 * t1923;
      t1933 = t1905 * t1708;
      t1934 = t1933 * t1829;
      t1938 = t6 * t1648 * t446 * t1556;
      t1940 = t1090 * t66 * t1607;
      t1942 = 0.25000000e8 * t1940 * t1938;
      t1944 = t1081 * t66 * t1607;
      t1946 = 0.50000000e8 * t1944 * t1938;
      t1948 = t1265 * t1629 * t1556;
      t1949 = t53 * t3;
      t1950 = t1823 * t1949;
      t1952 = 0.25000000e8 * t1950 * t1948;
      t1953 = t823 * t3;
      t1954 = t1813 * t88;
      t1957 = 0.25000000e8 * t1954 * t1953 * t1948;
      t1961 = C__3 * C__2 * t1078 * t1638 * t89;
      t1962 = t140 * C__4;
      t1963 = R__1 * t136;
      t1967 = 0.2500000e7 * t1873 * t1963 * t1962 * t1961;
      t1968 = t1950 * t1821;
      t1970 = t1950 * t1829;
      t1972 = -t1918 - t1922 - t1928 - t1932 - 0.50000000e8 * t1934 + t1942 - t1946 - t1952 - t1957 - t1967 + 0.25000000e8 * t1968 + 0.50000000e8 * t1970;
      t1974 = 0.25000000e8 * t1950 * t1881;
      t1975 = t1905 * t1949;
      t1976 = t1975 * t1829;
      t1978 = C__4 * y__1;
      t1982 = 0.25000000e8 * t1873 * t1963 * t1978 * t1961;
      t1983 = t1837 * t1949;
      t1985 = 0.25000000e8 * t1983 * t1881;
      t1986 = t1983 * t1821;
      t1990 = t1873 * t1205 * t434 * t1865;
      t1995 = 0.25000000e8 * t1953 * t228 * t1119 * t1923;
      t1997 = 0.25000000e8 * t1975 * t1948;
      t2000 = 0.25000000e8 * t1894 * t1560 * t1559;
      t2004 = 0.25000000e8 * t1873 * t29 * t434 * t1865;
      t2005 = t1785 * t88;
      t2008 = 0.25000000e8 * t2005 * t1953 * t1948;
      t2011 = t6 * t496 * t1629 * t1556;
      t2013 = R__6 * t93 * t90;
      t2016 = 0.25000000e8 * t1634 * t2013 * t2011;
      t2017 = t1893 * t1633;
      t2020 = 0.25000000e8 * t2017 * t2013 * t2011;
      t2021 = -t1974 - 0.50000000e8 * t1976 - t1982 + t1985 - 0.25000000e8 * t1986 + 0.50000000e8 * t1990 - t1995 + t1997 + t2000 - t2004 + t2008 - t2016 + t2020;
      t2022 = t1972 + t2021;
      t2028 = 0.1e1 / C__5;
      t2029 = t1300 * t2028;
      t2031 = t2029 * t80 * t1069;
      t2034 = R__1 * t874;
      t2036 = t2034 * t1557 * t1556;
      t2037 = t1837 * t923;
      t2041 = t1873 * t29 * t1174;
      t2044 = C__4 * R__1;
      t2045 = t2044 * t1579;
      t2046 = t2045 * t1578;
      t2049 = t229 * t642 * R__8;
      t2050 = t2049 * R__7 * t1583;
      t2052 = 0.25000000e8 * t2050 * t2046;
      t2054 = t2049 * R__7 * t1589;
      t2056 = 0.25000000e8 * t2054 * t2046;
      t2057 = C__4 * R__2;
      t2059 = t2057 * t1579 * t1578;
      t2061 = 0.25000000e8 * t2050 * t2059;
      t2063 = 0.25000000e8 * t2054 * t2059;
      t2064 = R__0 * t289;
      t2065 = t2045 * t2064;
      t2066 = t642 * U__b;
      t2067 = t2066 * t316;
      t2068 = t2067 * t328;
      t2070 = 0.25000000e8 * t2068 * t2065;
      t2073 = t714 * t66;
      t2074 = t2073 * R__4 * t3;
      t2076 = 0.25000000e8 * t2074 * t1581 * t2064;
      t2077 = t1390 * t1633;
      t2078 = t2077 * t923;
      t2080 = 0.25000000e8 * t2078 * t1663;
      t2081 = t56 * t390;
      t2084 = 0.25000000e8 * t2081 * t923 * t1663;
      t2085 = t1435 * t1633;
      t2086 = t2085 * t923;
      t2088 = 0.25000000e8 * t2086 * t1663;
      t2089 = t525 * t1557;
      t2090 = t2089 * t1556;
      t2093 = 0.25000000e8 * t2037 * t2036 + 0.1570796327e10 * t2041 * t1572 - t2052 - t2056 - t2061 - t2063 - t2070 + t2076 - t2080 + t2084 + t2088 - 0.25000000e8 * t1916 * t2090;
      t2096 = t8 * t1790 * t446 * t1556;
      t2098 = 0.25000000e8 * t1805 * t2096;
      t2100 = t436 * t1629 * t1556;
      t2106 = t874 * t1557 * t1556;
      t2109 = t1640 * t1841;
      t2110 = t563 * t1642;
      t2111 = t1658 * t2110;
      t2114 = t1435 * t88;
      t2115 = t2114 * t1692;
      t2119 = t472 * t1557 * t1556;
      t2124 = 0.25000000e8 * t2085 * t1703 * t1614;
      t2127 = t323 * t446;
      t2136 = t2098 - 0.25000000e8 * t1906 * t2100 - 0.25000000e8 * t1933 * t2100 + 0.25000000e8 * t1838 * t2106 + 0.25000000e8 * t2111 * t2109 + 0.25000000e8 * t2115 * t1691 - 0.25000000e8 * t1884 * t2119 - t2124 + 0.25000000e8 * t1895 * t2090 - 0.25000000e8 * t1925 * t2127 * t1641 - 0.25000000e8 * t1929 * t2127 * t1641 - 0.25000000e8 * t1830 * t2106;
      t2147 = 0.25000000e8 * t1787 * t1614;
      t2149 = 0.25000000e8 * t1781 * t1614;
      t2150 = t496 * t1629;
      t2151 = t2150 * t1556;
      t2152 = t316 * t93;
      t2153 = t56 * t88;
      t2154 = t2153 * t2152;
      t2158 = t316 * R__1 * R__5;
      t2162 = U__f * t316;
      t2163 = t2162 * t351;
      t2173 = 0.25000000e8 * t1781 * t2096;
      t2174 = -0.25000000e8 * t1824 * t2106 + 0.25000000e8 * t1830 * t2119 + 0.25000000e8 * t1824 * t2119 - 0.25000000e8 * t1920 * t2090 - t2147 - t2149 + 0.25000000e8 * t2154 * t2151 + 0.25000000e8 * t2153 * t2158 * t2151 - 0.25000000e8 * t2163 * t1672 * t1641 + 0.25000000e8 * t2115 * t1696 + 0.25000000e8 * t2114 * t1699 * t1632 + t2173;
      t2176 = 0.50000000e8 * t1799 * t1614;
      t2182 = 0.50000000e8 * t1799 * t2096;
      t2184 = 0.25000000e8 * t1805 * t1614;
      t2186 = 0.50000000e8 * t1815 * t1614;
      t2189 = t1640 * t1852;
      t2190 = t1644 * t2110;
      t2197 = R__2 * t60;
      t2199 = t2197 * t1629 * t1556;
      t2200 = t1633 * t66;
      t2201 = R__9 * U__b;
      t2203 = t56 * t2201 * t2200;
      t2206 = R__1 * t60;
      t2207 = t2206 * t446;
      t2208 = t2207 * t1628;
      t2209 = t66 * t1380;
      t2212 = 0.25000000e8 * t2081 * t2209 * t2208;
      t2213 = t2176 + 0.25000000e8 * t1884 * t2106 - 0.25000000e8 * t1838 * t2119 - t2182 - t2184 + t2186 + 0.25000000e8 * t1911 * t2090 - 0.25000000e8 * t2190 * t2189 - 0.25000000e8 * t2111 * t2189 + 0.25000000e8 * t2190 * t2109 - 0.25000000e8 * t2203 * t2199 + t2212;
      t2219 = 0.25000000e8 * t909 * t1633 * t923 * t2208;
      t2220 = t2077 * t2209;
      t2222 = 0.25000000e8 * t2220 * t2208;
      t2225 = 0.25000000e8 * t2085 * t1708 * t1614;
      t2228 = 0.25000000e8 * t2077 * t1703 * t1614;
      t2231 = 0.25000000e8 * t2077 * t1708 * t1614;
      t2232 = t251 * t446;
      t2243 = t2085 * t2209;
      t2245 = 0.25000000e8 * t2243 * t2208;
      t2247 = R__1 * t1790 * t446;
      t2248 = t2247 * t1628;
      t2250 = 0.25000000e8 * t2243 * t2248;
      t2251 = t2206 * t1629;
      t2252 = t2251 * t1556;
      t2255 = t2219 - t2222 - t2225 + t2228 + t2231 - 0.25000000e8 * t1867 * t2232 * t2189 - 0.25000000e8 * t1873 * t2232 * t2189 + 0.25000000e8 * t1830 * t2100 + 0.25000000e8 * t1824 * t2100 + t2245 - t2250 - 0.25000000e8 * t2115 * t2252;
      t2256 = t2206 * t1557;
      t2257 = t2256 * t1556;
      t2258 = t1390 * t88;
      t2259 = t2258 * t1692;
      t2264 = t2089 * t1628;
      t2271 = R__1 * t471;
      t2272 = t2271 * t1557;
      t2273 = t2272 * t1628;
      t2274 = t2258 * t1668;
      t2280 = U__f * t353;
      t2289 = t2280 * t351;
      t2293 = t583 * t446;
      t2302 = 0.25000000e8 * t901 * t1615 * t1728;
      t2303 = 0.25000000e8 * t2259 * t2257 - 0.25000000e8 * t2115 * t2199 + 0.25000000e8 * t2153 * t1703 * t2264 + 0.25000000e8 * t2153 * t1708 * t2264 - 0.25000000e8 * t2274 * t2273 + 0.25000000e8 * t2114 * t1668 * t1632 - 0.25000000e8 * t2280 * t123 * t1672 * t1641 - 0.25000000e8 * t2162 * t123 * t1672 * t1641 - 0.25000000e8 * t2289 * t1672 * t1641 + 0.25000000e8 * t1867 * t2293 * t2189 + 0.25000000e8 * t1873 * t2293 * t2189 - t2302;
      t2305 = t1649 * t1628;
      t2308 = 0.25000000e8 * t901 * t1703 * t2305;
      t2310 = 0.25000000e8 * t1940 * t1650;
      t2312 = 0.50000000e8 * t1944 * t1650;
      t2313 = t2272 * t1556;
      t2318 = R__2 * t471 * t1557 * t1556;
      t2321 = t66 * t552;
      t2327 = t2256 * t1628;
      t2328 = t2258 * t1699;
      t2336 = t2197 * t1557 * t1556;
      t2339 = t2153 * t923;
      t2342 = -t2308 + t2310 - t2312 - 0.25000000e8 * t2259 * t2313 - 0.25000000e8 * t2259 * t2318 + 0.25000000e8 * t2153 * t2321 * t2090 - 0.25000000e8 * t2203 * t2252 + 0.25000000e8 * t2328 * t2327 + 0.25000000e8 * t2274 * t2327 - 0.25000000e8 * t2328 * t2273 + 0.25000000e8 * t2259 * t2336 + 0.25000000e8 * t2339 * t2090;
      t2344 = 0.25000000e8 * t2220 * t2248;
      t2345 = C__4 * t1579;
      t2346 = t2345 * t1578;
      t2347 = R__5 * t1375;
      t2350 = 0.25000000e8 * t657 * t2347 * t2346;
      t2351 = R__6 * t1375;
      t2354 = 0.25000000e8 * t657 * t2351 * t2346;
      t2355 = R__5 * t1380;
      t2358 = 0.25000000e8 * t657 * t2355 * t2346;
      t2359 = R__6 * t1380;
      t2362 = 0.25000000e8 * t657 * t2359 * t2346;
      t2363 = R__1 * y__7;
      t2364 = t1078 * t2363;
      t2367 = 0.25000000e8 * t643 * t2364 * t2346;
      t2368 = R__2 * y__7;
      t2369 = t1078 * t2368;
      t2372 = 0.25000000e8 * t647 * t2369 * t2346;
      t2375 = 0.25000000e8 * t643 * t2369 * t2346;
      t2378 = 0.25000000e8 * t647 * t2364 * t2346;
      t2379 = t1633 * t1589;
      t2380 = R__9 * U__f;
      t2381 = t242 * t2380;
      t2382 = t2381 * t2379;
      t2385 = t2207 * t1556;
      t2386 = t316 * t1583;
      t2387 = t709 * t2386;
      t2389 = 0.25000000e8 * t2387 * t2385;
      t2390 = t2049 * t1692;
      t2392 = 0.25000000e8 * t2390 * t2385;
      t2393 = t2344 - t2350 - t2354 - t2358 - t2362 + t2367 + t2372 + t2375 + t2378 - 0.25000000e8 * t2382 * t2318 + t2389 + t2392;
      t2398 = t2197 * t446 * t1556;
      t2400 = 0.25000000e8 * t2387 * t2398;
      t2401 = t777 * t2209;
      t2403 = 0.25000000e8 * t2401 * t2208;
      t2406 = t1633 * t1583;
      t2407 = t2381 * t2406;
      t2410 = R__8 * U__f;
      t2411 = t242 * t2410;
      t2414 = 0.25000000e8 * t2411 * t1699 * t1663;
      t2417 = 0.25000000e8 * t2411 * t1668 * t1663;
      t2420 = 0.25000000e8 * t777 * t923 * t1663;
      t2421 = t87 * t2410;
      t2424 = 0.25000000e8 * t2421 * t1699 * t1663;
      t2427 = 0.25000000e8 * t2421 * t1668 * t1663;
      t2430 = 0.25000000e8 * t709 * t1699 * t1663;
      t2433 = 0.25000000e8 * t709 * t1668 * t1663;
      t2435 = t229 * t2380;
      t2436 = t2435 * t1909 * t1380;
      t2439 = t2400 - t2403 + 0.25000000e8 * t2382 * t2336 - 0.25000000e8 * t2407 * t2313 - t2414 - t2417 - t2420 + t2424 + t2427 + t2430 + t2433 + 0.25000000e8 * t2436 * t2090;
      t2441 = t2435 * t1561 * t1380;
      t2452 = t2247 * t1556;
      t2453 = t2411 * t2386;
      t2455 = 0.25000000e8 * t2453 * t2452;
      t2458 = R__2 * t1790 * t446 * t1556;
      t2460 = 0.25000000e8 * t2453 * t2458;
      t2461 = t2421 * t2386;
      t2463 = 0.25000000e8 * t2461 * t2385;
      t2466 = 0.25000000e8 * t521 * t1703 * t1614;
      t2467 = t87 * t2380;
      t2468 = t2467 * t2406;
      t2471 = t2467 * t2379;
      t2476 = 0.25000000e8 * t2441 * t2090 + 0.25000000e8 * t2407 * t2257 + 0.25000000e8 * t2382 * t2257 + 0.25000000e8 * t2407 * t2336 - 0.25000000e8 * t2382 * t2313 + t2455 + t2460 + t2463 - t2466 + 0.25000000e8 * t2468 * t1696 + 0.25000000e8 * t2471 * t1696 + 0.25000000e8 * t2468 * t1691;
      t2482 = t852 * t1703;
      t2484 = 0.25000000e8 * t2482 * t2305;
      t2485 = t852 * t1615;
      t2487 = 0.25000000e8 * t2485 * t1728;
      t2488 = t700 * t1703;
      t2490 = 0.25000000e8 * t2488 * t1728;
      t2491 = t700 * t1708;
      t2493 = 0.25000000e8 * t2491 * t1728;
      t2494 = t66 * t1375;
      t2495 = t700 * t2494;
      t2497 = 0.25000000e8 * t2495 * t1650;
      t2499 = 0.25000000e8 * t2390 * t2398;
      t2501 = 0.25000000e8 * t2461 * t2398;
      t2503 = t2435 * t1909 * t1375;
      t2507 = t2435 * t1561 * t1375;
      t2511 = 0.25000000e8 * t2453 * t2385;
      t2512 = 0.25000000e8 * t2471 * t1691 - 0.25000000e8 * t2407 * t2318 + t2484 + t2487 - t2490 - t2493 - t2497 + t2499 + t2501 + 0.25000000e8 * t2503 * t2090 + 0.25000000e8 * t2507 * t2090 - t2511;
      t2514 = 0.25000000e8 * t2453 * t2398;
      t2516 = 0.25000000e8 * t2461 * t2452;
      t2518 = 0.25000000e8 * t2461 * t2458;
      t2519 = t2049 * t1699;
      t2521 = 0.25000000e8 * t2519 * t2208;
      t2522 = t2049 * t1668;
      t2524 = 0.25000000e8 * t2522 * t2208;
      t2528 = 0.25000000e8 * t2390 * t3 * t446 * t1628;
      t2529 = t700 * t2209;
      t2531 = 0.25000000e8 * t2529 * t1650;
      t2532 = t501 * t1607;
      t2534 = 0.25000000e8 * t2532 * t1650;
      t2537 = 0.25000000e8 * t852 * t1607 * t1582;
      t2538 = t420 * t1579;
      t2539 = t2538 * t1578;
      t2540 = t1583 * t2368;
      t2543 = 0.25000000e8 * t852 * t2540 * t2539;
      t2544 = t1583 * t2363;
      t2547 = 0.25000000e8 * t852 * t2544 * t2539;
      t2550 = 0.25000000e8 * t1059 * t1607 * t1582;
      t2551 = -t2514 - t2516 - t2518 + t2521 + t2524 - t2528 - t2531 + t2534 + t2537 + t2543 + t2547 + t2550;
      t2556 = 0.25000000e8 * t777 * t2494 * t2539;
      t2558 = 0.25000000e8 * t2401 * t2539;
      t2561 = 0.25000000e8 * t2049 * t1770 * t2539;
      t2564 = 0.25000000e8 * t2049 * t1762 * t2539;
      t2566 = 0.25000000e8 * t2519 * t2539;
      t2568 = 0.25000000e8 * t2522 * t2539;
      t2571 = 0.25000000e8 * t777 * t1703 * t1595;
      t2574 = 0.25000000e8 * t777 * t1708 * t1595;
      t2576 = 0.25000000e8 * t2390 * t2046;
      t2578 = 0.25000000e8 * t2390 * t2059;
      t2580 = 0.25000000e8 * t2519 * t2065;
      t2582 = 0.25000000e8 * t2522 * t2065;
      t2583 = -t2556 - t2558 + t2561 + t2564 + t2566 + t2568 - t2571 - t2574 - t2576 - t2578 - t2580 - t2582;
      t2586 = 0.25000000e8 * t2067 * t553 * t2346;
      t2588 = 0.25000000e8 * t2068 * t2346;
      t2589 = t2345 * t2064;
      t2593 = 0.25000000e8 * t2066 * t353 * t1222 * t2589;
      t2596 = 0.25000000e8 * t2067 * t1222 * t2589;
      t2597 = R__2 * t2363;
      t2601 = 0.25000000e8 * t714 * t1583 * t2597 * t2589;
      t2605 = 0.25000000e8 * t714 * t1589 * t2597 * t2589;
      t2609 = 0.25000000e8 * t2073 * R__4 * t2363 * t2346;
      t2613 = 0.25000000e8 * t2073 * R__4 * t2368 * t2346;
      t2619 = t1823 * t923;
      t2623 = t1873 * t90 * t1962;
      t2627 = t2034 * t1629 * t1556;
      t2631 = -t2586 - t2588 - t2593 - t2596 + t2601 + t2605 + t2609 + t2613 + 0.25000000e8 * t2339 * R__1 * t525 * t1557 * t1628 - 0.25000000e8 * t2619 * t2036 - 0.2500000e7 * t2623 * t1961 + 0.25000000e8 * t2005 * t2152 * t2627;
      t2637 = t1443 * t1557 * t1556;
      t2638 = t1564 * t1615;
      t2641 = t1894 * t1615;
      t2644 = t1843 * t89;
      t2645 = t324 * t1112;
      t2646 = t2163 * t2645;
      t2649 = t1873 * t2645;
      t2653 = t1873 * t324 * t1105;
      t2657 = t1953 * t28 * t1119;
      t2660 = t1905 * t923;
      t2665 = R__1 * t436 * t1629 * t1556;
      t2669 = t1873 * t90 * t1978;
      t2673 = t2034 * t446 * t1556;
      t2675 = 0.25000000e8 * t2078 * t2673;
      t2676 = t2289 * t2645;
      t2679 = -0.25000000e8 * t1954 * t2152 * t2627 - 0.25000000e8 * t2638 * t2637 + 0.25000000e8 * t2641 * t2637 - 0.25000000e8 * t2646 * t2644 - 0.25000000e8 * t2649 * t1865 + 0.25000000e8 * t2653 * t1865 - 0.25000000e8 * t2657 * t1923 + 0.25000000e8 * t2660 * t2627 - 0.25000000e8 * t2660 * t2665 - 0.25000000e8 * t2669 * t1961 + t2675 - 0.25000000e8 * t2676 * t2644;
      t2680 = R__2 * t2206;
      t2682 = t2680 * t1629 * t1628;
      t2689 = R__1 * t472 * t1557 * t1556;
      t2698 = 0.25000000e8 * t2086 * t2673;
      t2721 = t8 * t496 * t1629 * t1556;
      t2722 = t66 * t3;
      t2723 = t1634 * t2722;
      t2726 = t2017 * t2722;
      t2729 = -0.25000000e8 * t2115 * t2682 - 0.25000000e8 * t2203 * t2682 - 0.25000000e8 * t2037 * t2689 + 0.25000000e8 * t2115 * R__2 * t1630 * t1629 * t1628 - t2698 + 0.25000000e8 * t2619 * t2689 - 0.25000000e8 * t2619 * t2627 + 0.25000000e8 * t2619 * t2665 + 0.25000000e8 * t2259 * t2680 * t1557 * t1628 - 0.25000000e8 * t2259 * R__2 * t2271 * t1557 * t1628 + 0.25000000e8 * t2154 * R__1 * t496 * t1629 * t1628 - 0.25000000e8 * t2723 * t2721 + 0.25000000e8 * t2726 * t2721;
      t2736 = t1298 * t629;
      t2737 = t2736 * t25 * t95 * (t2093 + t2136 + t2174 + t2213 + t2255 + t2303 + t2342 + t2393 + t2439 + t2476 + t2512 + t2551 + t2583 + t2631 + t2679 + t2729);
      t2738 = t633 * t47;
      t2739 = t79 * t2738;
      t2740 = t2028 * t226;
      out_7_2 = -0.4000000000e-7 * t2031 * t631 * t25 * t95 * (t1657 + t1712 + t1751 + t1808 + t1871 + t1914 + t2022) + 0.4000000000e-7 * t1551 * t2740 * t2739 * t2737;
      t2745 = R__8 ^ 2;
      t2746 = t60 * t2745;
      t2747 = t2746 * t87;
      t2749 = t312 * t1570 * t2747;
      t2752 = 0.25000000e8 * t1873 * t151 * t2749;
      t2754 = t413 * t428 * t2745;
      t2755 = t2754 * t316;
      t2756 = t2755 * t1615;
      t2758 = 0.25000000e8 * t2756 * t1948;
      t2767 = 0.1570796327e10 * t1873 * t29 * t6 * t194 * t312 * t1639 * C__5 * t2746 * t87;
      t2768 = alpha * t2745;
      t2769 = t413 * t2768;
      t2770 = t2769 * t316;
      t2771 = t2770 * t1615;
      t2772 = t2771 * t1821;
      t2773 = 0.25000000e8 * t2772;
      t2774 = t85 * t2745;
      t2775 = t86 * t2774;
      t2777 = t2775 * t66 * t1746;
      t2779 = 0.25000000e8 * t2777 * t1559;
      t2780 = t413 * t2774;
      t2781 = t2780 * t316;
      t2782 = t2781 * t1615;
      t2783 = t2782 * t1821;
      t2784 = 0.25000000e8 * t2783;
      t2786 = 0.25000000e8 * t2782 * t1948;
      t2787 = t93 * t90;
      t2788 = t86 * t2768;
      t2790 = t2788 * t316 * t2787;
      t2792 = 0.25000000e8 * t2790 * t2011;
      t2793 = t2756 * t1829;
      t2794 = 0.50000000e8 * t2793;
      t2795 = t2746 * t414;
      t2796 = t322 * t1570;
      t2797 = t2796 * t2795;
      t2801 = t1873 * t324 * t112 * t6 * t2797;
      t2802 = 0.50000000e8 * t2801;
      t2806 = 0.25000000e8 * t1873 * t324 * t136 * t2797;
      t2808 = 0.25000000e8 * t2771 * t1881;
      t2809 = -t2752 + t2758 + t2767 - t2773 - t2779 + t2784 - t2786 + t2792 - t2794 + t2802 - t2806 + t2808;
      t2810 = t2745 * R__7;
      t2812 = t1785 * t2810 * t2722;
      t2814 = 0.25000000e8 * t2812 * t1948;
      t2819 = 0.2500000e7 * t1873 * t90 * t6 * t140 * t2749;
      t2821 = t1813 * t2810 * t2722;
      t2823 = 0.25000000e8 * t2821 * t1948;
      t2825 = 0.25000000e8 * t2782 * t1881;
      t2831 = 0.25000000e8 * t1953 * t28 * t6 * y__3 * t2796 * t2747;
      t2833 = t2788 * t66 * t1746;
      t2835 = 0.25000000e8 * t2833 * t1559;
      t2837 = t2775 * t316 * t2787;
      t2839 = 0.25000000e8 * t2837 * t2011;
      t2840 = t2782 * t1829;
      t2841 = 0.50000000e8 * t2840;
      t2842 = t87 * t2810;
      t2845 = 0.25000000e8 * t2842 * t2347 * t1761;
      t2848 = 0.25000000e8 * t2842 * t2351 * t1761;
      t2851 = 0.25000000e8 * t2842 * t2355 * t1761;
      t2854 = 0.25000000e8 * t2842 * t2359 * t1761;
      t2855 = t2814 - t2819 - t2823 - t2825 - t2831 + t2835 - t2839 + t2841 + t2845 + t2848 + t2851 + t2854;
      t2857 = t321 * t1570;
      t2858 = t2857 * t2795;
      t2859 = t1900 * t2858;
      t2860 = 0.50000000e8 * t2859;
      t2861 = t289 * t1570;
      t2862 = t2861 * t2795;
      t2863 = t1856 * t2862;
      t2864 = 0.50000000e8 * t2863;
      t2865 = t2857 * t2747;
      t2867 = 0.25000000e8 * t1930 * t2865;
      t2869 = t506 * t1557 * t1556;
      t2870 = t2769 * t353;
      t2873 = 0.25000000e8 * t2870 * t1607 * t2869;
      t2875 = t136 * t1557 * t1556;
      t2876 = t1380 * t2271;
      t2878 = t2870 * t2876 * t2875;
      t2879 = 0.25000000e8 * t2878;
      t2881 = t136 * t1629 * t1556;
      t2882 = t1380 * t1630;
      t2884 = t2755 * t2882 * t2881;
      t2885 = 0.50000000e8 * t2884;
      t2888 = 0.25000000e8 * t2770 * t1607 * t2869;
      t2890 = t2781 * t2882 * t2881;
      t2891 = 0.50000000e8 * t2890;
      t2892 = -t1588 - t1593 + t1600 + t1604 + t2860 - t2864 - t2867 + t2873 - t2879 - t2885 + t2888 + t2891;
      t2896 = 0.25000000e8 * t2775 * t1583 * t1651 * t2090;
      t2897 = t2780 * t353;
      t2899 = t2897 * t2882 * t2881;
      t2900 = 0.50000000e8 * t2899;
      t2904 = 0.25000000e8 * t2788 * t1589 * t1651 * t2090;
      t2907 = 0.25000000e8 * t2897 * t1607 * t2869;
      t2908 = t1849 * t2862;
      t2909 = 0.50000000e8 * t2908;
      t2911 = t2861 * t2746 * t429;
      t2912 = t1856 * t2911;
      t2913 = 0.50000000e8 * t2912;
      t2914 = t1849 * t2911;
      t2915 = 0.50000000e8 * t2914;
      t2918 = 0.25000000e8 * t2781 * t1607 * t2869;
      t2920 = t2897 * t2876 * t2875;
      t2921 = 0.25000000e8 * t2920;
      t2923 = t2770 * t2876 * t2875;
      t2924 = 0.25000000e8 * t2923;
      t2928 = 0.25000000e8 * t2788 * t1583 * t1651 * t2090;
      t2930 = 0.25000000e8 * t1926 * t2865;
      t2931 = -t2896 + t2900 + t2904 - t2907 - t2909 + t2913 + t2915 - t2918 + t2921 - t2924 + t2928 - t2930;
      t2935 = 0.25000000e8 * t1877 * t2858;
      t2937 = 0.25000000e8 * t1874 * t2858;
      t2941 = 0.25000000e8 * t2775 * t1589 * t1651 * t2090;
      t2942 = t1868 * t2858;
      t2945 = t2781 * t2876 * t2875;
      t2949 = t2754 * t353 * t2882 * t2881;
      t2951 = t2842 * t923;
      t2953 = 0.25000000e8 * t2951 * t1632;
      t2954 = t2861 * t2747;
      t2957 = 0.25000000e8 * t1685 * t2645 * t2954;
      t2958 = -t2935 - t2937 - t2941 + 0.50000000e8 * t2942 + 0.25000000e8 * t2945 - 0.50000000e8 * t2949 + t1612 - t1621 + t1627 - t1656 + t2953 - t2957;
      t2961 = 0.25000000e8 * t1677 * t2645 * t2954;
      t2962 = t1640 * t2775;
      t2964 = 0.25000000e8 * t1674 * t2962;
      t2966 = 0.25000000e8 * t1678 * t2962;
      t2967 = t1760 * t2064;
      t2970 = 0.25000000e8 * t2842 * t1703 * t2967;
      t2971 = -t2961 + t1667 + t1707 + t1711 - t1716 - t1719 - t1722 - t1725 + t1731 - t2964 - t2966 + t2970;
      t2974 = 0.25000000e8 * t1686 * t2962;
      t2976 = 0.25000000e8 * t1682 * t2962;
      t2977 = t2842 * t2321;
      t2979 = 0.25000000e8 * t2977 * t1761;
      t2981 = 0.25000000e8 * t2951 * t1761;
      t2984 = 0.25000000e8 * t2842 * t1708 * t2967;
      t2985 = -t2974 - t2976 + t2979 + t2981 + t2984 + t1733 + t1735 - t1738 - t1741 - t1743 - t1745 - t1750;
      t2986 = t1754 + t1757 + t1776 + t1783 + t1789 - t1796 - t1801 - t1807 + t1812 - t1817 + t1819 - t1942 + t1946;
      t2994 = t2028 * t44;
      t2995 = 0.1e1 / R__8;
      t2998 = t2995 * t1300 * t2994 * t634 * t48;
      t3001 = U__f * t2745;
      t3002 = t242 * t3001;
      t3003 = t3002 * t1699;
      t3007 = t709 * t2810 * t66;
      t3012 = t441 * t2810;
      t3013 = t3012 * t1703;
      t3016 = t251 * t1119;
      t3023 = t409 * t1112;
      t3027 = t787 * t1112;
      t3031 = t2745 * R__6;
      t3032 = t87 * t3031;
      t3033 = t3032 * t1607;
      t3036 = t414 * t2810;
      t3037 = t3036 * t1703;
      t3040 = t3036 * t1708;
      t3043 = t2745 * R__5;
      t3045 = t87 * t3043 * t1607;
      t3048 = -0.25000000e8 * t3003 * t2273 - 0.25000000e8 * t3007 * t2252 - 0.25000000e8 * t3007 * t2199 + 0.25000000e8 * t3013 * t2106 - 0.25000000e8 * t2158 * t3016 * t2865 - 0.25000000e8 * t2152 * t3016 * t2865 - 0.25000000e8 * t982 * t3023 * t2858 - 0.25000000e8 * t982 * t3027 * t2858 - 0.25000000e8 * t3033 * t2090 - 0.25000000e8 * t3037 * t2106 + 0.25000000e8 * t3040 * t2100 - 0.25000000e8 * t3045 * t2090;
      t3049 = t87 * t3001;
      t3050 = t3049 * t1668;
      t3061 = t429 * t2810;
      t3068 = t3012 * t1708;
      t3073 = t1677 * t1846;
      t3076 = t1685 * t1846;
      t3083 = t693 * t484;
      t3087 = 0.25000000e8 * t3050 * t1632 + 0.25000000e8 * t3037 * t2119 + 0.25000000e8 * t3040 * t2119 + 0.25000000e8 * t982 * t787 * t1105 * t2858 - 0.25000000e8 * t3061 * t1703 * t2100 - 0.25000000e8 * t3061 * t1708 * t2100 + 0.25000000e8 * t3068 * t2106 - 0.25000000e8 * t3013 * t2119 + 0.25000000e8 * t3073 * t2911 + 0.25000000e8 * t3076 * t2911 + 0.25000000e8 * t982 * t409 * t1105 * t2858 - 0.25000000e8 * t3083 * t3023 * t2954;
      t3089 = t693 * t665;
      t3093 = t229 * t3001;
      t3094 = t3093 * t2152;
      t3097 = t3093 * t2158;
      t3106 = t242 * t3031;
      t3107 = t3106 * t1607;
      t3110 = t3049 * t1692;
      t3121 = t3093 * t1708;
      t3124 = -0.25000000e8 * t3089 * t3023 * t2954 + 0.25000000e8 * t3094 * t2151 + 0.25000000e8 * t3097 * t2151 - 0.25000000e8 * t3083 * t3027 * t2954 - 0.25000000e8 * t3089 * t3027 * t2954 + 0.25000000e8 * t3107 * t2090 + 0.25000000e8 * t3110 * t1696 + 0.25000000e8 * t3110 * t1691 + 0.25000000e8 * t3037 * t2100 - 0.25000000e8 * t3040 * t2106 - 0.25000000e8 * t3110 * t2252 + 0.25000000e8 * t3121 * t2264;
      t3125 = t3002 * t1668;
      t3128 = t3002 * t1692;
      t3133 = t3093 * t2321;
      t3136 = t3093 * t923;
      t3153 = -0.25000000e8 * t3125 * t2273 - 0.25000000e8 * t3128 * t2313 - 0.25000000e8 * t3128 * t2318 + 0.25000000e8 * t3133 * t2090 + 0.25000000e8 * t3136 * t2090 - 0.25000000e8 * t3073 * t2862 - 0.25000000e8 * t3076 * t2862 + 0.25000000e8 * t3128 * t2257 + 0.25000000e8 * t3128 * t2336 + 0.25000000e8 * t3003 * t2327 + 0.25000000e8 * t3125 * t2327 - 0.25000000e8 * t3110 * t2199;
      t3156 = t3093 * t1703;
      t3159 = t3049 * t1699;
      t3165 = t242 * t3043 * t1607;
      t3171 = t1390 * t2810 * t923;
      t3174 = 0.25000000e8 * t3156 * t2264 + 0.25000000e8 * t3159 * t1632 - 0.25000000e8 * t3068 * t2119 + 0.25000000e8 * t3165 * t2090 + t2052 + t2056 + t2061 + t2063 + t2070 - t2076 - 0.25000000e8 * t2777 * t2090 - 0.25000000e8 * t3171 * t2273;
      t3182 = t874 * t1629 * t1556;
      t3188 = t311 * t1570 * t2747;
      t3192 = t1435 * t2810 * t923;
      t3201 = t2251 * t1628;
      t3202 = U__b * t2745;
      t3209 = 0.25000000e8 * t2653 * t2858 + 0.25000000e8 * t2833 * t2090 - 0.25000000e8 * t2771 * t2119 - 0.25000000e8 * t2821 * t3182 - 0.25000000e8 * t2782 * t2106 - 0.25000000e8 * t2669 * t3188 + 0.25000000e8 * t3192 * t1632 - 0.2500000e7 * t2623 * t3188 + 0.25000000e8 * t2812 * t3182 - 0.25000000e8 * t2676 * t2954 - 0.25000000e8 * t56 * t3202 * t2152 * t3201 + 0.25000000e8 * t3171 * t2327;
      t3221 = t2150 * t1628;
      t3238 = -0.25000000e8 * t2646 * t2954 + 0.25000000e8 * t2771 * t2106 + 0.25000000e8 * t2782 * t2119 - 0.25000000e8 * t2782 * t3182 - 0.25000000e8 * t2649 * t2858 + 0.25000000e8 * t56 * t2810 * t2722 * t3221 + 0.25000000e8 * t2790 * t2151 - 0.25000000e8 * t2837 * t2151 - 0.25000000e8 * t2657 * t2865 + 0.25000000e8 * t2756 * t3182 - 0.25000000e8 * t2756 * t2100 + 0.25000000e8 * t2782 * t2100;
      t3245 = 0.25000000e8 * t56 * t3031 * t1615 * t2264 - 0.25000000e8 * t3192 * t3201 + t2080 - t2084 - t2088 - t2098 + t2124 + t2147 + t2149 - t2173 - t2176 + t2182;
      t3249 = t2184 - t2186 - t2212 - t2219 + t2222 + t2225 - t2228 - t2231 - t2245 + t2250 + t2302 + t2308;
      t3250 = -t2310 + t2312 - t2344 + t2350 + t2354 + t2358 + t2362 - t2367 - t2372 - t2375 - t2378 - t2389;
      t3252 = -t2392 - t2400 + t2403 + t2414 + t2417 + t2420 - t2424 - t2427 - t2430 - t2433 - t2455 - t2460;
      t3253 = -t2463 + t2466 - t2484 - t2487 + t2490 + t2493 + t2497 - t2499 - t2501 + t2511 + t2514 + t2516;
      t3256 = t1638 * t1579;
      t3257 = t3256 * t1578;
      t3258 = y__6 * R__2;
      t3259 = t1589 * t3258;
      t3266 = t471 * C__5 * t1579;
      t3267 = t3266 * t1578;
      t3268 = t3002 * t1770;
      t3271 = t3002 * t1762;
      t3278 = t2518 - t2521 - t2524 + t2528 + t2531 - t2534 + 0.25000000e8 * t3093 * t3259 * t3257 + 0.25000000e8 * t3125 * t3257 - 0.25000000e8 * t3268 * t3267 - 0.25000000e8 * t3271 * t3267 - 0.25000000e8 * t3003 * t3267 - 0.25000000e8 * t3125 * t3267;
      t3291 = y__6 * R__1;
      t3292 = t1583 * t3291;
      t3296 = t1589 * t3291;
      t3300 = t1583 * t3258;
      t3308 = 0.25000000e8 * t3049 * t1770 * t1761 + 0.25000000e8 * t3049 * t1762 * t1761 + 0.25000000e8 * t3268 * t3257 + 0.25000000e8 * t3271 * t3257 + 0.25000000e8 * t3003 * t3257 + 0.25000000e8 * t3093 * t3292 * t3257 + 0.25000000e8 * t3093 * t3296 * t3257 + 0.25000000e8 * t3093 * t3300 * t3257 + 0.25000000e8 * t3159 * t1761 + 0.25000000e8 * t3050 * t1761 - t2537 - t2543;
      t3310 = -t2547 - t2550 + t2556 + t2558 - t2561 - t2564 - t2566 - t2568 + t2571 + t2574 + t2576 + t2578;
      t3314 = t2580 + t2582 + t2586 + t2588 + t2593 + t2596 - t2601 - t2605 - t2609 - t2613 - t2675 + t2698 + 0.1570796327e10 * t2041 * t1571 * t2747;
      t3322 = t2736 * t25 * t95 * (t3048 + t3087 + t3124 + t3153 + t3174 + t3209 + t3238 + t3245 + t3249 + t3250 + t3252 + t3253 + t3278 + t3308 + t3310 + t3314) * R__9;
      t3323 = t1070 * t2738;
      out_8_2 = -0.4000000000e-7 * t2998 * t1549 * t95 * (t2809 + t2855 + t2892 + t2931 + t2958 + t2971 + t2985 + t2986) * R__9 + 0.4000000000e-7 * t234 * t2995 * t2029 * t3323 * t3322;
      t3335 = t107 - t116 + t122 - 0.25000000e8 * t103 * t102 * t199 - t126 + t128 + t135 + t145 - t149 + 0.25000000e8 * R__1 * t102 * t199 - t153 - t156;
      t3340 = -0.1e1 * t231 + t233;
      t3341 = t3340 * t227;
      out_1_3 = 0.4000000000e-7 * t45 * t23 * t3335 - 0.4000000000e-7 * t3341 * t224;
      out_2_3 = 0.4000000000e-7 * t268 * t23 * (t245 - t248 - 0.25000000e8 * t282 * t271 + t254 - t257 + t259 + 0.25000000e8 * beta * t240 * t271 - t262) * t3 - 0.4000000000e-7 * t3341 * t266 * t306;
      out_3_3 = t26 * t25 * (-0.1e1 * t136 * beta * R__3 - 0.1e1);
      t3368 = -0.25000000e8 * t812 * t547 - 0.25000000e8 * t812 * t559 - 0.25000000e8 * t812 * t338 + t320 + t331 + t336 + t342 - t346 + t357 + t360 - t372 + t374 + t382 + t386 - t394 - t398;
      t3369 = t408 + t418 + t427 - t433 + t440 - t445 - t453 - t457 + t459 - t463 - t465 + t476 - t478 + t480 - t488 + t491;
      t3371 = -t493 + t504 + t513 - t518 - t524 + t532 + t535 - t538 + t542 + t545 + t549 + t556 + t558 + t561 - t569 - t571;
      out_4_3 = 0.4000000000e-7 * t636 * t631 * t25 * (t3368 + t3369 + t3371 - t624) - 0.4000000000e-7 * t3340 * t1070 * t1069 * t1068;
      t3387 = -0.25000000e8 * t1382 * t1114 - 0.25000000e8 * t1377 * t1114 + t1084 + t1088 - t1093 - t1096 - t1104 - t1109 - t1111 + t1116 + t1118 + t1126 + t1130;
      t3388 = t1134 + t1143 + t1150 + t1154 - t1159 - t1161 + t1163 - t1167 - t1169 + t1173 - t1180 + t1182 - t1186;
      t3392 = -t1191 - 0.25000000e8 * t1382 * t1230 + t1197 + t1201 + t1204 - t1208 + t1211 - t1214 + t1219 + t1225 + t1229 + t1232 - t1238;
      t3393 = t1240 - t1243 - t1246 - t1249 - t1251 - t1253 - t1255 + t1257 - t1264 + t1270 - t1274 + t1280 - t1284 + t1291;
      t3400 = t3340 * t1300;
      out_5_3 = 0.4000000000e-7 * t1303 * t1296 * (t3387 + t3388 + t3392 + t3393) * t66 - 0.4000000000e-7 * t3400 * t1070 * t1069 * t1550;
      t3405 = t2152 * t2232;
      t3408 = t2158 * t2232;
      t3415 = t1567 - t1577 - 0.25000000e8 * t3405 * t1641 - 0.25000000e8 * t3408 * t1641 - t1588 - t1593 + t1600 + t1604 - 0.25000000e8 * t1953 * t28 * t446 * t1641 + t1612 - t1621 + t1627;
      t3416 = -t1637 + t1647 - t1656 + t1661 + t1667 - t1671 + t1676 + t1680 + t1684 + t1688 - t1695 - t1698 - t1702;
      t3418 = t1707 + t1711 - t1716 - t1719 - t1722 - t1725 + t1731 + t1733 + t1735 - t1738 - t1741 - t1743;
      t3419 = -t1745 - t1750 + t1754 + t1757 - t1765 - t1767 - t1769 - t1773 + t1776 + t1783 + t1789 - t1796 - t1801;
      t3422 = -t1807 + t1812 - t1817 + t1819 - t1826 - t1832 - t1834 + t1840 - t1851 + t1858 - t1860 + t1862;
      t3423 = -t1870 + t1876 + t1879 - t1883 + t1886 + t1888 + t1890 - t1892 - t1897 - t1899 - t1902 + t1908 - t1913;
      out_7_3 = -0.4000000000e-7 * t2031 * t631 * t25 * t95 * (t3415 + t3416 + t3418 + t3419 + t3422 + t3423 - t2022) + 0.4000000000e-7 * t3400 * t2740 * t2739 * t2737;
      t3441 = t2752 - t2758 - 0.25000000e8 * t3405 * t2962 - 0.25000000e8 * t3408 * t2962 - t2767 + t2773 + t2779 - t2784 + t2786 - t2792 + t2794 - t2802;
      t3442 = t2806 - t2808 - t2814 + t2819 + t2823 + t2825 + t2831 - t2835 + t2839 - t2841 - t2845 - t2848 - t2851;
      t3444 = -t2854 + t1588 + t1593 - t1600 - t1604 - t2860 + t2864 + t2867 - t2873 + t2879 + t2885 - t2888;
      t3445 = -t2891 + t2896 - t2900 - t2904 + t2907 + t2909 - t2913 - t2915 + t2918 - t2921 + t2924 - t2928 + t2930;
      t3449 = t2961 - t1667 - t1707 - t1711 + t1716 + t1719 + t1722 + t1725 - t1731 + t2964 + t2966 - t2970 + t2974;
      t3451 = t2976 - t2979 - t2981 - t2984 - t1733 - t1735 + t1738 + t1741 + t1743 + t1745 + t1750 - t1754;
      t3455 = -t1757 - t1776 - t1783 - t1789 + t1796 + t1801 + t1807 - t1812 + t1817 - t1819 + t1942 - t1946 - 0.25000000e8 * t2152 * t2645 * t2865;
      out_8_3 = -0.4000000000e-7 * t2998 * t1549 * t95 * (t3441 + t3442 + t3444 + t3445 - t2958 + t3449 + t3451 + t3455) * R__9 + 0.4000000000e-7 * t3340 * t2995 * t2029 * t3323 * t3322;
      t3469 = t1414 * t347;
      t3500 = t1385 * t776;
      t3513 = -0.25000000e8 * t853 * t3469 + 0.25000000e8 * t858 * t1027 + 0.25000000e8 * t858 * t1031 + 0.25000000e8 * t701 * t388 + 0.25000000e8 * t799 * t388 - 0.25000000e8 * t796 * t1195 - 0.25000000e8 * t648 * t676 - 0.25000000e8 * t651 * t676 - 0.25000000e8 * t671 * t1349 - 0.25000000e8 * t644 * t1349 - 0.25000000e8 * t648 * t1349 - 0.25000000e8 * t651 * t1349 - 0.25000000e8 * t1385 * t395 * t388 - 0.25000000e8 * t1385 * t389 * t388 - 0.25000000e8 * t3500 * t1027 - 0.25000000e8 * t3500 * t1031 + 0.25000000e8 * t858 * t775 + 0.50000000e8 * t339 * t395 * t876 - 0.25000000e8 * t369 * t395 * t876;
      out_4_4 = 0.4000000000e-7 * t636 * t631 * t25 * t3513;
      out_5_4 = 0.4000000000e-7 * t1303 * t1296 * (0.25000000e8 * t1307 * t674 * t289 + 0.25000000e8 * t714 * t123 * t1349 + 0.25000000e8 * t714 * t351 * t1349 + 0.25000000e8 * t1386 * t1131 - 0.25000000e8 * t56 * t1233 * t388) * t66;
      t3541 = t2435 * t2200;
      out_7_4 = -0.4000000000e-7 * t2031 * t631 * t25 * t95 * (-0.25000000e8 * t2723 * t3182 + 0.25000000e8 * t2726 * t3182 + 0.25000000e8 * t2154 * t3201 + 0.25000000e8 * t3541 * t2199 + 0.25000000e8 * t3541 * t2252);
      t3553 = t1638 * t1758 * t1578;
      t3558 = t242 * t2810;
      out_8_4 = -0.4000000000e-7 * t2998 * t1549 * t95 * (0.25000000e8 * t3094 * t3553 + 0.25000000e8 * t3097 * t3553 + 0.25000000e8 * t3558 * t2722 * t3182 - 0.25000000e8 * t2842 * t2722 * t3182 + 0.25000000e8 * t3094 * t3201) * R__9;
      t3574 = 0.25000000e8 * t370 * t1027;
      t3575 = t501 * t352;
      t3577 = 0.50000000e8 * t3575 * t1419;
      t3579 = 0.50000000e8 * t340 * t1049;
      t3581 = 0.50000000e8 * t340 * t1053;
      t3583 = 0.25000000e8 * t340 * t1031;
      t3585 = 0.25000000e8 * t340 * t1045;
      t3586 = t317 * t395;
      t3588 = 0.25000000e8 * t3586 * t1035;
      t3593 = 0.25000000e8 * t1747 * t378 * R__0 * t496 * t347;
      t3596 = 0.25000000e8 * t317 * t1036 * t1035;
      t3598 = 0.25000000e8 * t370 * t1031;
      t3600 = 0.25000000e8 * t340 * t1027;
      t3601 = t539 * t776;
      t3603 = 0.25000000e8 * t3601 * t1027;
      t3605 = 0.25000000e8 * t3601 * t1031;
      t3607 = 0.25000000e8 * t340 * t1042;
      t3612 = 0.25000000e8 * R__6 * beta * t52 * t378 * t1406;
      t3613 = -t3574 + t3577 - t3579 - t3581 + t3583 + t3585 + t3588 - t3593 + t3596 - t3598 + t3600 - t3603 - t3605 + t3607 - t3612;
      t3616 = 0.25000000e8 * t1601 * t395 * t3469;
      t3617 = t229 * t66;
      t3620 = 0.25000000e8 * t3617 * t592 * t1023;
      t3621 = t3617 * t352;
      t3623 = 0.25000000e8 * t3621 * t1023;
      t3625 = 0.25000000e8 * t3575 * t1415;
      t3627 = 0.25000000e8 * t340 * t890;
      t3629 = 0.25000000e8 * t340 * t775;
      t3631 = 0.25000000e8 * t3621 * t765;
      t3633 = 0.25000000e8 * t370 * t775;
      t3635 = 0.25000000e8 * t3601 * t775;
      t3637 = 0.50000000e8 * t340 * t898;
      t3639 = 0.25000000e8 * t3586 * t851;
      t3642 = 0.25000000e8 * t383 * t1036 * t1035;
      t3643 = t1652 * t315;
      t3645 = 0.50000000e8 * t3643 * t1049;
      t3647 = 0.50000000e8 * t3643 * t1053;
      t3648 = t3616 + t3620 + t3623 - t3625 + t3627 + t3629 + t3631 - t3633 - t3635 - t3637 + t3639 + t372 - t374 - t3642 + t3645 + t3647;
      t3650 = t391 * t776;
      t3652 = 0.25000000e8 * t3650 * t1027;
      t3654 = 0.25000000e8 * t3650 * t1031;
      t3656 = 0.25000000e8 * t3643 * t1042;
      t3658 = 0.25000000e8 * t3643 * t1045;
      t3661 = 0.25000000e8 * t67 * t592 * t1023;
      t3664 = 0.25000000e8 * t67 * t352 * t1023;
      t3667 = 0.25000000e8 * t383 * t395 * t1035;
      t3668 = 0.25000000e8 * t439;
      t3669 = 0.25000000e8 * t458;
      t3670 = t3652 + t3654 - t3656 - t3658 - t3661 - t3664 - t3667 - t408 - t418 - t427 + t433 - t3668 + t445 + t457 - t3669 + t463;
      t3671 = 0.100000000e9 * t475;
      t3672 = 0.50000000e8 * t477;
      t3673 = 0.50000000e8 * t492;
      t3674 = 0.50000000e8 * t517;
      t3675 = t465 - t3671 + t3672 - t480 + t488 - t491 + t3673 - t504 - t513 + t3674 + t524 - t532 + t607 + t611 - t613 - t615;
      t3682 = t78 ^ 2;
      t3683 = 0.1e1 / t3682;
      t3684 = t44 * t3683;
      t3685 = R__4 * t506;
      t3686 = t3617 * t3685;
      t3688 = 0.1e1 * t67 * t3685;
      t3689 = t3686 - t3688;
      out_4_5 = 0.4000000000e-7 * t636 * t631 * t25 * (t3613 + t3648 + t3670 + t3675) - 0.4000000000e-7 * t3689 * t3684 * t1069 * t1068;
      t3694 = t86 * t1146;
      t3695 = t3694 * t123;
      t3697 = 0.50000000e8 * t3695 * t1330;
      t3698 = t3694 * t351;
      t3700 = 0.50000000e8 * t3698 * t1330;
      t3701 = beta * t1155;
      t3704 = 0.25000000e8 * t3701 * t409 * t1336;
      t3707 = 0.25000000e8 * t3701 * t787 * t1336;
      t3709 = 0.25000000e8 * t3695 * t1320;
      t3711 = 0.25000000e8 * t3698 * t1320;
      t3713 = 0.50000000e8 * t1082 * t1330;
      t3714 = alpha * t1078;
      t3715 = beta * t3714;
      t3718 = 0.25000000e8 * t3715 * t913 * t1336;
      t3720 = 0.25000000e8 * t1082 * t1320;
      t3722 = 0.25000000e8 * t1086 * t1320;
      t3724 = R__0 * t399 * t289;
      t3725 = t3694 * t378;
      t3727 = 0.25000000e8 * t3725 * t3724;
      t3728 = t3697 + t3700 - t3704 - t3707 - t3709 - t3711 - t3713 + t3718 + t3720 + t3722 - t3727;
      t3731 = 0.25000000e8 * t3715 * t905 * t1336;
      t3734 = 0.25000000e8 * t3701 * t1016 * t1336;
      t3736 = 0.50000000e8 * t1086 * t1330;
      t3740 = 0.50000000e8 * t3725 * R__0 * t1328 * t289;
      t3741 = 0.50000000e8 * t1142;
      t3742 = 0.25000000e8 * t1149;
      t3743 = 0.25000000e8 * t1153;
      t3744 = t3731 - t3734 - t3736 + t3740 - t1084 - t1088 + t1093 + t1096 - t3741 - t3742 - t3743;
      t3746 = 0.100000000e9 * t1162;
      t3747 = 0.50000000e8 * t1166;
      t3748 = 0.50000000e8 * t1168;
      t3749 = 0.25000000e8 * t1185;
      t3750 = 0.25000000e8 * t1190;
      t3753 = 0.25000000e8 * t3715 * t378 * t1406;
      t3755 = 0.25000000e8 * t1086 * t1415;
      t3756 = t1159 + t1161 - t3746 + t3747 + t3748 - t1173 - t1182 + t3749 + t3750 + t3753 + t3755;
      t3758 = 0.50000000e8 * t1086 * t1419;
      t3759 = 0.50000000e8 * t1273;
      t3760 = -t3758 - t1197 - t1201 + t1251 + t1253 + t1255 - t1257 - t1270 + t3759 - t1280 + t1284 - t1291;
      t3767 = t3689 * t1300;
      out_5_5 = 0.4000000000e-7 * t1303 * t1296 * (t3728 + t3744 + t3756 + t3760) * t66 - 0.4000000000e-7 * t3767 * t3684 * t1069 * t1550;
      out_6_5 = t506 * beta * t628;
      t3775 = 0.25000000e8 * t1747 * t2364 * t2539;
      t3778 = 0.25000000e8 * t1747 * t2369 * t2539;
      t3781 = 0.25000000e8 * t1601 * t2347 * t2539;
      t3784 = 0.25000000e8 * t1601 * t2355 * t2539;
      t3785 = -t1567 + t1577 + t3775 + t3778 - t3781 - t3784 - t1612 + t1621 - t1627 + t1637 - t1647 + t1656 - t1661 + t1671 - t1676 - t1680 - t1684 - t1688;
      t3786 = 0.50000000e8 * t1795;
      t3787 = 0.50000000e8 * t1806;
      t3788 = 0.100000000e9 * t1818;
      t3789 = t1695 + t1698 + t1702 - t1707 - t1711 + t1716 + t1719 + t1765 + t1767 + t1769 + t1773 - t1783 - t1789 + t3786 + t1801 + t3787 - t1812 + t1817 - t3788;
      t3791 = 0.50000000e8 * t1825;
      t3792 = 0.25000000e8 * t1831;
      t3793 = 0.25000000e8 * t1833;
      t3794 = 0.50000000e8 * t1839;
      t3795 = 0.25000000e8 * t1850;
      t3796 = 0.25000000e8 * t1857;
      t3797 = 0.25000000e8 * t1859;
      t3798 = 0.25000000e8 * t1861;
      t3799 = 0.25000000e8 * t1869;
      t3800 = 0.50000000e8 * t1885;
      t3801 = 0.50000000e8 * t1891;
      t3802 = t3791 + t3792 + t3793 - t3794 + t3795 - t3796 + t3797 - t3798 + t3799 - t1876 - t1879 + t1883 - t3800 - t1888 - t1890 + t3801 + t1897 + t1899;
      t3803 = 0.25000000e8 * t1901;
      t3804 = 0.25000000e8 * t1907;
      t3805 = 0.25000000e8 * t1934;
      t3808 = C__4 * U__f * t1579 * t1578;
      t3810 = t229 * t1633;
      t3813 = 0.25000000e8 * t3810 * t1589 * t2206 * t3808;
      t3817 = 0.25000000e8 * t3810 * t1583 * t2197 * t3808;
      t3820 = t1790 * C__4 * t1579 * t1578;
      t3821 = t1704 * t2494;
      t3823 = 0.50000000e8 * t3821 * t3820;
      t3824 = 0.50000000e8 * t1968;
      t3825 = 0.25000000e8 * t1970;
      t3826 = t3803 - t3804 + t1913 - t1918 - t1922 - t1928 - t1932 - t3805 + t1942 - t1946 + t3813 + t3817 - t3823 - t1952 - t1957 - t1967 + t3824 + t3825 - t1974;
      t3829 = 0.25000000e8 * t1976;
      t3830 = 0.50000000e8 * t1986;
      t3831 = 0.25000000e8 * t1990;
      t3832 = t2538 * t2064;
      t3835 = 0.25000000e8 * t1601 * t1703 * t3832;
      t3836 = t1664 * t2494;
      t3838 = 0.25000000e8 * t3836 * t2539;
      t3839 = t1664 * t2209;
      t3841 = 0.25000000e8 * t3839 * t2539;
      t3842 = t1704 * t2209;
      t3844 = 0.25000000e8 * t3842 * t2539;
      t3847 = 0.25000000e8 * t539 * t2494 * t2539;
      t3848 = t539 * t2209;
      t3850 = 0.25000000e8 * t3848 * t2539;
      t3851 = -t3829 - t1982 + t1985 - t3830 + t3831 - t1995 + t1997 + t2000 - t2004 + t2008 - t2016 + t2020 - t3835 - t3838 - t3841 + t3844 + t3847 + t3850;
      t3853 = 0.25000000e8 * t3821 * t2539;
      t3855 = 0.50000000e8 * t3842 * t3820;
      t3857 = 0.50000000e8 * t3836 * t3820;
      t3859 = 0.50000000e8 * t3839 * t3820;
      t3863 = 0.25000000e8 * t3810 * t1589 * t2197 * t3808;
      t3867 = 0.25000000e8 * t3810 * t1583 * t2206 * t3808;
      t3868 = t242 * t88;
      t3869 = t3868 * t1668;
      t3871 = 0.50000000e8 * t3869 * t3267;
      t3872 = t3868 * t1762;
      t3874 = 0.25000000e8 * t3872 * t3257;
      t3875 = t3868 * t1699;
      t3877 = 0.25000000e8 * t3875 * t3257;
      t3878 = t229 * t88;
      t3881 = 0.25000000e8 * t3878 * t3300 * t3257;
      t3884 = 0.25000000e8 * t3878 * t3259 * t3257;
      t3885 = t3868 * t1770;
      t3887 = 0.50000000e8 * t3885 * t3267;
      t3889 = 0.50000000e8 * t3872 * t3267;
      t3891 = 0.50000000e8 * t3875 * t3267;
      t3894 = 0.25000000e8 * t317 * t2540 * t2539;
      t3897 = 0.25000000e8 * t317 * t2544 * t2539;
      t3901 = 0.25000000e8 * t1747 * t1380 * t2363 * t3832;
      t3903 = 0.25000000e8 * t3885 * t3257;
      t3906 = 0.25000000e8 * t3878 * t3292 * t3257;
      t3907 = t3853 - t3855 + t3857 + t3859 + t3863 + t3867 - t3871 + t3874 + t3877 + t3881 + t3884 - t3887 - t3889 - t3891 - t3894 - t3897 + t3901 + t3903 + t3906;
      t3911 = 0.25000000e8 * t3878 * t3296 * t3257;
      t3913 = 0.25000000e8 * t3869 * t3257;
      t3915 = 0.25000000e8 * t3842 * t2208;
      t3917 = 0.25000000e8 * t3848 * t2208;
      t3920 = 0.25000000e8 * t3878 * t923 * t2090;
      t3922 = 0.25000000e8 * t1693 * t2252;
      t3925 = 0.25000000e8 * t3878 * t1708 * t2264;
      t3926 = t3868 * t1692;
      t3928 = 0.25000000e8 * t3926 * t2257;
      t3930 = 0.25000000e8 * t1693 * t2199;
      t3933 = 0.25000000e8 * t3878 * t1703 * t2264;
      t3935 = 0.50000000e8 * t3839 * t2248;
      t3937 = 0.50000000e8 * t3842 * t2248;
      t3939 = t60 * U__f * t446;
      t3940 = t3939 * t1556;
      t3943 = 0.25000000e8 * t3810 * t2321 * t3940;
      t3946 = 0.25000000e8 * t3810 * t923 * t3940;
      t3947 = t3939 * t1628;
      t3950 = 0.25000000e8 * t3810 * t1703 * t3947;
      t3953 = 0.25000000e8 * t3810 * t1708 * t3947;
      t3955 = 0.25000000e8 * t3839 * t2208;
      t3957 = 0.50000000e8 * t3926 * t2313;
      t3958 = t3911 + t3913 + t3915 + t3917 + t3920 - t3922 + t3925 + t3928 - t3930 + t3933 + t3935 - t3937 + t3943 + t3946 + t3950 + t3953 - t3955 - t3957;
      t3960 = 0.50000000e8 * t3926 * t2318;
      t3962 = 0.50000000e8 * t3875 * t2273;
      t3964 = 0.50000000e8 * t3869 * t2273;
      t3967 = 0.25000000e8 * t3878 * t2158 * t2151;
      t3970 = 0.25000000e8 * t3878 * t2152 * t2151;
      t3972 = t229 * t2201 * t2200;
      t3974 = 0.25000000e8 * t3972 * t2252;
      t3976 = 0.25000000e8 * t3972 * t2199;
      t3979 = 0.25000000e8 * t3878 * t2321 * t2090;
      t3981 = 0.25000000e8 * t3926 * t2336;
      t3983 = 0.25000000e8 * t3875 * t2327;
      t3985 = 0.25000000e8 * t3869 * t2327;
      t3988 = 0.25000000e8 * t317 * t1703 * t2305;
      t3993 = 0.25000000e8 * beta * t1616 * t316 * t1615 * t3947;
      t3994 = t2017 * t923;
      t3996 = 0.50000000e8 * t3994 * t2273;
      t3998 = 0.25000000e8 * t1635 * t3201;
      t4002 = 0.25000000e8 * t1235 * t88 * t2152 * t3201;
      t4003 = beta * t1835;
      t4007 = 0.25000000e8 * t4003 * t1633 * t2722 * t3221;
      t4011 = 0.25000000e8 * t4003 * t1561 * t1615 * t2264;
      t4013 = 0.25000000e8 * t3994 * t2327;
      t4014 = -t3960 - t3962 - t3964 + t3967 + t3970 - t3974 - t3976 + t3979 + t3981 + t3983 + t3985 - t3988 + t3993 - t3996 - t3998 - t4002 + t4007 + t4011 + t4013;
      t4023 = t3683 * t2738;
      out_7_5 = -0.4000000000e-7 * t2031 * t631 * t25 * t95 * (t3785 + t3789 + t3802 + t3826 + t3851 + t3907 + t3958 + t4014) + 0.4000000000e-7 * t3767 * t2994 * t4023 * t2737;
      t4028 = t3558 * t2359;
      t4030 = 0.25000000e8 * t4028 * t3257;
      t4031 = t1078 * t3258;
      t4032 = t229 * t3031;
      t4035 = 0.25000000e8 * t4032 * t4031 * t3257;
      t4036 = t3558 * t2351;
      t4038 = 0.50000000e8 * t4036 * t3267;
      t4039 = t3558 * t2355;
      t4041 = 0.50000000e8 * t4039 * t3267;
      t4043 = 0.50000000e8 * t4028 * t3267;
      t4044 = t3558 * t2347;
      t4046 = 0.50000000e8 * t4044 * t3267;
      t4047 = t229 * t3043;
      t4050 = 0.25000000e8 * t4047 * t4031 * t3257;
      t4052 = 0.25000000e8 * t4039 * t3257;
      t4053 = t1078 * t3291;
      t4056 = 0.25000000e8 * t4047 * t4053 * t3257;
      t4059 = 0.25000000e8 * t4032 * t4053 * t3257;
      t4061 = 0.25000000e8 * t4044 * t3257;
      t4063 = 0.25000000e8 * t4036 * t3257;
      t4064 = -t2752 + t2758 + t4030 + t4035 - t4038 - t4041 - t4043 - t4046 + t4050 + t4052 + t4056 + t4059 + t4061 + t4063 - t3775 - t3778 + t3781 + t3784;
      t4065 = 0.50000000e8 * t2772;
      t4066 = 0.50000000e8 * t2783;
      t4067 = 0.25000000e8 * t2793;
      t4068 = 0.25000000e8 * t2801;
      t4069 = 0.25000000e8 * t2840;
      t4070 = t2767 - t4065 - t2779 + t4066 - t2786 + t2792 - t4067 + t4068 - t2806 + t2808 + t2814 - t2819 - t2823 - t2825 - t2831 + t2835 - t2839 + t4069 + t2845;
      t4072 = 0.25000000e8 * t2859;
      t4073 = 0.25000000e8 * t2863;
      t4074 = 0.50000000e8 * t2878;
      t4075 = 0.25000000e8 * t2884;
      t4076 = 0.25000000e8 * t2890;
      t4077 = 0.25000000e8 * t2899;
      t4078 = 0.25000000e8 * t2908;
      t4079 = 0.25000000e8 * t2912;
      t4080 = 0.25000000e8 * t2914;
      t4081 = t2848 + t2851 + t2854 + t4072 - t4073 - t2867 + t2873 - t4074 - t4075 + t2888 + t4076 - t2896 + t4077 + t2904 - t2907 - t4078 + t4079 + t4080;
      t4082 = 0.50000000e8 * t2920;
      t4083 = 0.50000000e8 * t2923;
      t4084 = 0.25000000e8 * t2942;
      t4085 = 0.50000000e8 * t2945;
      t4086 = 0.25000000e8 * t2949;
      t4087 = -t2918 + t4082 - t4083 + t2928 - t2930 - t2935 - t2937 - t2941 + t4084 + t4085 - t4086 + t1612 - t1621 + t1627 - t1656 + t2953 - t2957 - t2961 + t1707;
      t4090 = t1711 - t1716 - t1719 - t2964 - t2966 + t2970 - t2974 - t2976 + t2979 + t2981 + t2984 + t1783 + t1789 - t3786 - t1801 - t3787 + t1812 - t1817;
      t4091 = t229 * t3202;
      t4094 = 0.25000000e8 * t4091 * t2158 * t3553;
      t4095 = t4091 * t2152;
      t4097 = 0.25000000e8 * t4095 * t3553;
      t4098 = t3256 * t2064;
      t4099 = t3558 * t1708;
      t4101 = 0.25000000e8 * t4099 * t4098;
      t4102 = t3558 * t2321;
      t4104 = 0.25000000e8 * t4102 * t3257;
      t4105 = t3558 * t923;
      t4107 = 0.25000000e8 * t4105 * t3257;
      t4108 = t1380 * t3291;
      t4111 = 0.25000000e8 * t4047 * t4108 * t4098;
      t4113 = 0.25000000e8 * t2977 * t3553;
      t4114 = t3266 * t2064;
      t4116 = 0.50000000e8 * t4099 * t4114;
      t4119 = 0.25000000e8 * t4032 * t4108 * t4098;
      t4120 = t3558 * t1703;
      t4122 = 0.25000000e8 * t4120 * t4098;
      t4125 = t229 * t2810;
      t4128 = 0.25000000e8 * t4125 * t66 * y__4 * R__1 * t3553;
      t4133 = 0.25000000e8 * t4125 * t66 * y__4 * R__2 * t3553;
      t4135 = 0.50000000e8 * t4102 * t3267;
      t4137 = 0.50000000e8 * t4105 * t3267;
      t4139 = 0.50000000e8 * t4120 * t4114;
      t4143 = 0.25000000e8 * t4032 * t52 * t3258 * t3257;
      t4144 = t3788 - t1942 + t1946 - t4094 - t4097 + t4101 + t4104 + t4107 + t4111 - t4113 - t4116 + t4119 + t4122 + t4128 + t4133 - t4135 - t4137 - t4139 + t4143;
      t4149 = 0.25000000e8 * t4032 * t52 * t3291 * t3257;
      t4151 = 0.25000000e8 * t2951 * t3553;
      t4152 = t4149 - t4151 - t3813 - t3817 + t3823 + t3835 + t3838 + t3841 - t3844 - t3847 - t3850 - t3853 + t3855 - t3857 - t3859 - t3863 - t3867 + t3894;
      t4154 = 0.25000000e8 * t4105 * t2327;
      t4156 = 0.50000000e8 * t4105 * t2273;
      t4159 = 0.25000000e8 * t4032 * t1615 * t2264;
      t4161 = 0.25000000e8 * t4095 * t3201;
      t4163 = 0.25000000e8 * t2951 * t3201;
      t4166 = 0.25000000e8 * t4125 * t2722 * t3221;
      t4167 = t3897 - t3901 + t4154 - t4156 + t4159 - t4161 - t4163 + t4166 - t3915 - t3917 - t3935 + t3937 - t3943 - t3946 - t3950 - t3953 + t3955 + t3988 - t3993;
      t4176 = t3684 * t2738;
      out_8_5 = -0.4000000000e-7 * t2998 * t1549 * t95 * (t4064 + t4070 + t4081 + t4087 + t4090 + t4144 + t4152 + t4167) * R__9 + 0.4000000000e-7 * t3689 * t2995 * t2029 * t4176 * t3322;
      t4191 = beta * t75 * t315;
      t4196 = -0.25000000e8 * t405 * t352 * t887 + 0.50000000e8 * t460 * t352 * t887 + 0.25000000e8 * t784 * t890 - 0.25000000e8 * t4191 * t1045 - 0.25000000e8 * t4191 * t1042 + t3574 - t3577 + t3579 + t3581 - t3583 - t3585 - t3588 + t3593 - t3596 + t3598 - t3600 + t3603 + t3605;
      t4197 = -t3607 + t3612 - t3616 - t3620 - t3623 + t3625 - t3627 - t3629 - t3631 + t3633 + t3635 + t3637 - t3639 - t372 + t374 + t3642 - t3645 - t3647;
      t4199 = -t3652 - t3654 + t3656 + t3658 + t3661 + t3664 + t3667 + t408 + t418 + t427 - t433 + t3668 - t445 - t457 + t3669 - t463 - t465 + t3671;
      t4208 = -t3672 + t480 - t488 + t491 - t3673 + t504 + t513 - t3674 - t524 + t532 - t607 - t611 + t613 + t615 + 0.25000000e8 * t784 * t1042 - 0.25000000e8 * t768 * t1415 - 0.25000000e8 * t871 * t1425 + 0.25000000e8 * t784 * t1045;
      t4216 = -0.1e1 * t3686 + t3688;
      out_4_6 = 0.4000000000e-7 * t636 * t631 * t25 * (t4196 + t4197 + t4199 + t4208) - 0.4000000000e-7 * t4216 * t3684 * t1069 * t1068;
      t4239 = -0.25000000e8 * t1338 * t351 * t1320 - 0.25000000e8 * t1338 * t123 * t1320 - t3697 - t3700 + t3704 + t3707 + t3709 + t3711 + 0.25000000e8 * t1422 * t1415 - 0.25000000e8 * t1446 * t8 * t399 * t289 + 0.25000000e8 * t1422 * t1320 + 0.25000000e8 * t1402 * t1320 - 0.25000000e8 * t1407 * t3724;
      t4245 = t3713 - t3718 - t3720 - t3722 + t3727 - t3731 + t3734 + t3736 - t3740 + t1084 + t1088 - t1093 - t1096 - 0.25000000e8 * t86 * t85 * t1078 * t378 * t1425;
      t4251 = 0.50000000e8 * t86 * t3714 * t378 * t1425 + t3741 + t3742 + t3743 - t1159 - t1161 + t3746 - t3747 - t3748 + t1173 + t1182 - t3749 - t3750;
      t4252 = -t3753 - t3755 + t3758 + t1197 + t1201 - t1251 - t1253 - t1255 + t1257 + t1270 - t3759 + t1280 - t1284 + t1291;
      t4259 = t4216 * t1300;
      out_5_6 = 0.4000000000e-7 * t1303 * t1296 * (t4239 + t4245 + t4251 + t4252) * t66 - 0.4000000000e-7 * t4259 * t3684 * t1069 * t1550;
      out_6_6 = (-0.1e1 * t506 * t1584 - 0.1e1) * t1548;
      t4267 = t1567 - t1577 - t3775 - t3778 + t3781 + t3784 + t1612 - t1621 + t1627 - t1637 + t1647 - t1656 + t1661 - t1671 + t1676 + t1680 + t1684 + t1688 - t1695 - t1698;
      t4268 = -t1702 + t1707 + t1711 - t1716 - t1719 - t1765 - t1767 - t1769 - t1773 + t1783 + t1789 - t3786 - t1801 - t3787 + t1812 - t1817 + t3788 - t3791 - t3792 - t3793;
      t4270 = t3794 - t3795 + t3796 - t3797 + t3798 - t3799 + t1876 + t1879 - t1883 + t3800 + t1888 + t1890 - t3801 - t1897 - t1899 - t3803 + t3804 - t1913 + t1918 + t1922;
      t4272 = t1967 - t3824 - t3825 + t1974 + t3829 + t1982 - t1985 + t3830 - t3831 + t1995 - t1997;
      t4276 = -t2000 + t2004 - t2008 + t2016 - t2020 + t3835 + t3838 + t3841 - t3844 - t3847 - t3850 - t3853 + t3855 - t3857 - t3859 - t3863 - t3867 + t3871 - t3874 - t3877;
      t4297 = -t3911 - t3913 + 0.25000000e8 * t2441 * t3257 + 0.25000000e8 * t2436 * t3257 + 0.25000000e8 * t2507 * t3257 + 0.25000000e8 * t2503 * t3257 + 0.25000000e8 * t2641 * t2106 - 0.25000000e8 * t2638 * t2106 + 0.25000000e8 * t2339 * t2327 + 0.25000000e8 * t2441 * t2327 - 0.25000000e8 * t89 * t1708 * t2106;
      t4303 = t2435 * t1561 * t52;
      t4317 = 0.25000000e8 * t2436 * t2327 + 0.25000000e8 * t4303 * t2257 + 0.25000000e8 * t4303 * t2336 - 0.25000000e8 * t89 * t1703 * t2106 + 0.25000000e8 * t3868 * t1708 * t2106 + 0.25000000e8 * t3868 * t1703 * t2106 - t3915 - t3917 - t3920 + t3922 - t3925 - t3928 + t3930 - t3933 - t3935 + t3937 - t3943 - t3946 - t3950 - t3953;
      t4319 = -t3981 - t3983 - t3985 + t3988 - t3993 + t3996 + t3998 + t4002 - t4007 - t4011 - t4013;
      out_7_6 = -0.4000000000e-7 * t2031 * t631 * t25 * t95 * (t3887 + t3889 - t3884 - t3906 - t3901 - t3903 + t3897 + t3891 + t3894 + t3976 - t3979 + t3974 - t3967 - t3970 + t3962 + t3964 + t3960 + t3955 + t3957 - t3881 + t3823 - t3817 - t3813 + t3805 + t1932 + t4319 + t4317 + t4297 + t4276 + t4272 + t4270 + t4268 + t4267 + t1957 + t1952 + t1946 - t1942 + t1928) + 0.4000000000e-7 * t4259 * t2994 * t4023 * t2737;
      t4345 = t2752 - t2758 + 0.25000000e8 * t3093 * t2359 * t3257 + 0.25000000e8 * t3093 * t2351 * t3257 + 0.25000000e8 * t3093 * t2355 * t3257 + 0.25000000e8 * t3093 * t2347 * t3257 - t4030 - t4035 + t4038 + t4041 + t4043 + t4046 - t4050 - t4052 - t4056 - t4059 - t4061 - t4063 + t3775 + t3778;
      t4346 = -t3781 - t3784 - t2767 + t4065 + t2779 - t4066 + t2786 - t2792 + t4067 - t4068 + t2806 - t2808 - t2814 + t2819 + t2823 + t2825 + t2831 - t2835 + t2839 - t4069;
      t4348 = -t2845 - t2848 - t2851 - t2854 - t4072 + t4073 + t2867 - t2873 + t4074 + t4075 - t2888 - t4076 + t2896 - t4077 - t2904 + t2907 + t4078 - t4079 - t4080 + t2918;
      t4350 = -t1612 + t1621 - t1627 + t1656 - t2953 + t2957 + t2961 - t1707 - t1711 + t1716 + t1719;
      t4354 = t2964 + t2966 - t2970 + t2974 + t2976 - t2979 - t2981 - t2984 - t1783 - t1789 + t3786 + t1801 + t3787 - t1812 + t1817 - t3788 + t1942 - t1946 + t4094 + t4097;
      t4356 = t4135 + t4137 + t4139 - t4143 - t4149 + t4151 + t3813 + t3817 - t3823 - t3835 - t3838;
      t4375 = -t3841 + t3844 + t3847 + t3850 + t3853 - t3855 + t3857 + t3859 + t3863 + t3867 - t3894 - t3897 + t3901 + 0.25000000e8 * t3136 * t2327 + 0.25000000e8 * t3106 * t1615 * t2106 - 0.25000000e8 * t3032 * t1615 * t2106 + 0.25000000e8 * t3156 * t4098 + 0.25000000e8 * t3133 * t3257 + 0.25000000e8 * t3121 * t4098 + 0.25000000e8 * t3136 * t3257;
      t4385 = t3915 + t3917 + t3935 - t3937 + t3943 + t3946 + t3950 + t3953 - t3955 - t3988 + t3993;
      out_8_6 = -0.4000000000e-7 * t2998 * t1549 * t95 * (t4083 - t4084 - t4085 + t4086 + t2937 + t2935 - t4154 + t4156 - t4133 - t4128 - t4119 - t4122 + t4113 + t4116 - t4111 - t4104 - t4107 - t4101 - t4159 + t4161 + t4163 - t4166 + t2941 - 0.25000000e8 * t3033 * t3257 - 0.25000000e8 * t3045 * t3257 + 0.25000000e8 * t3107 * t3257 + 0.25000000e8 * t3165 * t3257 - t4082 + t4385 + t4375 + t4356 + t4354 + t4350 + t4348 + t2930 - t2928 + t4345 + t4346) * R__9 + 0.4000000000e-7 * t4216 * t2995 * t2029 * t4176 * t3322;
      t4428 = 0.25000000e8 * t852 * t2347 * t2539 + 0.25000000e8 * t852 * t2355 * t2539 + 0.25000000e8 * t1059 * t1222 * t1595 + 0.25000000e8 * t852 * t1222 * t1595 - 0.25000000e8 * t2491 * t1595 + 0.25000000e8 * t2532 * t2539 + 0.25000000e8 * t2482 * t3832 + 0.25000000e8 * t2485 * t1595 - 0.25000000e8 * t2495 * t2539 - 0.25000000e8 * t2529 * t2539 - 0.25000000e8 * t2488 * t1595 - 0.25000000e8 * t924 * t1663;
      t4452 = C__3 * t241 * t289;
      t4453 = t1078 * t2044;
      t4457 = t1078 * t2057;
      t4467 = -0.25000000e8 * t2529 * t2208 - 0.50000000e8 * t339 * t1703 * t1614 + 0.25000000e8 * t369 * t1703 * t1614 + 0.25000000e8 * t2074 * t2589 + 0.25000000e8 * t643 * t553 * t2346 + 0.25000000e8 * t643 * t328 * t2346 + 0.25000000e8 * t647 * t1222 * t2589 + 0.25000000e8 * t643 * t1222 * t2589 + 0.25000000e8 * t643 * t4453 * t4452 + 0.25000000e8 * t647 * t4457 * t4452 + 0.25000000e8 * t643 * t4457 * t4452 + 0.25000000e8 * t647 * t4453 * t4452;
      t4468 = t4428 + t4467;
      out_7_7 = -0.4000000000e-7 * t2031 * t631 * t25 * t95 * t4468;
      out_8_7 = 0.4000000000e-7 * t2998 * t1549 * t95 * t4468 * R__9;

      % Store outputs
      out_Jf_x = zeros(8, 8);
      out_Jf_x(1, 1) = out_1_1;
      out_Jf_x(2, 1) = out_2_1;
      out_Jf_x(4, 1) = out_4_1;
      out_Jf_x(5, 1) = out_5_1;
      out_Jf_x(7, 1) = out_7_1;
      out_Jf_x(8, 1) = out_8_1;
      out_Jf_x(1, 2) = out_1_2;
      out_Jf_x(2, 2) = out_2_2;
      out_Jf_x(3, 2) = out_3_2;
      out_Jf_x(4, 2) = out_4_2;
      out_Jf_x(5, 2) = out_5_2;
      out_Jf_x(7, 2) = out_7_2;
      out_Jf_x(8, 2) = out_8_2;
      out_Jf_x(1, 3) = out_1_3;
      out_Jf_x(2, 3) = out_2_3;
      out_Jf_x(3, 3) = out_3_3;
      out_Jf_x(4, 3) = out_4_3;
      out_Jf_x(5, 3) = out_5_3;
      out_Jf_x(7, 3) = out_7_3;
      out_Jf_x(8, 3) = out_8_3;
      out_Jf_x(4, 4) = out_4_4;
      out_Jf_x(5, 4) = out_5_4;
      out_Jf_x(7, 4) = out_7_4;
      out_Jf_x(8, 4) = out_8_4;
      out_Jf_x(4, 5) = out_4_5;
      out_Jf_x(5, 5) = out_5_5;
      out_Jf_x(6, 5) = out_6_5;
      out_Jf_x(7, 5) = out_7_5;
      out_Jf_x(8, 5) = out_8_5;
      out_Jf_x(4, 6) = out_4_6;
      out_Jf_x(5, 6) = out_5_6;
      out_Jf_x(6, 6) = out_6_6;
      out_Jf_x(7, 6) = out_7_6;
      out_Jf_x(8, 6) = out_8_6;
      out_Jf_x(7, 7) = out_7_7;
      out_Jf_x(8, 7) = out_8_7;
    end % Jf_x
    %
    % - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    %
    function out_Jf_v = Jf_v( ~, ~, ~, ~ )
      % Evaluate the Jacobian of f with respect to v.

      % Extract properties
      % No properties

      % Extract inputs

      % Evaluate function
      % No body

      % Store outputs
      out_Jf_v = zeros(8, 0);
    end % Jf_v
    %
    % - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    %
    function out_v = v( ~, ~, ~ )
      % Evaluate the the veils v.

      % Extract properties
      % No properties

      % Extract inputs

      % Evaluate function
      % No body

      % Store outputs
      out_v = zeros(0, 1);
    end % v
    %
    % - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    %
    function out_Jv_x = Jv_x( ~, ~, ~, ~ )
      % Evaluate the Jacobian of v with respect to x.

      % Extract properties
      % No properties

      % Extract inputs

      % Evaluate function
      % No body

      % Store outputs
      out_Jv_x = zeros(0, 8);
    end % Jv_x
    %
    % - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    %
    function out_h = h( this, in_1, ~, t )
      % Calculate the residual of the invariants h.

      % Extract properties
      U__b = this.m_U__b;
      U__f = this.m_U__f;
      alpha = this.m_alpha;
      beta = this.m_beta;
      R__0 = this.m_R__0;
      R__1 = this.m_R__1;
      R__2 = this.m_R__2;
      R__4 = this.m_R__4;
      R__5 = this.m_R__5;
      R__6 = this.m_R__6;
      R__8 = this.m_R__8;
      R__9 = this.m_R__9;

      % Extract inputs
      y__1 = in_1(1);
      y__2 = in_1(2);
      y__3 = in_1(3);
      y__4 = in_1(4);
      y__5 = in_1(5);
      y__6 = in_1(6);
      y__7 = in_1(7);
      y__8 = in_1(8);

      % Evaluate function
      t7 = 0.1e1 / U__f;
      t9 = exp(t7 * (y__2 - y__3));
      t12 = R__2 * R__1;
      t15 = sin(200 * pi * t);
      out_1 = 0.1e1 / R__1 / R__0 / R__2 * (t9 * R__1 * R__0 * (-0.1e1 * alpha + 0.1e1) * beta * R__2 + 0.1e0 * t15 * t12 + R__0 * (R__2 + R__1) * y__2 + y__1 * t12 + ((alpha - 0.1e1) * beta * R__2 - 0.1e1 * U__b) * R__0 * R__1);
      t35 = R__6 * beta;
      t41 = exp(t7 * (y__5 - y__6));
      out_2 = 0.1e1 / R__5 / R__4 / R__6 * (-t41 * (alpha - 1) * R__4 * R__5 * t35 + R__6 * alpha * beta * R__5 * R__4 * t9 + R__4 * (R__6 + R__5) * y__5 + R__5 * (y__4 * R__6 + R__4 * (-t35 - U__b) - R__6 * U__b));
      out_3 = 0.1e1 / R__9 / R__8 * (R__9 * alpha * beta * R__8 * t41 + y__7 * R__9 + y__8 * R__8 - R__9 * (alpha * beta * R__8 + U__b));

      % Store outputs
      out_h = zeros(3, 1);
      out_h(1) = out_1;
      out_h(2) = out_2;
      out_h(3) = out_3;
    end % h
    %
    % - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    %
    function out_Jh_x = Jh_x( this, in_1, ~, ~ )
      % Calculate the Jacobian of h with respect to x.

      % Extract properties
      U__f = this.m_U__f;
      alpha = this.m_alpha;
      beta = this.m_beta;
      R__0 = this.m_R__0;
      R__1 = this.m_R__1;
      R__2 = this.m_R__2;
      R__4 = this.m_R__4;
      R__5 = this.m_R__5;
      R__6 = this.m_R__6;
      R__8 = this.m_R__8;
      R__9 = this.m_R__9;

      % Extract inputs
      y__2 = in_1(2);
      y__3 = in_1(3);
      y__5 = in_1(5);
      y__6 = in_1(6);

      % Evaluate function
      out_1_1 = 0.1e1 / R__0;
      t3 = (-0.1e1 * alpha + 0.1e1) * beta;
      t6 = 0.1e1 / U__f;
      t9 = exp(t6 * (y__2 - y__3));
      t10 = t9 * t6;
      out_1_2 = out_1_1 / R__1 / R__2 * (t10 * R__0 * R__1 * R__2 * t3 + R__0 * (R__2 + R__1));
      t20 = alpha * beta;
      out_2_2 = t20 * t10;
      out_1_3 = -t10 * t3;
      out_2_3 = -out_2_2;
      out_2_4 = 0.1e1 / R__4;
      t24 = alpha - 1;
      t28 = exp(t6 * (y__5 - y__6));
      t29 = t28 * t6;
      out_2_5 = out_2_4 / R__5 / R__6 * (-t29 * t24 * R__4 * beta * R__6 * R__5 + R__4 * (R__6 + R__5));
      out_3_5 = t20 * t29;
      out_2_6 = t29 * t24 * beta;
      out_3_6 = -out_3_5;
      out_3_7 = 0.1e1 / R__8;
      out_3_8 = 0.1e1 / R__9;

      % Store outputs
      out_Jh_x = zeros(3, 8);
      out_Jh_x(1, 1) = out_1_1;
      out_Jh_x(1, 2) = out_1_2;
      out_Jh_x(2, 2) = out_2_2;
      out_Jh_x(1, 3) = out_1_3;
      out_Jh_x(2, 3) = out_2_3;
      out_Jh_x(2, 4) = out_2_4;
      out_Jh_x(2, 5) = out_2_5;
      out_Jh_x(3, 5) = out_3_5;
      out_Jh_x(2, 6) = out_2_6;
      out_Jh_x(3, 6) = out_3_6;
      out_Jh_x(3, 7) = out_3_7;
      out_Jh_x(3, 8) = out_3_8;
    end % Jh_x
    %
    % - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    %
    function out_Jh_v = Jh_v( ~, ~, ~, ~ )
      % Calculate the Jacobian of h with respect to v.

      % Extract properties
      % No properties

      % Extract inputs

      % Evaluate function
      % No body

      % Store outputs
      out_Jh_v = zeros(3, 0);
    end % Jh_v
    %
    % - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    %
    function out_pivots = pivots( this, in_1, ~, ~ )
      % Calculate the pivoting values

      % Extract properties
      U__f = this.m_U__f;
      alpha = this.m_alpha;
      beta = this.m_beta;
      R__0 = this.m_R__0;
      R__1 = this.m_R__1;
      R__2 = this.m_R__2;
      R__4 = this.m_R__4;
      R__5 = this.m_R__5;
      R__6 = this.m_R__6;
      R__8 = this.m_R__8;
      R__9 = this.m_R__9;
      C__1 = this.m_C__1;
      C__2 = this.m_C__2;
      C__3 = this.m_C__3;
      C__4 = this.m_C__4;
      C__5 = this.m_C__5;

      % Extract inputs
      y__2 = in_1(2);
      y__3 = in_1(3);
      y__5 = in_1(5);
      y__6 = in_1(6);

      % Evaluate function
      out_1_1 = -C__2;
      out_2_1 = -C__4;
      out_3_1 = C__1;
      out_4_1 = C__3;
      out_5_1 = C__5;
      out_6_1 = -1;
      out_7_1 = -1;
      out_8_1 = -1;
      out_1_2 = out_1_1;
      out_2_2 = out_2_1;
      out_3_2 = C__1;
      out_4_2 = C__3;
      out_5_2 = C__5;
      out_6_2 = (R__9 + R__8) / R__9 / R__8;
      t10 = 0.1e1 / U__f;
      t12 = exp(t10 * (y__5 - y__6));
      out_7_2 = 0.1e1 / R__6 / R__5 / R__4 * t10 * (-t12 * (alpha - 1) * R__4 * beta * R__6 * R__5 + U__f * (R__4 * (R__6 + R__5) + R__5 * R__6));
      t34 = exp(t10 * (y__2 - y__3));
      t39 = U__f * R__2;
      out_8_2 = 0.1e1 / R__2 / R__1 / R__0 * t10 * (t34 * R__1 * R__0 * (-0.1e1 * alpha + 0.1e1) * beta * R__2 + R__0 * (0.1e1 * U__f * R__1 + 0.1e1 * t39) + 0.1e1 * R__1 * t39);

      % Store outputs
      out_pivots = zeros(8, 2);
      out_pivots(1, 1) = out_1_1;
      out_pivots(2, 1) = out_2_1;
      out_pivots(3, 1) = out_3_1;
      out_pivots(4, 1) = out_4_1;
      out_pivots(5, 1) = out_5_1;
      out_pivots(6, 1) = out_6_1;
      out_pivots(7, 1) = out_7_1;
      out_pivots(8, 1) = out_8_1;
      out_pivots(1, 2) = out_1_2;
      out_pivots(2, 2) = out_2_2;
      out_pivots(3, 2) = out_3_2;
      out_pivots(4, 2) = out_4_2;
      out_pivots(5, 2) = out_5_2;
      out_pivots(6, 2) = out_6_2;
      out_pivots(7, 2) = out_7_2;
      out_pivots(8, 2) = out_8_2;
    end % pivots
    %
    % - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    %
    function out = in_domain( ~, ~, ~ )
      out = true;
    end % in_domain
    %
    % - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    %
  end
end % Transistor8

% That's All Folks!
