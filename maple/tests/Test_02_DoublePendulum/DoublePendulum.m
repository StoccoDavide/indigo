% +--------------------------------------------------------------------------+
% | 'Indigo' module version 1.0 - BSD 3-Clause License - Copyright (c) 2023  |
% | Current version authors:                                                 |
% |   Davide Stocco and Enrico Bertolazzi.                                   |
% +--------------------------------------------------------------------------+

% Matlab generated code for implicit system: DoublePendulum
% This file has been automatically generated by Indigo.
% DISCLAIMER: If you need to edit it, do it wisely!

classdef DoublePendulum < Indigo.Systems.Implicit
  %
  % No class description provided.
  %
  properties (SetAccess = protected, Hidden = true)
    % User data
    m_m = 1.0;
    m_g = 9.81;
    m_ell__1 = 1.0;
    m_ell__2 = 1.0;
  end
  %
  methods
    %
    % - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    %
    function this = DoublePendulum( varargin )
      % Constructor for 'DoublePendulum' class.

      % Superclass constructor
      num_eqns = 9;
      num_veil = 0;
      num_invs = 4;
      this = this@Indigo.Systems.Implicit('DoublePendulum', num_eqns, num_veil, num_invs);

      % User data
      if (nargin == 0)
        % Keep default values
      elseif (nargin == 4)
        this.m_m = varargin{1};
        this.m_g = varargin{2};
        this.m_ell__1 = varargin{3};
        this.m_ell__2 = varargin{4};
      else
        error('wrong number of input arguments.');
      end
    end % DoublePendulum
    %
    % - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    %
    function out_F = F( this, in_1, in_2, in_3, t )
      % Evaluate the function F.

      % Extract properties
      m = this.m_m;
      g = this.m_g;
      ell__1 = this.m_ell__1;
      ell__2 = this.m_ell__2;

      % Extract inputs
      u__1 = in_1(1);
      v__1 = in_1(2);
      u__2 = in_1(3);
      v__2 = in_1(4);
      x__1 = in_1(5);
      y__1 = in_1(6);
      x__2 = in_1(7);
      y__2 = in_1(8);
      lambda__1 = in_1(9);
      lambda__2 = in_1(10);
      u__1_dot = in_2(1);
      v__1_dot = in_2(2);
      u__2_dot = in_2(3);
      v__2_dot = in_2(4);
      x__1_dot = in_2(5);
      y__1_dot = in_2(6);
      x__2_dot = in_2(7);
      y__2_dot = in_2(8);
      lambda__1_dot = in_2(9);
      lambda__2_dot = in_2(10);

      % Evaluate function
      out_1 = m__2 * u__1_dot + m__2 * u__2_dot + 2 * x__2 * lambda__2;
      out_2 = g * m__2 + m__2 * v__1_dot + m__2 * v__2_dot + 2 * y__2 * lambda__2;
      t13 = 0.1e1 / m__1;
      t20 = m__1 * x__2 * lambda__2;
      t23 = m__2 * x__1 * lambda__1;
      t25 = m__2 * x__2 * lambda__2;
      t29 = 0.1e1 / m__2;
      t33 = m__1 * y__2 * lambda__2;
      t36 = m__2 * y__1 * lambda__1;
      t38 = m__2 * y__2 * lambda__2;
      t49 = x__2 ^ 2;
      t51 = y__2 ^ 2;
      out_3 = -4 * u__2 * u__2_dot - 4 * v__2 * v__2_dot - 4 * x__1_dot * t13 * lambda__1 * x__2 - 4 * y__1_dot * t13 * lambda__1 * y__2 - 4 * x__2_dot * t29 * t13 * (-2 * t20 + t23 - 2 * t25) - 4 * y__2_dot * t29 * t13 * (-2 * t33 + t36 - 2 * t38) - 4 * lambda__1_dot * t13 * (x__1 * x__2 + y__1 * y__2) + 4 * lambda__2_dot * t29 * t13 * (t49 * m__1 + t51 * m__1 + t49 * m__2 + t51 * m__2);
      out_4 = x__1_dot - u__1;
      out_5 = y__1_dot - v__1;
      out_6 = x__2_dot - u__2;
      out_7 = y__2_dot - v__2;
      out_8 = -m__1 * v__2_dot + 2 * t29 * (-t33 + t36 - t38);
      out_9 = -m__1 * u__2_dot + 2 * t29 * (-t20 + t23 - t25);

      % Store outputs
      out_F = zeros(9, 1);
      out_F(1) = out_1;
      out_F(2) = out_2;
      out_F(3) = out_3;
      out_F(4) = out_4;
      out_F(5) = out_5;
      out_F(6) = out_6;
      out_F(7) = out_7;
      out_F(8) = out_8;
      out_F(9) = out_9;
    end % F
    %
    % - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    %
    function out_JF_x = JF_x( this, in_1, in_2, in_3, t )
      % Evaluate the Jacobian of F with respect to x.

      % Extract properties
      m = this.m_m;
      g = this.m_g;
      ell__1 = this.m_ell__1;
      ell__2 = this.m_ell__2;

      % Extract inputs
      u__1 = in_1(1);
      v__1 = in_1(2);
      u__2 = in_1(3);
      v__2 = in_1(4);
      x__1 = in_1(5);
      y__1 = in_1(6);
      x__2 = in_1(7);
      y__2 = in_1(8);
      lambda__1 = in_1(9);
      lambda__2 = in_1(10);
      u__1_dot = in_2(1);
      v__1_dot = in_2(2);
      u__2_dot = in_2(3);
      v__2_dot = in_2(4);
      x__1_dot = in_2(5);
      y__1_dot = in_2(6);
      x__2_dot = in_2(7);
      y__2_dot = in_2(8);
      lambda__1_dot = in_2(9);
      lambda__2_dot = in_2(10);

      % Evaluate function
      out_4_1 = -1;
      out_5_2 = -1;
      out_3_3 = -4 * u__2_dot;
      out_6_3 = -1;
      out_3_4 = -4 * v__2_dot;
      out_7_4 = -1;
      t3 = 0.1e1 / m__1;
      t4 = t3 * lambda__1;
      t6 = t3 * x__2;
      out_3_5 = -4 * x__2_dot * t4 - 4 * lambda__1_dot * t6;
      out_9_5 = 2 * lambda__1;
      t10 = t3 * y__2;
      out_3_6 = -4 * lambda__1_dot * t10 - 4 * y__2_dot * t4;
      out_8_6 = out_9_5;
      out_1_7 = 2 * lambda__2;
      t16 = -m__1 * lambda__2 - m__2 * lambda__2;
      t18 = 2 * t3 * t16;
      t19 = 0.1e1 / m__2;
      t20 = x__2_dot * t19;
      t22 = t3 * x__1;
      t26 = m__1 * x__2 + m__2 * x__2;
      t27 = 2 * t26;
      t29 = lambda__2_dot * t19;
      out_3_7 = 4 * t29 * t3 * t27 - 4 * t20 * t18 - 4 * lambda__1_dot * t22 - 4 * x__1_dot * t4;
      out_9_7 = 2 * t19 * t16;
      out_2_8 = out_1_7;
      t34 = y__2_dot * t19;
      t36 = t3 * y__1;
      t40 = m__1 * y__2 + m__2 * y__2;
      t41 = 2 * t40;
      out_3_8 = 4 * t29 * t3 * t41 - 4 * t34 * t18 - 4 * lambda__1_dot * t36 - 4 * y__1_dot * t4;
      out_8_8 = out_9_7;
      out_3_9 = -4 * y__1_dot * t10 - 4 * x__2_dot * t22 - 4 * y__2_dot * t36 - 4 * x__1_dot * t6;
      out_8_9 = 2 * y__1;
      out_9_9 = 2 * x__1;
      out_1_10 = 2 * x__2;
      out_2_10 = 2 * y__2;
      out_3_10 = 4 * t20 * t3 * t27 + 4 * t34 * t3 * t41;
      out_8_10 = -2 * t19 * t40;
      out_9_10 = -2 * t19 * t26;

      % Store outputs
      out_JF_x = zeros(9, 10);
      out_JF_x(4, 1) = out_4_1;
      out_JF_x(5, 2) = out_5_2;
      out_JF_x(3, 3) = out_3_3;
      out_JF_x(6, 3) = out_6_3;
      out_JF_x(3, 4) = out_3_4;
      out_JF_x(7, 4) = out_7_4;
      out_JF_x(3, 5) = out_3_5;
      out_JF_x(9, 5) = out_9_5;
      out_JF_x(3, 6) = out_3_6;
      out_JF_x(8, 6) = out_8_6;
      out_JF_x(1, 7) = out_1_7;
      out_JF_x(3, 7) = out_3_7;
      out_JF_x(9, 7) = out_9_7;
      out_JF_x(2, 8) = out_2_8;
      out_JF_x(3, 8) = out_3_8;
      out_JF_x(8, 8) = out_8_8;
      out_JF_x(3, 9) = out_3_9;
      out_JF_x(8, 9) = out_8_9;
      out_JF_x(9, 9) = out_9_9;
      out_JF_x(1, 10) = out_1_10;
      out_JF_x(2, 10) = out_2_10;
      out_JF_x(3, 10) = out_3_10;
      out_JF_x(8, 10) = out_8_10;
      out_JF_x(9, 10) = out_9_10;
    end % JF_x
    %
    % - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    %
    function out_JF_x_dot = JF_x_dot( this, in_1, in_2, in_3, t )
      % Evaluate the Jacobian of F with respect to x_dot.

      % Extract properties
      m = this.m_m;
      g = this.m_g;
      ell__1 = this.m_ell__1;
      ell__2 = this.m_ell__2;

      % Extract inputs
      u__1 = in_1(1);
      v__1 = in_1(2);
      u__2 = in_1(3);
      v__2 = in_1(4);
      x__1 = in_1(5);
      y__1 = in_1(6);
      x__2 = in_1(7);
      y__2 = in_1(8);
      lambda__1 = in_1(9);
      lambda__2 = in_1(10);
      u__1_dot = in_2(1);
      v__1_dot = in_2(2);
      u__2_dot = in_2(3);
      v__2_dot = in_2(4);
      x__1_dot = in_2(5);
      y__1_dot = in_2(6);
      x__2_dot = in_2(7);
      y__2_dot = in_2(8);
      lambda__1_dot = in_2(9);
      lambda__2_dot = in_2(10);

      % Evaluate function
      out_1_1 = m__2;
      out_2_2 = m__2;
      out_1_3 = m__2;
      out_3_3 = -4 * u__2;
      out_9_3 = -m__1;
      out_2_4 = m__2;
      out_3_4 = -4 * v__2;
      out_8_4 = out_9_3;
      t4 = 0.1e1 / m__1;
      out_3_5 = -4 * t4 * x__2 * lambda__1;
      out_4_5 = 1;
      out_3_6 = -4 * t4 * y__2 * lambda__1;
      out_5_6 = 1;
      t20 = 0.1e1 / m__2;
      out_3_7 = -4 * t20 * t4 * (-2 * m__1 * x__2 * lambda__2 + m__2 * x__1 * lambda__1 - 2 * m__2 * x__2 * lambda__2);
      out_6_7 = 1;
      out_3_8 = -4 * t20 * t4 * (-2 * m__1 * y__2 * lambda__2 + m__2 * y__1 * lambda__1 - 2 * m__2 * y__2 * lambda__2);
      out_7_8 = 1;
      out_3_9 = -4 * t4 * (x__1 * x__2 + y__1 * y__2);
      t40 = x__2 ^ 2;
      t42 = y__2 ^ 2;
      out_3_10 = 4 * t20 * t4 * (t40 * m__1 + t42 * m__1 + t40 * m__2 + t42 * m__2);

      % Store outputs
      out_JF_x_dot = zeros(9, 10);
      out_JF_x_dot(1, 1) = out_1_1;
      out_JF_x_dot(2, 2) = out_2_2;
      out_JF_x_dot(1, 3) = out_1_3;
      out_JF_x_dot(3, 3) = out_3_3;
      out_JF_x_dot(9, 3) = out_9_3;
      out_JF_x_dot(2, 4) = out_2_4;
      out_JF_x_dot(3, 4) = out_3_4;
      out_JF_x_dot(8, 4) = out_8_4;
      out_JF_x_dot(3, 5) = out_3_5;
      out_JF_x_dot(4, 5) = out_4_5;
      out_JF_x_dot(3, 6) = out_3_6;
      out_JF_x_dot(5, 6) = out_5_6;
      out_JF_x_dot(3, 7) = out_3_7;
      out_JF_x_dot(6, 7) = out_6_7;
      out_JF_x_dot(3, 8) = out_3_8;
      out_JF_x_dot(7, 8) = out_7_8;
      out_JF_x_dot(3, 9) = out_3_9;
      out_JF_x_dot(3, 10) = out_3_10;
    end % JF_x_dot
    %
    % - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    %
    function out_JF_v = JF_v( this, in_1, in_2, in_3, t )
      % Evaluate the Jacobian of F with respect to v.

      % Extract properties
      m = this.m_m;
      g = this.m_g;
      ell__1 = this.m_ell__1;
      ell__2 = this.m_ell__2;

      % Extract inputs
      u__1 = in_1(1);
      v__1 = in_1(2);
      u__2 = in_1(3);
      v__2 = in_1(4);
      x__1 = in_1(5);
      y__1 = in_1(6);
      x__2 = in_1(7);
      y__2 = in_1(8);
      lambda__1 = in_1(9);
      lambda__2 = in_1(10);
      u__1_dot = in_2(1);
      v__1_dot = in_2(2);
      u__2_dot = in_2(3);
      v__2_dot = in_2(4);
      x__1_dot = in_2(5);
      y__1_dot = in_2(6);
      x__2_dot = in_2(7);
      y__2_dot = in_2(8);
      lambda__1_dot = in_2(9);
      lambda__2_dot = in_2(10);

      % Evaluate function
      % No elements

      % Store outputs
      out_JF_v = zeros(9, 0);
    end % JF_v
    %
    % - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    %
    function out_v = v( this, in_1, t )
      % Evaluate the the veils v.

      % Extract properties
      m = this.m_m;
      g = this.m_g;
      ell__1 = this.m_ell__1;
      ell__2 = this.m_ell__2;

      % Extract inputs
      u__1 = in_1(1);
      v__1 = in_1(2);
      u__2 = in_1(3);
      v__2 = in_1(4);
      x__1 = in_1(5);
      y__1 = in_1(6);
      x__2 = in_1(7);
      y__2 = in_1(8);
      lambda__1 = in_1(9);
      lambda__2 = in_1(10);

      % Evaluate function
      % No elements

      % Store outputs
      out_v = zeros(0, 1);
    end % v
    %
    % - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    %
    function out_Jv_x = Jv_x( this, in_1, t )
      % Evaluate the Jacobian of v with respect to x.

      % Extract properties
      m = this.m_m;
      g = this.m_g;
      ell__1 = this.m_ell__1;
      ell__2 = this.m_ell__2;

      % Extract inputs
      u__1 = in_1(1);
      v__1 = in_1(2);
      u__2 = in_1(3);
      v__2 = in_1(4);
      x__1 = in_1(5);
      y__1 = in_1(6);
      x__2 = in_1(7);
      y__2 = in_1(8);
      lambda__1 = in_1(9);
      lambda__2 = in_1(10);

      % Evaluate function
      % No elements

      % Store outputs
      out_Jv_x = zeros(0, 10);
    end % Jv_x
    %
    % - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    %
    function out_h = h( this, in_1, in_2, t )
      % Calculate the residual of the invariants h.

      % Extract properties
      m = this.m_m;
      g = this.m_g;
      ell__1 = this.m_ell__1;
      ell__2 = this.m_ell__2;

      % Extract inputs
      u__1 = in_1(1);
      v__1 = in_1(2);
      u__2 = in_1(3);
      v__2 = in_1(4);
      x__1 = in_1(5);
      y__1 = in_1(6);
      x__2 = in_1(7);
      y__2 = in_1(8);
      lambda__1 = in_1(9);
      lambda__2 = in_1(10);

      % Evaluate function
      t1 = ell__2 ^ 2;
      t2 = x__2 ^ 2;
      t3 = y__2 ^ 2;
      out_1 = t1 - t2 - t3;
      out_2 = 2 * u__2 * x__2 + 2 * v__2 * y__2;
      t7 = m__1 * m__2;
      t8 = u__2 ^ 2;
      t10 = v__2 ^ 2;
      out_3 = -2 / m__2 / m__1 * (2 * m__2 * x__1 * x__2 * lambda__1 + 2 * m__2 * y__1 * y__2 * lambda__1 - 2 * lambda__2 * t2 * m__1 - 2 * lambda__2 * t3 * m__1 - 2 * lambda__2 * t2 * m__2 - 2 * lambda__2 * t3 * m__2 + t10 * t7 + t8 * t7);
      t38 = ell__1 ^ 2;
      t39 = x__1 ^ 2;
      t40 = y__1 ^ 2;
      out_4 = t38 - t39 - t40;

      % Store outputs
      out_h = zeros(4, 1);
      out_h(1) = out_1;
      out_h(2) = out_2;
      out_h(3) = out_3;
      out_h(4) = out_4;
    end % h
    %
    % - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    %
    function out_Jh_x = Jh_x( this, in_1, in_2, t )
      % Calculate the Jacobian of h with respect to x.

      % Extract properties
      m = this.m_m;
      g = this.m_g;
      ell__1 = this.m_ell__1;
      ell__2 = this.m_ell__2;

      % Extract inputs
      u__1 = in_1(1);
      v__1 = in_1(2);
      u__2 = in_1(3);
      v__2 = in_1(4);
      x__1 = in_1(5);
      y__1 = in_1(6);
      x__2 = in_1(7);
      y__2 = in_1(8);
      lambda__1 = in_1(9);
      lambda__2 = in_1(10);

      % Evaluate function
      out_2_3 = 2 * x__2;
      out_3_3 = -4 * u__2;
      out_2_4 = 2 * y__2;
      out_3_4 = -4 * v__2;
      t4 = 0.1e1 / m__1;
      out_3_5 = -4 * t4 * x__2 * lambda__1;
      out_4_5 = -2 * x__1;
      out_3_6 = -4 * t4 * y__2 * lambda__1;
      out_4_6 = -2 * y__1;
      out_1_7 = -out_2_3;
      out_2_7 = 2 * u__2;
      t15 = x__1 * m__2;
      t23 = 0.1e1 / m__2;
      out_3_7 = -2 * t23 * t4 * (-4 * m__1 * x__2 * lambda__2 - 4 * m__2 * x__2 * lambda__2 + 2 * lambda__1 * t15);
      out_1_8 = -out_2_4;
      out_2_8 = 2 * v__2;
      t29 = y__1 * m__2;
      out_3_8 = -2 * t23 * t4 * (-4 * m__1 * y__2 * lambda__2 - 4 * m__2 * y__2 * lambda__2 + 2 * lambda__1 * t29);
      out_3_9 = -2 * t23 * t4 * (2 * x__2 * t15 + 2 * y__2 * t29);
      t46 = x__2 ^ 2;
      t48 = y__2 ^ 2;
      out_3_10 = -2 * t23 * t4 * (-2 * t46 * m__1 - 2 * t48 * m__1 - 2 * t46 * m__2 - 2 * t48 * m__2);

      % Store outputs
      out_Jh_x = zeros(4, 10);
      out_Jh_x(2, 3) = out_2_3;
      out_Jh_x(3, 3) = out_3_3;
      out_Jh_x(2, 4) = out_2_4;
      out_Jh_x(3, 4) = out_3_4;
      out_Jh_x(3, 5) = out_3_5;
      out_Jh_x(4, 5) = out_4_5;
      out_Jh_x(3, 6) = out_3_6;
      out_Jh_x(4, 6) = out_4_6;
      out_Jh_x(1, 7) = out_1_7;
      out_Jh_x(2, 7) = out_2_7;
      out_Jh_x(3, 7) = out_3_7;
      out_Jh_x(1, 8) = out_1_8;
      out_Jh_x(2, 8) = out_2_8;
      out_Jh_x(3, 8) = out_3_8;
      out_Jh_x(3, 9) = out_3_9;
      out_Jh_x(3, 10) = out_3_10;
    end % Jh_x
    %
    % - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    %
    function out_Jh_v = Jh_v( this, in_1, in_2, t )
      % Calculate the Jacobian of h with respect to v.

      % Extract properties
      m = this.m_m;
      g = this.m_g;
      ell__1 = this.m_ell__1;
      ell__2 = this.m_ell__2;

      % Extract inputs
      u__1 = in_1(1);
      v__1 = in_1(2);
      u__2 = in_1(3);
      v__2 = in_1(4);
      x__1 = in_1(5);
      y__1 = in_1(6);
      x__2 = in_1(7);
      y__2 = in_1(8);
      lambda__1 = in_1(9);
      lambda__2 = in_1(10);

      % Evaluate function
      % No elements

      % Store outputs
      out_Jh_v = zeros(4, 0);
    end % Jh_v
    %
    % - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    %
  end
end % DoublePendulum

% That's All Folks!
