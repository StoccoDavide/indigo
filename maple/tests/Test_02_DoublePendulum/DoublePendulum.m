% +--------------------------------------------------------------------------+
% | 'Indigo' module version 1.0 - BSD 3-Clause License - Copyright (c) 2023  |
% | Current version authors:                                                 |
% |   Davide Stocco and Enrico Bertolazzi.                                   |
% +--------------------------------------------------------------------------+

% Matlab generated code for implicit system: DoublePendulum
% This file has been automatically generated by Indigo.
% DISCLAIMER: If you need to edit it, do it wisely!

classdef DoublePendulum < Indigo.Systems.Implicit
  %
  % No class description provided.
  %
  properties (SetAccess = protected, Hidden = true)
    % User data
    m_m__1 = 1.0;
    m_m__2 = 2.0;
    m_g = 9.81;
    m_ell__1 = 1.0;
    m_ell__2 = 1.5;
  end
  %
  methods
    %
    % - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    %
    function this = DoublePendulum( varargin )
      % Class constructor.

      % Superclass constructor
      num_eqns = 10;
      num_veil = 0;
      num_invs = 6;
      this = this@Indigo.Systems.Implicit('DoublePendulum', num_eqns, num_veil, num_invs);

      % User data
      if (nargin == 0)
        % Keep default values
      elseif (nargin == 1 && isstruct(varargin{1}))
        this.m_m__1 = varargin{1}.m__1;
        this.m_m__2 = varargin{1}.m__2;
        this.m_g = varargin{1}.g;
        this.m_ell__1 = varargin{1}.ell__1;
        this.m_ell__2 = varargin{1}.ell__2;
      elseif (nargin == 5)
        this.m_m__1 = varargin{1};
        this.m_m__2 = varargin{2};
        this.m_g = varargin{3};
        this.m_ell__1 = varargin{4};
        this.m_ell__2 = varargin{5};
      else
        error('wrong number of input arguments.');
      end
    end % DoublePendulum
    %
    % - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    %
    function out_F = F( this, in_1, in_2, in_3, t )
      % Evaluate the function F.

      % Extract properties
      m__1 = this.m_m__1;
      m__2 = this.m_m__2;
      g = this.m_g;
      ell__1 = this.m_ell__1;
      ell__2 = this.m_ell__2;

      % Extract inputs
      x__1 = in_1(1);
      y__1 = in_1(2);
      x__2 = in_1(3);
      y__2 = in_1(4);
      u__1 = in_1(5);
      v__1 = in_1(6);
      u__2 = in_1(7);
      v__2 = in_1(8);
      lambda__1 = in_1(9);
      lambda__2 = in_1(10);
      x__1_dot = in_2(1);
      y__1_dot = in_2(2);
      x__2_dot = in_2(3);
      y__2_dot = in_2(4);
      u__1_dot = in_2(5);
      v__1_dot = in_2(6);
      u__2_dot = in_2(7);
      v__2_dot = in_2(8);
      lambda__1_dot = in_2(9);
      lambda__2_dot = in_2(10);

      % Evaluate function
      out_1 = -u__1 + x__1_dot;
      out_2 = -v__1 + y__1_dot;
      out_3 = -u__2 + x__2_dot;
      out_4 = -v__2 + y__2_dot;
      t1 = lambda__1 * x__1;
      t2 = 0.1e1 / m__1;
      out_5 = 2 * t2 * t1 + u__1_dot;
      t5 = g * m__1;
      t6 = y__1 * lambda__1;
      out_6 = v__1_dot + t2 * (t5 + 2 * t6);
      t10 = lambda__2 * x__2;
      t11 = 0.1e1 / m__2;
      out_7 = 2 * t11 * t10 + u__2_dot;
      t14 = g * m__2;
      t15 = y__2 * lambda__2;
      out_8 = v__2_dot + t11 * (t14 + 2 * t15);
      t30 = x__1 ^ 2;
      t31 = y__1 ^ 2;
      out_9 = (4 * x__1_dot * t1 + y__1_dot * (t5 + 4 * t6) - 2 * u__1 * u__1_dot * m__1 - 2 * m__1 * v__1 * v__1_dot + lambda__1_dot * (2 * t30 + 2 * t31)) * t2;
      t47 = x__2 ^ 2;
      t48 = y__2 ^ 2;
      out_10 = (4 * x__2_dot * t10 + y__2_dot * (t14 + 4 * t15) - 2 * u__2 * u__2_dot * m__2 - 2 * m__2 * v__2 * v__2_dot + lambda__2_dot * (2 * t47 + 2 * t48)) * t11;

      % Store outputs
      out_F = zeros(10, 1);
      out_F(1) = out_1;
      out_F(2) = out_2;
      out_F(3) = out_3;
      out_F(4) = out_4;
      out_F(5) = out_5;
      out_F(6) = out_6;
      out_F(7) = out_7;
      out_F(8) = out_8;
      out_F(9) = out_9;
      out_F(10) = out_10;
    end % F
    %
    % - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    %
    function out_JF_x = JF_x( this, in_1, in_2, in_3, t )
      % Evaluate the Jacobian of F with respect to x.

      % Extract properties
      m__1 = this.m_m__1;
      m__2 = this.m_m__2;
      g = this.m_g;
      ell__1 = this.m_ell__1;
      ell__2 = this.m_ell__2;

      % Extract inputs
      x__1 = in_1(1);
      y__1 = in_1(2);
      x__2 = in_1(3);
      y__2 = in_1(4);
      u__1 = in_1(5);
      v__1 = in_1(6);
      u__2 = in_1(7);
      v__2 = in_1(8);
      lambda__1 = in_1(9);
      lambda__2 = in_1(10);
      x__1_dot = in_2(1);
      y__1_dot = in_2(2);
      x__2_dot = in_2(3);
      y__2_dot = in_2(4);
      u__1_dot = in_2(5);
      v__1_dot = in_2(6);
      u__2_dot = in_2(7);
      v__2_dot = in_2(8);
      lambda__1_dot = in_2(9);
      lambda__2_dot = in_2(10);

      % Evaluate function
      t1 = 0.1e1 / m__1;
      out_5_1 = 2 * t1 * lambda__1;
      out_9_1 = (4 * x__1 * lambda__1_dot + 4 * lambda__1 * x__1_dot) * t1;
      out_6_2 = out_5_1;
      out_9_2 = (4 * y__1 * lambda__1_dot + 4 * lambda__1 * y__1_dot) * t1;
      t11 = 0.1e1 / m__2;
      out_7_3 = 2 * t11 * lambda__2;
      out_10_3 = (4 * x__2 * lambda__2_dot + 4 * lambda__2 * x__2_dot) * t11;
      out_8_4 = out_7_3;
      out_10_4 = (4 * y__2 * lambda__2_dot + 4 * lambda__2 * y__2_dot) * t11;
      out_1_5 = -1;
      out_9_5 = -2 * u__1_dot;
      out_2_6 = -1;
      out_9_6 = -2 * v__1_dot;
      out_3_7 = -1;
      out_10_7 = -2 * u__2_dot;
      out_4_8 = -1;
      out_10_8 = -2 * v__2_dot;
      out_5_9 = 2 * t1 * x__1;
      out_6_9 = 2 * t1 * y__1;
      out_9_9 = (4 * x__1 * x__1_dot + 4 * y__1 * y__1_dot) * t1;
      out_7_10 = 2 * t11 * x__2;
      out_8_10 = 2 * t11 * y__2;
      out_10_10 = (4 * x__2 * x__2_dot + 4 * y__2 * y__2_dot) * t11;

      % Store outputs
      out_JF_x = zeros(10, 10);
      out_JF_x(5, 1) = out_5_1;
      out_JF_x(9, 1) = out_9_1;
      out_JF_x(6, 2) = out_6_2;
      out_JF_x(9, 2) = out_9_2;
      out_JF_x(7, 3) = out_7_3;
      out_JF_x(10, 3) = out_10_3;
      out_JF_x(8, 4) = out_8_4;
      out_JF_x(10, 4) = out_10_4;
      out_JF_x(1, 5) = out_1_5;
      out_JF_x(9, 5) = out_9_5;
      out_JF_x(2, 6) = out_2_6;
      out_JF_x(9, 6) = out_9_6;
      out_JF_x(3, 7) = out_3_7;
      out_JF_x(10, 7) = out_10_7;
      out_JF_x(4, 8) = out_4_8;
      out_JF_x(10, 8) = out_10_8;
      out_JF_x(5, 9) = out_5_9;
      out_JF_x(6, 9) = out_6_9;
      out_JF_x(9, 9) = out_9_9;
      out_JF_x(7, 10) = out_7_10;
      out_JF_x(8, 10) = out_8_10;
      out_JF_x(10, 10) = out_10_10;
    end % JF_x
    %
    % - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    %
    function out_JF_x_dot = JF_x_dot( this, in_1, in_2, in_3, t )
      % Evaluate the Jacobian of F with respect to x_dot.

      % Extract properties
      m__1 = this.m_m__1;
      m__2 = this.m_m__2;
      g = this.m_g;
      ell__1 = this.m_ell__1;
      ell__2 = this.m_ell__2;

      % Extract inputs
      x__1 = in_1(1);
      y__1 = in_1(2);
      x__2 = in_1(3);
      y__2 = in_1(4);
      u__1 = in_1(5);
      v__1 = in_1(6);
      u__2 = in_1(7);
      v__2 = in_1(8);
      lambda__1 = in_1(9);
      lambda__2 = in_1(10);
      x__1_dot = in_2(1);
      y__1_dot = in_2(2);
      x__2_dot = in_2(3);
      y__2_dot = in_2(4);
      u__1_dot = in_2(5);
      v__1_dot = in_2(6);
      u__2_dot = in_2(7);
      v__2_dot = in_2(8);
      lambda__1_dot = in_2(9);
      lambda__2_dot = in_2(10);

      % Evaluate function
      out_1_1 = 1;
      t2 = 0.1e1 / m__1;
      out_9_1 = 4 * t2 * lambda__1 * x__1;
      out_2_2 = 1;
      out_9_2 = t2 * (g * m__1 + 4 * y__1 * lambda__1);
      out_3_3 = 1;
      t9 = 0.1e1 / m__2;
      out_10_3 = 4 * t9 * lambda__2 * x__2;
      out_4_4 = 1;
      out_10_4 = t9 * (g * m__2 + 4 * y__2 * lambda__2);
      out_5_5 = 1;
      out_9_5 = -2 * u__1;
      out_6_6 = 1;
      out_9_6 = -2 * v__1;
      out_7_7 = 1;
      out_10_7 = -2 * u__2;
      out_8_8 = 1;
      out_10_8 = -2 * v__2;
      t19 = x__1 ^ 2;
      t20 = y__1 ^ 2;
      out_9_9 = t2 * (2 * t19 + 2 * t20);
      t23 = x__2 ^ 2;
      t24 = y__2 ^ 2;
      out_10_10 = t9 * (2 * t23 + 2 * t24);

      % Store outputs
      out_JF_x_dot = zeros(10, 10);
      out_JF_x_dot(1, 1) = out_1_1;
      out_JF_x_dot(9, 1) = out_9_1;
      out_JF_x_dot(2, 2) = out_2_2;
      out_JF_x_dot(9, 2) = out_9_2;
      out_JF_x_dot(3, 3) = out_3_3;
      out_JF_x_dot(10, 3) = out_10_3;
      out_JF_x_dot(4, 4) = out_4_4;
      out_JF_x_dot(10, 4) = out_10_4;
      out_JF_x_dot(5, 5) = out_5_5;
      out_JF_x_dot(9, 5) = out_9_5;
      out_JF_x_dot(6, 6) = out_6_6;
      out_JF_x_dot(9, 6) = out_9_6;
      out_JF_x_dot(7, 7) = out_7_7;
      out_JF_x_dot(10, 7) = out_10_7;
      out_JF_x_dot(8, 8) = out_8_8;
      out_JF_x_dot(10, 8) = out_10_8;
      out_JF_x_dot(9, 9) = out_9_9;
      out_JF_x_dot(10, 10) = out_10_10;
    end % JF_x_dot
    %
    % - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    %
    function out_JF_v = JF_v( this, in_1, in_2, in_3, t )
      % Evaluate the Jacobian of F with respect to v.

      % Extract properties
      m__1 = this.m_m__1;
      m__2 = this.m_m__2;
      g = this.m_g;
      ell__1 = this.m_ell__1;
      ell__2 = this.m_ell__2;

      % Extract inputs
      x__1 = in_1(1);
      y__1 = in_1(2);
      x__2 = in_1(3);
      y__2 = in_1(4);
      u__1 = in_1(5);
      v__1 = in_1(6);
      u__2 = in_1(7);
      v__2 = in_1(8);
      lambda__1 = in_1(9);
      lambda__2 = in_1(10);
      x__1_dot = in_2(1);
      y__1_dot = in_2(2);
      x__2_dot = in_2(3);
      y__2_dot = in_2(4);
      u__1_dot = in_2(5);
      v__1_dot = in_2(6);
      u__2_dot = in_2(7);
      v__2_dot = in_2(8);
      lambda__1_dot = in_2(9);
      lambda__2_dot = in_2(10);

      % Evaluate function
      % No body

      % Store outputs
      out_JF_v = zeros(10, 0);
    end % JF_v
    %
    % - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    %
    function out_v = v( this, in_1, t )
      % Evaluate the the veils v.

      % Extract properties
      m__1 = this.m_m__1;
      m__2 = this.m_m__2;
      g = this.m_g;
      ell__1 = this.m_ell__1;
      ell__2 = this.m_ell__2;

      % Extract inputs
      x__1 = in_1(1);
      y__1 = in_1(2);
      x__2 = in_1(3);
      y__2 = in_1(4);
      u__1 = in_1(5);
      v__1 = in_1(6);
      u__2 = in_1(7);
      v__2 = in_1(8);
      lambda__1 = in_1(9);
      lambda__2 = in_1(10);

      % Evaluate function
      % No body

      % Store outputs
      out_v = zeros(0, 1);
    end % v
    %
    % - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    %
    function out_Jv_x = Jv_x( this, in_1, in_2, t )
      % Evaluate the Jacobian of v with respect to x.

      % Extract properties
      m__1 = this.m_m__1;
      m__2 = this.m_m__2;
      g = this.m_g;
      ell__1 = this.m_ell__1;
      ell__2 = this.m_ell__2;

      % Extract inputs
      x__1 = in_1(1);
      y__1 = in_1(2);
      x__2 = in_1(3);
      y__2 = in_1(4);
      u__1 = in_1(5);
      v__1 = in_1(6);
      u__2 = in_1(7);
      v__2 = in_1(8);
      lambda__1 = in_1(9);
      lambda__2 = in_1(10);

      % Evaluate function
      % No body

      % Store outputs
      out_Jv_x = zeros(0, 10);
    end % Jv_x
    %
    % - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    %
    function out_h = h( this, in_1, in_2, t )
      % Calculate the residual of the invariants h.

      % Extract properties
      m__1 = this.m_m__1;
      m__2 = this.m_m__2;
      g = this.m_g;
      ell__1 = this.m_ell__1;
      ell__2 = this.m_ell__2;

      % Extract inputs
      x__1 = in_1(1);
      y__1 = in_1(2);
      x__2 = in_1(3);
      y__2 = in_1(4);
      u__1 = in_1(5);
      v__1 = in_1(6);
      u__2 = in_1(7);
      v__2 = in_1(8);
      lambda__1 = in_1(9);
      lambda__2 = in_1(10);

      % Evaluate function
      t1 = ell__1 ^ 2;
      t2 = x__1 ^ 2;
      t3 = y__1 ^ 2;
      out_1 = t1 - t2 - t3;
      t4 = ell__2 ^ 2;
      t5 = x__2 ^ 2;
      t6 = y__2 ^ 2;
      out_2 = t4 - t5 - t6;
      out_3 = u__1 * x__1 + v__1 * y__1;
      out_4 = u__2 * x__2 + v__2 * y__2;
      t15 = u__1 ^ 2;
      t16 = v__1 ^ 2;
      out_5 = 0.1e1 / m__1 * (lambda__1 * (2 * t2 + 2 * t3) + (g * y__1 - t15 - t16) * m__1);
      t25 = u__2 ^ 2;
      t26 = v__2 ^ 2;
      out_6 = 0.1e1 / m__2 * (lambda__2 * (2 * t5 + 2 * t6) + (g * y__2 - t25 - t26) * m__2);

      % Store outputs
      out_h = zeros(6, 1);
      out_h(1) = out_1;
      out_h(2) = out_2;
      out_h(3) = out_3;
      out_h(4) = out_4;
      out_h(5) = out_5;
      out_h(6) = out_6;
    end % h
    %
    % - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    %
    function out_Jh_x = Jh_x( this, in_1, in_2, t )
      % Calculate the Jacobian of h with respect to x.

      % Extract properties
      m__1 = this.m_m__1;
      m__2 = this.m_m__2;
      g = this.m_g;
      ell__1 = this.m_ell__1;
      ell__2 = this.m_ell__2;

      % Extract inputs
      x__1 = in_1(1);
      y__1 = in_1(2);
      x__2 = in_1(3);
      y__2 = in_1(4);
      u__1 = in_1(5);
      v__1 = in_1(6);
      u__2 = in_1(7);
      v__2 = in_1(8);
      lambda__1 = in_1(9);
      lambda__2 = in_1(10);

      % Evaluate function
      out_1_1 = -2 * x__1;
      out_3_1 = u__1;
      t3 = 0.1e1 / m__1;
      out_5_1 = 4 * t3 * lambda__1 * x__1;
      out_1_2 = -2 * y__1;
      out_3_2 = v__1;
      out_5_2 = t3 * (g * m__1 + 4 * y__1 * lambda__1);
      out_2_3 = -2 * x__2;
      out_4_3 = u__2;
      t12 = 0.1e1 / m__2;
      out_6_3 = 4 * t12 * lambda__2 * x__2;
      out_2_4 = -2 * y__2;
      out_4_4 = v__2;
      out_6_4 = t12 * (g * m__2 + 4 * y__2 * lambda__2);
      out_3_5 = x__1;
      out_5_5 = -2 * u__1;
      out_3_6 = y__1;
      out_5_6 = -2 * v__1;
      out_4_7 = x__2;
      out_6_7 = -2 * u__2;
      out_4_8 = y__2;
      out_6_8 = -2 * v__2;
      t23 = x__1 ^ 2;
      t24 = y__1 ^ 2;
      out_5_9 = t3 * (2 * t23 + 2 * t24);
      t27 = x__2 ^ 2;
      t28 = y__2 ^ 2;
      out_6_10 = t12 * (2 * t27 + 2 * t28);

      % Store outputs
      out_Jh_x = zeros(6, 10);
      out_Jh_x(1, 1) = out_1_1;
      out_Jh_x(3, 1) = out_3_1;
      out_Jh_x(5, 1) = out_5_1;
      out_Jh_x(1, 2) = out_1_2;
      out_Jh_x(3, 2) = out_3_2;
      out_Jh_x(5, 2) = out_5_2;
      out_Jh_x(2, 3) = out_2_3;
      out_Jh_x(4, 3) = out_4_3;
      out_Jh_x(6, 3) = out_6_3;
      out_Jh_x(2, 4) = out_2_4;
      out_Jh_x(4, 4) = out_4_4;
      out_Jh_x(6, 4) = out_6_4;
      out_Jh_x(3, 5) = out_3_5;
      out_Jh_x(5, 5) = out_5_5;
      out_Jh_x(3, 6) = out_3_6;
      out_Jh_x(5, 6) = out_5_6;
      out_Jh_x(4, 7) = out_4_7;
      out_Jh_x(6, 7) = out_6_7;
      out_Jh_x(4, 8) = out_4_8;
      out_Jh_x(6, 8) = out_6_8;
      out_Jh_x(5, 9) = out_5_9;
      out_Jh_x(6, 10) = out_6_10;
    end % Jh_x
    %
    % - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    %
    function out_Jh_v = Jh_v( this, in_1, in_2, t )
      % Calculate the Jacobian of h with respect to v.

      % Extract properties
      m__1 = this.m_m__1;
      m__2 = this.m_m__2;
      g = this.m_g;
      ell__1 = this.m_ell__1;
      ell__2 = this.m_ell__2;

      % Extract inputs
      x__1 = in_1(1);
      y__1 = in_1(2);
      x__2 = in_1(3);
      y__2 = in_1(4);
      u__1 = in_1(5);
      v__1 = in_1(6);
      u__2 = in_1(7);
      v__2 = in_1(8);
      lambda__1 = in_1(9);
      lambda__2 = in_1(10);

      % Evaluate function
      % No body

      % Store outputs
      out_Jh_v = zeros(6, 0);
    end % Jh_v
    %
    % - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    %
  end
end % DoublePendulum

% That's All Folks!
