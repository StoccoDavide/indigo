% +--------------------------------------------------------------------------+
% | 'Indigo' module version 1.0 - BSD 3-Clause License - Copyright (c) 2023  |
% | Current version authors:                                                 |
% |   Davide Stocco and Enrico Bertolazzi.                                   |
% +--------------------------------------------------------------------------+

% Matlab generated code for implicit system: CarAxis
% This file has been automatically generated by Indigo.
% DISCLAIMER: If you need to edit it, do it wisely!

classdef CarAxis < Indigo.DAE.Implicit
  %
  % No class description provided.
  %
  properties (SetAccess = protected, Hidden = true)
    % User data
    m_L = 1.0;
    m_L__0 = .5;
    m_varepsilon = .1e-1;
    m_M = 10.0;
    m_h = .1;
    m_tau = .6283185308;
    m_omega = 10.0;
  end
  %
  methods
    %
    % - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    %
    function this = CarAxis( varargin )
      % Class constructor.

      % Superclass constructor
      num_eqns = 10;
      num_veil = 0;
      num_invs = 6;
      this = this@Indigo.DAE.Implicit('CarAxis', num_eqns, num_veil, num_invs);

      % User data
      if (nargin == 0)
        % Keep default values
      elseif (nargin == 1 && isstruct(varargin{1}))
        this.m_L = varargin{1}.L;
        this.m_L__0 = varargin{1}.L__0;
        this.m_varepsilon = varargin{1}.varepsilon;
        this.m_M = varargin{1}.M;
        this.m_h = varargin{1}.h;
        this.m_tau = varargin{1}.tau;
        this.m_omega = varargin{1}.omega;
      elseif (nargin == 7)
        this.m_L = varargin{1};
        this.m_L__0 = varargin{2};
        this.m_varepsilon = varargin{3};
        this.m_M = varargin{4};
        this.m_h = varargin{5};
        this.m_tau = varargin{6};
        this.m_omega = varargin{7};
      else
        error('wrong number of input arguments.');
      end
    end % CarAxis
    %
    % - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    %
    function out_F = F( this, in_1, in_2, ~, t )
      % Evaluate the function F.

      % Extract properties
      L = this.m_L;
      L__0 = this.m_L__0;
      varepsilon = this.m_varepsilon;
      M = this.m_M;
      h = this.m_h;
      omega = this.m_omega;

      % Extract inputs
      x__l = in_1(1);
      y__l = in_1(2);
      x__r = in_1(3);
      y__r = in_1(4);
      u__l = in_1(5);
      v__l = in_1(6);
      u__r = in_1(7);
      v__r = in_1(8);
      lambda__1 = in_1(9);
      lambda__2 = in_1(10);
      x__l_dot = in_2(1);
      y__l_dot = in_2(2);
      x__r_dot = in_2(3);
      y__r_dot = in_2(4);
      u__l_dot = in_2(5);
      v__l_dot = in_2(6);
      u__r_dot = in_2(7);
      v__r_dot = in_2(8);
      lambda__1_dot = in_2(9);
      lambda__2_dot = in_2(10);

      % Evaluate function
      out_1 = -u__r + x__r_dot;
      out_2 = -v__r + y__r_dot;
      t1 = varepsilon ^ 2;
      t2 = M * t1;
      t5 = omega * t;
      t6 = sin(t5);
      t10 = y__r ^ 2;
      t11 = L ^ 2;
      t12 = cos(t5);
      t13 = t12 ^ 2;
      t14 = h ^ 2;
      t16 = t14 * t13 + t11 - t14;
      t17 = sqrt(t16);
      t20 = x__r ^ 2;
      t21 = -2 * h * t6 * y__r - 2 * t17 * x__r + t10 + t11 + t20;
      t22 = sqrt(t21);
      t23 = 0.1e1 / t22;
      t31 = t17 - x__r;
      out_3 = u__r_dot * t2 / 2 - (t22 * (t17 + (2 * lambda__2 - 1) * x__r - 2 * lambda__2 * x__l) - t31 * L__0) * t23;
      t37 = t6 * h;
      t41 = t2 / 4;
      t45 = y__r - t37;
      out_4 = v__r_dot * t2 / 2 - 2 * (t22 * (t37 / 2 + (lambda__2 - 0.1e1 / 0.2e1) * y__r - t41 - lambda__2 * y__l) + t45 * L__0 / 2) * t23;
      out_5 = -u__l + x__l_dot;
      out_6 = -v__l + y__l_dot;
      t53 = x__l - x__r;
      t58 = x__l ^ 2;
      t59 = y__l ^ 2;
      t60 = t58 + t59;
      t61 = sqrt(t60);
      t63 = x__l * L__0;
      t65 = 0.1e1 / t61;
      out_7 = u__l_dot * t2 / 2 - t65 * (t61 * (t17 * lambda__1 + 2 * lambda__2 * t53 - x__l) + t63);
      t78 = y__l * L__0;
      t79 = 2 * t78;
      out_8 = v__l_dot * t2 / 2 + (t61 * (-2 * t6 * h * lambda__1 + (-4 * lambda__2 + 2) * y__l + t2 + 4 * y__r * lambda__2) - t79) * t65 / 2;
      t85 = t1 * omega;
      t88 = y__l - y__r;
      t90 = omega ^ 2;
      t93 = t1 * t90 * M / 4;
      t94 = -t93 - 0.1e1 / 0.2e1;
      t97 = (t88 * lambda__2 + y__l * t94 - t41) * h;
      t101 = v__l * t85 * h * M * t12 + lambda__1 * t11 + 2 * t6 * t97;
      t102 = t65 * t101;
      t103 = t17 * t16;
      t107 = -t93 + lambda__2 - 0.1e1 / 0.2e1;
      t108 = t14 ^ 2;
      t110 = t13 ^ 2;
      t112 = L - h;
      t114 = L + h;
      t116 = t13 * t14 * t114;
      t119 = t11 - t14;
      t124 = lambda__2 * t119 - t14 * t94 - t11 / 2;
      t130 = lambda__2 * x__r;
      t131 = x__l * t107 - t130;
      t132 = t108 * t131;
      t134 = t13 * t12;
      t135 = t134 * M;
      t141 = t131 * t112;
      t144 = M * u__l;
      t147 = t114 * t112;
      t157 = t110 * t132 - t85 * t108 * t6 * u__l * t135 / 2 + 2 * t116 * t141 - t12 * t147 * t85 * t14 * t6 * t144 / 2 + t114 * (x__l * t124 - t147 * t130) * t112;
      t158 = t65 * t157;
      t160 = t16 ^ 2;
      t161 = t160 * L__0;
      t165 = 0.1e1 / t103;
      t166 = 0.1e1 / t1;
      t168 = 0.1e1 / M;
      t169 = t168 * t166 * t165;
      t172 = t6 * L__0;
      t175 = y__l * h * t172 + t61 * t101;
      t181 = t103 * t175 / 2 + t61 * t157 + x__l * t161 / 2;
      t183 = 0.1e1 / t61 / t60;
      t185 = t165 * t183 * t181;
      t186 = t168 * t166;
      t187 = x__l * t186;
      t193 = t61 * t6;
      t205 = y__l * t186;
      t215 = t112 ^ 2;
      t217 = t114 ^ 2;
      t234 = omega * t14;
      t246 = h * t12;
      t254 = t88 * h;
      t281 = t12 * omega;
      t295 = t6 * t234;
      t304 = t6 ^ 2;
      t306 = t1 * t90;
      t319 = t6 * omega * t12 * t14;
      out_9 = x__l_dot * (-4 * t169 * t65 * (t103 * x__l * t102 / 2 + t61 * (t110 * t108 * t107 + 2 * t116 * t107 * t112 + t114 * t124 * t112) + x__l * t158 + t161 / 2) + 4 * t187 * t185) + y__l_dot * (-4 * t169 * t65 * (t103 * (2 * t193 * t107 * h + h * t172 + y__l * t102) / 2 + y__l * t158) + 4 * t205 * t185) - 4 * x__r_dot * t186 * t165 * (-t110 * t108 * lambda__2 - 2 * t116 * lambda__2 * t112 - t217 * lambda__2 * t215) + 4 * y__r_dot * t186 * t6 * lambda__2 * h - 4 * u__l_dot * t186 * t165 * (-t12 * t114 * t112 * t1 * t234 * t6 * M / 2 - t1 * omega * t108 * t6 * t135 / 2) - 2 * omega * v__l_dot * t246 - 2 * lambda__1_dot * t168 * t166 * t11 - 4 * lambda__2_dot * t186 * t165 * t65 * (t103 * t193 * t254 + t61 * (t110 * t108 * t53 + 2 * t116 * t53 * t112 + t114 * (-t114 * t112 * x__r + x__l * t119) * t112)) - 4 * t169 * t65 * (t103 * (t61 * (-v__l * t1 * h * M * t6 * t90 + 2 * t281 * t97) + h * y__l * t12 * L__0 * omega) / 2 - 0.3e1 / 0.2e1 * t295 * t12 * t17 * t175 + t61 * (-4 * t6 * omega * t134 * t132 + 0.3e1 / 0.2e1 * t306 * t108 * t304 * u__l * t13 * M - t1 * t108 * t90 * u__l * t110 * M / 2 - 4 * t319 * t114 * t141 - t147 * t1 * t14 * t13 * t90 * t144 / 2 + t147 * t306 * t14 * t304 * t144 / 2) - 2 * t319 * x__l * t16 * L__0) - 12 * t295 * t12 * t168 * t166 / t17 / t160 * t65 * t181;
      t352 = lambda__1 - 1;
      t353 = t352 * t65;
      t354 = t17 * t53;
      t358 = t352 * t61;
      t360 = 2 * t17 * t358;
      t362 = 8 * lambda__2 - 2;
      t366 = -16 * lambda__2 + 4;
      t367 = x__r * t366;
      t370 = t352 * h;
      t378 = y__r * t366;
      t381 = u__l ^ 2;
      t384 = u__r ^ 2;
      t385 = v__l - v__r;
      t386 = t385 ^ 2;
      t390 = 2 * t6 * t88 * t370 + t58 * t362 + x__l * t367 + t20 * t362 + t59 * t362 + y__l * t378 + t10 * t362 + M * (-2 * u__r * u__l + t381 + t384 + t386) * t1;
      t391 = t65 * t390;
      t399 = -t31;
      t403 = -t53;
      t406 = x__l * x__r;
      t408 = t17 * t403 - t6 * t254 + t88 * y__r - t20 + t406;
      t409 = t65 * t408;
      t415 = t168 * t166 * t65;
      t424 = 2 * t354 * t358 + t61 * t390 + 2 * L__0 * (t88 * y__l - t406 + t58);
      t429 = -2 * L__0 * t61 * t408 + t22 * t424;
      t431 = t183 * t23 * t429;
      t440 = 2 * t6 * t370;
      t472 = t23 * t424;
      t473 = 2 * t399;
      t488 = t65 / t22 / t21 * t429;
      t500 = 2 * t45;
      t517 = -4 * u__l + 4 * u__r;
      t520 = -4 * t385;
      t547 = 0.1e1 / t17;
      t563 = 2 * t295 * t12 * t547 * x__r - 2 * t246 * y__r * omega;
      out_10 = x__l_dot * (-2 * t415 * t23 * (t22 * (2 * x__l * t354 * t353 + t360 + t61 * (2 * x__l * t362 + t367) + x__l * t391 + 2 * (2 * x__l - x__r) * L__0) - 2 * L__0 * t61 * t399 - 2 * t63 * t409) + 2 * t187 * t431) + y__l_dot * (-2 * t415 * t23 * (t22 * (2 * y__l * t354 * t353 + t61 * (2 * y__l * t362 + t378 + t440) + y__l * t391 + 2 * (2 * y__l - y__r) * L__0) - 2 * L__0 * t61 * t45 - 2 * t78 * t409) + 2 * t205 * t431) + x__r_dot * (-2 * t415 * t23 * (t22 * (-t360 + t61 * (2 * x__r * t362 + x__l * t366) - 2 * t63) + t473 * t472 / 2 - 2 * L__0 * t61 * (t17 + x__l - 2 * x__r)) + t473 * t186 * t488) + y__r_dot * (-2 * t415 * t23 * (t22 * (t61 * (2 * y__r * t362 + y__l * t366 - t440) - t79) + t500 * t472 / 2 - 2 * L__0 * t61 * (t37 + y__l - 2 * y__r)) + t500 * t186 * t488) + u__l_dot * t517 + v__l_dot * t520 - u__r_dot * t517 - v__r_dot * t520 - 2 * lambda__1_dot * t186 * t65 * (2 * t17 * t53 * t61 + 2 * t193 * t254) - 2 * lambda__2_dot * t168 * t166 * (-16 * y__l * y__r + 8 * t10 + 8 * t20 - 16 * t406 + 8 * t58 + 8 * t59) - 2 * t415 * t23 * (t22 * (2 * t61 * t281 * t88 * t370 - 2 * t319 * t547 * t53 * t358) + t563 * t472 / 2 - 2 * L__0 * t61 * (-t295 * t12 * t547 * t403 - t281 * t254)) + t563 * t186 * t488;

      % Store outputs
      out_F = zeros(10, 1);
      out_F(1) = out_1;
      out_F(2) = out_2;
      out_F(3) = out_3;
      out_F(4) = out_4;
      out_F(5) = out_5;
      out_F(6) = out_6;
      out_F(7) = out_7;
      out_F(8) = out_8;
      out_F(9) = out_9;
      out_F(10) = out_10;
    end % F
    %
    % - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    %
    function out_JF_x = JF_x( this, in_1, in_2, ~, t )
      % Evaluate the Jacobian of F with respect to x.

      % Extract properties
      L = this.m_L;
      L__0 = this.m_L__0;
      varepsilon = this.m_varepsilon;
      M = this.m_M;
      h = this.m_h;
      omega = this.m_omega;

      % Extract inputs
      x__l = in_1(1);
      y__l = in_1(2);
      x__r = in_1(3);
      y__r = in_1(4);
      u__l = in_1(5);
      v__l = in_1(6);
      u__r = in_1(7);
      v__r = in_1(8);
      lambda__1 = in_1(9);
      lambda__2 = in_1(10);
      x__l_dot = in_2(1);
      y__l_dot = in_2(2);
      x__r_dot = in_2(3);
      y__r_dot = in_2(4);
      u__l_dot = in_2(5);
      v__l_dot = in_2(6);
      u__r_dot = in_2(7);
      v__r_dot = in_2(8);
      lambda__1_dot = in_2(9);
      lambda__2_dot = in_2(10);

      % Evaluate function
      out_3_1 = 2 * lambda__2;
      t1 = out_3_1 - 1;
      t2 = x__l ^ 2;
      t3 = y__l ^ 2;
      t4 = t2 + t3;
      t5 = sqrt(t4);
      t7 = x__l - x__r;
      t8 = 2 * t7;
      t10 = omega * t;
      t11 = cos(t10);
      t12 = t11 ^ 2;
      t13 = h ^ 2;
      t14 = t13 * t12;
      t15 = L ^ 2;
      t16 = t14 + t15 - t13;
      t17 = sqrt(t16);
      t19 = t17 * lambda__1 + lambda__2 * t8 - x__l;
      t20 = 0.1e1 / t5;
      t26 = x__l * L__0;
      t29 = 0.1e1 / t5 / t4;
      t30 = t29 * (t5 * t19 + t26);
      out_7_1 = -t20 * (x__l * t20 * t19 + t5 * t1 + L__0) + x__l * t30;
      t33 = sin(t10);
      t37 = -4 * lambda__2 + 2;
      t39 = varepsilon ^ 2;
      t40 = M * t39;
      t43 = -2 * t33 * h * lambda__1 + y__l * t37 + 4 * y__r * lambda__2 + t40;
      t45 = y__l * L__0;
      t46 = 2 * t45;
      t48 = (t5 * t43 - t46) * t29;
      t50 = 0.1e1 / t4;
      out_8_1 = x__l * t43 * t50 / 2 - x__l * t48 / 2;
      t56 = t39 * omega;
      t59 = y__l - y__r;
      t61 = omega ^ 2;
      t62 = t61 * M;
      t64 = t39 * t62 / 4;
      t65 = -t64 - 0.1e1 / 0.2e1;
      t67 = t40 / 4;
      t69 = (t59 * lambda__2 + y__l * t65 - t67) * h;
      t73 = v__l * t56 * h * M * t11 + lambda__1 * t15 + 2 * t33 * t69;
      t74 = t29 * t73;
      t75 = t17 * t16;
      t79 = t20 * t73;
      t82 = -t64 + lambda__2 - 0.1e1 / 0.2e1;
      t83 = t13 ^ 2;
      t84 = t83 * t82;
      t85 = t12 ^ 2;
      t87 = L - h;
      t88 = t82 * t87;
      t89 = L + h;
      t91 = t12 * t13 * t89;
      t94 = t15 - t13;
      t99 = lambda__2 * t94 - t13 * t65 - t15 / 2;
      t102 = t89 * t99 * t87 + t85 * t84 + 2 * t91 * t88;
      t103 = t20 * t102;
      t107 = lambda__2 * x__r;
      t108 = x__l * t82 - t107;
      t109 = t83 * t108;
      t111 = t12 * t11;
      t112 = t111 * M;
      t118 = t108 * t87;
      t121 = M * u__l;
      t124 = t89 * t87;
      t134 = t85 * t109 - t56 * t83 * t33 * u__l * t112 / 2 + 2 * t91 * t118 - t11 * t124 * t56 * t13 * t33 * t121 / 2 + t89 * (-t124 * t107 + x__l * t99) * t87;
      t135 = t29 * t134;
      t137 = t20 * t134;
      t140 = 0.1e1 / t75;
      t141 = 0.1e1 / t39;
      t143 = 0.1e1 / M;
      t144 = t143 * t141 * t140;
      t147 = t75 * x__l;
      t152 = t16 ^ 2;
      t153 = t152 * L__0;
      t155 = t147 * t79 / 2 + t5 * t102 + x__l * t137 + t153 / 2;
      t157 = t140 * t29 * t155;
      t158 = t143 * t141;
      t159 = x__l * t158;
      t163 = t33 * L__0;
      t166 = y__l * h * t163 + t5 * t73;
      t172 = t75 * t166 / 2 + t5 * t134 + x__l * t153 / 2;
      t173 = t4 ^ 2;
      t175 = 0.1e1 / t5 / t173;
      t177 = t140 * t175 * t172;
      t178 = t2 * t158;
      t181 = t29 * t172;
      t183 = 4 * t144 * t181;
      t186 = t82 * h;
      t187 = t20 * t33;
      t188 = x__l * t187;
      t191 = y__l * x__l;
      t196 = y__l * t103;
      t197 = t191 * t135;
      t202 = t5 * t33;
      t207 = h * t163 + 2 * t202 * t186 + y__l * t79;
      t211 = t75 * t207 / 2 + y__l * t137;
      t213 = t140 * t29 * t211;
      t215 = 4 * t159 * t213;
      t216 = y__l * t158;
      t218 = 4 * t216 * t157;
      t219 = t191 * t158;
      t221 = 12 * t219 * t177;
      t224 = t59 * h;
      t225 = t33 * t224;
      t226 = t75 * t20;
      t227 = x__l * t226;
      t229 = t85 * t83;
      t231 = 2 * t14 * t124;
      t236 = t83 * t7;
      t238 = t7 * t87;
      t247 = t85 * t236 + 2 * t91 * t238 + t89 * (-t89 * t87 * x__r + x__l * t94) * t87;
      t248 = t20 * t247;
      t251 = t20 * (t227 * t225 + t5 * (t89 * t94 * t87 + t229 + t231) + x__l * t248);
      t253 = lambda__2_dot * t158;
      t259 = t75 * t202 * t224 + t5 * t247;
      t261 = t140 * t29 * t259;
      t267 = M * t33 * t61;
      t268 = t39 * h;
      t271 = t11 * omega;
      t274 = -v__l * t268 * t267 + 2 * t271 * t69;
      t275 = t20 * t274;
      t278 = t17 * x__l;
      t280 = t13 * t11;
      t281 = t33 * omega;
      t282 = t281 * t280;
      t286 = t33 * omega * t111;
      t295 = t12 * M;
      t297 = t33 ^ 2;
      t299 = t39 * t61;
      t303 = t85 * M;
      t306 = t39 * t83 * t61;
      t315 = t124 * t39 * t13;
      t320 = t124 * t299;
      t323 = -4 * t286 * t109 + 0.3e1 / 0.2e1 * t299 * t83 * t297 * u__l * t295 - t306 * u__l * t303 / 2 - 4 * t282 * t89 * t118 - t315 * t12 * t61 * t121 / 2 + t320 * t13 * t297 * t121 / 2;
      t324 = t20 * t323;
      t326 = t16 * L__0;
      t328 = omega * t13;
      t329 = t33 * t328;
      t337 = L__0 * omega;
      t354 = t140 * t29 * (t75 * (h * y__l * t11 * t337 + t5 * t274) / 2 - 0.3e1 / 0.2e1 * t329 * t11 * t17 * t166 + t5 * t323 - 2 * t282 * x__l * t326);
      t359 = 0.1e1 / t17 / t152;
      t360 = t141 * t359;
      t362 = t11 * t143;
      t363 = t329 * t362;
      t367 = t143 * t360 * t181;
      t369 = x__l * t281 * t280;
      out_9_1 = x__l_dot * (-4 * t144 * t20 * (-t75 * t2 * t74 / 2 + t75 * t79 / 2 + 2 * x__l * t103 - t2 * t135 + t137) + 8 * t159 * t157 - 12 * t178 * t177 + t183) + y__l_dot * (-4 * t144 * t20 * (t75 * (2 * t188 * t186 - t191 * t74) / 2 + t196 - t197) + t215 + t218 - t221) - 4 * t253 * t140 * t251 + 4 * lambda__2_dot * x__l * t158 * t261 - 4 * t144 * t20 * (t147 * t275 / 2 - 0.3e1 / 0.2e1 * t282 * t278 * t79 + t5 * (-4 * t282 * t89 * t88 - 4 * t286 * t84) + x__l * t324 - 2 * t329 * t11 * t326) + 4 * t159 * t354 - 12 * t363 * t360 * t20 * t155 + 12 * t369 * t367;
      t372 = lambda__1 - 1;
      t373 = t372 * t29;
      t374 = t17 * t7;
      t378 = t372 * t20;
      t379 = t278 * t378;
      t382 = 2 * t374 * t378;
      t384 = 16 * lambda__2 - 4;
      t385 = t5 * t384;
      t387 = 8 * lambda__2 - 2;
      t390 = -t384;
      t391 = x__r * t390;
      t392 = 2 * x__l * t387 + t391;
      t393 = t20 * t392;
      t396 = t372 * h;
      t402 = x__r ^ 2;
      t405 = y__r * t390;
      t407 = y__r ^ 2;
      t409 = u__l ^ 2;
      t412 = u__r ^ 2;
      t414 = (v__l - v__r) ^ 2;
      t418 = 2 * t33 * t59 * t396 + t2 * t387 + x__l * t391 + t402 * t387 + t3 * t387 + y__l * t405 + t407 * t387 + M * (-2 * u__r * u__l + t409 + t412 + t414) * t39;
      t419 = t29 * t418;
      t421 = t20 * t418;
      t422 = 4 * L__0;
      t429 = -2 * h * t33 * y__r - 2 * t17 * x__r + t15 + t402 + t407;
      t430 = sqrt(t429);
      t432 = -t17 + x__r;
      t433 = t20 * t432;
      t436 = -t7;
      t438 = x__l * x__r;
      t440 = t17 * t436 + t59 * y__r - t225 - t402 + t438;
      t441 = t29 * t440;
      t445 = t20 * t440;
      t447 = 2 * L__0 * t445;
      t449 = 0.1e1 / t430;
      t451 = t141 * t20;
      t452 = t143 * t451;
      t458 = t372 * t5;
      t460 = 2 * t17 * t458;
      t467 = 2 * x__l * t374 * t378 + t460 + t5 * t392 + x__l * t421 + 2 * (2 * x__l - x__r) * L__0;
      t474 = -2 * L__0 * t5 * t432 - 2 * t26 * t445 + t430 * t467;
      t476 = t29 * t449 * t474;
      t486 = 2 * t374 * t458 + t5 * t418 + 2 * L__0 * (t59 * y__l + t2 - t438);
      t491 = -2 * L__0 * t5 * t440 + t430 * t486;
      t492 = t449 * t491;
      t493 = t175 * t492;
      t499 = 2 * t143 * t141 * t29 * t492;
      t503 = y__l * t17;
      t508 = 2 * t503 * t378;
      t510 = 2 * t33 * t396;
      t513 = 2 * y__l * t387 + t405 + t510;
      t514 = t20 * t513;
      t520 = t33 * h;
      t521 = y__r - t520;
      t522 = t20 * t521;
      t543 = 2 * y__l * t374 * t378 + t5 * t513 + y__l * t421 + 2 * (2 * y__l - y__r) * L__0;
      t550 = -2 * L__0 * t5 * t521 + t430 * t543 - 2 * t45 * t445;
      t552 = t29 * t449 * t550;
      t559 = -2 * t452 * t449 * (t430 * (-2 * x__l * t503 * t7 * t373 - t191 * t419 + y__l * t393 + x__l * t514 + t508) - 2 * t26 * t522 - 2 * t45 * t433 + 2 * x__l * t45 * t441) + 2 * t159 * t552 + 2 * t216 * t476 - 6 * t219 * t493;
      t562 = t5 * t390;
      t566 = 2 * x__r * t387 + x__l * t390;
      t567 = t20 * t566;
      t569 = 2 * L__0;
      t572 = t449 * t467;
      t573 = 2 * t432;
      t576 = L__0 * t5;
      t577 = 2 * t576;
      t579 = t17 + x__l - 2 * x__r;
      t580 = t20 * t579;
      t589 = t5 * t566 - 2 * t26 - t460;
      t591 = t449 * t486;
      t597 = t430 * t589 + t573 * t591 / 2 - 2 * L__0 * t5 * t579;
      t599 = t29 * t449 * t597;
      t603 = 0.1e1 / t430 / t429;
      t605 = t20 * t603 * t474;
      t606 = t573 * t158;
      t608 = t603 * t491;
      t609 = t29 * t608;
      t613 = -2 * t452 * t449 * (t430 * (x__l * t567 - 2 * t379 + t562 - t569) + t573 * t572 / 2 - t577 - 2 * t26 * t580) + 2 * t159 * t599 + t606 * t605 - x__l * t573 * t158 * t609;
      t618 = 2 * y__r * t387 + y__l * t390 - t510;
      t619 = t20 * t618;
      t622 = 2 * t521;
      t626 = t520 + y__l - 2 * y__r;
      t627 = t20 * t626;
      t635 = t5 * t618 - t46;
      t642 = t430 * t635 + t622 * t591 / 2 - 2 * L__0 * t5 * t626;
      t644 = t29 * t449 * t642;
      t647 = t622 * t158;
      t652 = -2 * t452 * t449 * (t430 * x__l * t619 + t622 * t572 / 2 - 2 * t26 * t627) + 2 * t159 * t644 + t647 * t605 - x__l * t622 * t158 * t609;
      t654 = t7 * t20;
      t656 = t5 * t17;
      t660 = t20 * (2 * t188 * t224 + 2 * t278 * t654 + 2 * t656);
      t661 = lambda__1_dot * t158;
      t664 = t7 * t5;
      t668 = 2 * t17 * t664 + 2 * t202 * t224;
      t669 = t29 * t668;
      t670 = t141 * t669;
      t671 = lambda__1_dot * t143;
      t675 = 16 * t7;
      t677 = lambda__2_dot * t143;
      t680 = 0.1e1 / t17;
      t681 = t680 * t7;
      t682 = t681 * t378;
      t686 = t59 * t396;
      t694 = h * t11;
      t700 = 2 * t329 * t11 * t680 * x__r - 2 * t694 * y__r * omega;
      t703 = t33 * t680;
      t707 = 2 * t576 * t328 * t11 * t703;
      t712 = -t329 * t11 * t680 * t436 - t271 * t224;
      t713 = t20 * t712;
      t722 = t5 * t271;
      t725 = -2 * t282 * t681 * t458 + 2 * t722 * t686;
      t732 = t430 * t725 + t700 * t591 / 2 - 2 * L__0 * t5 * t712;
      t734 = t29 * t449 * t732;
      t737 = t700 * t158;
      out_10_1 = x__l_dot * (-2 * t452 * t449 * (t430 * (-2 * t2 * t373 * t374 - t2 * t419 + 2 * t393 * x__l + 4 * t379 + t382 + t385 + t421 + t422) - 4 * t26 * t433 + 2 * t2 * L__0 * t441 - t447) + 4 * t159 * t476 - 6 * t178 * t493 + t499) + y__l_dot * t559 + x__r_dot * t613 + y__r_dot * t652 - 2 * t661 * t660 + 2 * x__l * t671 * t670 - 2 * t677 * t141 * t675 - 2 * t452 * t449 * (t430 * (2 * t20 * t271 * t686 * x__l - 2 * t282 * t458 * t680 - 2 * t369 * t682) + t700 * t572 / 2 - t707 - 2 * t26 * t713) + 2 * t159 * t734 + t737 * t605 - x__l * t700 * t158 * t609;
      out_4_2 = out_3_1;
      out_7_2 = -t19 * t50 * y__l + t30 * y__l;
      out_8_2 = -y__l * t48 / 2 + (t20 * t43 * y__l + t37 * t5 - t569) * t20 / 2;
      t763 = y__l * t187;
      t777 = t3 * t158;
      t782 = t75 * t5;
      t786 = y__l * t248;
      t819 = y__l * t281 * t280;
      out_9_2 = x__l_dot * (-4 * t144 * t20 * (t227 * t33 * t186 - y__l * t147 * t74 / 2 + t196 - t197) + t218 + t215 - t221) + y__l_dot * (-4 * t144 * t20 * (t75 * (4 * t186 * t763 - t3 * t74 + t79) / 2 - t3 * t135 + t137) + 8 * t216 * t213 - 12 * t777 * t177 + t183) - 4 * t253 * t140 * t20 * (t225 * t226 * y__l + t520 * t782 + t786) + 4 * lambda__2_dot * y__l * t158 * t261 - 4 * t144 * t20 * (t75 * (2 * t186 * t722 + t275 * y__l + t337 * t694) / 2 - 0.3e1 / 0.2e1 * t329 * t11 * t17 * t207 + y__l * t324) + 4 * t216 * t354 - 12 * t363 * t360 * t20 * t211 + 12 * t819 * t367;
      t849 = t449 * t543;
      t861 = t20 * t603 * t550;
      t866 = -2 * t452 * t449 * (t430 * (t567 * y__l - t508) + t573 * t849 / 2 - 2 * t45 * t580) + 2 * t216 * t599 + t606 * t861 - y__l * t573 * t158 * t609;
      t885 = -2 * t452 * t449 * (t430 * (t619 * y__l + t562 - t569) + t622 * t849 / 2 - t577 - 2 * t45 * t627) + 2 * t216 * t644 + t647 * t861 - y__l * t622 * t158 * t609;
      t888 = t5 * t520;
      t889 = t763 * t224;
      t892 = t20 * (2 * t503 * t654 + 2 * t888 + 2 * t889);
      t898 = 16 * t59;
      t915 = 2 * L__0 * t5 * omega * t694;
      out_10_2 = x__l_dot * t559 + y__l_dot * (-2 * t452 * t449 * (t430 * (-2 * t3 * t373 * t374 - t3 * t419 + 2 * t514 * y__l + t382 + t385 + t421 + t422) - 4 * t45 * t522 + 2 * t3 * L__0 * t441 - t447) + 4 * t216 * t552 - 6 * t777 * t493 + t499) + x__r_dot * t866 + y__r_dot * t885 - 2 * t661 * t892 + 2 * y__l * t671 * t670 - 2 * t677 * t141 * t898 - 2 * t452 * t449 * (t430 * (2 * t20 * t271 * t686 * y__l + 2 * t396 * t722 - 2 * t682 * t819) + t700 * t849 / 2 + t915 - 2 * t45 * t713) + 2 * t216 * t734 + t737 * t861 - y__l * t700 * t158 * t609;
      t931 = t1 * x__r - 2 * lambda__2 * x__l + t17;
      t936 = (L__0 * t432 + t430 * t931) * t603;
      out_3_3 = t573 * t936 / 2 - (t430 * t1 + t573 * t449 * t931 / 2 + L__0) * t449;
      t946 = lambda__2 - 0.1e1 / 0.2e1;
      t949 = t520 / 2 + y__r * t946 - t67 - lambda__2 * y__l;
      t954 = (t430 * t949 + t521 * L__0 / 2) * t603;
      t956 = 0.1e1 / t429;
      out_4_3 = -t573 * t949 * t956 + t573 * t954;
      out_7_3 = out_4_2;
      t959 = t87 ^ 2;
      t960 = t89 ^ 2;
      t963 = t140 * (-t959 * t960 - t229 - t231);
      t966 = t83 * lambda__2;
      t968 = lambda__2 * t87;
      out_9_3 = -4 * t253 * t963 - 4 * t158 * t140 * (4 * t282 * t89 * t968 + 4 * t286 * t966) - 12 * t282 * t158 * t359 * (-t959 * t960 * lambda__2 - t85 * t966 - 2 * t91 * t968);
      t988 = t430 * t385;
      t989 = t449 * t589;
      t991 = t603 * t486;
      t992 = t573 ^ 2;
      t995 = 4 * t576;
      t1001 = t20 * t603 * t597;
      t1004 = t429 ^ 2;
      t1008 = t20 / t430 / t1004 * t491;
      t1012 = t452 * t608;
      t1013 = 2 * t1012;
      t1016 = t449 * t635;
      t1021 = t573 * t622;
      t1029 = t20 * t603 * t642;
      t1035 = -2 * t452 * t449 * (t573 * t1016 / 2 + t622 * t989 / 2 - t1021 * t991 / 4) + t606 * t1029 + t647 * t1001 - 0.3e1 / 0.2e1 * t1021 * t158 * t1008;
      t1040 = -t675;
      t1050 = t449 * t725;
      t1055 = t573 * t700;
      t1065 = t20 * t603 * t732;
      out_10_3 = x__l_dot * t613 + y__l_dot * t866 + x__r_dot * (-2 * t452 * t449 * (t988 + t573 * t989 - t992 * t991 / 4 + t591 + t995) + 2 * t606 * t1001 - 0.3e1 / 0.2e1 * t992 * t158 * t1008 + t1013) + y__r_dot * t1035 + 4 * t671 * t141 * t17 - 2 * t677 * t141 * t1040 - 2 * t452 * t449 * (2 * t430 * t33 * t328 * t11 * t680 * t458 + t573 * t1050 / 2 + t700 * t989 / 2 - t1055 * t991 / 4 + t282 * t680 * t591 + t707) + t606 * t1065 + t737 * t1001 - 0.3e1 / 0.2e1 * t1055 * t158 * t1008 + 2 * omega * t280 * t703 * t1012;
      out_3_4 = -t622 * t931 * t956 / 2 + t622 * t936 / 2;
      out_4_4 = t622 * t954 - 2 * (t430 * t946 + t622 * t449 * t949 / 2 + L__0 / 2) * t449;
      out_8_4 = out_7_3;
      t1092 = t5 * t11;
      t1093 = t75 * t1092;
      t1095 = t13 * h;
      t1096 = lambda__2 * t1095;
      t1098 = t271 * t656;
      t1105 = 0.1e1 / t16;
      out_9_4 = 4 * t253 * t520 - 4 * t144 * t20 * (-h * omega * t1093 * lambda__2 + 3 * t1096 * t1098 * t297) + 12 * t271 * t158 * t1105 * t297 * t1096;
      t1115 = t622 ^ 2;
      t1131 = -t898;
      t1143 = t622 * t700;
      out_10_4 = x__l_dot * t652 + y__l_dot * t885 + x__r_dot * t1035 + y__r_dot * (-2 * t452 * t449 * (t988 + t622 * t1016 - t1115 * t991 / 4 + t591 + t995) + 2 * t647 * t1029 - 0.3e1 / 0.2e1 * t1115 * t158 * t1008 + t1013) + 4 * t661 * t520 - 2 * t677 * t141 * t1131 - 2 * t452 * t449 * (-2 * t430 * t1092 * omega * t396 + t622 * t1050 / 2 + t700 * t1016 / 2 - t1143 * t991 / 4 - omega * t694 * t591 - t915) + t647 * t1065 + t737 * t1029 - 0.3e1 / 0.2e1 * t1143 * t158 * t1008 - 2 * h * omega * t362 * t451 * t608;
      out_5_5 = -1;
      out_9_5 = -4 * t158 * t140 * (0.3e1 / 0.2e1 * t306 * t297 * t295 - t306 * t303 / 2 - t315 * t12 * t62 / 2 + t320 * t13 * t297 * M / 2) - 12 * t282 * t158 * t359 * (-t11 * t89 * t87 * t39 * t328 * t33 * M / 2 - t39 * omega * t83 * t33 * t112 / 2);
      out_10_5 = -4 * u__l_dot + 4 * u__r_dot;
      out_6_6 = -1;
      out_9_6 = -4 * t144 * t20 * (-t782 * t268 * t267 / 2 - 0.3e1 / 0.2e1 * t33 * t17 * t5 * t39 * t61 * t1095 * t295) - 6 * t33 * t1105 * t61 * t1095 * t12;
      out_10_6 = -4 * v__l_dot + 4 * v__r_dot;
      out_1_7 = -1;
      out_10_7 = -out_10_5;
      out_2_8 = -1;
      out_10_8 = -out_10_6;
      out_7_9 = -t17;
      out_8_9 = -t520;
      t1227 = t449 * t668;
      t1235 = t20 * t956 * t668;
      out_10_9 = x__l_dot * (-2 * t158 * t660 + 2 * t159 * t669) + y__l_dot * (-2 * t158 * t892 + 2 * t216 * t669) + x__r_dot * (-2 * t452 * t449 * (-2 * t430 * t656 + t573 * t1227 / 2) + t606 * t1235) + y__r_dot * (-2 * t452 * t449 * (-2 * t430 * t5 * t520 + t622 * t1227 / 2) + t647 * t1235) - 2 * t452 * t449 * (t430 * (-2 * t282 * t664 * t680 + 2 * t224 * t722) + t700 * t1227 / 2) + t737 * t1235;
      out_3_10 = t8;
      out_4_10 = 2 * t59;
      out_7_10 = -out_3_10;
      out_8_10 = -out_4_10;
      out_9_10 = x__l_dot * (-4 * t144 * t251 + 4 * t159 * t261) + y__l_dot * (-4 * t144 * t20 * (t75 * (2 * t888 + 2 * t889) / 2 + t786) + 4 * t216 * t261) - 4 * x__r_dot * t158 * t963 + 4 * y__r_dot * t158 * t520 - 4 * t144 * t20 * (t1093 * omega * t224 - 3 * t1098 * t297 * t59 * t1095 + t5 * (-4 * t238 * t282 * t89 - 4 * t236 * t286)) - 12 * t363 * t360 * t20 * t259;
      t1314 = -16 * y__l * y__r + 8 * t2 + 8 * t3 + 8 * t402 + 8 * t407 - 16 * t438;
      t1315 = t20 * t1314;
      t1320 = t50 * t1314;
      t1336 = t5 * t1314;
      t1344 = t956 * t1314;
      out_10_10 = x__l_dot * (-2 * t158 * t20 * (t1315 * x__l + t5 * t675) + 2 * t159 * t1320) + y__l_dot * (-2 * t158 * t20 * (t1315 * y__l + t5 * t898) + 2 * t216 * t1320) + x__r_dot * (-2 * t452 * t449 * (t430 * t5 * t1040 + t573 * t449 * t1336 / 2) + t606 * t1344) + y__r_dot * (-2 * t452 * t449 * (t430 * t5 * t1131 + t622 * t449 * t1336 / 2) + t647 * t1344);

      % Store outputs
      out_JF_x = zeros(10, 10);
      out_JF_x(3, 1) = out_3_1;
      out_JF_x(7, 1) = out_7_1;
      out_JF_x(8, 1) = out_8_1;
      out_JF_x(9, 1) = out_9_1;
      out_JF_x(10, 1) = out_10_1;
      out_JF_x(4, 2) = out_4_2;
      out_JF_x(7, 2) = out_7_2;
      out_JF_x(8, 2) = out_8_2;
      out_JF_x(9, 2) = out_9_2;
      out_JF_x(10, 2) = out_10_2;
      out_JF_x(3, 3) = out_3_3;
      out_JF_x(4, 3) = out_4_3;
      out_JF_x(7, 3) = out_7_3;
      out_JF_x(9, 3) = out_9_3;
      out_JF_x(10, 3) = out_10_3;
      out_JF_x(3, 4) = out_3_4;
      out_JF_x(4, 4) = out_4_4;
      out_JF_x(8, 4) = out_8_4;
      out_JF_x(9, 4) = out_9_4;
      out_JF_x(10, 4) = out_10_4;
      out_JF_x(5, 5) = out_5_5;
      out_JF_x(9, 5) = out_9_5;
      out_JF_x(10, 5) = out_10_5;
      out_JF_x(6, 6) = out_6_6;
      out_JF_x(9, 6) = out_9_6;
      out_JF_x(10, 6) = out_10_6;
      out_JF_x(1, 7) = out_1_7;
      out_JF_x(10, 7) = out_10_7;
      out_JF_x(2, 8) = out_2_8;
      out_JF_x(10, 8) = out_10_8;
      out_JF_x(7, 9) = out_7_9;
      out_JF_x(8, 9) = out_8_9;
      out_JF_x(10, 9) = out_10_9;
      out_JF_x(3, 10) = out_3_10;
      out_JF_x(4, 10) = out_4_10;
      out_JF_x(7, 10) = out_7_10;
      out_JF_x(8, 10) = out_8_10;
      out_JF_x(9, 10) = out_9_10;
      out_JF_x(10, 10) = out_10_10;
    end % JF_x
    %
    % - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    %
    function out_JF_x_dot = JF_x_dot( this, in_1, ~, ~, t )
      % Evaluate the Jacobian of F with respect to x_dot.

      % Extract properties
      L = this.m_L;
      L__0 = this.m_L__0;
      varepsilon = this.m_varepsilon;
      M = this.m_M;
      h = this.m_h;
      omega = this.m_omega;

      % Extract inputs
      x__l = in_1(1);
      y__l = in_1(2);
      x__r = in_1(3);
      y__r = in_1(4);
      u__l = in_1(5);
      v__l = in_1(6);
      u__r = in_1(7);
      v__r = in_1(8);
      lambda__1 = in_1(9);
      lambda__2 = in_1(10);

      % Evaluate function
      out_5_1 = 1;
      t1 = omega * t;
      t2 = cos(t1);
      t5 = varepsilon ^ 2;
      t6 = t5 * omega;
      t9 = y__l - y__r;
      t11 = omega ^ 2;
      t14 = t5 * t11 * M / 4;
      t15 = -t14 - 0.1e1 / 0.2e1;
      t17 = M * t5;
      t21 = sin(t1);
      t24 = L ^ 2;
      t26 = v__l * t6 * h * M * t2 + 2 * t21 * (t9 * lambda__2 + y__l * t15 - t17 / 4) * h + lambda__1 * t24;
      t27 = x__l ^ 2;
      t28 = y__l ^ 2;
      t29 = t27 + t28;
      t30 = sqrt(t29);
      t31 = 0.1e1 / t30;
      t32 = t31 * t26;
      t33 = t2 ^ 2;
      t34 = h ^ 2;
      t36 = t34 * t33 + t24 - t34;
      t37 = sqrt(t36);
      t38 = t37 * t36;
      t42 = -t14 + lambda__2 - 0.1e1 / 0.2e1;
      t43 = t34 ^ 2;
      t45 = t33 ^ 2;
      t47 = L - h;
      t49 = L + h;
      t51 = t33 * t34 * t49;
      t54 = t24 - t34;
      t59 = lambda__2 * t54 - t34 * t15 - t24 / 2;
      t65 = lambda__2 * x__r;
      t66 = x__l * t42 - t65;
      t70 = t33 * t2 * M;
      t82 = t49 * t47;
      t92 = t45 * t43 * t66 - t6 * t43 * t21 * u__l * t70 / 2 + 2 * t51 * t66 * t47 - t2 * t82 * t6 * t34 * t21 * M * u__l / 2 + t49 * (x__l * t59 - t82 * t65) * t47;
      t93 = t31 * t92;
      t95 = t36 ^ 2;
      t96 = t95 * L__0;
      t100 = 0.1e1 / t38;
      t101 = 0.1e1 / t5;
      t103 = 0.1e1 / M;
      t104 = t103 * t101 * t100;
      t107 = t21 * L__0;
      t118 = 0.1e1 / t30 / t29;
      t120 = t100 * t118 * (t38 * (y__l * h * t107 + t30 * t26) / 2 + t30 * t92 + x__l * t96 / 2);
      t121 = t103 * t101;
      t122 = x__l * t121;
      out_9_1 = -4 * t104 * t31 * (t38 * x__l * t32 / 2 + t30 * (t45 * t43 * t42 + 2 * t51 * t42 * t47 + t49 * t59 * t47) + x__l * t93 + t96 / 2) + 4 * t122 * t120;
      t125 = lambda__1 - 1;
      t126 = t125 * t31;
      t127 = x__l - x__r;
      t128 = t37 * t127;
      t132 = t125 * t30;
      t134 = 2 * t37 * t132;
      t136 = 8 * lambda__2 - 2;
      t140 = -16 * lambda__2 + 4;
      t141 = x__r * t140;
      t144 = t125 * h;
      t150 = x__r ^ 2;
      t153 = y__r * t140;
      t155 = y__r ^ 2;
      t157 = u__l ^ 2;
      t160 = u__r ^ 2;
      t161 = v__l - v__r;
      t162 = t161 ^ 2;
      t166 = 2 * t21 * t9 * t144 + t27 * t136 + x__l * t141 + t150 * t136 + t28 * t136 + y__l * t153 + t155 * t136 + M * (-2 * u__r * u__l + t157 + t160 + t162) * t5;
      t167 = t31 * t166;
      t179 = -2 * h * t21 * y__r - 2 * t37 * x__r + t150 + t155 + t24;
      t180 = sqrt(t179);
      t182 = -t37 + x__r;
      t188 = t9 * h;
      t190 = x__l * x__r;
      t192 = -t37 * t127 - t21 * t188 + t9 * y__r - t150 + t190;
      t193 = t31 * t192;
      t194 = x__l * L__0;
      t198 = 0.1e1 / t180;
      t201 = t103 * t101 * t31;
      t210 = 2 * t128 * t132 + t30 * t166 + 2 * L__0 * (t9 * y__l - t190 + t27);
      t215 = -2 * L__0 * t30 * t192 + t180 * t210;
      t217 = t118 * t198 * t215;
      out_10_1 = -2 * t201 * t198 * (t180 * (2 * x__l * t128 * t126 + t134 + t30 * (2 * x__l * t136 + t141) + x__l * t167 + 2 * (2 * x__l - x__r) * L__0) - 2 * L__0 * t30 * t182 - 2 * t194 * t193) + 2 * t122 * t217;
      out_6_2 = 1;
      t221 = t30 * t21;
      t233 = y__l * t121;
      out_9_2 = -4 * t104 * t31 * (t38 * (2 * t221 * t42 * h + h * t107 + y__l * t32) / 2 + y__l * t93) + 4 * t233 * t120;
      t240 = 2 * t21 * t144;
      t252 = t21 * h;
      t253 = y__r - t252;
      t257 = y__l * L__0;
      out_10_2 = -2 * t201 * t198 * (t180 * (2 * y__l * t128 * t126 + t30 * (2 * y__l * t136 + t153 + t240) + y__l * t167 + 2 * (2 * y__l - y__r) * L__0) - 2 * L__0 * t30 * t253 - 2 * t257 * t193) + 2 * t233 * t217;
      out_1_3 = 1;
      t270 = t47 ^ 2;
      t272 = t49 ^ 2;
      out_9_3 = -4 * t121 * t100 * (-t272 * lambda__2 * t270 - t45 * t43 * lambda__2 - 2 * t51 * lambda__2 * t47);
      t286 = t198 * t210;
      t287 = 2 * t182;
      t302 = t31 / t180 / t179 * t215;
      out_10_3 = -2 * t201 * t198 * (t180 * (-t134 + t30 * (2 * x__r * t136 + x__l * t140) - 2 * t194) + t287 * t286 / 2 - 2 * L__0 * t30 * (t37 + x__l - 2 * x__r)) + t287 * t121 * t302;
      out_2_4 = 1;
      out_9_4 = 4 * t103 * t101 * t21 * h * lambda__2;
      t317 = 2 * t253;
      out_10_4 = -2 * t201 * t198 * (t180 * (t30 * (2 * y__r * t136 + y__l * t140 - t240) - 2 * t257) + t317 * t286 / 2 - 2 * L__0 * t30 * (t252 + y__l - 2 * y__r)) + t317 * t121 * t302;
      out_7_5 = t17 / 2;
      out_9_5 = -4 * t121 * t100 * (-t2 * t49 * t47 * t5 * omega * t34 * t21 * M / 2 - t5 * omega * t43 * t21 * t70 / 2);
      out_10_5 = -4 * u__l + 4 * u__r;
      out_8_6 = out_7_5;
      out_9_6 = -2 * omega * h * t2;
      out_10_6 = -4 * t161;
      out_3_7 = out_8_6;
      out_10_7 = -out_10_5;
      out_4_8 = out_3_7;
      out_10_8 = -out_10_6;
      out_9_9 = -2 * t103 * t101 * t24;
      out_10_9 = -2 * t121 * t31 * (2 * t37 * t127 * t30 + 2 * t221 * t188);
      out_9_10 = -4 * t104 * t31 * (t38 * t221 * t188 + t30 * (t45 * t43 * t127 + 2 * t51 * t127 * t47 + t49 * (-t49 * t47 * x__r + x__l * t54) * t47));
      out_10_10 = -2 * t103 * t101 * (-16 * y__l * y__r + 8 * t150 + 8 * t155 - 16 * t190 + 8 * t27 + 8 * t28);

      % Store outputs
      out_JF_x_dot = zeros(10, 10);
      out_JF_x_dot(5, 1) = out_5_1;
      out_JF_x_dot(9, 1) = out_9_1;
      out_JF_x_dot(10, 1) = out_10_1;
      out_JF_x_dot(6, 2) = out_6_2;
      out_JF_x_dot(9, 2) = out_9_2;
      out_JF_x_dot(10, 2) = out_10_2;
      out_JF_x_dot(1, 3) = out_1_3;
      out_JF_x_dot(9, 3) = out_9_3;
      out_JF_x_dot(10, 3) = out_10_3;
      out_JF_x_dot(2, 4) = out_2_4;
      out_JF_x_dot(9, 4) = out_9_4;
      out_JF_x_dot(10, 4) = out_10_4;
      out_JF_x_dot(7, 5) = out_7_5;
      out_JF_x_dot(9, 5) = out_9_5;
      out_JF_x_dot(10, 5) = out_10_5;
      out_JF_x_dot(8, 6) = out_8_6;
      out_JF_x_dot(9, 6) = out_9_6;
      out_JF_x_dot(10, 6) = out_10_6;
      out_JF_x_dot(3, 7) = out_3_7;
      out_JF_x_dot(10, 7) = out_10_7;
      out_JF_x_dot(4, 8) = out_4_8;
      out_JF_x_dot(10, 8) = out_10_8;
      out_JF_x_dot(9, 9) = out_9_9;
      out_JF_x_dot(10, 9) = out_10_9;
      out_JF_x_dot(9, 10) = out_9_10;
      out_JF_x_dot(10, 10) = out_10_10;
    end % JF_x_dot
    %
    % - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    %
    function out_JF_v = JF_v( ~, ~, ~, ~, ~ )
      % Evaluate the Jacobian of F with respect to v.

      % Extract properties
      % No properties

      % Extract inputs

      % Evaluate function
      % No body

      % Store outputs
      out_JF_v = zeros(10, 0);
    end % JF_v
    %
    % - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    %
    function out_v = v( ~, ~, ~ )
      % Evaluate the the veils v.

      % Extract properties
      % No properties

      % Extract inputs

      % Evaluate function
      % No body

      % Store outputs
      out_v = zeros(0, 1);
    end % v
    %
    % - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    %
    function out_Jv_x = Jv_x( ~, ~, ~, ~ )
      % Evaluate the Jacobian of v with respect to x.

      % Extract properties
      % No properties

      % Extract inputs

      % Evaluate function
      % No body

      % Store outputs
      out_Jv_x = zeros(0, 10);
    end % Jv_x
    %
    % - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    %
    function out_h = h( this, in_1, ~, t )
      % Calculate the residual of the invariants h.

      % Extract properties
      L = this.m_L;
      L__0 = this.m_L__0;
      varepsilon = this.m_varepsilon;
      M = this.m_M;
      h = this.m_h;
      omega = this.m_omega;

      % Extract inputs
      x__l = in_1(1);
      y__l = in_1(2);
      x__r = in_1(3);
      y__r = in_1(4);
      u__l = in_1(5);
      v__l = in_1(6);
      u__r = in_1(7);
      v__r = in_1(8);
      lambda__1 = in_1(9);
      lambda__2 = in_1(10);

      % Evaluate function
      t1 = omega * t;
      t2 = cos(t1);
      t3 = t2 ^ 2;
      t4 = h ^ 2;
      t6 = L ^ 2;
      t7 = t4 * t3 - t4 + t6;
      t8 = sqrt(t7);
      t10 = h * y__l;
      t11 = sin(t1);
      out_1 = -t11 * t10 - t8 * x__l;
      t13 = x__l ^ 2;
      t14 = x__l * x__r;
      t16 = x__r ^ 2;
      out_2 = -t13 + 2 * t14 - t16 + (L + y__l - y__r) * (L - y__l + y__r);
      t33 = t6 - t4;
      out_3 = (t8 * (t2 * omega * y__l + v__l * t11) * h + t4 * t3 * u__l - t11 * omega * t4 * t2 * x__l + t33 * u__l) / t8;
      t36 = x__l - x__r;
      t37 = 2 * t36;
      t41 = y__l - y__r;
      t42 = v__l - v__r;
      out_4 = u__l * t37 - u__r * t37 + 2 * t42 * t41;
      t47 = varepsilon ^ 2;
      t48 = t47 * omega;
      t52 = omega ^ 2;
      t55 = t47 * t52 * M / 4;
      t56 = -t55 - 0.1e1 / 0.2e1;
      t66 = y__l ^ 2;
      t68 = sqrt(t13 + t66);
      t73 = t8 * t7;
      t78 = lambda__2 * x__r;
      t79 = x__l * (-t55 + lambda__2 - 0.1e1 / 0.2e1) - t78;
      t80 = t4 ^ 2;
      t82 = t3 ^ 2;
      t91 = L - h;
      t93 = L + h;
      t101 = t93 * t91;
      t118 = t7 ^ 2;
      t123 = 0.1e1 / t68;
      t126 = 0.1e1 / t47;
      t128 = 0.1e1 / M;
      out_5 = -4 * t128 * t126 / t73 * t123 * (t73 * (t68 * (v__l * t48 * h * M * t2 + 2 * t11 * (t41 * lambda__2 + y__l * t56 - M * t47 / 4) * h + lambda__1 * t6) + t10 * t11 * L__0) / 2 + t68 * (t82 * t80 * t79 - t48 * t80 * t11 * u__l * t3 * t2 * M / 2 + 2 * t3 * t4 * t93 * t79 * t91 - t2 * t101 * t48 * t4 * t11 * M * u__l / 2 + t93 * (x__l * (lambda__2 * t33 - t4 * t56 - t6 / 2) - t101 * t78) * t91) + x__l * t118 * L__0 / 2);
      t132 = lambda__1 - 1;
      t142 = 8 * lambda__2 - 2;
      t145 = -16 * lambda__2 + 4;
      t152 = y__r ^ 2;
      t154 = u__l ^ 2;
      t157 = u__r ^ 2;
      t158 = t42 ^ 2;
      t175 = sqrt(-2 * h * t11 * y__r - 2 * t8 * x__r + t152 + t16 + t6);
      out_6 = -2 * t128 * t126 * t123 / t175 * (t175 * (2 * t8 * t36 * t132 * t68 + t68 * (2 * t11 * t41 * t132 * h + t13 * t142 + x__l * x__r * t145 + t16 * t142 + t66 * t142 + y__l * y__r * t145 + t152 * t142 + M * (-2 * u__r * u__l + t154 + t157 + t158) * t47) + 2 * L__0 * (t41 * y__l + t13 - t14)) - 2 * L__0 * t68 * (-t11 * t41 * h - t8 * t36 + t41 * y__r + t14 - t16));

      % Store outputs
      out_h = zeros(6, 1);
      out_h(1) = out_1;
      out_h(2) = out_2;
      out_h(3) = out_3;
      out_h(4) = out_4;
      out_h(5) = out_5;
      out_h(6) = out_6;
    end % h
    %
    % - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    %
    function out_Jh_x = Jh_x( this, in_1, ~, t )
      % Calculate the Jacobian of h with respect to x.

      % Extract properties
      L = this.m_L;
      L__0 = this.m_L__0;
      varepsilon = this.m_varepsilon;
      M = this.m_M;
      h = this.m_h;
      omega = this.m_omega;

      % Extract inputs
      x__l = in_1(1);
      y__l = in_1(2);
      x__r = in_1(3);
      y__r = in_1(4);
      u__l = in_1(5);
      v__l = in_1(6);
      u__r = in_1(7);
      v__r = in_1(8);
      lambda__1 = in_1(9);
      lambda__2 = in_1(10);

      % Evaluate function
      t1 = omega * t;
      t2 = cos(t1);
      t3 = t2 ^ 2;
      t4 = h ^ 2;
      t6 = L ^ 2;
      t7 = t4 * t3 - t4 + t6;
      t8 = sqrt(t7);
      out_1_1 = -t8;
      t9 = -x__l + x__r;
      out_2_1 = 2 * t9;
      t11 = sin(t1);
      out_3_1 = -omega * t4 * t2 * t11 / t8;
      t16 = u__l - u__r;
      out_4_1 = 2 * t16;
      t19 = varepsilon ^ 2;
      t20 = t19 * omega;
      t23 = y__l - y__r;
      t25 = omega ^ 2;
      t28 = t19 * t25 * M / 4;
      t29 = -t28 - 0.1e1 / 0.2e1;
      t38 = v__l * t20 * h * M * t2 + 2 * t11 * (t23 * lambda__2 + y__l * t29 - M * t19 / 4) * h + lambda__1 * t6;
      t39 = x__l ^ 2;
      t40 = y__l ^ 2;
      t41 = t39 + t40;
      t42 = sqrt(t41);
      t43 = 0.1e1 / t42;
      t44 = t43 * t38;
      t45 = t8 * t7;
      t49 = -t28 + lambda__2 - 0.1e1 / 0.2e1;
      t50 = t4 ^ 2;
      t52 = t3 ^ 2;
      t54 = L - h;
      t56 = L + h;
      t58 = t3 * t4 * t56;
      t61 = t6 - t4;
      t66 = lambda__2 * t61 - t4 * t29 - t6 / 2;
      t72 = lambda__2 * x__r;
      t73 = x__l * t49 - t72;
      t77 = t3 * t2 * M;
      t89 = t56 * t54;
      t99 = t52 * t50 * t73 - t20 * t50 * t11 * u__l * t77 / 2 + 2 * t58 * t73 * t54 - t2 * t89 * t20 * t4 * t11 * M * u__l / 2 + t56 * (x__l * t66 - t89 * t72) * t54;
      t100 = t43 * t99;
      t102 = t7 ^ 2;
      t103 = t102 * L__0;
      t107 = 0.1e1 / t45;
      t108 = 0.1e1 / t19;
      t110 = 0.1e1 / M;
      t111 = t110 * t108 * t107;
      t114 = t11 * L__0;
      t125 = 0.1e1 / t42 / t41;
      t127 = t107 * t125 * (t45 * (y__l * h * t114 + t42 * t38) / 2 + t42 * t99 + x__l * t103 / 2);
      t128 = t110 * t108;
      t129 = x__l * t128;
      out_5_1 = -4 * t111 * t43 * (t45 * x__l * t44 / 2 + t42 * (t52 * t50 * t49 + 2 * t58 * t49 * t54 + t56 * t66 * t54) + x__l * t100 + t103 / 2) + 4 * t129 * t127;
      t132 = lambda__1 - 1;
      t133 = t132 * t43;
      t134 = -t9;
      t135 = t8 * t134;
      t139 = t132 * t42;
      t141 = 2 * t8 * t139;
      t143 = 8 * lambda__2 - 2;
      t147 = -16 * lambda__2 + 4;
      t148 = x__r * t147;
      t151 = t132 * h;
      t157 = x__r ^ 2;
      t160 = y__r * t147;
      t162 = y__r ^ 2;
      t164 = u__l ^ 2;
      t167 = u__r ^ 2;
      t168 = v__l - v__r;
      t169 = t168 ^ 2;
      t173 = 2 * t11 * t23 * t151 + t39 * t143 + x__l * t148 + t157 * t143 + t40 * t143 + y__l * t160 + t162 * t143 + M * (-2 * u__r * u__l + t164 + t167 + t169) * t19;
      t174 = t43 * t173;
      t186 = -2 * h * t11 * y__r - 2 * t8 * x__r + t157 + t162 + t6;
      t187 = sqrt(t186);
      t189 = out_1_1 + x__r;
      t194 = t23 * h;
      t196 = x__l * x__r;
      t198 = -t11 * t194 + t23 * y__r + t8 * t9 - t157 + t196;
      t199 = t43 * t198;
      t200 = x__l * L__0;
      t204 = 0.1e1 / t187;
      t207 = t110 * t108 * t43;
      t216 = 2 * t135 * t139 + t42 * t173 + 2 * L__0 * (t23 * y__l - t196 + t39);
      t221 = -2 * L__0 * t42 * t198 + t187 * t216;
      t223 = t125 * t204 * t221;
      out_6_1 = -2 * t207 * t204 * (t187 * (2 * x__l * t135 * t133 + t141 + t42 * (2 * x__l * t143 + t148) + x__l * t174 + 2 * (2 * x__l - x__r) * L__0) - 2 * L__0 * t42 * t189 - 2 * t200 * t199) + 2 * t129 * t223;
      t226 = h * t11;
      out_1_2 = -t226;
      out_2_2 = -2 * t23;
      out_3_2 = omega * h * t2;
      out_4_2 = 2 * t168;
      t230 = t42 * t11;
      t242 = y__l * t128;
      out_5_2 = -4 * t111 * t43 * (t45 * (2 * t230 * t49 * h + h * t114 + y__l * t44) / 2 + y__l * t100) + 4 * t242 * t127;
      t249 = 2 * t11 * t151;
      t261 = y__r + out_1_2;
      t265 = y__l * L__0;
      out_6_2 = -2 * t207 * t204 * (t187 * (2 * y__l * t135 * t133 + t42 * (2 * y__l * t143 + t160 + t249) + y__l * t174 + 2 * (2 * y__l - y__r) * L__0) - 2 * L__0 * t42 * t261 - 2 * t265 * t199) + 2 * t242 * t223;
      out_2_3 = -out_2_1;
      out_4_3 = -out_4_1;
      t278 = t54 ^ 2;
      t280 = t56 ^ 2;
      out_5_3 = -4 * t128 * t107 * (-t280 * lambda__2 * t278 - t52 * t50 * lambda__2 - 2 * t58 * lambda__2 * t54);
      t294 = t204 * t216;
      t295 = 2 * t189;
      t310 = t43 / t187 / t186 * t221;
      out_6_3 = -2 * t207 * t204 * (t187 * (-t141 + t42 * (2 * x__r * t143 + x__l * t147) - 2 * t200) + t295 * t294 / 2 - 2 * L__0 * t42 * (t8 + x__l - 2 * x__r)) + t295 * t128 * t310;
      out_2_4 = -out_2_2;
      out_4_4 = -out_4_2;
      out_5_4 = 4 * t110 * t108 * t11 * h * lambda__2;
      t325 = 2 * t261;
      out_6_4 = -2 * t207 * t204 * (t187 * (t42 * (2 * y__r * t143 + y__l * t147 - t249) - 2 * t265) + t325 * t294 / 2 - 2 * L__0 * t42 * (t226 + y__l - 2 * y__r)) + t325 * t128 * t310;
      out_3_5 = t8;
      out_4_5 = out_2_3;
      out_5_5 = -4 * t128 * t107 * (-t2 * t56 * t54 * t19 * omega * t4 * t11 * M / 2 - t19 * omega * t50 * t11 * t77 / 2);
      out_6_5 = -4 * t16;
      out_3_6 = t226;
      out_4_6 = out_2_4;
      out_5_6 = -2 * out_3_2;
      out_6_6 = -4 * t168;
      out_4_7 = out_2_1;
      out_6_7 = -out_6_5;
      out_4_8 = out_2_2;
      out_6_8 = -out_6_6;
      out_5_9 = -2 * t110 * t108 * t6;
      out_6_9 = -2 * t128 * t43 * (2 * out_3_5 * t134 * t42 + 2 * t230 * t194);
      out_5_10 = -4 * t111 * t43 * (t45 * t230 * t194 + t42 * (t52 * t50 * t134 + 2 * t58 * t134 * t54 + t56 * (-t56 * t54 * x__r + x__l * t61) * t54));
      out_6_10 = -2 * t110 * t108 * (-16 * y__l * y__r + 8 * t157 + 8 * t162 - 16 * t196 + 8 * t39 + 8 * t40);

      % Store outputs
      out_Jh_x = zeros(6, 10);
      out_Jh_x(1, 1) = out_1_1;
      out_Jh_x(2, 1) = out_2_1;
      out_Jh_x(3, 1) = out_3_1;
      out_Jh_x(4, 1) = out_4_1;
      out_Jh_x(5, 1) = out_5_1;
      out_Jh_x(6, 1) = out_6_1;
      out_Jh_x(1, 2) = out_1_2;
      out_Jh_x(2, 2) = out_2_2;
      out_Jh_x(3, 2) = out_3_2;
      out_Jh_x(4, 2) = out_4_2;
      out_Jh_x(5, 2) = out_5_2;
      out_Jh_x(6, 2) = out_6_2;
      out_Jh_x(2, 3) = out_2_3;
      out_Jh_x(4, 3) = out_4_3;
      out_Jh_x(5, 3) = out_5_3;
      out_Jh_x(6, 3) = out_6_3;
      out_Jh_x(2, 4) = out_2_4;
      out_Jh_x(4, 4) = out_4_4;
      out_Jh_x(5, 4) = out_5_4;
      out_Jh_x(6, 4) = out_6_4;
      out_Jh_x(3, 5) = out_3_5;
      out_Jh_x(4, 5) = out_4_5;
      out_Jh_x(5, 5) = out_5_5;
      out_Jh_x(6, 5) = out_6_5;
      out_Jh_x(3, 6) = out_3_6;
      out_Jh_x(4, 6) = out_4_6;
      out_Jh_x(5, 6) = out_5_6;
      out_Jh_x(6, 6) = out_6_6;
      out_Jh_x(4, 7) = out_4_7;
      out_Jh_x(6, 7) = out_6_7;
      out_Jh_x(4, 8) = out_4_8;
      out_Jh_x(6, 8) = out_6_8;
      out_Jh_x(5, 9) = out_5_9;
      out_Jh_x(6, 9) = out_6_9;
      out_Jh_x(5, 10) = out_5_10;
      out_Jh_x(6, 10) = out_6_10;
    end % Jh_x
    %
    % - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    %
    function out_Jh_v = Jh_v( ~, ~, ~, ~ )
      % Calculate the Jacobian of h with respect to v.

      % Extract properties
      % No properties

      % Extract inputs

      % Evaluate function
      % No body

      % Store outputs
      out_Jh_v = zeros(6, 0);
    end % Jh_v
    %
    % - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    %
    function out = in_domain( ~, ~, ~ )
      out = true;
    end % in_domain
    %
    % - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    %
  end
end % CarAxis

% That's All Folks!
