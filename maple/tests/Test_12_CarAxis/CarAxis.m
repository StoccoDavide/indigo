% +--------------------------------------------------------------------------+
% | 'Indigo' module version 1.0 - BSD 3-Clause License - Copyright (c) 2023  |
% | Current version authors:                                                 |
% |   Davide Stocco and Enrico Bertolazzi.                                   |
% +--------------------------------------------------------------------------+

% Matlab generated code for implicit system: CarAxis
% This file has been automatically generated by Indigo.
% DISCLAIMER: If you need to edit it, do it wisely!

classdef CarAxis < Indigo.DAE.Implicit
  %
  % No class description provided.
  %
  properties (SetAccess = protected, Hidden = true)
    % User data
    m_L = 1.0;
    m_L__0 = .5;
    m_varepsilon = .1e-1;
    m_M = 10.0;
    m_h = .1;
    m_tau = .6283185308;
    m_omega = 10.0;
  end
  %
  methods
    %
    % - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    %
    function this = CarAxis( varargin )
      % Class constructor.

      % Superclass constructor
      num_eqns = 10;
      num_veil = 0;
      num_invs = 6;
      this = this@Indigo.DAE.Implicit('CarAxis', num_eqns, num_veil, num_invs);

      % User data
      if (nargin == 0)
        % Keep default values
      elseif (nargin == 1 && isstruct(varargin{1}))
        this.m_L = varargin{1}.L;
        this.m_L__0 = varargin{1}.L__0;
        this.m_varepsilon = varargin{1}.varepsilon;
        this.m_M = varargin{1}.M;
        this.m_h = varargin{1}.h;
        this.m_tau = varargin{1}.tau;
        this.m_omega = varargin{1}.omega;
      elseif (nargin == 7)
        this.m_L = varargin{1};
        this.m_L__0 = varargin{2};
        this.m_varepsilon = varargin{3};
        this.m_M = varargin{4};
        this.m_h = varargin{5};
        this.m_tau = varargin{6};
        this.m_omega = varargin{7};
      else
        error('wrong number of input arguments.');
      end
    end % CarAxis
    %
    % - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    %
    function out_F = F( this, in_1, in_2, ~, t )
      % Evaluate the function F.

      % Extract properties
      L = this.m_L;
      L__0 = this.m_L__0;
      varepsilon = this.m_varepsilon;
      M = this.m_M;
      h = this.m_h;
      omega = this.m_omega;

      % Extract inputs
      x__l = in_1(1);
      y__l = in_1(2);
      x__r = in_1(3);
      y__r = in_1(4);
      u__l = in_1(5);
      v__l = in_1(6);
      u__r = in_1(7);
      v__r = in_1(8);
      lambda__1 = in_1(9);
      lambda__2 = in_1(10);
      x__l_dot = in_2(1);
      y__l_dot = in_2(2);
      x__r_dot = in_2(3);
      y__r_dot = in_2(4);
      u__l_dot = in_2(5);
      v__l_dot = in_2(6);
      u__r_dot = in_2(7);
      v__r_dot = in_2(8);

      % Evaluate function
      out_1 = -u__l + x__l_dot;
      out_2 = -v__l + y__l_dot;
      out_3 = -u__r + x__r_dot;
      out_4 = -v__r + y__r_dot;
      t1 = varepsilon ^ 2;
      t2 = M * t1;
      t5 = x__l - x__r;
      t8 = omega * t;
      t9 = cos(t8);
      t10 = t9 ^ 2;
      t11 = h ^ 2;
      t13 = L ^ 2;
      t14 = t11 * t10 - t11 + t13;
      t15 = sqrt(t14);
      t18 = x__l ^ 2;
      t19 = y__l ^ 2;
      t21 = sqrt(t18 + t19);
      t23 = x__l * L__0;
      t25 = 0.1e1 / t21;
      out_5 = -t25 * (t21 * (-u__l_dot * t2 / 2 + 2 * lambda__2 * t5 + lambda__1 * t15 - x__l) + t23);
      t28 = sin(t8);
      t39 = y__l * L__0;
      out_6 = (t21 * (-2 * t28 * h * lambda__1 + v__l_dot * t2 + (-4 * lambda__2 + 2) * y__l + t2 + 4 * y__r * lambda__2) - 2 * t39) * t25 / 2;
      t46 = lambda__2 - 0.1e1 / 0.2e1;
      t53 = y__r ^ 2;
      t56 = x__r ^ 2;
      t58 = sqrt(-2 * h * t28 * y__r - 2 * t15 * x__r + t13 + t53 + t56);
      t64 = 0.1e1 / t58;
      out_7 = -2 * t64 * (t58 * (t15 / 2 - u__r_dot * t2 / 4 + x__r * t46 - lambda__2 * x__l) + (x__r - t15) * L__0 / 2);
      t67 = t28 * h;
      t73 = t2 / 4;
      out_8 = 2 * t64 * (t58 * (-t67 / 2 + v__r_dot * t2 / 4 - y__r * t46 + t73 + lambda__2 * y__l) - (y__r - t67) * L__0 / 2);
      t82 = t15 * t14;
      t87 = t1 * omega;
      t90 = y__l - y__r;
      t92 = omega ^ 2;
      t95 = t1 * t92 * M / 4;
      t96 = -t95 - 0.1e1 / 0.2e1;
      t111 = lambda__2 * x__r;
      t112 = x__l * (-t95 + lambda__2 - 0.1e1 / 0.2e1) - t111;
      t113 = t11 ^ 2;
      t115 = t10 ^ 2;
      t124 = L + h;
      t125 = L - h;
      t126 = t125 * t124;
      t151 = t14 ^ 2;
      t155 = 0.1e1 / t1;
      t157 = 0.1e1 / M;
      out_9 = -4 * t157 * t155 * ((t21 * (v__l * t87 * h * M * t9 + 2 * t28 * h * (t90 * lambda__2 + y__l * t96 - t73) + lambda__1 * t13) + t67 * t39) * t82 / 2 + t21 * (t115 * t113 * t112 - t87 * t113 * u__l * t28 * t10 * t9 * M / 2 + 2 * t10 * t11 * t112 * t126 - t9 * t126 * t87 * t11 * u__l * t28 * M / 2 + t125 * t124 * (x__l * (lambda__2 * (t13 - t11) - t11 * t96 - t13 / 2) - t126 * t111)) + t151 * t23 / 2) * t25 / t82;
      t161 = lambda__1 - 1;
      t171 = 8 * lambda__2 - 2;
      t174 = -16 * lambda__2 + 4;
      t182 = u__l ^ 2;
      t185 = u__r ^ 2;
      t187 = (v__l - v__r) ^ 2;
      t193 = x__l * x__r;
      out_10 = -2 * t157 * t155 * t25 * t64 * (t58 * (2 * t15 * t5 * t161 * t21 + t21 * (2 * t28 * t90 * t161 * h + t18 * t171 + x__l * x__r * t174 + t56 * t171 + t19 * t171 + y__l * y__r * t174 + t53 * t171 + t1 * M * (-2 * u__r * u__l + t182 + t185 + t187)) + 2 * L__0 * (t90 * y__l + t18 - t193)) - 2 * L__0 * (-t28 * t90 * h - t15 * t5 + t90 * y__r + t193 - t56) * t21);

      % Store outputs
      out_F = zeros(10, 1);
      out_F(1) = out_1;
      out_F(2) = out_2;
      out_F(3) = out_3;
      out_F(4) = out_4;
      out_F(5) = out_5;
      out_F(6) = out_6;
      out_F(7) = out_7;
      out_F(8) = out_8;
      out_F(9) = out_9;
      out_F(10) = out_10;
    end % F
    %
    % - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    %
    function out_JF_x = JF_x( this, in_1, in_2, ~, t )
      % Evaluate the Jacobian of F with respect to x.

      % Extract properties
      L = this.m_L;
      L__0 = this.m_L__0;
      varepsilon = this.m_varepsilon;
      M = this.m_M;
      h = this.m_h;
      omega = this.m_omega;

      % Extract inputs
      x__l = in_1(1);
      y__l = in_1(2);
      x__r = in_1(3);
      y__r = in_1(4);
      u__l = in_1(5);
      v__l = in_1(6);
      u__r = in_1(7);
      v__r = in_1(8);
      lambda__1 = in_1(9);
      lambda__2 = in_1(10);
      u__l_dot = in_2(5);
      v__l_dot = in_2(6);
      u__r_dot = in_2(7);
      v__r_dot = in_2(8);

      % Evaluate function
      t1 = 2 * lambda__2;
      t3 = x__l ^ 2;
      t4 = y__l ^ 2;
      t5 = t3 + t4;
      t6 = sqrt(t5);
      t8 = varepsilon ^ 2;
      t9 = M * t8;
      t12 = x__l - x__r;
      t13 = 2 * t12;
      t15 = omega * t;
      t16 = cos(t15);
      t17 = t16 ^ 2;
      t18 = h ^ 2;
      t20 = L ^ 2;
      t21 = t18 * t17 - t18 + t20;
      t22 = sqrt(t21);
      t24 = -u__l_dot * t9 / 2 + lambda__2 * t13 + lambda__1 * t22 - x__l;
      t25 = 0.1e1 / t6;
      t31 = x__l * L__0;
      t34 = 0.1e1 / t6 / t5;
      t35 = t34 * (t6 * t24 + t31);
      out_5_1 = -t25 * (t6 * (t1 - 1) + x__l * t25 * t24 + L__0) + x__l * t35;
      t38 = sin(t15);
      t43 = -4 * lambda__2 + 2;
      t47 = -2 * t38 * h * lambda__1 + y__l * t43 + v__l_dot * t9 + 4 * y__r * lambda__2 + t9;
      t49 = y__l * L__0;
      t50 = 2 * t49;
      t52 = (t6 * t47 - t50) * t34;
      t54 = 0.1e1 / t5;
      out_6_1 = x__l * t47 * t54 / 2 - x__l * t52 / 2;
      out_7_1 = t1;
      t58 = t22 * t21;
      t59 = 0.1e1 / t58;
      t63 = t8 * omega;
      t66 = y__l - y__r;
      t68 = omega ^ 2;
      t71 = t8 * t68 * M / 4;
      t72 = -t71 - 0.1e1 / 0.2e1;
      t74 = t9 / 4;
      t80 = v__l * t63 * h * M * t16 + 2 * t38 * h * (t66 * lambda__2 + y__l * t72 - t74) + lambda__1 * t20;
      t82 = t38 * h;
      t87 = -t71 + lambda__2 - 0.1e1 / 0.2e1;
      t89 = lambda__2 * x__r;
      t90 = x__l * t87 - t89;
      t91 = t18 ^ 2;
      t93 = t17 ^ 2;
      t97 = t38 * t17 * t16 * M;
      t102 = L + h;
      t103 = L - h;
      t104 = t103 * t102;
      t109 = t38 * M;
      t116 = t20 - t18;
      t121 = lambda__2 * t116 - t18 * t72 - t20 / 2;
      t127 = t93 * t91 * t90 - t63 * t91 * u__l * t97 / 2 + 2 * t17 * t18 * t90 * t104 - t16 * t104 * t63 * t18 * u__l * t109 / 2 + t103 * t102 * (-t104 * t89 + x__l * t121);
      t129 = t21 ^ 2;
      t133 = ((t82 * t49 + t6 * t80) * t58 / 2 + t6 * t127 + t129 * t31 / 2) * t34 * t59;
      t134 = 0.1e1 / t8;
      t135 = 0.1e1 / M;
      t136 = t135 * t134;
      t137 = x__l * t136;
      t139 = t25 * t59;
      t154 = t25 * t127;
      out_9_1 = 4 * t137 * t133 - 4 * t135 * t134 * (x__l * t25 * t80 * t58 / 2 + t6 * (2 * t17 * t18 * t87 * t104 + t103 * t102 * t121 + t93 * t91 * t87) + x__l * t154 + t129 * L__0 / 2) * t139;
      t163 = lambda__1 - 1;
      t164 = t163 * t25;
      t165 = t22 * t12;
      t169 = t163 * t6;
      t171 = 2 * t22 * t169;
      t173 = 8 * lambda__2 - 2;
      t177 = -16 * lambda__2 + 4;
      t178 = x__r * t177;
      t181 = t163 * h;
      t182 = t38 * t66;
      t187 = x__r ^ 2;
      t190 = y__r * t177;
      t192 = y__r ^ 2;
      t194 = u__l ^ 2;
      t197 = u__r ^ 2;
      t198 = v__l - v__r;
      t199 = t198 ^ 2;
      t203 = 2 * t182 * t181 + t3 * t173 + x__l * t178 + t187 * t173 + t4 * t173 + y__l * t190 + t192 * t173 + t8 * M * (-2 * u__r * u__l + t194 + t197 + t199);
      t204 = t25 * t203;
      t216 = -2 * h * t38 * y__r - 2 * t22 * x__r + t187 + t192 + t20;
      t217 = sqrt(t216);
      t221 = t66 * h;
      t223 = x__l * x__r;
      t225 = -t22 * t12 - t38 * t221 + t66 * y__r - t187 + t223;
      t226 = t225 * t25;
      t229 = x__r - t22;
      t234 = 0.1e1 / t217;
      t237 = t135 * t134 * t25;
      t246 = 2 * t165 * t169 + t6 * t203 + 2 * L__0 * (t66 * y__l - t223 + t3);
      t251 = -2 * L__0 * t225 * t6 + t217 * t246;
      t253 = t34 * t234 * t251;
      out_10_1 = -2 * t237 * t234 * (t217 * (2 * x__l * t165 * t164 + t171 + t6 * (2 * x__l * t173 + t178) + x__l * t204 + 2 * (2 * x__l - x__r) * L__0) - 2 * t31 * t226 - 2 * L__0 * t229 * t6) + 2 * t137 * t253;
      out_5_2 = -y__l * t54 * t24 + y__l * t35;
      out_6_2 = -y__l * t52 / 2 + (y__l * t25 * t47 + t6 * t43 - 2 * L__0) * t25 / 2;
      out_8_2 = out_7_1;
      t267 = y__l * t136;
      t270 = t6 * t38;
      out_9_2 = 4 * t267 * t133 - 4 * t135 * t134 * ((h * t38 * L__0 + 2 * t270 * h * t87 + y__l * t25 * t80) * t58 / 2 + y__l * t154) * t139;
      t290 = 2 * t38 * t181;
      t304 = y__r - t82;
      out_10_2 = -2 * t237 * t234 * (t217 * (2 * y__l * t165 * t164 + t6 * (2 * y__l * t173 + t190 + t290) + y__l * t204 + 2 * (2 * y__l - y__r) * L__0) - 2 * t49 * t226 - 2 * L__0 * t304 * t6) + 2 * t267 * t253;
      out_5_3 = out_8_2;
      t313 = lambda__2 - 0.1e1 / 0.2e1;
      t320 = t22 / 2 - u__r_dot * t9 / 4 + x__r * t313 - lambda__2 * x__l;
      t322 = 2 * t229;
      t325 = L__0 / 2;
      t334 = 0.1e1 / t217 / t216;
      t335 = t334 * (t217 * t320 + t229 * L__0 / 2);
      out_7_3 = -2 * t234 * (t217 * t313 + t322 * t234 * t320 / 2 + t325) + t322 * t335;
      t340 = -t313;
      t343 = -t82 / 2 + v__r_dot * t9 / 4 + y__r * t340 + t74 + lambda__2 * y__l;
      t344 = 0.1e1 / t216;
      t351 = t334 * (t217 * t343 - t304 * L__0 / 2);
      out_8_3 = t322 * t344 * t343 - t322 * t351;
      t359 = t103 ^ 2;
      t361 = t102 ^ 2;
      out_9_3 = -4 * t136 * (-2 * t17 * t18 * lambda__2 * t104 - t361 * t359 * lambda__2 - t93 * t91 * lambda__2) * t59;
      t375 = t234 * t246;
      t388 = t25 * t334 * t251;
      out_10_3 = -2 * t237 * t234 * (t217 * (-t171 + t6 * (2 * x__r * t173 + x__l * t177) - 2 * t31) + t322 * t375 / 2 - 2 * L__0 * (t22 + x__l - 2 * x__r) * t6) + t322 * t136 * t388;
      out_6_4 = out_5_3;
      t392 = 2 * t304;
      out_7_4 = -t392 * t344 * t320 + t392 * t335;
      out_8_4 = 2 * t234 * (t217 * t340 + t392 * t234 * t343 / 2 - t325) - t392 * t351;
      out_9_4 = 4 * t135 * t134 * t38 * lambda__2 * h;
      out_10_4 = -2 * t237 * t234 * (t217 * (t6 * (2 * y__r * t173 + y__l * t177 - t290) - t50) + t392 * t375 / 2 - 2 * L__0 * (t82 + y__l - 2 * y__r) * t6) + t392 * t136 * t388;
      out_1_5 = -1;
      out_9_5 = -4 * t136 * (-t16 * t102 * t103 * t8 * omega * t18 * t109 / 2 - t8 * omega * t91 * t97 / 2) * t59;
      out_10_5 = -4 * u__l + 4 * u__r;
      out_2_6 = -1;
      out_9_6 = -2 * omega * t16 * h;
      out_10_6 = -4 * t198;
      out_3_7 = -1;
      out_10_7 = -out_10_5;
      out_4_8 = -1;
      out_10_8 = -out_10_6;
      out_5_9 = -t22;
      out_6_9 = -t82;
      out_9_9 = -2 * t135 * t134 * t20;
      out_10_9 = -2 * t136 * t25 * (2 * t22 * t12 * t6 + 2 * t270 * t221);
      out_5_10 = -t13;
      out_6_10 = -2 * t66;
      out_7_10 = t13;
      out_8_10 = -out_6_10;
      out_9_10 = -4 * t135 * t134 * (t6 * t182 * h * t58 + t6 * (t93 * t91 * t12 + 2 * t17 * t18 * t12 * t104 + t103 * t102 * (-t102 * t103 * x__r + x__l * t116))) * t139;
      out_10_10 = -2 * t135 * t134 * (-16 * y__l * y__r + 8 * t187 + 8 * t192 - 16 * t223 + 8 * t3 + 8 * t4);

      % Store outputs
      out_JF_x = zeros(10, 10);
      out_JF_x(5, 1) = out_5_1;
      out_JF_x(6, 1) = out_6_1;
      out_JF_x(7, 1) = out_7_1;
      out_JF_x(9, 1) = out_9_1;
      out_JF_x(10, 1) = out_10_1;
      out_JF_x(5, 2) = out_5_2;
      out_JF_x(6, 2) = out_6_2;
      out_JF_x(8, 2) = out_8_2;
      out_JF_x(9, 2) = out_9_2;
      out_JF_x(10, 2) = out_10_2;
      out_JF_x(5, 3) = out_5_3;
      out_JF_x(7, 3) = out_7_3;
      out_JF_x(8, 3) = out_8_3;
      out_JF_x(9, 3) = out_9_3;
      out_JF_x(10, 3) = out_10_3;
      out_JF_x(6, 4) = out_6_4;
      out_JF_x(7, 4) = out_7_4;
      out_JF_x(8, 4) = out_8_4;
      out_JF_x(9, 4) = out_9_4;
      out_JF_x(10, 4) = out_10_4;
      out_JF_x(1, 5) = out_1_5;
      out_JF_x(9, 5) = out_9_5;
      out_JF_x(10, 5) = out_10_5;
      out_JF_x(2, 6) = out_2_6;
      out_JF_x(9, 6) = out_9_6;
      out_JF_x(10, 6) = out_10_6;
      out_JF_x(3, 7) = out_3_7;
      out_JF_x(10, 7) = out_10_7;
      out_JF_x(4, 8) = out_4_8;
      out_JF_x(10, 8) = out_10_8;
      out_JF_x(5, 9) = out_5_9;
      out_JF_x(6, 9) = out_6_9;
      out_JF_x(9, 9) = out_9_9;
      out_JF_x(10, 9) = out_10_9;
      out_JF_x(5, 10) = out_5_10;
      out_JF_x(6, 10) = out_6_10;
      out_JF_x(7, 10) = out_7_10;
      out_JF_x(8, 10) = out_8_10;
      out_JF_x(9, 10) = out_9_10;
      out_JF_x(10, 10) = out_10_10;
    end % JF_x
    %
    % - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    %
    function out_JF_x_dot = JF_x_dot( this, ~, ~, ~, ~ )
      % Evaluate the Jacobian of F with respect to x_dot.

      % Extract properties
      varepsilon = this.m_varepsilon;
      M = this.m_M;

      % Extract inputs

      % Evaluate function
      out_1_1 = 1;
      out_2_2 = 1;
      out_3_3 = 1;
      out_4_4 = 1;
      t1 = varepsilon ^ 2;
      out_5_5 = M * t1 / 2;
      out_6_6 = out_5_5;
      out_7_7 = out_6_6;
      out_8_8 = out_7_7;

      % Store outputs
      out_JF_x_dot = zeros(10, 10);
      out_JF_x_dot(1, 1) = out_1_1;
      out_JF_x_dot(2, 2) = out_2_2;
      out_JF_x_dot(3, 3) = out_3_3;
      out_JF_x_dot(4, 4) = out_4_4;
      out_JF_x_dot(5, 5) = out_5_5;
      out_JF_x_dot(6, 6) = out_6_6;
      out_JF_x_dot(7, 7) = out_7_7;
      out_JF_x_dot(8, 8) = out_8_8;
    end % JF_x_dot
    %
    % - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    %
    function out_JF_v = JF_v( ~, ~, ~, ~, ~ )
      % Evaluate the Jacobian of F with respect to v.

      % Extract properties
      % No properties

      % Extract inputs

      % Evaluate function
      % No body

      % Store outputs
      out_JF_v = zeros(10, 0);
    end % JF_v
    %
    % - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    %
    function out_v = v( ~, ~, ~ )
      % Evaluate the the veils v.

      % Extract properties
      % No properties

      % Extract inputs

      % Evaluate function
      % No body

      % Store outputs
      out_v = zeros(0, 1);
    end % v
    %
    % - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    %
    function out_Jv_x = Jv_x( ~, ~, ~, ~ )
      % Evaluate the Jacobian of v with respect to x.

      % Extract properties
      % No properties

      % Extract inputs

      % Evaluate function
      % No body

      % Store outputs
      out_Jv_x = zeros(0, 10);
    end % Jv_x
    %
    % - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    %
    function out_h = h( this, in_1, ~, t )
      % Calculate the residual of the invariants h.

      % Extract properties
      L = this.m_L;
      L__0 = this.m_L__0;
      varepsilon = this.m_varepsilon;
      M = this.m_M;
      h = this.m_h;
      omega = this.m_omega;

      % Extract inputs
      x__l = in_1(1);
      y__l = in_1(2);
      x__r = in_1(3);
      y__r = in_1(4);
      u__l = in_1(5);
      v__l = in_1(6);
      u__r = in_1(7);
      v__r = in_1(8);
      lambda__1 = in_1(9);
      lambda__2 = in_1(10);

      % Evaluate function
      t1 = omega * t;
      t2 = cos(t1);
      t3 = t2 ^ 2;
      t4 = h ^ 2;
      t6 = L ^ 2;
      t7 = t4 * t3 - t4 + t6;
      t8 = sqrt(t7);
      t11 = sin(t1);
      out_1 = -t11 * h * y__l - t8 * x__l;
      t13 = x__l ^ 2;
      t14 = x__l * x__r;
      t16 = x__r ^ 2;
      out_2 = -t13 + 2 * t14 - t16 + (L + y__l - y__r) * (L - y__l + y__r);
      t32 = t6 - t4;
      out_3 = 0.1e1 / t8 * (t8 * (t2 * omega * y__l + v__l * t11) * h + t4 * t3 * u__l - t11 * omega * t4 * t2 * x__l + t32 * u__l);
      t36 = x__l - x__r;
      t37 = 2 * t36;
      t41 = y__l - y__r;
      t42 = v__l - v__r;
      out_4 = u__l * t37 - u__r * t37 + 2 * t42 * t41;
      t45 = t8 * t7;
      t47 = y__l ^ 2;
      t49 = sqrt(t13 + t47);
      t50 = 0.1e1 / t49;
      t54 = varepsilon ^ 2;
      t55 = t54 * omega;
      t59 = omega ^ 2;
      t62 = t54 * t59 * M / 4;
      t63 = -t62 - 0.1e1 / 0.2e1;
      t82 = lambda__2 * x__r;
      t83 = x__l * (-t62 + lambda__2 - 0.1e1 / 0.2e1) - t82;
      t84 = t4 ^ 2;
      t86 = t3 ^ 2;
      t95 = L + h;
      t96 = L - h;
      t97 = t96 * t95;
      t122 = t7 ^ 2;
      t126 = 0.1e1 / t54;
      t128 = 0.1e1 / M;
      out_5 = -4 * t128 * t126 * ((t49 * (v__l * t55 * h * M * t2 + 2 * t11 * h * (t41 * lambda__2 + y__l * t63 - M * t54 / 4) + lambda__1 * t6) + h * t11 * L__0 * y__l) * t45 / 2 + t49 * (t86 * t84 * t83 - t55 * t84 * u__l * t11 * t3 * t2 * M / 2 + 2 * t3 * t4 * t83 * t97 - t2 * t97 * t55 * t4 * u__l * t11 * M / 2 + t96 * t95 * (x__l * (lambda__2 * t32 - t4 * t63 - t6 / 2) - t97 * t82)) + t122 * x__l * L__0 / 2) * t50 / t45;
      t132 = lambda__1 - 1;
      t142 = 8 * lambda__2 - 2;
      t145 = -16 * lambda__2 + 4;
      t152 = y__r ^ 2;
      t154 = u__l ^ 2;
      t157 = u__r ^ 2;
      t158 = t42 ^ 2;
      t175 = sqrt(-2 * h * t11 * y__r - 2 * t8 * x__r + t152 + t16 + t6);
      out_6 = -2 * t128 * t126 * t50 / t175 * (t175 * (2 * t8 * t36 * t132 * t49 + t49 * (2 * t11 * t41 * t132 * h + t13 * t142 + x__l * x__r * t145 + t16 * t142 + t47 * t142 + y__l * y__r * t145 + t152 * t142 + t54 * M * (-2 * u__r * u__l + t154 + t157 + t158)) + 2 * L__0 * (t41 * y__l + t13 - t14)) - 2 * L__0 * (-t11 * t41 * h - t8 * t36 + t41 * y__r + t14 - t16) * t49);

      % Store outputs
      out_h = zeros(6, 1);
      out_h(1) = out_1;
      out_h(2) = out_2;
      out_h(3) = out_3;
      out_h(4) = out_4;
      out_h(5) = out_5;
      out_h(6) = out_6;
    end % h
    %
    % - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    %
    function out_Jh_x = Jh_x( this, in_1, ~, t )
      % Calculate the Jacobian of h with respect to x.

      % Extract properties
      L = this.m_L;
      L__0 = this.m_L__0;
      varepsilon = this.m_varepsilon;
      M = this.m_M;
      h = this.m_h;
      omega = this.m_omega;

      % Extract inputs
      x__l = in_1(1);
      y__l = in_1(2);
      x__r = in_1(3);
      y__r = in_1(4);
      u__l = in_1(5);
      v__l = in_1(6);
      u__r = in_1(7);
      v__r = in_1(8);
      lambda__1 = in_1(9);
      lambda__2 = in_1(10);

      % Evaluate function
      t1 = omega * t;
      t2 = cos(t1);
      t3 = t2 ^ 2;
      t4 = h ^ 2;
      t6 = L ^ 2;
      t7 = t4 * t3 - t4 + t6;
      t8 = sqrt(t7);
      out_1_1 = -t8;
      t9 = -x__l + x__r;
      out_2_1 = 2 * t9;
      t11 = sin(t1);
      out_3_1 = -0.1e1 / t8 * t11 * omega * t4 * t2;
      t16 = u__l - u__r;
      out_4_1 = 2 * t16;
      t17 = t8 * t7;
      t18 = 0.1e1 / t17;
      t19 = x__l ^ 2;
      t20 = y__l ^ 2;
      t21 = t19 + t20;
      t22 = sqrt(t21);
      t24 = 0.1e1 / t22 / t21;
      t28 = varepsilon ^ 2;
      t29 = t28 * omega;
      t32 = y__l - y__r;
      t34 = omega ^ 2;
      t37 = t28 * t34 * M / 4;
      t38 = -t37 - 0.1e1 / 0.2e1;
      t47 = v__l * t29 * h * M * t2 + 2 * t11 * h * (lambda__2 * t32 + y__l * t38 - M * t28 / 4) + lambda__1 * t6;
      t49 = y__l * L__0;
      t50 = t11 * h;
      t55 = -t37 + lambda__2 - 0.1e1 / 0.2e1;
      t57 = lambda__2 * x__r;
      t58 = x__l * t55 - t57;
      t59 = t4 ^ 2;
      t61 = t3 ^ 2;
      t65 = t11 * t3 * t2 * M;
      t70 = L + h;
      t71 = L - h;
      t72 = t71 * t70;
      t77 = t11 * M;
      t84 = t6 - t4;
      t89 = lambda__2 * t84 - t4 * t38 - t6 / 2;
      t95 = t61 * t59 * t58 - t29 * t59 * u__l * t65 / 2 + 2 * t3 * t4 * t58 * t72 - t2 * t72 * t29 * t4 * u__l * t77 / 2 + t71 * t70 * (-t72 * t57 + x__l * t89);
      t97 = x__l * L__0;
      t98 = t7 ^ 2;
      t102 = ((t22 * t47 + t50 * t49) * t17 / 2 + t22 * t95 + t98 * t97 / 2) * t24 * t18;
      t103 = 0.1e1 / t28;
      t104 = 0.1e1 / M;
      t105 = t104 * t103;
      t106 = x__l * t105;
      t108 = 0.1e1 / t22;
      t109 = t108 * t18;
      t124 = t108 * t95;
      out_5_1 = 4 * t106 * t102 - 4 * t104 * t103 * (x__l * t108 * t47 * t17 / 2 + t22 * (2 * t3 * t4 * t55 * t72 + t61 * t59 * t55 + t71 * t70 * t89) + x__l * t124 + t98 * L__0 / 2) * t109;
      t133 = lambda__1 - 1;
      t134 = t133 * t108;
      t135 = -t9;
      t136 = t8 * t135;
      t140 = t133 * t22;
      t142 = 2 * t8 * t140;
      t144 = 8 * lambda__2 - 2;
      t148 = -16 * lambda__2 + 4;
      t149 = x__r * t148;
      t152 = t133 * h;
      t153 = t11 * t32;
      t158 = x__r ^ 2;
      t161 = y__r * t148;
      t163 = y__r ^ 2;
      t165 = u__l ^ 2;
      t168 = u__r ^ 2;
      t169 = v__l - v__r;
      t170 = t169 ^ 2;
      t174 = 2 * t153 * t152 + t19 * t144 + x__l * t149 + t158 * t144 + t20 * t144 + y__l * t161 + t163 * t144 + t28 * M * (-2 * u__r * u__l + t165 + t168 + t170);
      t175 = t108 * t174;
      t187 = -2 * h * t11 * y__r - 2 * t8 * x__r + t158 + t163 + t6;
      t188 = sqrt(t187);
      t191 = t32 * h;
      t193 = x__l * x__r;
      t195 = -t11 * t191 + t32 * y__r + t8 * t9 - t158 + t193;
      t196 = t195 * t108;
      t199 = x__r + out_1_1;
      t204 = 0.1e1 / t188;
      t207 = t104 * t103 * t108;
      t216 = 2 * t136 * t140 + t22 * t174 + 2 * L__0 * (t32 * y__l + t19 - t193);
      t221 = -2 * L__0 * t195 * t22 + t188 * t216;
      t223 = t24 * t204 * t221;
      out_6_1 = -2 * t207 * t204 * (t188 * (2 * x__l * t136 * t134 + t142 + t22 * (2 * x__l * t144 + t149) + x__l * t175 + 2 * (2 * x__l - x__r) * L__0) - 2 * t97 * t196 - 2 * L__0 * t199 * t22) + 2 * t106 * t223;
      out_1_2 = -t50;
      out_2_2 = -2 * t32;
      out_3_2 = omega * t2 * h;
      out_4_2 = 2 * t169;
      t228 = y__l * t105;
      t231 = t22 * t11;
      out_5_2 = 4 * t228 * t102 - 4 * t104 * t103 * ((h * t11 * L__0 + 2 * t231 * h * t55 + y__l * t108 * t47) * t17 / 2 + y__l * t124) * t109;
      t251 = 2 * t11 * t152;
      t265 = y__r + out_1_2;
      out_6_2 = -2 * t207 * t204 * (t188 * (2 * y__l * t136 * t134 + t22 * (2 * y__l * t144 + t161 + t251) + y__l * t175 + 2 * (2 * y__l - y__r) * L__0) - 2 * t49 * t196 - 2 * L__0 * t265 * t22) + 2 * t228 * t223;
      out_2_3 = -out_2_1;
      out_4_3 = -out_4_1;
      t280 = t71 ^ 2;
      t282 = t70 ^ 2;
      out_5_3 = -4 * t105 * (-2 * t3 * t4 * lambda__2 * t72 - t282 * t280 * lambda__2 - t61 * t59 * lambda__2) * t18;
      t296 = t204 * t216;
      t297 = 2 * t199;
      t312 = t108 / t188 / t187 * t221;
      out_6_3 = -2 * t207 * t204 * (t188 * (-t142 + t22 * (2 * x__r * t144 + x__l * t148) - 2 * t97) + t297 * t296 / 2 - 2 * L__0 * (t8 + x__l - 2 * x__r) * t22) + t297 * t105 * t312;
      out_2_4 = -out_2_2;
      out_4_4 = -out_4_2;
      out_5_4 = 4 * t104 * t103 * t11 * lambda__2 * h;
      t327 = 2 * t265;
      out_6_4 = -2 * t207 * t204 * (t188 * (t22 * (2 * y__r * t144 + y__l * t148 - t251) - 2 * t49) + t327 * t296 / 2 - 2 * L__0 * (t50 + y__l - 2 * y__r) * t22) + t327 * t105 * t312;
      out_3_5 = t8;
      out_4_5 = out_2_3;
      out_5_5 = -4 * t105 * (-t2 * t70 * t71 * t28 * omega * t4 * t77 / 2 - t28 * omega * t59 * t65 / 2) * t18;
      out_6_5 = -4 * t16;
      out_3_6 = t50;
      out_4_6 = out_2_4;
      out_5_6 = -2 * out_3_2;
      out_6_6 = -4 * t169;
      out_4_7 = out_2_1;
      out_6_7 = -out_6_5;
      out_4_8 = out_2_2;
      out_6_8 = -out_6_6;
      out_5_9 = -2 * t104 * t103 * t6;
      out_6_9 = -2 * t105 * t108 * (2 * out_3_5 * t135 * t22 + 2 * t231 * t191);
      out_5_10 = -4 * t104 * t103 * (t22 * t153 * h * t17 + t22 * (t61 * t59 * t135 + 2 * t3 * t4 * t135 * t72 + t71 * t70 * (-t70 * t71 * x__r + x__l * t84))) * t109;
      out_6_10 = -2 * t104 * t103 * (-16 * y__l * y__r + 8 * t158 + 8 * t163 + 8 * t19 - 16 * t193 + 8 * t20);

      % Store outputs
      out_Jh_x = zeros(6, 10);
      out_Jh_x(1, 1) = out_1_1;
      out_Jh_x(2, 1) = out_2_1;
      out_Jh_x(3, 1) = out_3_1;
      out_Jh_x(4, 1) = out_4_1;
      out_Jh_x(5, 1) = out_5_1;
      out_Jh_x(6, 1) = out_6_1;
      out_Jh_x(1, 2) = out_1_2;
      out_Jh_x(2, 2) = out_2_2;
      out_Jh_x(3, 2) = out_3_2;
      out_Jh_x(4, 2) = out_4_2;
      out_Jh_x(5, 2) = out_5_2;
      out_Jh_x(6, 2) = out_6_2;
      out_Jh_x(2, 3) = out_2_3;
      out_Jh_x(4, 3) = out_4_3;
      out_Jh_x(5, 3) = out_5_3;
      out_Jh_x(6, 3) = out_6_3;
      out_Jh_x(2, 4) = out_2_4;
      out_Jh_x(4, 4) = out_4_4;
      out_Jh_x(5, 4) = out_5_4;
      out_Jh_x(6, 4) = out_6_4;
      out_Jh_x(3, 5) = out_3_5;
      out_Jh_x(4, 5) = out_4_5;
      out_Jh_x(5, 5) = out_5_5;
      out_Jh_x(6, 5) = out_6_5;
      out_Jh_x(3, 6) = out_3_6;
      out_Jh_x(4, 6) = out_4_6;
      out_Jh_x(5, 6) = out_5_6;
      out_Jh_x(6, 6) = out_6_6;
      out_Jh_x(4, 7) = out_4_7;
      out_Jh_x(6, 7) = out_6_7;
      out_Jh_x(4, 8) = out_4_8;
      out_Jh_x(6, 8) = out_6_8;
      out_Jh_x(5, 9) = out_5_9;
      out_Jh_x(6, 9) = out_6_9;
      out_Jh_x(5, 10) = out_5_10;
      out_Jh_x(6, 10) = out_6_10;
    end % Jh_x
    %
    % - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    %
    function out_pivots = pivots( this, ~, ~, ~ )
      % Calculate the pivoting values

      % Extract properties
      varepsilon = this.m_varepsilon;
      M = this.m_M;

      % Extract inputs

      % Evaluate function
      out_1_1 = 1;
      out_2_1 = 1;
      out_3_1 = 1;
      out_4_1 = 1;
      t1 = varepsilon ^ 2;
      out_5_1 = M * t1 / 2;
      out_6_1 = out_5_1;
      out_7_1 = out_6_1;
      out_8_1 = out_7_1;
      out_9_1 = -1;
      out_10_1 = -1;
      out_1_2 = 1;
      out_2_2 = 1;
      out_3_2 = 1;
      out_4_2 = 1;
      out_5_2 = out_8_1;
      out_6_2 = out_5_2;
      out_7_2 = out_6_2;
      out_8_2 = out_7_2;
      out_9_2 = -1;
      out_10_2 = -1;
      out_1_3 = 1;
      out_2_3 = 1;
      out_3_3 = 1;
      out_4_3 = 1;
      out_5_3 = out_8_2;
      out_6_3 = out_5_3;
      out_7_3 = out_6_3;
      out_8_3 = out_7_3;
      out_9_3 = -1;
      out_10_3 = -1;

      % Store outputs
      out_pivots = zeros(10, 3);
      out_pivots(1, 1) = out_1_1;
      out_pivots(2, 1) = out_2_1;
      out_pivots(3, 1) = out_3_1;
      out_pivots(4, 1) = out_4_1;
      out_pivots(5, 1) = out_5_1;
      out_pivots(6, 1) = out_6_1;
      out_pivots(7, 1) = out_7_1;
      out_pivots(8, 1) = out_8_1;
      out_pivots(9, 1) = out_9_1;
      out_pivots(10, 1) = out_10_1;
      out_pivots(1, 2) = out_1_2;
      out_pivots(2, 2) = out_2_2;
      out_pivots(3, 2) = out_3_2;
      out_pivots(4, 2) = out_4_2;
      out_pivots(5, 2) = out_5_2;
      out_pivots(6, 2) = out_6_2;
      out_pivots(7, 2) = out_7_2;
      out_pivots(8, 2) = out_8_2;
      out_pivots(9, 2) = out_9_2;
      out_pivots(10, 2) = out_10_2;
      out_pivots(1, 3) = out_1_3;
      out_pivots(2, 3) = out_2_3;
      out_pivots(3, 3) = out_3_3;
      out_pivots(4, 3) = out_4_3;
      out_pivots(5, 3) = out_5_3;
      out_pivots(6, 3) = out_6_3;
      out_pivots(7, 3) = out_7_3;
      out_pivots(8, 3) = out_8_3;
      out_pivots(9, 3) = out_9_3;
      out_pivots(10, 3) = out_10_3;
    end % pivots
    %
    % - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    %
    function out_Jh_v = Jh_v( ~, ~, ~, ~ )
      % Calculate the Jacobian of h with respect to v.

      % Extract properties
      % No properties

      % Extract inputs

      % Evaluate function
      % No body

      % Store outputs
      out_Jh_v = zeros(6, 0);
    end % Jh_v
    %
    % - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    %
    function out = in_domain( ~, ~, ~ )
      out = true;
    end % in_domain
    %
    % - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    %
  end
end % CarAxis

% That's All Folks!
