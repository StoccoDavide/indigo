% +--------------------------------------------------------------------------+
% | 'Indigo' module version 1.0 - BSD 3-Clause License - Copyright (c) 2023  |
% | Current version authors:                                                 |
% |   Davide Stocco and Enrico Bertolazzi.                                   |
% +--------------------------------------------------------------------------+

% Matlab generated code for implicit system: HartSecond
% This file has been automatically generated by Indigo.
% DISCLAIMER: If you need to edit it, do it wisely!

classdef HartSecond < Indigo.Systems.SemiExplicit
  %
  % No class description provided.
  %
  properties (SetAccess = protected, Hidden = true)
    % User data
    m_m = 1.0;
    m_g = 9.81;
    m_l = 1.0;
  end
  %
  methods
    %
    % - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    %
    function this = HartSecond( varargin )
      % Class constructor.

      % Superclass constructor
      num_eqns = 44;
      num_veil = 0;
      num_invs = 42;
      this = this@Indigo.Systems.SemiExplicit('HartSecond', num_eqns, num_veil, num_invs);

      % User data
      if (nargin == 0)
        % Keep default values
      elseif (nargin == 1 && isstruct(varargin{1}))
        this.m_m = varargin{1}.m;
        this.m_g = varargin{1}.g;
        this.m_l = varargin{1}.l;
      elseif (nargin == 3)
        this.m_m = varargin{1};
        this.m_g = varargin{2};
        this.m_l = varargin{3};
      else
        error('wrong number of input arguments.');
      end
    end % HartSecond
    %
    % - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    %
    function out_A = A( this, in_1, in_2, t )
      % Evaluate the matrix A.

      % Extract properties
      m = this.m_m;
      g = this.m_g;
      l = this.m_l;

      % Extract inputs
      x__AC = in_1(1);
      y__AC = in_1(2);
      theta__AC = in_1(3);
      x__BD = in_1(4);
      y__BD = in_1(5);
      theta__BD = in_1(6);
      x__fg = in_1(7);
      y__fg = in_1(8);
      theta__fg = in_1(9);
      x__CE = in_1(10);
      y__CE = in_1(11);
      theta__CE = in_1(12);
      x__ED = in_1(13);
      y__ED = in_1(14);
      theta__ED = in_1(15);
      u__AC = in_1(16);
      v__AC = in_1(17);
      omega__AC = in_1(18);
      u__BD = in_1(19);
      v__BD = in_1(20);
      omega__BD = in_1(21);
      u__fg = in_1(22);
      v__fg = in_1(23);
      omega__fg = in_1(24);
      u__CE = in_1(25);
      v__CE = in_1(26);
      omega__CE = in_1(27);
      u__ED = in_1(28);
      v__ED = in_1(29);
      omega__ED = in_1(30);
      lambda__1 = in_1(31);
      lambda__2 = in_1(32);
      lambda__3 = in_1(33);
      lambda__4 = in_1(34);
      lambda__5 = in_1(35);
      lambda__6 = in_1(36);
      lambda__7 = in_1(37);
      lambda__8 = in_1(38);
      lambda__9 = in_1(39);
      lambda__10 = in_1(40);
      lambda__11 = in_1(41);
      lambda__12 = in_1(42);
      lambda__13 = in_1(43);
      lambda__14 = in_1(44);

      % Evaluate function
      out_1_1 = 1;
      out_2_2 = 1;
      out_30_3 = 1;
      t3 = -18 * lambda__10 - 24 * lambda__6;
      t4 = cos(theta__AC);
      t5 = t4 ^ 2;
      t9 = sin(theta__AC);
      t11 = t4 * t9 * (lambda__5 + 0.3e1 / 0.4e1 * lambda__9);
      t13 = omega__AC ^ 2;
      t15 = l * m;
      t16 = t15 * t9 * t13;
      t21 = 0.1e1 / l;
      t23 = 0.1e1 / m;
      out_35_3 = t23 * t21 * (t5 * t3 + 24 * t11 + 64 * t16 + 9 * lambda__10 + 12 * lambda__6) / 64;
      t30 = t13 * t15;
      out_36_3 = t23 * t21 * (t5 * (-24 * lambda__5 - 18 * lambda__9) + t4 * (t9 * t3 - 64 * t30) + 12 * lambda__5 + 9 * lambda__9) / 64;
      t41 = -54 * lambda__10 - 72 * lambda__6;
      out_39_3 = t23 * t21 * (t5 * t41 + 72 * t11 + 192 * t16 + 27 * lambda__10 + 36 * lambda__6) / 192;
      out_40_3 = t23 * t21 * (t5 * (-72 * lambda__5 - 54 * lambda__9) + t4 * (t9 * t41 - 192 * t30) + 36 * lambda__5 + 27 * lambda__9) / 192;
      out_3_4 = 1;
      out_4_5 = 1;
      out_27_6 = 1;
      t65 = 18 * lambda__12 - 24 * lambda__8;
      t66 = cos(theta__BD);
      t67 = t66 ^ 2;
      t69 = sin(theta__BD);
      t75 = omega__BD ^ 2;
      t77 = t15 * t69 * t75;
      out_37_6 = t23 * t21 * (t67 * t65 + 24 * t66 * (lambda__7 - 0.3e1 / 0.4e1 * lambda__11) * t69 + 64 * t77 - 9 * lambda__12 + 12 * lambda__8) / 64;
      t89 = t75 * t15;
      out_38_6 = t23 * t21 * (t67 * (-24 * lambda__7 + 18 * lambda__11) + t66 * (t69 * t65 - 64 * t89) + 12 * lambda__7 - 9 * lambda__11) / 64;
      t100 = -54 * lambda__12 + 72 * lambda__8;
      out_41_6 = t23 * t21 * (t67 * t100 + 54 * t66 * t69 * (lambda__11 - 0.4e1 / 0.3e1 * lambda__7) - 192 * t77 + 27 * lambda__12 - 36 * lambda__8) / 192;
      out_42_6 = t23 * t21 * (t67 * (-54 * lambda__11 + 72 * lambda__7) + t66 * (t69 * t100 + 192 * t89) + 27 * lambda__11 - 36 * lambda__7) / 192;
      out_5_7 = 1;
      out_6_8 = 1;
      out_12_9 = 1;
      t126 = omega__fg ^ 2;
      t127 = sin(theta__fg);
      t131 = cos(theta__fg);
      t135 = t131 ^ 2;
      out_41_9 = t23 * t21 * (128 * t15 * t127 * t126 + 192 * t127 * lambda__11 * t131 - 192 * t135 * lambda__12 + 96 * lambda__12) / 192;
      out_42_9 = t23 * t21 * (-192 * lambda__11 * t135 + t131 * (-128 * t126 * t15 - 192 * t127 * lambda__12) + 96 * lambda__11) / 192;
      out_7_10 = 1;
      out_8_11 = 1;
      out_11_12 = 1;
      t154 = omega__CE ^ 2;
      t155 = sin(theta__CE);
      t159 = cos(theta__CE);
      t160 = t155 * t159;
      t163 = t159 ^ 2;
      t166 = 3 * lambda__14;
      out_43_12 = t23 * t21 * (4 * t15 * t155 * t154 + 6 * lambda__13 * t160 - 6 * lambda__14 * t163 + t166) / 4;
      t178 = 3 * lambda__13;
      out_44_12 = t23 * t21 * (-6 * lambda__13 * t163 + t159 * (-4 * t154 * t15 - 6 * t155 * lambda__14) + t178) / 4;
      out_9_13 = 1;
      out_10_14 = 1;
      out_13_15 = 1;
      t182 = omega__ED ^ 2;
      t183 = sin(theta__ED);
      t187 = cos(theta__ED);
      t188 = t187 * t183;
      t191 = t187 ^ 2;
      out_43_15 = t23 * t21 * (-4 * t15 * t183 * t182 + 6 * lambda__13 * t188 - 6 * lambda__14 * t191 + t166) / 4;
      out_44_15 = t23 * t21 * (-6 * lambda__13 * t191 + t187 * (4 * t182 * t15 - 6 * t183 * lambda__14) + t178) / 4;
      out_23_16 = 1;
      out_24_17 = 1;
      out_28_18 = 1;
      out_35_18 = -2 * t4 * omega__AC;
      out_36_18 = -2 * t9 * omega__AC;
      out_39_18 = out_35_18;
      out_40_18 = out_36_18;
      out_25_19 = 1;
      out_26_20 = 1;
      out_29_21 = 1;
      t213 = 2 * t66 * omega__BD;
      out_37_21 = -t213;
      t215 = 2 * t69 * omega__BD;
      out_38_21 = -t215;
      out_41_21 = t213;
      out_42_21 = t215;
      out_14_22 = 1;
      out_15_23 = 1;
      out_16_24 = 1;
      out_41_24 = -0.4e1 / 0.3e1 * t131 * omega__fg;
      out_42_24 = -0.4e1 / 0.3e1 * t127 * omega__fg;
      out_17_25 = 1;
      out_18_26 = 1;
      out_19_27 = 1;
      out_43_27 = -2 * t159 * omega__CE;
      out_44_27 = -2 * t155 * omega__CE;
      out_20_28 = 1;
      out_21_29 = 1;
      out_22_30 = 1;
      out_43_30 = 2 * t187 * omega__ED;
      out_44_30 = 2 * t183 * omega__ED;
      out_31_31 = t23 / 4;
      t226 = t23 * t21;
      out_35_31 = -t226 / 16;
      t228 = t226 / 12;
      out_39_31 = -t228;
      out_32_32 = out_31_31;
      out_36_32 = out_35_31;
      out_40_32 = out_39_31;
      out_33_33 = out_32_32;
      out_37_33 = out_36_32;
      out_41_33 = t228;
      out_34_34 = out_33_33;
      out_38_34 = out_37_33;
      out_42_34 = out_41_33;
      out_31_35 = -out_34_34;
      out_35_35 = t23 * t21 * (-12 * t5 + 24) / 64;
      t234 = t226 * t9 * t4;
      out_36_35 = -0.3e1 / 0.16e2 * t234;
      t236 = 36 * t5;
      out_39_35 = t23 * t21 * (-t236 + 52) / 192;
      out_40_35 = out_36_35;
      t240 = t226 / 4;
      out_43_35 = -t240;
      out_32_36 = out_31_35;
      out_35_36 = out_40_35;
      out_36_36 = t23 * t21 * (12 * t5 + 12) / 64;
      out_39_36 = out_35_36;
      out_40_36 = t23 * t21 * (t236 + 16) / 192;
      out_44_36 = out_43_35;
      out_33_37 = out_32_36;
      out_37_37 = t23 * t21 * (-12 * t67 + 24) / 64;
      t252 = t69 * t66;
      t253 = t226 * t252;
      t254 = 0.3e1 / 0.16e2 * t253;
      out_38_37 = -t254;
      t255 = 36 * t67;
      out_41_37 = t23 * t21 * (t255 - 52) / 192;
      out_42_37 = t254;
      out_43_37 = t240;
      out_34_38 = out_33_37;
      out_37_38 = out_38_37;
      out_38_38 = t23 * t21 * (12 * t67 + 12) / 64;
      out_41_38 = out_42_37;
      out_42_38 = t23 * t21 * (-t255 - 16) / 192;
      out_44_38 = out_43_37;
      out_31_39 = out_34_38;
      t266 = 9 * t5;
      out_35_39 = t23 * t21 * (-t266 + 13) / 64;
      out_36_39 = -0.9e1 / 0.64e2 * t234;
      t271 = 27 * t5;
      out_39_39 = t23 * t21 * (-t271 + 75) / 192;
      out_40_39 = out_36_39;
      out_41_39 = -t226 / 6;
      out_32_40 = out_31_39;
      out_35_40 = out_40_39;
      out_36_40 = t23 * t21 * (t266 + 4) / 64;
      out_39_40 = out_35_40;
      out_40_40 = t23 * t21 * (t271 + 48) / 192;
      out_42_40 = out_41_39;
      out_33_41 = out_34_34;
      t282 = 9 * t67;
      out_37_41 = t23 * t21 * (t282 - 13) / 64;
      out_38_41 = 0.9e1 / 0.64e2 * t253;
      out_39_41 = out_42_40;
      t286 = 96 * t135;
      t287 = 27 * t67;
      out_41_41 = t23 * t21 * (-t286 - t287 + 171) / 192;
      out_42_41 = t23 * t21 * (-96 * t127 * t131 - 27 * t252) / 192;
      out_34_42 = out_33_41;
      out_37_42 = out_38_41;
      out_38_42 = t23 * t21 * (-t282 - 4) / 64;
      out_40_42 = out_39_41;
      out_41_42 = out_42_41;
      out_42_42 = t23 * t21 * (t286 + t287 + 48) / 192;
      t303 = t226 / 8;
      out_35_43 = -t303;
      out_37_43 = t303;
      t304 = 3 * t191;
      t305 = 3 * t163;
      out_43_43 = t23 * t21 * (-t304 - t305 + 8) / 4;
      out_44_43 = t23 * t21 * (-3 * t188 - 3 * t160) / 4;
      out_36_44 = out_35_43;
      out_38_44 = out_37_43;
      out_43_44 = out_44_43;
      out_44_44 = t23 * t21 * (t304 + t305 + 2) / 4;

      % Store outputs
      out_A = zeros(44, 44);
      out_A(1, 1) = out_1_1;
      out_A(2, 2) = out_2_2;
      out_A(30, 3) = out_30_3;
      out_A(35, 3) = out_35_3;
      out_A(36, 3) = out_36_3;
      out_A(39, 3) = out_39_3;
      out_A(40, 3) = out_40_3;
      out_A(3, 4) = out_3_4;
      out_A(4, 5) = out_4_5;
      out_A(27, 6) = out_27_6;
      out_A(37, 6) = out_37_6;
      out_A(38, 6) = out_38_6;
      out_A(41, 6) = out_41_6;
      out_A(42, 6) = out_42_6;
      out_A(5, 7) = out_5_7;
      out_A(6, 8) = out_6_8;
      out_A(12, 9) = out_12_9;
      out_A(41, 9) = out_41_9;
      out_A(42, 9) = out_42_9;
      out_A(7, 10) = out_7_10;
      out_A(8, 11) = out_8_11;
      out_A(11, 12) = out_11_12;
      out_A(43, 12) = out_43_12;
      out_A(44, 12) = out_44_12;
      out_A(9, 13) = out_9_13;
      out_A(10, 14) = out_10_14;
      out_A(13, 15) = out_13_15;
      out_A(43, 15) = out_43_15;
      out_A(44, 15) = out_44_15;
      out_A(23, 16) = out_23_16;
      out_A(24, 17) = out_24_17;
      out_A(28, 18) = out_28_18;
      out_A(35, 18) = out_35_18;
      out_A(36, 18) = out_36_18;
      out_A(39, 18) = out_39_18;
      out_A(40, 18) = out_40_18;
      out_A(25, 19) = out_25_19;
      out_A(26, 20) = out_26_20;
      out_A(29, 21) = out_29_21;
      out_A(37, 21) = out_37_21;
      out_A(38, 21) = out_38_21;
      out_A(41, 21) = out_41_21;
      out_A(42, 21) = out_42_21;
      out_A(14, 22) = out_14_22;
      out_A(15, 23) = out_15_23;
      out_A(16, 24) = out_16_24;
      out_A(41, 24) = out_41_24;
      out_A(42, 24) = out_42_24;
      out_A(17, 25) = out_17_25;
      out_A(18, 26) = out_18_26;
      out_A(19, 27) = out_19_27;
      out_A(43, 27) = out_43_27;
      out_A(44, 27) = out_44_27;
      out_A(20, 28) = out_20_28;
      out_A(21, 29) = out_21_29;
      out_A(22, 30) = out_22_30;
      out_A(43, 30) = out_43_30;
      out_A(44, 30) = out_44_30;
      out_A(31, 31) = out_31_31;
      out_A(35, 31) = out_35_31;
      out_A(39, 31) = out_39_31;
      out_A(32, 32) = out_32_32;
      out_A(36, 32) = out_36_32;
      out_A(40, 32) = out_40_32;
      out_A(33, 33) = out_33_33;
      out_A(37, 33) = out_37_33;
      out_A(41, 33) = out_41_33;
      out_A(34, 34) = out_34_34;
      out_A(38, 34) = out_38_34;
      out_A(42, 34) = out_42_34;
      out_A(31, 35) = out_31_35;
      out_A(35, 35) = out_35_35;
      out_A(36, 35) = out_36_35;
      out_A(39, 35) = out_39_35;
      out_A(40, 35) = out_40_35;
      out_A(43, 35) = out_43_35;
      out_A(32, 36) = out_32_36;
      out_A(35, 36) = out_35_36;
      out_A(36, 36) = out_36_36;
      out_A(39, 36) = out_39_36;
      out_A(40, 36) = out_40_36;
      out_A(44, 36) = out_44_36;
      out_A(33, 37) = out_33_37;
      out_A(37, 37) = out_37_37;
      out_A(38, 37) = out_38_37;
      out_A(41, 37) = out_41_37;
      out_A(42, 37) = out_42_37;
      out_A(43, 37) = out_43_37;
      out_A(34, 38) = out_34_38;
      out_A(37, 38) = out_37_38;
      out_A(38, 38) = out_38_38;
      out_A(41, 38) = out_41_38;
      out_A(42, 38) = out_42_38;
      out_A(44, 38) = out_44_38;
      out_A(31, 39) = out_31_39;
      out_A(35, 39) = out_35_39;
      out_A(36, 39) = out_36_39;
      out_A(39, 39) = out_39_39;
      out_A(40, 39) = out_40_39;
      out_A(41, 39) = out_41_39;
      out_A(32, 40) = out_32_40;
      out_A(35, 40) = out_35_40;
      out_A(36, 40) = out_36_40;
      out_A(39, 40) = out_39_40;
      out_A(40, 40) = out_40_40;
      out_A(42, 40) = out_42_40;
      out_A(33, 41) = out_33_41;
      out_A(37, 41) = out_37_41;
      out_A(38, 41) = out_38_41;
      out_A(39, 41) = out_39_41;
      out_A(41, 41) = out_41_41;
      out_A(42, 41) = out_42_41;
      out_A(34, 42) = out_34_42;
      out_A(37, 42) = out_37_42;
      out_A(38, 42) = out_38_42;
      out_A(40, 42) = out_40_42;
      out_A(41, 42) = out_41_42;
      out_A(42, 42) = out_42_42;
      out_A(35, 43) = out_35_43;
      out_A(37, 43) = out_37_43;
      out_A(43, 43) = out_43_43;
      out_A(44, 43) = out_44_43;
      out_A(36, 44) = out_36_44;
      out_A(38, 44) = out_38_44;
      out_A(43, 44) = out_43_44;
      out_A(44, 44) = out_44_44;
    end % A
    %
    % - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    %
    function out_TA_x = TA_x( this, in_1, in_2, t )
      % Evaluate the tensor of A with respect to x.

      % Extract properties
      m = this.m_m;
      g = this.m_g;
      l = this.m_l;

      % Extract inputs
      x__AC = in_1(1);
      y__AC = in_1(2);
      theta__AC = in_1(3);
      x__BD = in_1(4);
      y__BD = in_1(5);
      theta__BD = in_1(6);
      x__fg = in_1(7);
      y__fg = in_1(8);
      theta__fg = in_1(9);
      x__CE = in_1(10);
      y__CE = in_1(11);
      theta__CE = in_1(12);
      x__ED = in_1(13);
      y__ED = in_1(14);
      theta__ED = in_1(15);
      u__AC = in_1(16);
      v__AC = in_1(17);
      omega__AC = in_1(18);
      u__BD = in_1(19);
      v__BD = in_1(20);
      omega__BD = in_1(21);
      u__fg = in_1(22);
      v__fg = in_1(23);
      omega__fg = in_1(24);
      u__CE = in_1(25);
      v__CE = in_1(26);
      omega__CE = in_1(27);
      u__ED = in_1(28);
      v__ED = in_1(29);
      omega__ED = in_1(30);
      lambda__1 = in_1(31);
      lambda__2 = in_1(32);
      lambda__3 = in_1(33);
      lambda__4 = in_1(34);
      lambda__5 = in_1(35);
      lambda__6 = in_1(36);
      lambda__7 = in_1(37);
      lambda__8 = in_1(38);
      lambda__9 = in_1(39);
      lambda__10 = in_1(40);
      lambda__11 = in_1(41);
      lambda__12 = in_1(42);
      lambda__13 = in_1(43);
      lambda__14 = in_1(44);

      % Evaluate function
      t3 = -18 * lambda__10 - 24 * lambda__6;
      t4 = cos(theta__AC);
      t6 = sin(theta__AC);
      t10 = lambda__5 + 0.3e1 / 0.4e1 * lambda__9;
      t11 = t4 ^ 2;
      t12 = t11 * t10;
      t14 = t6 ^ 2;
      t15 = t14 * t10;
      t17 = omega__AC ^ 2;
      t19 = l * m;
      t20 = t19 * t4 * t17;
      t23 = 0.1e1 / l;
      t25 = 0.1e1 / m;
      out_35_3_3 = t25 * t23 * (-2 * t6 * t4 * t3 + 24 * t12 - 24 * t15 + 64 * t20) / 64;
      t35 = t17 * t19;
      out_36_3_3 = t25 * t23 * (-2 * t6 * t4 * (-24 * lambda__5 - 18 * lambda__9) + t11 * t3 - t6 * (t6 * t3 - 64 * t35)) / 64;
      t44 = -54 * lambda__10 - 72 * lambda__6;
      out_39_3_3 = t25 * t23 * (-2 * t6 * t4 * t44 + 72 * t12 - 72 * t15 + 192 * t20) / 192;
      out_40_3_3 = t25 * t23 * (-2 * t6 * t4 * (-72 * lambda__5 - 54 * lambda__9) + t11 * t44 - t6 * (t6 * t44 - 192 * t35)) / 192;
      out_35_18_3 = 2 * t6 * omega__AC;
      out_36_18_3 = -2 * t4 * omega__AC;
      out_39_18_3 = out_35_18_3;
      out_40_18_3 = out_36_18_3;
      t72 = t25 * t23;
      t73 = t72 * t6 * t4;
      out_35_35_3 = 0.3e1 / 0.8e1 * t73;
      t78 = -t25 * t23 * t11 + t25 * t23 * t14;
      out_36_35_3 = 0.3e1 / 0.16e2 * t78;
      out_39_35_3 = out_35_35_3;
      out_40_35_3 = out_36_35_3;
      out_35_36_3 = out_40_35_3;
      out_36_36_3 = -out_39_35_3;
      out_39_36_3 = out_35_36_3;
      out_40_36_3 = out_36_36_3;
      out_35_39_3 = 0.9e1 / 0.32e2 * t73;
      out_36_39_3 = 0.9e1 / 0.64e2 * t78;
      out_39_39_3 = out_35_39_3;
      out_40_39_3 = out_36_39_3;
      out_35_40_3 = out_40_39_3;
      out_36_40_3 = -out_39_39_3;
      out_39_40_3 = out_35_40_3;
      out_40_40_3 = out_36_40_3;
      t81 = 18 * lambda__12 - 24 * lambda__8;
      t82 = cos(theta__BD);
      t84 = sin(theta__BD);
      t87 = t82 ^ 2;
      t89 = lambda__7 - 0.3e1 / 0.4e1 * lambda__11;
      t92 = t84 ^ 2;
      t95 = omega__BD ^ 2;
      t97 = t19 * t82 * t95;
      out_37_6_6 = t25 * t23 * (-2 * t84 * t82 * t81 + 24 * t89 * t87 - 24 * t89 * t92 + 64 * t97) / 64;
      t110 = t95 * t19;
      out_38_6_6 = t25 * t23 * (-2 * t84 * t82 * (-24 * lambda__7 + 18 * lambda__11) + t87 * t81 - t84 * (t84 * t81 - 64 * t110)) / 64;
      t119 = -54 * lambda__12 + 72 * lambda__8;
      t124 = lambda__11 - 0.4e1 / 0.3e1 * lambda__7;
      out_41_6_6 = t25 * t23 * (-2 * t84 * t82 * t119 + 54 * t87 * t124 - 54 * t92 * t124 - 192 * t97) / 192;
      out_42_6_6 = t25 * t23 * (-2 * t84 * t82 * (-54 * lambda__11 + 72 * lambda__7) + t87 * t119 - t84 * (t84 * t119 + 192 * t110)) / 192;
      out_37_21_6 = 2 * t84 * omega__BD;
      t149 = 2 * t82 * omega__BD;
      out_38_21_6 = -t149;
      out_41_21_6 = -out_37_21_6;
      out_42_21_6 = t149;
      t151 = t72 * t84 * t82;
      out_37_37_6 = 0.3e1 / 0.8e1 * t151;
      t156 = -t25 * t23 * t87 + t25 * t23 * t92;
      out_38_37_6 = 0.3e1 / 0.16e2 * t156;
      out_41_37_6 = -out_37_37_6;
      out_42_37_6 = -out_38_37_6;
      out_37_38_6 = out_38_37_6;
      out_38_38_6 = out_41_37_6;
      out_41_38_6 = out_42_37_6;
      out_42_38_6 = out_37_37_6;
      t157 = 0.9e1 / 0.32e2 * t151;
      out_37_41_6 = -t157;
      out_38_41_6 = -0.9e1 / 0.64e2 * t156;
      out_41_41_6 = t157;
      out_42_41_6 = t25 * t23 * (27 * t92 - 27 * t87) / 192;
      out_37_42_6 = out_38_41_6;
      out_38_42_6 = out_41_41_6;
      out_41_42_6 = out_42_41_6;
      out_42_42_6 = out_37_41_6;
      t163 = omega__fg ^ 2;
      t164 = cos(theta__fg);
      t168 = sin(theta__fg);
      t169 = t168 ^ 2;
      t172 = t164 ^ 2;
      out_41_9_9 = t25 * t23 * (128 * t19 * t164 * t163 + 384 * t168 * t164 * lambda__12 - 192 * t169 * lambda__11 + 192 * lambda__11 * t172) / 192;
      out_42_9_9 = t25 * t23 * (384 * t168 * lambda__11 * t164 - 192 * t172 * lambda__12 - t168 * (-128 * t163 * t19 - 192 * t168 * lambda__12)) / 192;
      out_41_24_9 = 0.4e1 / 0.3e1 * t168 * omega__fg;
      out_42_24_9 = -0.4e1 / 0.3e1 * t164 * omega__fg;
      out_41_41_9 = t72 * t168 * t164;
      out_42_41_9 = t25 * t23 * (96 * t169 - 96 * t172) / 192;
      out_41_42_9 = out_42_41_9;
      out_42_42_9 = -out_41_41_9;
      t203 = omega__CE ^ 2;
      t204 = cos(theta__CE);
      t208 = sin(theta__CE);
      t209 = t208 ^ 2;
      t212 = t204 ^ 2;
      t215 = t208 * t204;
      out_43_12_12 = t25 * t23 * (4 * t19 * t204 * t203 - 6 * lambda__13 * t209 + 6 * lambda__13 * t212 + 12 * lambda__14 * t215) / 4;
      out_44_12_12 = t25 * t23 * (12 * lambda__13 * t215 - 6 * lambda__14 * t212 - t208 * (-4 * t203 * t19 - 6 * t208 * lambda__14)) / 4;
      out_43_27_12 = 2 * t208 * omega__CE;
      out_44_27_12 = -2 * t204 * omega__CE;
      out_43_43_12 = 0.3e1 / 0.2e1 * t72 * t215;
      out_44_43_12 = t25 * t23 * (-3 * t212 + 3 * t209) / 4;
      out_43_44_12 = out_44_43_12;
      out_44_44_12 = -out_43_43_12;
      t242 = omega__ED ^ 2;
      t243 = cos(theta__ED);
      t247 = t243 ^ 2;
      t250 = sin(theta__ED);
      t251 = t250 ^ 2;
      t254 = t243 * t250;
      out_43_15_15 = t25 * t23 * (-4 * t19 * t243 * t242 + 6 * lambda__13 * t247 - 6 * lambda__13 * t251 + 12 * lambda__14 * t254) / 4;
      out_44_15_15 = t25 * t23 * (12 * lambda__13 * t254 - 6 * lambda__14 * t247 - t250 * (4 * t242 * t19 - 6 * t250 * lambda__14)) / 4;
      out_43_30_15 = -2 * t250 * omega__ED;
      out_44_30_15 = 2 * t243 * omega__ED;
      out_43_43_15 = 0.3e1 / 0.2e1 * t72 * t254;
      out_44_43_15 = t25 * t23 * (-3 * t247 + 3 * t251) / 4;
      out_43_44_15 = out_44_43_15;
      out_44_44_15 = -out_43_43_15;
      out_35_3_18 = out_39_18_3;
      out_36_3_18 = out_40_18_3;
      out_39_3_18 = out_35_3_18;
      out_40_3_18 = out_36_3_18;
      out_35_18_18 = -2 * t4;
      out_36_18_18 = -2 * t6;
      out_39_18_18 = out_35_18_18;
      out_40_18_18 = out_36_18_18;
      out_37_6_21 = out_37_21_6;
      out_38_6_21 = out_38_21_6;
      out_41_6_21 = out_41_21_6;
      out_42_6_21 = out_42_21_6;
      t283 = 2 * t82;
      out_37_21_21 = -t283;
      t284 = 2 * t84;
      out_38_21_21 = -t284;
      out_41_21_21 = t283;
      out_42_21_21 = t284;
      out_41_9_24 = out_41_24_9;
      out_42_9_24 = out_42_24_9;
      out_41_24_24 = -0.4e1 / 0.3e1 * t164;
      out_42_24_24 = -0.4e1 / 0.3e1 * t168;
      out_43_12_27 = out_43_27_12;
      out_44_12_27 = out_44_27_12;
      out_43_27_27 = -2 * t204;
      out_44_27_27 = -2 * t208;
      out_43_15_30 = out_43_30_15;
      out_44_15_30 = out_44_30_15;
      out_43_30_30 = 2 * t243;
      out_44_30_30 = 2 * t250;
      out_35_3_35 = out_39_35_3;
      out_36_3_35 = t25 * t23 * (-24 * t11 + 12) / 64;
      out_39_3_35 = out_35_3_35;
      out_40_3_35 = t25 * t23 * (-72 * t11 + 36) / 192;
      out_35_3_36 = out_36_3_35;
      out_36_3_36 = out_40_36_3;
      out_39_3_36 = out_40_3_35;
      out_40_3_36 = out_36_3_36;
      out_37_6_37 = out_42_38_6;
      out_38_6_37 = t25 * t23 * (-24 * t87 + 12) / 64;
      out_41_6_37 = out_38_38_6;
      out_42_6_37 = t25 * t23 * (72 * t87 - 36) / 192;
      out_37_6_38 = out_38_6_37;
      out_38_6_38 = out_41_6_37;
      out_41_6_38 = out_42_6_37;
      out_42_6_38 = out_37_6_37;
      out_35_3_39 = out_39_39_3;
      out_36_3_39 = t25 * t23 * (-18 * t11 + 9) / 64;
      out_39_3_39 = out_35_3_39;
      out_40_3_39 = t25 * t23 * (-54 * t11 + 27) / 192;
      out_35_3_40 = out_36_3_39;
      out_36_3_40 = out_40_40_3;
      out_39_3_40 = out_40_3_39;
      out_40_3_40 = out_36_3_40;
      out_37_6_41 = out_42_42_6;
      out_38_6_41 = t25 * t23 * (18 * t87 - 9) / 64;
      out_41_6_41 = out_38_42_6;
      out_42_6_41 = t25 * t23 * (-54 * t87 + 27) / 192;
      out_41_9_41 = out_41_41_9;
      out_42_9_41 = t25 * t23 * (-192 * t172 + 96) / 192;
      out_37_6_42 = out_38_6_41;
      out_38_6_42 = out_41_6_41;
      out_41_6_42 = out_42_6_41;
      out_42_6_42 = out_37_6_41;
      out_41_9_42 = out_42_9_41;
      out_42_9_42 = out_42_42_9;
      out_43_12_43 = out_43_43_12;
      out_44_12_43 = t25 * t23 * (-6 * t212 + 3) / 4;
      out_43_15_43 = out_43_43_15;
      out_44_15_43 = t25 * t23 * (-6 * t247 + 3) / 4;
      out_43_12_44 = out_44_12_43;
      out_44_12_44 = out_44_44_12;
      out_43_15_44 = out_44_15_43;
      out_44_15_44 = out_44_44_15;

      % Store outputs
      out_TA_x = zeros(44, 44, 44);
      out_TA_x(35, 3, 3) = out_35_3_3;
      out_TA_x(36, 3, 3) = out_36_3_3;
      out_TA_x(39, 3, 3) = out_39_3_3;
      out_TA_x(40, 3, 3) = out_40_3_3;
      out_TA_x(35, 18, 3) = out_35_18_3;
      out_TA_x(36, 18, 3) = out_36_18_3;
      out_TA_x(39, 18, 3) = out_39_18_3;
      out_TA_x(40, 18, 3) = out_40_18_3;
      out_TA_x(35, 35, 3) = out_35_35_3;
      out_TA_x(36, 35, 3) = out_36_35_3;
      out_TA_x(39, 35, 3) = out_39_35_3;
      out_TA_x(40, 35, 3) = out_40_35_3;
      out_TA_x(35, 36, 3) = out_35_36_3;
      out_TA_x(36, 36, 3) = out_36_36_3;
      out_TA_x(39, 36, 3) = out_39_36_3;
      out_TA_x(40, 36, 3) = out_40_36_3;
      out_TA_x(35, 39, 3) = out_35_39_3;
      out_TA_x(36, 39, 3) = out_36_39_3;
      out_TA_x(39, 39, 3) = out_39_39_3;
      out_TA_x(40, 39, 3) = out_40_39_3;
      out_TA_x(35, 40, 3) = out_35_40_3;
      out_TA_x(36, 40, 3) = out_36_40_3;
      out_TA_x(39, 40, 3) = out_39_40_3;
      out_TA_x(40, 40, 3) = out_40_40_3;
      out_TA_x(37, 6, 6) = out_37_6_6;
      out_TA_x(38, 6, 6) = out_38_6_6;
      out_TA_x(41, 6, 6) = out_41_6_6;
      out_TA_x(42, 6, 6) = out_42_6_6;
      out_TA_x(37, 21, 6) = out_37_21_6;
      out_TA_x(38, 21, 6) = out_38_21_6;
      out_TA_x(41, 21, 6) = out_41_21_6;
      out_TA_x(42, 21, 6) = out_42_21_6;
      out_TA_x(37, 37, 6) = out_37_37_6;
      out_TA_x(38, 37, 6) = out_38_37_6;
      out_TA_x(41, 37, 6) = out_41_37_6;
      out_TA_x(42, 37, 6) = out_42_37_6;
      out_TA_x(37, 38, 6) = out_37_38_6;
      out_TA_x(38, 38, 6) = out_38_38_6;
      out_TA_x(41, 38, 6) = out_41_38_6;
      out_TA_x(42, 38, 6) = out_42_38_6;
      out_TA_x(37, 41, 6) = out_37_41_6;
      out_TA_x(38, 41, 6) = out_38_41_6;
      out_TA_x(41, 41, 6) = out_41_41_6;
      out_TA_x(42, 41, 6) = out_42_41_6;
      out_TA_x(37, 42, 6) = out_37_42_6;
      out_TA_x(38, 42, 6) = out_38_42_6;
      out_TA_x(41, 42, 6) = out_41_42_6;
      out_TA_x(42, 42, 6) = out_42_42_6;
      out_TA_x(41, 9, 9) = out_41_9_9;
      out_TA_x(42, 9, 9) = out_42_9_9;
      out_TA_x(41, 24, 9) = out_41_24_9;
      out_TA_x(42, 24, 9) = out_42_24_9;
      out_TA_x(41, 41, 9) = out_41_41_9;
      out_TA_x(42, 41, 9) = out_42_41_9;
      out_TA_x(41, 42, 9) = out_41_42_9;
      out_TA_x(42, 42, 9) = out_42_42_9;
      out_TA_x(43, 12, 12) = out_43_12_12;
      out_TA_x(44, 12, 12) = out_44_12_12;
      out_TA_x(43, 27, 12) = out_43_27_12;
      out_TA_x(44, 27, 12) = out_44_27_12;
      out_TA_x(43, 43, 12) = out_43_43_12;
      out_TA_x(44, 43, 12) = out_44_43_12;
      out_TA_x(43, 44, 12) = out_43_44_12;
      out_TA_x(44, 44, 12) = out_44_44_12;
      out_TA_x(43, 15, 15) = out_43_15_15;
      out_TA_x(44, 15, 15) = out_44_15_15;
      out_TA_x(43, 30, 15) = out_43_30_15;
      out_TA_x(44, 30, 15) = out_44_30_15;
      out_TA_x(43, 43, 15) = out_43_43_15;
      out_TA_x(44, 43, 15) = out_44_43_15;
      out_TA_x(43, 44, 15) = out_43_44_15;
      out_TA_x(44, 44, 15) = out_44_44_15;
      out_TA_x(35, 3, 18) = out_35_3_18;
      out_TA_x(36, 3, 18) = out_36_3_18;
      out_TA_x(39, 3, 18) = out_39_3_18;
      out_TA_x(40, 3, 18) = out_40_3_18;
      out_TA_x(35, 18, 18) = out_35_18_18;
      out_TA_x(36, 18, 18) = out_36_18_18;
      out_TA_x(39, 18, 18) = out_39_18_18;
      out_TA_x(40, 18, 18) = out_40_18_18;
      out_TA_x(37, 6, 21) = out_37_6_21;
      out_TA_x(38, 6, 21) = out_38_6_21;
      out_TA_x(41, 6, 21) = out_41_6_21;
      out_TA_x(42, 6, 21) = out_42_6_21;
      out_TA_x(37, 21, 21) = out_37_21_21;
      out_TA_x(38, 21, 21) = out_38_21_21;
      out_TA_x(41, 21, 21) = out_41_21_21;
      out_TA_x(42, 21, 21) = out_42_21_21;
      out_TA_x(41, 9, 24) = out_41_9_24;
      out_TA_x(42, 9, 24) = out_42_9_24;
      out_TA_x(41, 24, 24) = out_41_24_24;
      out_TA_x(42, 24, 24) = out_42_24_24;
      out_TA_x(43, 12, 27) = out_43_12_27;
      out_TA_x(44, 12, 27) = out_44_12_27;
      out_TA_x(43, 27, 27) = out_43_27_27;
      out_TA_x(44, 27, 27) = out_44_27_27;
      out_TA_x(43, 15, 30) = out_43_15_30;
      out_TA_x(44, 15, 30) = out_44_15_30;
      out_TA_x(43, 30, 30) = out_43_30_30;
      out_TA_x(44, 30, 30) = out_44_30_30;
      out_TA_x(35, 3, 35) = out_35_3_35;
      out_TA_x(36, 3, 35) = out_36_3_35;
      out_TA_x(39, 3, 35) = out_39_3_35;
      out_TA_x(40, 3, 35) = out_40_3_35;
      out_TA_x(35, 3, 36) = out_35_3_36;
      out_TA_x(36, 3, 36) = out_36_3_36;
      out_TA_x(39, 3, 36) = out_39_3_36;
      out_TA_x(40, 3, 36) = out_40_3_36;
      out_TA_x(37, 6, 37) = out_37_6_37;
      out_TA_x(38, 6, 37) = out_38_6_37;
      out_TA_x(41, 6, 37) = out_41_6_37;
      out_TA_x(42, 6, 37) = out_42_6_37;
      out_TA_x(37, 6, 38) = out_37_6_38;
      out_TA_x(38, 6, 38) = out_38_6_38;
      out_TA_x(41, 6, 38) = out_41_6_38;
      out_TA_x(42, 6, 38) = out_42_6_38;
      out_TA_x(35, 3, 39) = out_35_3_39;
      out_TA_x(36, 3, 39) = out_36_3_39;
      out_TA_x(39, 3, 39) = out_39_3_39;
      out_TA_x(40, 3, 39) = out_40_3_39;
      out_TA_x(35, 3, 40) = out_35_3_40;
      out_TA_x(36, 3, 40) = out_36_3_40;
      out_TA_x(39, 3, 40) = out_39_3_40;
      out_TA_x(40, 3, 40) = out_40_3_40;
      out_TA_x(37, 6, 41) = out_37_6_41;
      out_TA_x(38, 6, 41) = out_38_6_41;
      out_TA_x(41, 6, 41) = out_41_6_41;
      out_TA_x(42, 6, 41) = out_42_6_41;
      out_TA_x(41, 9, 41) = out_41_9_41;
      out_TA_x(42, 9, 41) = out_42_9_41;
      out_TA_x(37, 6, 42) = out_37_6_42;
      out_TA_x(38, 6, 42) = out_38_6_42;
      out_TA_x(41, 6, 42) = out_41_6_42;
      out_TA_x(42, 6, 42) = out_42_6_42;
      out_TA_x(41, 9, 42) = out_41_9_42;
      out_TA_x(42, 9, 42) = out_42_9_42;
      out_TA_x(43, 12, 43) = out_43_12_43;
      out_TA_x(44, 12, 43) = out_44_12_43;
      out_TA_x(43, 15, 43) = out_43_15_43;
      out_TA_x(44, 15, 43) = out_44_15_43;
      out_TA_x(43, 12, 44) = out_43_12_44;
      out_TA_x(44, 12, 44) = out_44_12_44;
      out_TA_x(43, 15, 44) = out_43_15_44;
      out_TA_x(44, 15, 44) = out_44_15_44;
    end % TA_x
    %
    % - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    %
    function out_TA_v = TA_v( this, in_1, in_2, t )
      % Evaluate the tensor of A with respect to v.

      % Extract properties
      m = this.m_m;
      g = this.m_g;
      l = this.m_l;

      % Extract inputs
      x__AC = in_1(1);
      y__AC = in_1(2);
      theta__AC = in_1(3);
      x__BD = in_1(4);
      y__BD = in_1(5);
      theta__BD = in_1(6);
      x__fg = in_1(7);
      y__fg = in_1(8);
      theta__fg = in_1(9);
      x__CE = in_1(10);
      y__CE = in_1(11);
      theta__CE = in_1(12);
      x__ED = in_1(13);
      y__ED = in_1(14);
      theta__ED = in_1(15);
      u__AC = in_1(16);
      v__AC = in_1(17);
      omega__AC = in_1(18);
      u__BD = in_1(19);
      v__BD = in_1(20);
      omega__BD = in_1(21);
      u__fg = in_1(22);
      v__fg = in_1(23);
      omega__fg = in_1(24);
      u__CE = in_1(25);
      v__CE = in_1(26);
      omega__CE = in_1(27);
      u__ED = in_1(28);
      v__ED = in_1(29);
      omega__ED = in_1(30);
      lambda__1 = in_1(31);
      lambda__2 = in_1(32);
      lambda__3 = in_1(33);
      lambda__4 = in_1(34);
      lambda__5 = in_1(35);
      lambda__6 = in_1(36);
      lambda__7 = in_1(37);
      lambda__8 = in_1(38);
      lambda__9 = in_1(39);
      lambda__10 = in_1(40);
      lambda__11 = in_1(41);
      lambda__12 = in_1(42);
      lambda__13 = in_1(43);
      lambda__14 = in_1(44);

      % Evaluate function
      % No body

      % Store outputs
      out_TA_v = zeros(44, 44, 0);
    end % TA_v
    %
    % - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    %
    function out_b = b( this, in_1, in_2, t )
      % Calculate the vector b of the explicit system.

      % Extract properties
      m = this.m_m;
      g = this.m_g;
      l = this.m_l;

      % Extract inputs
      x__AC = in_1(1);
      y__AC = in_1(2);
      theta__AC = in_1(3);
      x__BD = in_1(4);
      y__BD = in_1(5);
      theta__BD = in_1(6);
      x__fg = in_1(7);
      y__fg = in_1(8);
      theta__fg = in_1(9);
      x__CE = in_1(10);
      y__CE = in_1(11);
      theta__CE = in_1(12);
      x__ED = in_1(13);
      y__ED = in_1(14);
      theta__ED = in_1(15);
      u__AC = in_1(16);
      v__AC = in_1(17);
      omega__AC = in_1(18);
      u__BD = in_1(19);
      v__BD = in_1(20);
      omega__BD = in_1(21);
      u__fg = in_1(22);
      v__fg = in_1(23);
      omega__fg = in_1(24);
      u__CE = in_1(25);
      v__CE = in_1(26);
      omega__CE = in_1(27);
      u__ED = in_1(28);
      v__ED = in_1(29);
      omega__ED = in_1(30);
      lambda__1 = in_1(31);
      lambda__2 = in_1(32);
      lambda__3 = in_1(33);
      lambda__4 = in_1(34);
      lambda__5 = in_1(35);
      lambda__6 = in_1(36);
      lambda__7 = in_1(37);
      lambda__8 = in_1(38);
      lambda__9 = in_1(39);
      lambda__10 = in_1(40);
      lambda__11 = in_1(41);
      lambda__12 = in_1(42);
      lambda__13 = in_1(43);
      lambda__14 = in_1(44);

      % Evaluate function
      out_1 = u__AC;
      out_2 = v__AC;
      out_3 = u__BD;
      out_4 = v__BD;
      out_5 = u__fg;
      out_6 = v__fg;
      out_7 = u__CE;
      out_8 = v__CE;
      out_9 = u__ED;
      out_10 = v__ED;
      out_11 = omega__CE;
      out_12 = omega__fg;
      out_13 = omega__ED;
      t2 = 0.1e1 / m;
      out_14 = -t2 * (-lambda__11 + lambda__9) / 2;
      t5 = g * m;
      t6 = 2 * t5;
      out_15 = -t2 * (t6 + lambda__10 - lambda__12) / 2;
      t10 = sin(theta__fg);
      t12 = cos(theta__fg);
      t16 = 0.1e1 / l;
      out_16 = -t2 * t16 * (3 * t10 * lambda__11 - 3 * t12 * lambda__12) / 4;
      out_17 = -t2 * (-lambda__13 + lambda__5) / 2;
      out_18 = -t2 * (t6 - lambda__14 + lambda__6) / 2;
      t26 = cos(theta__CE);
      t28 = sin(theta__CE);
      out_19 = -t2 * t16 * (-3 * t26 * lambda__14 + 3 * t28 * lambda__13) / 4;
      out_20 = -t2 * (lambda__13 + lambda__7) / 2;
      out_21 = -t2 * (t6 + lambda__14 + lambda__8) / 2;
      t41 = cos(theta__ED);
      t43 = sin(theta__ED);
      out_22 = -t2 * t16 * (3 * t41 * lambda__14 - 3 * t43 * lambda__13) / 4;
      out_23 = -t2 * (-lambda__5 - lambda__9 + lambda__1) / 4;
      t53 = 4 * t5;
      out_24 = -t2 * (t53 - lambda__10 + lambda__2 - lambda__6) / 4;
      out_25 = -t2 * (-lambda__7 + lambda__11 + lambda__3) / 4;
      out_26 = -t2 * (t53 + lambda__12 + lambda__4 - lambda__8) / 4;
      out_27 = omega__BD;
      t66 = cos(theta__AC);
      t68 = sin(theta__AC);
      out_28 = -t2 * t16 * (t66 * (-9 * lambda__10 - 12 * lambda__6) + 12 * (lambda__5 + 0.3e1 / 0.4e1 * lambda__9) * t68) / 64;
      t80 = cos(theta__BD);
      t82 = sin(theta__BD);
      out_29 = -t2 * t16 * (t80 * (9 * lambda__12 - 12 * lambda__8) + 12 * (lambda__7 - 0.3e1 / 0.4e1 * lambda__11) * t82) / 64;
      out_30 = omega__AC;

      % Store outputs
      out_b = zeros(44, 1);
      out_b(1) = out_1;
      out_b(2) = out_2;
      out_b(3) = out_3;
      out_b(4) = out_4;
      out_b(5) = out_5;
      out_b(6) = out_6;
      out_b(7) = out_7;
      out_b(8) = out_8;
      out_b(9) = out_9;
      out_b(10) = out_10;
      out_b(11) = out_11;
      out_b(12) = out_12;
      out_b(13) = out_13;
      out_b(14) = out_14;
      out_b(15) = out_15;
      out_b(16) = out_16;
      out_b(17) = out_17;
      out_b(18) = out_18;
      out_b(19) = out_19;
      out_b(20) = out_20;
      out_b(21) = out_21;
      out_b(22) = out_22;
      out_b(23) = out_23;
      out_b(24) = out_24;
      out_b(25) = out_25;
      out_b(26) = out_26;
      out_b(27) = out_27;
      out_b(28) = out_28;
      out_b(29) = out_29;
      out_b(30) = out_30;
    end % b
    %
    % - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    %
    function out_Jb_x = Jb_x( this, in_1, in_2, t )
      % Calculate the Jacobian of b with respect to x.

      % Extract properties
      m = this.m_m;
      g = this.m_g;
      l = this.m_l;

      % Extract inputs
      x__AC = in_1(1);
      y__AC = in_1(2);
      theta__AC = in_1(3);
      x__BD = in_1(4);
      y__BD = in_1(5);
      theta__BD = in_1(6);
      x__fg = in_1(7);
      y__fg = in_1(8);
      theta__fg = in_1(9);
      x__CE = in_1(10);
      y__CE = in_1(11);
      theta__CE = in_1(12);
      x__ED = in_1(13);
      y__ED = in_1(14);
      theta__ED = in_1(15);
      u__AC = in_1(16);
      v__AC = in_1(17);
      omega__AC = in_1(18);
      u__BD = in_1(19);
      v__BD = in_1(20);
      omega__BD = in_1(21);
      u__fg = in_1(22);
      v__fg = in_1(23);
      omega__fg = in_1(24);
      u__CE = in_1(25);
      v__CE = in_1(26);
      omega__CE = in_1(27);
      u__ED = in_1(28);
      v__ED = in_1(29);
      omega__ED = in_1(30);
      lambda__1 = in_1(31);
      lambda__2 = in_1(32);
      lambda__3 = in_1(33);
      lambda__4 = in_1(34);
      lambda__5 = in_1(35);
      lambda__6 = in_1(36);
      lambda__7 = in_1(37);
      lambda__8 = in_1(38);
      lambda__9 = in_1(39);
      lambda__10 = in_1(40);
      lambda__11 = in_1(41);
      lambda__12 = in_1(42);
      lambda__13 = in_1(43);
      lambda__14 = in_1(44);

      % Evaluate function
      t4 = sin(theta__AC);
      t6 = cos(theta__AC);
      t12 = 0.1e1 / l;
      t14 = 0.1e1 / m;
      out_28_3 = -t14 * t12 * (-t4 * (-9 * lambda__10 - 12 * lambda__6) + 12 * (lambda__5 + 0.3e1 / 0.4e1 * lambda__9) * t6) / 64;
      t20 = sin(theta__BD);
      t22 = cos(theta__BD);
      out_29_6 = -t14 * t12 * (-t20 * (9 * lambda__12 - 12 * lambda__8) + 12 * (lambda__7 - 0.3e1 / 0.4e1 * lambda__11) * t22) / 64;
      t31 = cos(theta__fg);
      t33 = sin(theta__fg);
      out_16_9 = -t14 * t12 * (3 * t31 * lambda__11 + 3 * t33 * lambda__12) / 4;
      t40 = sin(theta__CE);
      t42 = cos(theta__CE);
      out_19_12 = -t14 * t12 * (3 * t40 * lambda__14 + 3 * t42 * lambda__13) / 4;
      t49 = sin(theta__ED);
      t51 = cos(theta__ED);
      out_22_15 = -t14 * t12 * (-3 * t49 * lambda__14 - 3 * t51 * lambda__13) / 4;
      out_1_16 = 1;
      out_2_17 = 1;
      out_30_18 = 1;
      out_3_19 = 1;
      out_4_20 = 1;
      out_27_21 = 1;
      out_5_22 = 1;
      out_6_23 = 1;
      out_12_24 = 1;
      out_7_25 = 1;
      out_8_26 = 1;
      out_11_27 = 1;
      out_9_28 = 1;
      out_10_29 = 1;
      out_13_30 = 1;
      t58 = t14 / 4;
      out_23_31 = -t58;
      out_24_32 = out_23_31;
      out_25_33 = out_24_32;
      out_26_34 = out_25_33;
      t59 = t14 / 2;
      out_17_35 = -t59;
      out_23_35 = t58;
      t61 = t14 * t12 * t4;
      out_28_35 = -0.3e1 / 0.16e2 * t61;
      out_18_36 = out_17_35;
      out_24_36 = out_23_35;
      t64 = t14 * t12 * t6;
      out_28_36 = 0.3e1 / 0.16e2 * t64;
      out_20_37 = out_18_36;
      out_25_37 = out_24_36;
      t66 = t14 * t12 * t20;
      out_29_37 = -0.3e1 / 0.16e2 * t66;
      out_21_38 = out_20_37;
      out_26_38 = out_25_37;
      t69 = t14 * t12 * t22;
      out_29_38 = 0.3e1 / 0.16e2 * t69;
      out_14_39 = out_21_38;
      out_23_39 = out_26_38;
      out_28_39 = -0.9e1 / 0.64e2 * t61;
      out_15_40 = out_14_39;
      out_24_40 = out_23_39;
      out_28_40 = 0.9e1 / 0.64e2 * t64;
      out_14_41 = t59;
      out_16_41 = -0.3e1 / 0.4e1 * t14 * t12 * t33;
      out_25_41 = out_26_34;
      out_29_41 = 0.9e1 / 0.64e2 * t66;
      out_15_42 = out_14_41;
      out_16_42 = 0.3e1 / 0.4e1 * t14 * t12 * t31;
      out_26_42 = out_25_41;
      out_29_42 = -0.9e1 / 0.64e2 * t69;
      out_17_43 = out_15_42;
      out_19_43 = -0.3e1 / 0.4e1 * t14 * t12 * t40;
      out_20_43 = out_15_40;
      out_22_43 = 0.3e1 / 0.4e1 * t14 * t12 * t49;
      out_18_44 = out_17_43;
      out_19_44 = 0.3e1 / 0.4e1 * t14 * t12 * t42;
      out_21_44 = out_20_43;
      out_22_44 = -0.3e1 / 0.4e1 * t14 * t12 * t51;

      % Store outputs
      out_Jb_x = zeros(44, 44);
      out_Jb_x(28, 3) = out_28_3;
      out_Jb_x(29, 6) = out_29_6;
      out_Jb_x(16, 9) = out_16_9;
      out_Jb_x(19, 12) = out_19_12;
      out_Jb_x(22, 15) = out_22_15;
      out_Jb_x(1, 16) = out_1_16;
      out_Jb_x(2, 17) = out_2_17;
      out_Jb_x(30, 18) = out_30_18;
      out_Jb_x(3, 19) = out_3_19;
      out_Jb_x(4, 20) = out_4_20;
      out_Jb_x(27, 21) = out_27_21;
      out_Jb_x(5, 22) = out_5_22;
      out_Jb_x(6, 23) = out_6_23;
      out_Jb_x(12, 24) = out_12_24;
      out_Jb_x(7, 25) = out_7_25;
      out_Jb_x(8, 26) = out_8_26;
      out_Jb_x(11, 27) = out_11_27;
      out_Jb_x(9, 28) = out_9_28;
      out_Jb_x(10, 29) = out_10_29;
      out_Jb_x(13, 30) = out_13_30;
      out_Jb_x(23, 31) = out_23_31;
      out_Jb_x(24, 32) = out_24_32;
      out_Jb_x(25, 33) = out_25_33;
      out_Jb_x(26, 34) = out_26_34;
      out_Jb_x(17, 35) = out_17_35;
      out_Jb_x(23, 35) = out_23_35;
      out_Jb_x(28, 35) = out_28_35;
      out_Jb_x(18, 36) = out_18_36;
      out_Jb_x(24, 36) = out_24_36;
      out_Jb_x(28, 36) = out_28_36;
      out_Jb_x(20, 37) = out_20_37;
      out_Jb_x(25, 37) = out_25_37;
      out_Jb_x(29, 37) = out_29_37;
      out_Jb_x(21, 38) = out_21_38;
      out_Jb_x(26, 38) = out_26_38;
      out_Jb_x(29, 38) = out_29_38;
      out_Jb_x(14, 39) = out_14_39;
      out_Jb_x(23, 39) = out_23_39;
      out_Jb_x(28, 39) = out_28_39;
      out_Jb_x(15, 40) = out_15_40;
      out_Jb_x(24, 40) = out_24_40;
      out_Jb_x(28, 40) = out_28_40;
      out_Jb_x(14, 41) = out_14_41;
      out_Jb_x(16, 41) = out_16_41;
      out_Jb_x(25, 41) = out_25_41;
      out_Jb_x(29, 41) = out_29_41;
      out_Jb_x(15, 42) = out_15_42;
      out_Jb_x(16, 42) = out_16_42;
      out_Jb_x(26, 42) = out_26_42;
      out_Jb_x(29, 42) = out_29_42;
      out_Jb_x(17, 43) = out_17_43;
      out_Jb_x(19, 43) = out_19_43;
      out_Jb_x(20, 43) = out_20_43;
      out_Jb_x(22, 43) = out_22_43;
      out_Jb_x(18, 44) = out_18_44;
      out_Jb_x(19, 44) = out_19_44;
      out_Jb_x(21, 44) = out_21_44;
      out_Jb_x(22, 44) = out_22_44;
    end % Jb_x
    %
    % - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    %
    function out_Jb_v = Jb_v( this, in_1, in_2, t )
      % Calculate the Jacobian of b with respect to v.

      % Extract properties
      m = this.m_m;
      g = this.m_g;
      l = this.m_l;

      % Extract inputs
      x__AC = in_1(1);
      y__AC = in_1(2);
      theta__AC = in_1(3);
      x__BD = in_1(4);
      y__BD = in_1(5);
      theta__BD = in_1(6);
      x__fg = in_1(7);
      y__fg = in_1(8);
      theta__fg = in_1(9);
      x__CE = in_1(10);
      y__CE = in_1(11);
      theta__CE = in_1(12);
      x__ED = in_1(13);
      y__ED = in_1(14);
      theta__ED = in_1(15);
      u__AC = in_1(16);
      v__AC = in_1(17);
      omega__AC = in_1(18);
      u__BD = in_1(19);
      v__BD = in_1(20);
      omega__BD = in_1(21);
      u__fg = in_1(22);
      v__fg = in_1(23);
      omega__fg = in_1(24);
      u__CE = in_1(25);
      v__CE = in_1(26);
      omega__CE = in_1(27);
      u__ED = in_1(28);
      v__ED = in_1(29);
      omega__ED = in_1(30);
      lambda__1 = in_1(31);
      lambda__2 = in_1(32);
      lambda__3 = in_1(33);
      lambda__4 = in_1(34);
      lambda__5 = in_1(35);
      lambda__6 = in_1(36);
      lambda__7 = in_1(37);
      lambda__8 = in_1(38);
      lambda__9 = in_1(39);
      lambda__10 = in_1(40);
      lambda__11 = in_1(41);
      lambda__12 = in_1(42);
      lambda__13 = in_1(43);
      lambda__14 = in_1(44);

      % Evaluate function
      % No body

      % Store outputs
      out_Jb_v = zeros(44, 0);
    end % Jb_v
    %
    % - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    %
    function out_v = v( this, in_1, t )
      % Evaluate the the veils v.

      % Extract properties
      m = this.m_m;
      g = this.m_g;
      l = this.m_l;

      % Extract inputs
      x__AC = in_1(1);
      y__AC = in_1(2);
      theta__AC = in_1(3);
      x__BD = in_1(4);
      y__BD = in_1(5);
      theta__BD = in_1(6);
      x__fg = in_1(7);
      y__fg = in_1(8);
      theta__fg = in_1(9);
      x__CE = in_1(10);
      y__CE = in_1(11);
      theta__CE = in_1(12);
      x__ED = in_1(13);
      y__ED = in_1(14);
      theta__ED = in_1(15);
      u__AC = in_1(16);
      v__AC = in_1(17);
      omega__AC = in_1(18);
      u__BD = in_1(19);
      v__BD = in_1(20);
      omega__BD = in_1(21);
      u__fg = in_1(22);
      v__fg = in_1(23);
      omega__fg = in_1(24);
      u__CE = in_1(25);
      v__CE = in_1(26);
      omega__CE = in_1(27);
      u__ED = in_1(28);
      v__ED = in_1(29);
      omega__ED = in_1(30);
      lambda__1 = in_1(31);
      lambda__2 = in_1(32);
      lambda__3 = in_1(33);
      lambda__4 = in_1(34);
      lambda__5 = in_1(35);
      lambda__6 = in_1(36);
      lambda__7 = in_1(37);
      lambda__8 = in_1(38);
      lambda__9 = in_1(39);
      lambda__10 = in_1(40);
      lambda__11 = in_1(41);
      lambda__12 = in_1(42);
      lambda__13 = in_1(43);
      lambda__14 = in_1(44);

      % Evaluate function
      % No body

      % Store outputs
      out_v = zeros(0, 1);
    end % v
    %
    % - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    %
    function out_Jv_x = Jv_x( this, in_1, in_2, t )
      % Evaluate the Jacobian of v with respect to x.

      % Extract properties
      m = this.m_m;
      g = this.m_g;
      l = this.m_l;

      % Extract inputs
      x__AC = in_1(1);
      y__AC = in_1(2);
      theta__AC = in_1(3);
      x__BD = in_1(4);
      y__BD = in_1(5);
      theta__BD = in_1(6);
      x__fg = in_1(7);
      y__fg = in_1(8);
      theta__fg = in_1(9);
      x__CE = in_1(10);
      y__CE = in_1(11);
      theta__CE = in_1(12);
      x__ED = in_1(13);
      y__ED = in_1(14);
      theta__ED = in_1(15);
      u__AC = in_1(16);
      v__AC = in_1(17);
      omega__AC = in_1(18);
      u__BD = in_1(19);
      v__BD = in_1(20);
      omega__BD = in_1(21);
      u__fg = in_1(22);
      v__fg = in_1(23);
      omega__fg = in_1(24);
      u__CE = in_1(25);
      v__CE = in_1(26);
      omega__CE = in_1(27);
      u__ED = in_1(28);
      v__ED = in_1(29);
      omega__ED = in_1(30);
      lambda__1 = in_1(31);
      lambda__2 = in_1(32);
      lambda__3 = in_1(33);
      lambda__4 = in_1(34);
      lambda__5 = in_1(35);
      lambda__6 = in_1(36);
      lambda__7 = in_1(37);
      lambda__8 = in_1(38);
      lambda__9 = in_1(39);
      lambda__10 = in_1(40);
      lambda__11 = in_1(41);
      lambda__12 = in_1(42);
      lambda__13 = in_1(43);
      lambda__14 = in_1(44);

      % Evaluate function
      % No body

      % Store outputs
      out_Jv_x = zeros(0, 44);
    end % Jv_x
    %
    % - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    %
    function out_h = h( this, in_1, in_2, t )
      % Calculate the residual of the invariants h.

      % Extract properties
      m = this.m_m;
      g = this.m_g;
      l = this.m_l;

      % Extract inputs
      x__AC = in_1(1);
      y__AC = in_1(2);
      theta__AC = in_1(3);
      x__BD = in_1(4);
      y__BD = in_1(5);
      theta__BD = in_1(6);
      x__fg = in_1(7);
      y__fg = in_1(8);
      theta__fg = in_1(9);
      x__CE = in_1(10);
      y__CE = in_1(11);
      theta__CE = in_1(12);
      x__ED = in_1(13);
      y__ED = in_1(14);
      theta__ED = in_1(15);
      u__AC = in_1(16);
      v__AC = in_1(17);
      omega__AC = in_1(18);
      u__BD = in_1(19);
      v__BD = in_1(20);
      omega__BD = in_1(21);
      u__fg = in_1(22);
      v__fg = in_1(23);
      omega__fg = in_1(24);
      u__CE = in_1(25);
      v__CE = in_1(26);
      omega__CE = in_1(27);
      u__ED = in_1(28);
      v__ED = in_1(29);
      omega__ED = in_1(30);
      lambda__1 = in_1(31);
      lambda__2 = in_1(32);
      lambda__3 = in_1(33);
      lambda__4 = in_1(34);
      lambda__5 = in_1(35);
      lambda__6 = in_1(36);
      lambda__7 = in_1(37);
      lambda__8 = in_1(38);
      lambda__9 = in_1(39);
      lambda__10 = in_1(40);
      lambda__11 = in_1(41);
      lambda__12 = in_1(42);
      lambda__13 = in_1(43);
      lambda__14 = in_1(44);

      % Evaluate function
      t1 = 2 * l;
      out_1 = -t1 - x__AC;
      out_2 = -y__AC;
      out_3 = t1 - x__BD;
      out_4 = -y__BD;
      t2 = cos(theta__AC);
      t3 = l * t2;
      out_5 = 4 * t3 - x__CE + x__AC;
      t5 = sin(theta__AC);
      t6 = l * t5;
      out_6 = 4 * t6 - y__CE + y__AC;
      t8 = cos(theta__BD);
      t9 = l * t8;
      out_7 = 4 * t9 - x__ED + x__BD;
      t11 = sin(theta__BD);
      t12 = l * t11;
      out_8 = 4 * t12 - y__ED + y__BD;
      out_9 = 3 * t3 + x__AC - x__fg;
      out_10 = 3 * t6 + y__AC - y__fg;
      t17 = cos(theta__fg);
      out_11 = 2 * l * t17 - 3 * t9 - x__BD + x__fg;
      t21 = sin(theta__fg);
      out_12 = 2 * l * t21 + out_4 - 3 * t12 + y__fg;
      t24 = cos(theta__CE);
      t27 = cos(theta__ED);
      out_13 = 2 * l * t24 - 2 * t27 * l + x__CE - x__ED;
      t30 = sin(theta__ED);
      t33 = sin(theta__CE);
      out_14 = -2 * t30 * l + 2 * l * t33 + y__CE - y__ED;
      out_15 = u__AC;
      out_16 = v__AC;
      out_17 = u__BD;
      out_18 = v__BD;
      t37 = l * t5 * omega__AC;
      t40 = 0.1e1 / l;
      out_19 = t40 * (4 * t37 + u__CE - u__AC) / 4;
      t43 = l * t2 * omega__AC;
      out_20 = t40 * (-4 * t43 - v__AC + v__CE) / 4;
      t48 = l * t11 * omega__BD;
      out_21 = t40 * (4 * t48 + u__ED - u__BD) / 4;
      t53 = l * t8 * omega__BD;
      out_22 = t40 * (-4 * t53 + v__ED - v__BD) / 4;
      out_23 = t40 * (3 * t37 + u__fg - u__AC) / 3;
      out_24 = t40 * (-3 * t43 - v__AC + v__fg) / 3;
      out_25 = t40 * (2 * l * t21 * omega__fg - 3 * t48 + u__BD - u__fg) / 3;
      out_26 = t40 * (-2 * l * t17 * omega__fg + 3 * t53 + v__BD - v__fg) / 3;
      out_27 = t40 * (-2 * l * t30 * omega__ED + 2 * l * t33 * omega__CE - u__CE + u__ED) / 2;
      out_28 = t40 * (-2 * l * t24 * omega__CE + 2 * l * t27 * omega__ED - v__CE + v__ED) / 2;
      t92 = 0.1e1 / m;
      out_29 = t92 * (-lambda__5 - lambda__9 + lambda__1) / 4;
      t95 = 4 * g * m;
      out_30 = t92 * (t95 - lambda__10 + lambda__2 - lambda__6) / 4;
      out_31 = t92 * (-lambda__7 + lambda__11 + lambda__3) / 4;
      out_32 = t92 * (t95 + lambda__12 + lambda__4 - lambda__8) / 4;
      t105 = t2 ^ 2;
      t108 = 12 * lambda__6;
      t109 = -9 * lambda__10 - t108;
      t111 = l * m;
      t112 = omega__AC ^ 2;
      t113 = t112 * t111;
      t117 = 8 * lambda__13;
      out_33 = t92 * t40 * (t105 * (-12 * lambda__5 - 9 * lambda__9) + t2 * (t5 * t109 - 64 * t113) - t117 - 4 * lambda__1 + 24 * lambda__5 + 13 * lambda__9) / 64;
      t129 = t2 * t5 * (lambda__5 + 0.3e1 / 0.4e1 * lambda__9);
      t132 = t111 * t5 * t112;
      t135 = 8 * lambda__14;
      out_34 = t92 * t40 * (-t105 * t109 + t108 - 12 * t129 - 64 * t132 - t135 + 4 * lambda__10 - 4 * lambda__2) / 64;
      t143 = t8 ^ 2;
      t146 = 12 * lambda__8;
      t147 = 9 * lambda__12 - t146;
      t149 = omega__BD ^ 2;
      t150 = t149 * t111;
      out_35 = t92 * t40 * (t143 * (-12 * lambda__7 + 9 * lambda__11) + t8 * (t11 * t147 - 64 * t150) + t117 - 4 * lambda__3 + 24 * lambda__7 - 13 * lambda__11) / 64;
      t168 = t111 * t11 * t149;
      out_36 = t92 * t40 * (-t143 * t147 - 12 * t8 * (lambda__7 - 0.3e1 / 0.4e1 * lambda__11) * t11 - 64 * t168 - 4 * lambda__12 + t135 - 4 * lambda__4 + t146) / 64;
      t181 = -27 * lambda__10 - 36 * lambda__6;
      out_37 = t92 * t40 * (t105 * (-36 * lambda__5 - 27 * lambda__9) + t2 * (t5 * t181 - 192 * t113) - 32 * lambda__11 - 16 * lambda__1 + 52 * lambda__5 + 75 * lambda__9) / 192;
      out_38 = t92 * t40 * (-t105 * t181 - 36 * t129 - 192 * t132 + 48 * lambda__10 - 32 * lambda__12 - 16 * lambda__2 + 16 * lambda__6) / 192;
      t210 = -27 * lambda__12 + 36 * lambda__8;
      t215 = t17 ^ 2;
      t218 = omega__fg ^ 2;
      out_39 = t92 * t40 * (t143 * (-27 * lambda__11 + 36 * lambda__7) + t8 * (t11 * t210 + 192 * t150) - 96 * lambda__11 * t215 + t17 * (-128 * t218 * t111 - 96 * t21 * lambda__12) + 171 * lambda__11 + 16 * lambda__3 - 52 * lambda__7 - 32 * lambda__9) / 192;
      out_40 = t92 * t40 * (-t143 * t210 - 27 * t8 * t11 * (lambda__11 - 0.4e1 / 0.3e1 * lambda__7) + 192 * t168 - 128 * t111 * t21 * t218 - 96 * t21 * lambda__11 * t17 + 96 * t215 * lambda__12 - 32 * lambda__10 + 48 * lambda__12 + 16 * lambda__4 - 16 * lambda__8) / 192;
      t255 = t24 ^ 2;
      t258 = omega__CE ^ 2;
      t260 = 4 * t258 * t111;
      t265 = t27 ^ 2;
      t268 = omega__ED ^ 2;
      t270 = 4 * t268 * t111;
      out_41 = t92 * t40 * (-3 * lambda__13 * t255 + t24 * (-3 * t33 * lambda__14 - t260) - 3 * lambda__13 * t265 + t27 * (-3 * t30 * lambda__14 + t270) + t117 - lambda__5 + lambda__7) / 4;
      out_42 = t92 * t40 * (t30 * (-3 * t27 * lambda__13 + t270) + t33 * (-3 * t24 * lambda__13 - t260) + 3 * lambda__14 * t255 + 3 * lambda__14 * t265 + 2 * lambda__14 - lambda__6 + lambda__8) / 4;

      % Store outputs
      out_h = zeros(42, 1);
      out_h(1) = out_1;
      out_h(2) = out_2;
      out_h(3) = out_3;
      out_h(4) = out_4;
      out_h(5) = out_5;
      out_h(6) = out_6;
      out_h(7) = out_7;
      out_h(8) = out_8;
      out_h(9) = out_9;
      out_h(10) = out_10;
      out_h(11) = out_11;
      out_h(12) = out_12;
      out_h(13) = out_13;
      out_h(14) = out_14;
      out_h(15) = out_15;
      out_h(16) = out_16;
      out_h(17) = out_17;
      out_h(18) = out_18;
      out_h(19) = out_19;
      out_h(20) = out_20;
      out_h(21) = out_21;
      out_h(22) = out_22;
      out_h(23) = out_23;
      out_h(24) = out_24;
      out_h(25) = out_25;
      out_h(26) = out_26;
      out_h(27) = out_27;
      out_h(28) = out_28;
      out_h(29) = out_29;
      out_h(30) = out_30;
      out_h(31) = out_31;
      out_h(32) = out_32;
      out_h(33) = out_33;
      out_h(34) = out_34;
      out_h(35) = out_35;
      out_h(36) = out_36;
      out_h(37) = out_37;
      out_h(38) = out_38;
      out_h(39) = out_39;
      out_h(40) = out_40;
      out_h(41) = out_41;
      out_h(42) = out_42;
    end % h
    %
    % - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    %
    function out_Jh_x = Jh_x( this, in_1, in_2, t )
      % Calculate the Jacobian of h with respect to x.

      % Extract properties
      m = this.m_m;
      g = this.m_g;
      l = this.m_l;

      % Extract inputs
      x__AC = in_1(1);
      y__AC = in_1(2);
      theta__AC = in_1(3);
      x__BD = in_1(4);
      y__BD = in_1(5);
      theta__BD = in_1(6);
      x__fg = in_1(7);
      y__fg = in_1(8);
      theta__fg = in_1(9);
      x__CE = in_1(10);
      y__CE = in_1(11);
      theta__CE = in_1(12);
      x__ED = in_1(13);
      y__ED = in_1(14);
      theta__ED = in_1(15);
      u__AC = in_1(16);
      v__AC = in_1(17);
      omega__AC = in_1(18);
      u__BD = in_1(19);
      v__BD = in_1(20);
      omega__BD = in_1(21);
      u__fg = in_1(22);
      v__fg = in_1(23);
      omega__fg = in_1(24);
      u__CE = in_1(25);
      v__CE = in_1(26);
      omega__CE = in_1(27);
      u__ED = in_1(28);
      v__ED = in_1(29);
      omega__ED = in_1(30);
      lambda__1 = in_1(31);
      lambda__2 = in_1(32);
      lambda__3 = in_1(33);
      lambda__4 = in_1(34);
      lambda__5 = in_1(35);
      lambda__6 = in_1(36);
      lambda__7 = in_1(37);
      lambda__8 = in_1(38);
      lambda__9 = in_1(39);
      lambda__10 = in_1(40);
      lambda__11 = in_1(41);
      lambda__12 = in_1(42);
      lambda__13 = in_1(43);
      lambda__14 = in_1(44);

      % Evaluate function
      out_1_1 = -1;
      out_5_1 = 1;
      out_9_1 = 1;
      out_2_2 = -1;
      out_6_2 = 1;
      out_10_2 = 1;
      t1 = sin(theta__AC);
      t2 = l * t1;
      out_5_3 = -4 * t2;
      t4 = cos(theta__AC);
      t5 = l * t4;
      out_6_3 = 4 * t5;
      out_9_3 = -3 * t2;
      out_10_3 = 3 * t5;
      out_19_3 = t4 * omega__AC;
      out_20_3 = t1 * omega__AC;
      out_23_3 = out_19_3;
      out_24_3 = out_20_3;
      t15 = -9 * lambda__10 - 12 * lambda__6;
      t16 = t4 ^ 2;
      t19 = l * m;
      t20 = omega__AC ^ 2;
      t21 = t20 * t19;
      t26 = 0.1e1 / l;
      t28 = 0.1e1 / m;
      out_33_3 = t28 * t26 * (-2 * t1 * t4 * (-12 * lambda__5 - 9 * lambda__9) + t16 * t15 - t1 * (t1 * t15 - 64 * t21)) / 64;
      t35 = lambda__5 + 0.3e1 / 0.4e1 * lambda__9;
      t36 = t16 * t35;
      t38 = t1 ^ 2;
      t39 = t38 * t35;
      t42 = t19 * t4 * t20;
      out_34_3 = t28 * t26 * (2 * t1 * t4 * t15 - 12 * t36 + 12 * t39 - 64 * t42) / 64;
      t55 = -27 * lambda__10 - 36 * lambda__6;
      out_37_3 = t28 * t26 * (-2 * t1 * t4 * (-36 * lambda__5 - 27 * lambda__9) + t16 * t55 - t1 * (t1 * t55 - 192 * t21)) / 192;
      out_38_3 = t28 * t26 * (2 * t1 * t4 * t55 - 36 * t36 + 36 * t39 - 192 * t42) / 192;
      out_3_4 = -1;
      out_7_4 = 1;
      out_11_4 = -1;
      out_4_5 = -1;
      out_8_5 = 1;
      out_12_5 = -1;
      t74 = sin(theta__BD);
      t75 = l * t74;
      out_7_6 = -4 * t75;
      t77 = cos(theta__BD);
      t78 = l * t77;
      out_8_6 = 4 * t78;
      out_11_6 = 3 * t75;
      out_12_6 = -3 * t78;
      out_21_6 = t77 * omega__BD;
      out_22_6 = t74 * omega__BD;
      out_25_6 = -out_21_6;
      out_26_6 = -out_22_6;
      t88 = 9 * lambda__12 - 12 * lambda__8;
      t89 = t77 ^ 2;
      t92 = omega__BD ^ 2;
      t93 = t92 * t19;
      out_35_6 = t28 * t26 * (-2 * t74 * t77 * (-12 * lambda__7 + 9 * lambda__11) + t89 * t88 - t74 * (t74 * t88 - 64 * t93)) / 64;
      t105 = lambda__7 - 0.3e1 / 0.4e1 * lambda__11;
      t108 = t74 ^ 2;
      t112 = t19 * t77 * t92;
      out_36_6 = t28 * t26 * (2 * t74 * t77 * t88 + 12 * t105 * t108 - 12 * t105 * t89 - 64 * t112) / 64;
      t125 = -27 * lambda__12 + 36 * lambda__8;
      out_39_6 = t28 * t26 * (-2 * t74 * t77 * (-27 * lambda__11 + 36 * lambda__7) + t89 * t125 - t74 * (t74 * t125 + 192 * t93)) / 192;
      t139 = lambda__11 - 0.4e1 / 0.3e1 * lambda__7;
      out_40_6 = t28 * t26 * (2 * t74 * t77 * t125 + 27 * t108 * t139 - 27 * t89 * t139 + 192 * t112) / 192;
      out_9_7 = -1;
      out_11_7 = 1;
      out_10_8 = -1;
      out_12_8 = 1;
      t148 = sin(theta__fg);
      out_11_9 = -2 * l * t148;
      t151 = cos(theta__fg);
      out_12_9 = 2 * l * t151;
      t153 = t151 * omega__fg;
      out_25_9 = 0.2e1 / 0.3e1 * t153;
      t154 = t148 * omega__fg;
      out_26_9 = 0.2e1 / 0.3e1 * t154;
      t158 = t151 ^ 2;
      t161 = omega__fg ^ 2;
      out_39_9 = t28 * t26 * (192 * t148 * lambda__11 * t151 - 96 * t158 * lambda__12 - t148 * (-96 * t148 * lambda__12 - 128 * t161 * t19)) / 192;
      t179 = t148 ^ 2;
      out_40_9 = t28 * t26 * (-192 * t148 * t151 * lambda__12 - 128 * t19 * t151 * t161 - 96 * lambda__11 * t158 + 96 * t179 * lambda__11) / 192;
      out_5_10 = -1;
      out_13_10 = 1;
      out_6_11 = -1;
      out_14_11 = 1;
      t185 = sin(theta__CE);
      out_13_12 = -2 * l * t185;
      t188 = cos(theta__CE);
      out_14_12 = 2 * l * t188;
      out_27_12 = t188 * omega__CE;
      out_28_12 = t185 * omega__CE;
      t190 = t185 * t188;
      t193 = t188 ^ 2;
      t196 = omega__CE ^ 2;
      t198 = 4 * t196 * t19;
      out_41_12 = t28 * t26 * (6 * lambda__13 * t190 - 3 * lambda__14 * t193 - t185 * (-3 * t185 * lambda__14 - t198)) / 4;
      t206 = t185 ^ 2;
      out_42_12 = t28 * t26 * (3 * lambda__13 * t206 + t188 * (-3 * t188 * lambda__13 - t198) - 6 * lambda__14 * t190) / 4;
      out_7_13 = -1;
      out_13_13 = -1;
      out_8_14 = -1;
      out_14_14 = -1;
      t218 = sin(theta__ED);
      out_13_15 = 2 * t218 * l;
      t220 = cos(theta__ED);
      out_14_15 = -2 * t220 * l;
      t223 = t220 * omega__ED;
      out_27_15 = -t223;
      t224 = t218 * omega__ED;
      out_28_15 = -t224;
      t225 = t220 * t218;
      t228 = t220 ^ 2;
      t231 = omega__ED ^ 2;
      t233 = 4 * t231 * t19;
      out_41_15 = t28 * t26 * (6 * lambda__13 * t225 - 3 * lambda__14 * t228 - t218 * (-3 * t218 * lambda__14 + t233)) / 4;
      t241 = t218 ^ 2;
      out_42_15 = t28 * t26 * (3 * lambda__13 * t241 + t220 * (-3 * t220 * lambda__13 + t233) - 6 * lambda__14 * t225) / 4;
      out_15_16 = 1;
      t253 = t26 / 4;
      out_19_16 = -t253;
      t254 = t26 / 3;
      out_23_16 = -t254;
      out_16_17 = 1;
      out_20_17 = out_19_16;
      out_24_17 = out_23_16;
      out_19_18 = t1;
      out_20_18 = -t4;
      out_23_18 = out_19_18;
      out_24_18 = out_20_18;
      out_33_18 = -2 * out_23_3;
      out_34_18 = -2 * out_24_3;
      out_37_18 = out_33_18;
      out_38_18 = out_34_18;
      out_17_19 = 1;
      out_21_19 = out_20_17;
      out_25_19 = t254;
      out_18_20 = 1;
      out_22_20 = out_21_19;
      out_26_20 = out_25_19;
      out_21_21 = t74;
      out_22_21 = -t77;
      out_25_21 = -out_21_21;
      out_26_21 = t77;
      t257 = 2 * out_21_6;
      out_35_21 = -t257;
      t258 = 2 * out_22_6;
      out_36_21 = -t258;
      out_39_21 = t257;
      out_40_21 = t258;
      out_23_22 = out_26_20;
      out_25_22 = out_24_17;
      out_24_23 = out_23_22;
      out_26_23 = out_25_22;
      out_25_24 = 0.2e1 / 0.3e1 * t148;
      out_26_24 = -0.2e1 / 0.3e1 * t151;
      out_39_24 = -0.4e1 / 0.3e1 * t153;
      out_40_24 = -0.4e1 / 0.3e1 * t154;
      out_19_25 = t253;
      t262 = t26 / 2;
      out_27_25 = -t262;
      out_20_26 = out_19_25;
      out_28_26 = out_27_25;
      out_27_27 = t185;
      out_28_27 = -t188;
      out_41_27 = -2 * out_27_12;
      out_42_27 = -2 * out_28_12;
      out_21_28 = out_20_26;
      out_27_28 = t262;
      out_22_29 = out_21_28;
      out_28_29 = out_27_28;
      out_27_30 = -t218;
      out_28_30 = t220;
      out_41_30 = 2 * t223;
      out_42_30 = 2 * t224;
      out_29_31 = t28 / 4;
      t265 = t28 * t26;
      out_33_31 = -t265 / 16;
      t267 = t265 / 12;
      out_37_31 = -t267;
      out_30_32 = out_29_31;
      out_34_32 = out_33_31;
      out_38_32 = out_37_31;
      out_31_33 = out_30_32;
      out_35_33 = out_34_32;
      out_39_33 = t267;
      out_32_34 = out_31_33;
      out_36_34 = out_35_33;
      out_40_34 = out_39_33;
      out_29_35 = -out_32_34;
      out_33_35 = t28 * t26 * (-12 * t16 + 24) / 64;
      t273 = t265 * out_23_18 * t4;
      out_34_35 = -0.3e1 / 0.16e2 * t273;
      t275 = 36 * t16;
      out_37_35 = t28 * t26 * (-t275 + 52) / 192;
      out_38_35 = out_34_35;
      t279 = t265 / 4;
      out_41_35 = -t279;
      out_30_36 = out_29_35;
      out_33_36 = out_38_35;
      out_34_36 = t28 * t26 * (12 * t16 + 12) / 64;
      out_37_36 = out_33_36;
      out_38_36 = t28 * t26 * (t275 + 16) / 192;
      out_42_36 = out_41_35;
      out_31_37 = out_30_36;
      out_35_37 = t28 * t26 * (-12 * t89 + 24) / 64;
      t291 = out_21_21 * out_26_21;
      t292 = t265 * t291;
      t293 = 0.3e1 / 0.16e2 * t292;
      out_36_37 = -t293;
      t294 = 36 * t89;
      out_39_37 = t28 * t26 * (t294 - 52) / 192;
      out_40_37 = t293;
      out_41_37 = t279;
      out_32_38 = out_31_37;
      out_35_38 = out_36_37;
      out_36_38 = t28 * t26 * (12 * t89 + 12) / 64;
      out_39_38 = out_40_37;
      out_40_38 = t28 * t26 * (-t294 - 16) / 192;
      out_42_38 = out_41_37;
      out_29_39 = out_32_38;
      t305 = 9 * t16;
      out_33_39 = t28 * t26 * (-t305 + 13) / 64;
      out_34_39 = -0.9e1 / 0.64e2 * t273;
      t310 = 27 * t16;
      out_37_39 = t28 * t26 * (-t310 + 75) / 192;
      out_38_39 = out_34_39;
      out_39_39 = -t265 / 6;
      out_30_40 = out_29_39;
      out_33_40 = out_38_39;
      out_34_40 = t28 * t26 * (t305 + 4) / 64;
      out_37_40 = out_33_40;
      out_38_40 = t28 * t26 * (t310 + 48) / 192;
      out_40_40 = out_39_39;
      out_31_41 = out_32_34;
      t321 = 9 * t89;
      out_35_41 = t28 * t26 * (t321 - 13) / 64;
      out_36_41 = 0.9e1 / 0.64e2 * t292;
      out_37_41 = out_40_40;
      t325 = 96 * t158;
      t326 = 27 * t89;
      out_39_41 = t28 * t26 * (-t325 - t326 + 171) / 192;
      out_40_41 = t28 * t26 * (-96 * t148 * t151 - 27 * t291) / 192;
      out_32_42 = out_31_41;
      out_35_42 = out_36_41;
      out_36_42 = t28 * t26 * (-t321 - 4) / 64;
      out_38_42 = out_37_41;
      out_39_42 = out_40_41;
      out_40_42 = t28 * t26 * (t325 + t326 + 48) / 192;
      t342 = t265 / 8;
      out_33_43 = -t342;
      out_35_43 = t342;
      t343 = 3 * t228;
      t344 = 3 * t193;
      out_41_43 = t28 * t26 * (-t343 - t344 + 8) / 4;
      out_42_43 = t28 * t26 * (-3 * t188 * out_27_27 - 3 * out_28_30 * t218) / 4;
      out_34_44 = out_33_43;
      out_36_44 = out_35_43;
      out_41_44 = out_42_43;
      out_42_44 = t28 * t26 * (t343 + t344 + 2) / 4;

      % Store outputs
      out_Jh_x = zeros(42, 44);
      out_Jh_x(1, 1) = out_1_1;
      out_Jh_x(5, 1) = out_5_1;
      out_Jh_x(9, 1) = out_9_1;
      out_Jh_x(2, 2) = out_2_2;
      out_Jh_x(6, 2) = out_6_2;
      out_Jh_x(10, 2) = out_10_2;
      out_Jh_x(5, 3) = out_5_3;
      out_Jh_x(6, 3) = out_6_3;
      out_Jh_x(9, 3) = out_9_3;
      out_Jh_x(10, 3) = out_10_3;
      out_Jh_x(19, 3) = out_19_3;
      out_Jh_x(20, 3) = out_20_3;
      out_Jh_x(23, 3) = out_23_3;
      out_Jh_x(24, 3) = out_24_3;
      out_Jh_x(33, 3) = out_33_3;
      out_Jh_x(34, 3) = out_34_3;
      out_Jh_x(37, 3) = out_37_3;
      out_Jh_x(38, 3) = out_38_3;
      out_Jh_x(3, 4) = out_3_4;
      out_Jh_x(7, 4) = out_7_4;
      out_Jh_x(11, 4) = out_11_4;
      out_Jh_x(4, 5) = out_4_5;
      out_Jh_x(8, 5) = out_8_5;
      out_Jh_x(12, 5) = out_12_5;
      out_Jh_x(7, 6) = out_7_6;
      out_Jh_x(8, 6) = out_8_6;
      out_Jh_x(11, 6) = out_11_6;
      out_Jh_x(12, 6) = out_12_6;
      out_Jh_x(21, 6) = out_21_6;
      out_Jh_x(22, 6) = out_22_6;
      out_Jh_x(25, 6) = out_25_6;
      out_Jh_x(26, 6) = out_26_6;
      out_Jh_x(35, 6) = out_35_6;
      out_Jh_x(36, 6) = out_36_6;
      out_Jh_x(39, 6) = out_39_6;
      out_Jh_x(40, 6) = out_40_6;
      out_Jh_x(9, 7) = out_9_7;
      out_Jh_x(11, 7) = out_11_7;
      out_Jh_x(10, 8) = out_10_8;
      out_Jh_x(12, 8) = out_12_8;
      out_Jh_x(11, 9) = out_11_9;
      out_Jh_x(12, 9) = out_12_9;
      out_Jh_x(25, 9) = out_25_9;
      out_Jh_x(26, 9) = out_26_9;
      out_Jh_x(39, 9) = out_39_9;
      out_Jh_x(40, 9) = out_40_9;
      out_Jh_x(5, 10) = out_5_10;
      out_Jh_x(13, 10) = out_13_10;
      out_Jh_x(6, 11) = out_6_11;
      out_Jh_x(14, 11) = out_14_11;
      out_Jh_x(13, 12) = out_13_12;
      out_Jh_x(14, 12) = out_14_12;
      out_Jh_x(27, 12) = out_27_12;
      out_Jh_x(28, 12) = out_28_12;
      out_Jh_x(41, 12) = out_41_12;
      out_Jh_x(42, 12) = out_42_12;
      out_Jh_x(7, 13) = out_7_13;
      out_Jh_x(13, 13) = out_13_13;
      out_Jh_x(8, 14) = out_8_14;
      out_Jh_x(14, 14) = out_14_14;
      out_Jh_x(13, 15) = out_13_15;
      out_Jh_x(14, 15) = out_14_15;
      out_Jh_x(27, 15) = out_27_15;
      out_Jh_x(28, 15) = out_28_15;
      out_Jh_x(41, 15) = out_41_15;
      out_Jh_x(42, 15) = out_42_15;
      out_Jh_x(15, 16) = out_15_16;
      out_Jh_x(19, 16) = out_19_16;
      out_Jh_x(23, 16) = out_23_16;
      out_Jh_x(16, 17) = out_16_17;
      out_Jh_x(20, 17) = out_20_17;
      out_Jh_x(24, 17) = out_24_17;
      out_Jh_x(19, 18) = out_19_18;
      out_Jh_x(20, 18) = out_20_18;
      out_Jh_x(23, 18) = out_23_18;
      out_Jh_x(24, 18) = out_24_18;
      out_Jh_x(33, 18) = out_33_18;
      out_Jh_x(34, 18) = out_34_18;
      out_Jh_x(37, 18) = out_37_18;
      out_Jh_x(38, 18) = out_38_18;
      out_Jh_x(17, 19) = out_17_19;
      out_Jh_x(21, 19) = out_21_19;
      out_Jh_x(25, 19) = out_25_19;
      out_Jh_x(18, 20) = out_18_20;
      out_Jh_x(22, 20) = out_22_20;
      out_Jh_x(26, 20) = out_26_20;
      out_Jh_x(21, 21) = out_21_21;
      out_Jh_x(22, 21) = out_22_21;
      out_Jh_x(25, 21) = out_25_21;
      out_Jh_x(26, 21) = out_26_21;
      out_Jh_x(35, 21) = out_35_21;
      out_Jh_x(36, 21) = out_36_21;
      out_Jh_x(39, 21) = out_39_21;
      out_Jh_x(40, 21) = out_40_21;
      out_Jh_x(23, 22) = out_23_22;
      out_Jh_x(25, 22) = out_25_22;
      out_Jh_x(24, 23) = out_24_23;
      out_Jh_x(26, 23) = out_26_23;
      out_Jh_x(25, 24) = out_25_24;
      out_Jh_x(26, 24) = out_26_24;
      out_Jh_x(39, 24) = out_39_24;
      out_Jh_x(40, 24) = out_40_24;
      out_Jh_x(19, 25) = out_19_25;
      out_Jh_x(27, 25) = out_27_25;
      out_Jh_x(20, 26) = out_20_26;
      out_Jh_x(28, 26) = out_28_26;
      out_Jh_x(27, 27) = out_27_27;
      out_Jh_x(28, 27) = out_28_27;
      out_Jh_x(41, 27) = out_41_27;
      out_Jh_x(42, 27) = out_42_27;
      out_Jh_x(21, 28) = out_21_28;
      out_Jh_x(27, 28) = out_27_28;
      out_Jh_x(22, 29) = out_22_29;
      out_Jh_x(28, 29) = out_28_29;
      out_Jh_x(27, 30) = out_27_30;
      out_Jh_x(28, 30) = out_28_30;
      out_Jh_x(41, 30) = out_41_30;
      out_Jh_x(42, 30) = out_42_30;
      out_Jh_x(29, 31) = out_29_31;
      out_Jh_x(33, 31) = out_33_31;
      out_Jh_x(37, 31) = out_37_31;
      out_Jh_x(30, 32) = out_30_32;
      out_Jh_x(34, 32) = out_34_32;
      out_Jh_x(38, 32) = out_38_32;
      out_Jh_x(31, 33) = out_31_33;
      out_Jh_x(35, 33) = out_35_33;
      out_Jh_x(39, 33) = out_39_33;
      out_Jh_x(32, 34) = out_32_34;
      out_Jh_x(36, 34) = out_36_34;
      out_Jh_x(40, 34) = out_40_34;
      out_Jh_x(29, 35) = out_29_35;
      out_Jh_x(33, 35) = out_33_35;
      out_Jh_x(34, 35) = out_34_35;
      out_Jh_x(37, 35) = out_37_35;
      out_Jh_x(38, 35) = out_38_35;
      out_Jh_x(41, 35) = out_41_35;
      out_Jh_x(30, 36) = out_30_36;
      out_Jh_x(33, 36) = out_33_36;
      out_Jh_x(34, 36) = out_34_36;
      out_Jh_x(37, 36) = out_37_36;
      out_Jh_x(38, 36) = out_38_36;
      out_Jh_x(42, 36) = out_42_36;
      out_Jh_x(31, 37) = out_31_37;
      out_Jh_x(35, 37) = out_35_37;
      out_Jh_x(36, 37) = out_36_37;
      out_Jh_x(39, 37) = out_39_37;
      out_Jh_x(40, 37) = out_40_37;
      out_Jh_x(41, 37) = out_41_37;
      out_Jh_x(32, 38) = out_32_38;
      out_Jh_x(35, 38) = out_35_38;
      out_Jh_x(36, 38) = out_36_38;
      out_Jh_x(39, 38) = out_39_38;
      out_Jh_x(40, 38) = out_40_38;
      out_Jh_x(42, 38) = out_42_38;
      out_Jh_x(29, 39) = out_29_39;
      out_Jh_x(33, 39) = out_33_39;
      out_Jh_x(34, 39) = out_34_39;
      out_Jh_x(37, 39) = out_37_39;
      out_Jh_x(38, 39) = out_38_39;
      out_Jh_x(39, 39) = out_39_39;
      out_Jh_x(30, 40) = out_30_40;
      out_Jh_x(33, 40) = out_33_40;
      out_Jh_x(34, 40) = out_34_40;
      out_Jh_x(37, 40) = out_37_40;
      out_Jh_x(38, 40) = out_38_40;
      out_Jh_x(40, 40) = out_40_40;
      out_Jh_x(31, 41) = out_31_41;
      out_Jh_x(35, 41) = out_35_41;
      out_Jh_x(36, 41) = out_36_41;
      out_Jh_x(37, 41) = out_37_41;
      out_Jh_x(39, 41) = out_39_41;
      out_Jh_x(40, 41) = out_40_41;
      out_Jh_x(32, 42) = out_32_42;
      out_Jh_x(35, 42) = out_35_42;
      out_Jh_x(36, 42) = out_36_42;
      out_Jh_x(38, 42) = out_38_42;
      out_Jh_x(39, 42) = out_39_42;
      out_Jh_x(40, 42) = out_40_42;
      out_Jh_x(33, 43) = out_33_43;
      out_Jh_x(35, 43) = out_35_43;
      out_Jh_x(41, 43) = out_41_43;
      out_Jh_x(42, 43) = out_42_43;
      out_Jh_x(34, 44) = out_34_44;
      out_Jh_x(36, 44) = out_36_44;
      out_Jh_x(41, 44) = out_41_44;
      out_Jh_x(42, 44) = out_42_44;
    end % Jh_x
    %
    % - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    %
    function out_Jh_v = Jh_v( this, in_1, in_2, t )
      % Calculate the Jacobian of h with respect to v.

      % Extract properties
      m = this.m_m;
      g = this.m_g;
      l = this.m_l;

      % Extract inputs
      x__AC = in_1(1);
      y__AC = in_1(2);
      theta__AC = in_1(3);
      x__BD = in_1(4);
      y__BD = in_1(5);
      theta__BD = in_1(6);
      x__fg = in_1(7);
      y__fg = in_1(8);
      theta__fg = in_1(9);
      x__CE = in_1(10);
      y__CE = in_1(11);
      theta__CE = in_1(12);
      x__ED = in_1(13);
      y__ED = in_1(14);
      theta__ED = in_1(15);
      u__AC = in_1(16);
      v__AC = in_1(17);
      omega__AC = in_1(18);
      u__BD = in_1(19);
      v__BD = in_1(20);
      omega__BD = in_1(21);
      u__fg = in_1(22);
      v__fg = in_1(23);
      omega__fg = in_1(24);
      u__CE = in_1(25);
      v__CE = in_1(26);
      omega__CE = in_1(27);
      u__ED = in_1(28);
      v__ED = in_1(29);
      omega__ED = in_1(30);
      lambda__1 = in_1(31);
      lambda__2 = in_1(32);
      lambda__3 = in_1(33);
      lambda__4 = in_1(34);
      lambda__5 = in_1(35);
      lambda__6 = in_1(36);
      lambda__7 = in_1(37);
      lambda__8 = in_1(38);
      lambda__9 = in_1(39);
      lambda__10 = in_1(40);
      lambda__11 = in_1(41);
      lambda__12 = in_1(42);
      lambda__13 = in_1(43);
      lambda__14 = in_1(44);

      % Evaluate function
      % No body

      % Store outputs
      out_Jh_v = zeros(42, 0);
    end % Jh_v
    %
    % - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    %
  end
end % HartSecond

% That's All Folks!
