% +--------------------------------------------------------------------------+
% | 'Indigo' module version 1.0 - BSD 3-Clause License - Copyright (c) 2023  |
% | Current version authors:                                                 |
% |   Davide Stocco and Enrico Bertolazzi.                                   |
% +--------------------------------------------------------------------------+

% Matlab generated code for implicit system: ParabolicPendulum
% This file has been automatically generated by Indigo.
% DISCLAIMER: If you need to edit it, do it wisely!

classdef ParabolicPendulum < Indigo.DAE.Implicit
  %
  % No class description provided.
  %
  properties (SetAccess = protected, Hidden = true)
    % User data
    m_m = 1.0;
    m_g = 9.81;
  end
  %
  methods
    %
    % - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    %
    function this = ParabolicPendulum( varargin )
      % Class constructor.

      % Superclass constructor
      num_eqns = 5;
      num_veil = 0;
      num_invs = 3;
      this = this@Indigo.DAE.Implicit('ParabolicPendulum', num_eqns, num_veil, num_invs);

      % User data
      if (nargin == 0)
        % Keep default values
      elseif (nargin == 1 && isstruct(varargin{1}))
        this.m_m = varargin{1}.m;
        this.m_g = varargin{1}.g;
      elseif (nargin == 2)
        this.m_m = varargin{1};
        this.m_g = varargin{2};
      else
        error('wrong number of input arguments.');
      end
    end % ParabolicPendulum
    %
    % - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    %
    function out_F = F( this, in_1, in_2, ~, ~ )
      % Evaluate the function F.

      % Extract properties
      m = this.m_m;

      % Extract inputs
      x = in_1(1);
      u = in_1(3);
      v = in_1(4);
      lambda = in_1(5);
      x_dot = in_2(1);
      y_dot = in_2(2);
      u_dot = in_2(3);
      v_dot = in_2(4);
      lambda_dot = in_2(5);

      % Evaluate function
      out_1 = -v + y_dot;
      out_2 = -u + x_dot;
      out_3 = -2 * x * lambda + u_dot * m;
      t4 = x ^ 2;
      t7 = u ^ 2;
      out_4 = v_dot + 0.1e1 / m * (-4 * t4 * lambda - 2 * t7 * m);
      out_5 = -8 * x * x_dot * lambda + lambda_dot * (-4 * t4 - 1) - 4 * m * u * u_dot;

      % Store outputs
      out_F = zeros(5, 1);
      out_F(1) = out_1;
      out_F(2) = out_2;
      out_F(3) = out_3;
      out_F(4) = out_4;
      out_F(5) = out_5;
    end % F
    %
    % - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    %
    function out_JF_x = JF_x( this, in_1, in_2, ~, ~ )
      % Evaluate the Jacobian of F with respect to x.

      % Extract properties
      m = this.m_m;

      % Extract inputs
      x = in_1(1);
      u = in_1(3);
      lambda = in_1(5);
      x_dot = in_2(1);
      u_dot = in_2(3);
      lambda_dot = in_2(5);

      % Evaluate function
      out_3_1 = -2 * lambda;
      t3 = 0.1e1 / m;
      out_4_1 = -8 * t3 * lambda * x;
      out_5_1 = -8 * lambda * x_dot - 8 * x * lambda_dot;
      out_2_3 = -1;
      out_4_3 = -4 * u;
      out_5_3 = -4 * u_dot * m;
      out_1_4 = -1;
      out_3_5 = -2 * x;
      t13 = x ^ 2;
      out_4_5 = -4 * t3 * t13;
      out_5_5 = -8 * x * x_dot;

      % Store outputs
      out_JF_x = zeros(5, 5);
      out_JF_x(3, 1) = out_3_1;
      out_JF_x(4, 1) = out_4_1;
      out_JF_x(5, 1) = out_5_1;
      out_JF_x(2, 3) = out_2_3;
      out_JF_x(4, 3) = out_4_3;
      out_JF_x(5, 3) = out_5_3;
      out_JF_x(1, 4) = out_1_4;
      out_JF_x(3, 5) = out_3_5;
      out_JF_x(4, 5) = out_4_5;
      out_JF_x(5, 5) = out_5_5;
    end % JF_x
    %
    % - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    %
    function out_JF_x_dot = JF_x_dot( this, in_1, ~, ~, ~ )
      % Evaluate the Jacobian of F with respect to x_dot.

      % Extract properties
      m = this.m_m;

      % Extract inputs
      x = in_1(1);
      u = in_1(3);
      lambda = in_1(5);

      % Evaluate function
      out_2_1 = 1;
      out_5_1 = -8 * x * lambda;
      out_1_2 = 1;
      out_3_3 = m;
      out_5_3 = -4 * m * u;
      out_4_4 = 1;
      t5 = x ^ 2;
      out_5_5 = -4 * t5 - 1;

      % Store outputs
      out_JF_x_dot = zeros(5, 5);
      out_JF_x_dot(2, 1) = out_2_1;
      out_JF_x_dot(5, 1) = out_5_1;
      out_JF_x_dot(1, 2) = out_1_2;
      out_JF_x_dot(3, 3) = out_3_3;
      out_JF_x_dot(5, 3) = out_5_3;
      out_JF_x_dot(4, 4) = out_4_4;
      out_JF_x_dot(5, 5) = out_5_5;
    end % JF_x_dot
    %
    % - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    %
    function out_JF_v = JF_v( ~, ~, ~, ~, ~ )
      % Evaluate the Jacobian of F with respect to v.

      % Extract properties
      % No properties

      % Extract inputs

      % Evaluate function
      % No body

      % Store outputs
      out_JF_v = zeros(5, 0);
    end % JF_v
    %
    % - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    %
    function out_v = v( ~, ~, ~ )
      % Evaluate the the veils v.

      % Extract properties
      % No properties

      % Extract inputs

      % Evaluate function
      % No body

      % Store outputs
      out_v = zeros(0, 1);
    end % v
    %
    % - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    %
    function out_Jv_x = Jv_x( ~, ~, ~, ~ )
      % Evaluate the Jacobian of v with respect to x.

      % Extract properties
      % No properties

      % Extract inputs

      % Evaluate function
      % No body

      % Store outputs
      out_Jv_x = zeros(0, 5);
    end % Jv_x
    %
    % - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    %
    function out_h = h( this, in_1, ~, ~ )
      % Calculate the residual of the invariants h.

      % Extract properties
      m = this.m_m;
      g = this.m_g;

      % Extract inputs
      x = in_1(1);
      y = in_1(2);
      u = in_1(3);
      v = in_1(4);
      lambda = in_1(5);

      % Evaluate function
      t1 = x ^ 2;
      out_1 = t1 - y;
      out_2 = -2 * u * x + v;
      t7 = u ^ 2;
      out_3 = lambda * (-4 * t1 - 1) - (2 * t7 + g) * m;

      % Store outputs
      out_h = zeros(3, 1);
      out_h(1) = out_1;
      out_h(2) = out_2;
      out_h(3) = out_3;
    end % h
    %
    % - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    %
    function out_Jh_x = Jh_x( this, in_1, ~, ~ )
      % Calculate the Jacobian of h with respect to x.

      % Extract properties
      m = this.m_m;

      % Extract inputs
      x = in_1(1);
      u = in_1(3);
      lambda = in_1(5);

      % Evaluate function
      out_1_1 = 2 * x;
      out_2_1 = -2 * u;
      out_3_1 = -8 * x * lambda;
      out_1_2 = -1;
      out_2_3 = -out_1_1;
      out_3_3 = -4 * m * u;
      out_2_4 = 1;
      t6 = x ^ 2;
      out_3_5 = -4 * t6 - 1;

      % Store outputs
      out_Jh_x = zeros(3, 5);
      out_Jh_x(1, 1) = out_1_1;
      out_Jh_x(2, 1) = out_2_1;
      out_Jh_x(3, 1) = out_3_1;
      out_Jh_x(1, 2) = out_1_2;
      out_Jh_x(2, 3) = out_2_3;
      out_Jh_x(3, 3) = out_3_3;
      out_Jh_x(2, 4) = out_2_4;
      out_Jh_x(3, 5) = out_3_5;
    end % Jh_x
    %
    % - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    %
    function out_Jh_v = Jh_v( ~, ~, ~, ~ )
      % Calculate the Jacobian of h with respect to v.

      % Extract properties
      % No properties

      % Extract inputs

      % Evaluate function
      % No body

      % Store outputs
      out_Jh_v = zeros(3, 0);
    end % Jh_v
    %
    % - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    %
    function out = in_domain( ~, ~, ~ )
      out = true;
    end % in_domain
    %
    % - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    %
  end
end % ParabolicPendulum

% That's All Folks!
