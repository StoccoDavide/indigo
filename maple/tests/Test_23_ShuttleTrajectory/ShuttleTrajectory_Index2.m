% +--------------------------------------------------------------------------+
% | 'Indigo' module version 1.0 - BSD 3-Clause License - Copyright (c) 2023  |
% | Current version authors:                                                 |
% |   Davide Stocco and Enrico Bertolazzi.                                   |
% +--------------------------------------------------------------------------+

% MATLAB generated code for implicit system: ShuttleTrajectory_Index2
% This file has been automatically generated by Indigo.
% DISCLAIMER: If you need to edit this file, do it wisely, at your own risk!

classdef ShuttleTrajectory_Index2 < Indigo.DAE.SemiExplicit
  %
  % No class description provided.
  %
  properties (SetAccess = protected, Hidden = true)
    % User data
    m_mu = .1407653916e17;
    m_Omega__E = .7272205218e-4;
    m_a__e = 20902900.0;
    m_m = 2.890532728;
    m_S = 1.0;
  end
  %
  methods
    %
    % - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    %
    function this = ShuttleTrajectory_Index2( varargin )
      % Class constructor.

      % Superclass constructor
      num_eqns = 8;
      num_sysy = 0;
      num_veil = 2;
      num_invs = 4;
      this = this@Indigo.DAE.SemiExplicit('ShuttleTrajectory_Index2', num_eqns, num_sysy, num_veil, num_invs);

      % User data
      if (nargin == 0)
        % Keep default values
      elseif (nargin == 1 && isstruct(varargin{1}))
        this.m_mu = varargin{1}.mu;
        this.m_Omega__E = varargin{1}.Omega__E;
        this.m_a__e = varargin{1}.a__e;
        this.m_m = varargin{1}.m;
        this.m_S = varargin{1}.S;
      elseif (nargin == 5)
        this.m_mu = varargin{1};
        this.m_Omega__E = varargin{2};
        this.m_a__e = varargin{3};
        this.m_m = varargin{4};
        this.m_S = varargin{5};
      else
        error('wrong number of input arguments.');
      end
    end % ShuttleTrajectory_Index2
    %
    % - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    %
    function out_Ms = Ms( this, in_1, ~, ~, ~ )
      % Evaluate the matrix Ms.

      % Extract properties
      a__e = this.m_a__e;
      m = this.m_m;
      S = this.m_S;

      % Extract inputs
      H = in_1(1);
      lambda = in_1(3);
      V__R = in_1(4);
      theta = in_1(5);
      beta = in_1(7);
      alpha = in_1(8);

      % Evaluate function
      out_1_1 = 1;
      t1 = H + a__e;
      t2 = cos(lambda);
      out_3_2 = t2 * t1;
      out_2_3 = t1;
      t3 = H ^ 2;
      t8 = a__e ^ 2;
      out_4_4 = m * t3 + 0.2e1 * H * a__e * m + m * t8;
      t10 = V__R * t3;
      t12 = H * V__R;
      out_5_5 = m * t10 + 0.2e1 * a__e * m * t12 + m * t8 * V__R;
      t18 = cos(theta);
      out_6_6 = V__R * out_2_3 * m * t18;
      t21 = S * alpha;
      t23 = cos(beta);
      t25 = exp(-H / 23800);
      t27 = 0.1e1 / m;
      t28 = 0.1e1 / t18;
      out_7_7 = 0.6812468184e-3 * t28 * t27 * t25 * t23 * V__R * t21;
      t43 = sin(beta);
      t45 = out_2_3 ^ 2;
      out_8_7 = t27 / t45 / t43 * t25 * (-0.6812468184e-3 * t21 * t10 - 0.1362493637e-2 * a__e * t21 * t12 - 0.6812468184e-3 * t8 * S * V__R * alpha);
      out_7_8 = 0.6812468184e-3 * t28 * t27 * t25 * t43 * V__R * S;

      % Store outputs
      out_Ms = zeros(8, 8);
      out_Ms(1, 1) = out_1_1;
      out_Ms(3, 2) = out_3_2;
      out_Ms(2, 3) = out_2_3;
      out_Ms(4, 4) = out_4_4;
      out_Ms(5, 5) = out_5_5;
      out_Ms(6, 6) = out_6_6;
      out_Ms(7, 7) = out_7_7;
      out_Ms(8, 7) = out_8_7;
      out_Ms(7, 8) = out_7_8;
    end % Ms
    %
    % - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    %
    function out_TMs_x = TMs_x( this, in_1, ~, ~, ~ )
      % Evaluate the tensor of Ms with respect to x.

      % Extract properties
      a__e = this.m_a__e;
      m = this.m_m;
      S = this.m_S;

      % Extract inputs
      H = in_1(1);
      lambda = in_1(3);
      V__R = in_1(4);
      theta = in_1(5);
      beta = in_1(7);
      alpha = in_1(8);

      % Evaluate function
      out_3_2_1 = cos(lambda);
      out_2_3_1 = 1;
      out_4_4_1 = 2 * H * m + 0.2e1 * a__e * m;
      t5 = H * V__R;
      out_5_5_1 = 2 * m * t5 + 0.2e1 * V__R * a__e * m;
      t11 = cos(theta);
      t12 = m * t11;
      out_6_6_1 = V__R * t12;
      t13 = S * alpha;
      t14 = V__R * t13;
      t15 = cos(beta);
      t17 = exp(-H / 23800);
      t19 = 0.1e1 / m;
      t20 = 0.1e1 / t11;
      t21 = t20 * t19;
      out_7_7_1 = -0.2862381590e-7 * t21 * t17 * t15 * t14;
      t27 = V__R * alpha;
      t28 = S * a__e;
      t33 = sin(beta);
      t34 = 0.1e1 / t33;
      t35 = H + a__e;
      t36 = t35 ^ 2;
      t37 = 0.1e1 / t36;
      t39 = t19 * t37 * t34;
      t41 = H ^ 2;
      t42 = t41 * V__R;
      t48 = a__e ^ 2;
      t53 = t17 * (-0.6812468184e-3 * t13 * t42 - 0.1362493637e-2 * a__e * t13 * t5 - 0.6812468184e-3 * t48 * S * t27);
      out_8_7_1 = t39 * t17 * (-0.1362493637e-2 * t13 * t5 - 0.1362493637e-2 * t28 * t27) - t39 * t53 / 23800 - 2 * t19 / t36 / t35 * t34 * t53;
      t62 = V__R * S;
      t63 = t33 * t62;
      t64 = t19 * t17;
      t65 = t20 * t64;
      out_7_8_1 = -0.2862381590e-7 * t65 * t63;
      t68 = sin(lambda);
      out_3_2_3 = -t68 * t35;
      out_5_5_4 = m * t41 + 0.2e1 * H * a__e * m + m * t48;
      out_6_6_4 = t35 * t12;
      out_7_7_4 = 0.6812468184e-3 * t65 * t15 * t13;
      out_8_7_4 = t39 * t17 * (-0.6812468184e-3 * S * alpha * t41 - 0.1362493637e-2 * t28 * H * alpha - 0.6812468184e-3 * t48 * t13);
      out_7_8_4 = 0.6812468184e-3 * t65 * t33 * S;
      t89 = sin(theta);
      out_6_6_5 = -V__R * t35 * m * t89;
      t95 = t11 ^ 2;
      t98 = t89 / t95 * t64;
      out_7_7_5 = 0.6812468184e-3 * t98 * t15 * V__R * t13;
      out_7_8_5 = 0.6812468184e-3 * t98 * t63;
      out_7_7_7 = -0.6812468184e-3 * t21 * t17 * t33 * t14;
      t105 = t33 ^ 2;
      out_8_7_7 = -t15 * t19 * t37 / t105 * t53;
      out_7_8_7 = 0.6812468184e-3 * t65 * t15 * t62;
      out_7_7_8 = out_7_8_7;
      out_8_7_8 = t39 * t17 * (-0.6812468184e-3 * S * t42 - 0.1362493637e-2 * t28 * t5 - 0.6812468184e-3 * t48 * t62);

      % Store outputs
      out_TMs_x = zeros(8, 8, 8);
      out_TMs_x(3, 2, 1) = out_3_2_1;
      out_TMs_x(2, 3, 1) = out_2_3_1;
      out_TMs_x(4, 4, 1) = out_4_4_1;
      out_TMs_x(5, 5, 1) = out_5_5_1;
      out_TMs_x(6, 6, 1) = out_6_6_1;
      out_TMs_x(7, 7, 1) = out_7_7_1;
      out_TMs_x(8, 7, 1) = out_8_7_1;
      out_TMs_x(7, 8, 1) = out_7_8_1;
      out_TMs_x(3, 2, 3) = out_3_2_3;
      out_TMs_x(5, 5, 4) = out_5_5_4;
      out_TMs_x(6, 6, 4) = out_6_6_4;
      out_TMs_x(7, 7, 4) = out_7_7_4;
      out_TMs_x(8, 7, 4) = out_8_7_4;
      out_TMs_x(7, 8, 4) = out_7_8_4;
      out_TMs_x(6, 6, 5) = out_6_6_5;
      out_TMs_x(7, 7, 5) = out_7_7_5;
      out_TMs_x(7, 8, 5) = out_7_8_5;
      out_TMs_x(7, 7, 7) = out_7_7_7;
      out_TMs_x(8, 7, 7) = out_8_7_7;
      out_TMs_x(7, 8, 7) = out_7_8_7;
      out_TMs_x(7, 7, 8) = out_7_7_8;
      out_TMs_x(8, 7, 8) = out_8_7_8;
    end % TMs_x
    %
    % - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    %
    function out_TMs_y = TMs_y( ~, ~, ~, ~, ~ )
      % Evaluate the tensor of Ms with respect to y.

      % Extract properties
      % No properties

      % Extract inputs

      % Evaluate function
      % No body

      % Store outputs
      out_TMs_y = zeros(8, 8, 0);
    end % TMs_y
    %
    % - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    %
    function out_TMs_v = TMs_v( ~, ~, ~, ~, ~ )
      % Evaluate the tensor of Ms with respect to v.

      % Extract properties
      % No properties

      % Extract inputs

      % Evaluate function
      % No body

      % Store outputs
      out_TMs_v = zeros(8, 8, 2);
    end % TMs_v
    %
    % - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    %
    function out_fs = fs( this, in_1, ~, in_3, ~ )
      % Evaluate the vector fs of the explicit system.

      % Extract properties
      mu = this.m_mu;
      Omega__E = this.m_Omega__E;
      a__e = this.m_a__e;
      m = this.m_m;
      S = this.m_S;

      % Extract inputs
      H = in_1(1);
      lambda = in_1(3);
      V__R = in_1(4);
      theta = in_1(5);
      A = in_1(6);
      beta = in_1(7);
      alpha = in_1(8);
      V_y58KN_1 = in_3(1);
      V_y58KN_2 = in_3(2);

      % Evaluate function
      t1 = sin(theta);
      out_1 = t1 * V__R;
      t2 = cos(theta);
      t3 = t2 * V__R;
      t4 = cos(A);
      out_2 = t4 * t3;
      t5 = sin(A);
      out_3 = t5 * t3;
      t7 = alpha ^ 2;
      t8 = t7 * S;
      t11 = V__R ^ 2;
      t13 = H ^ 2;
      t22 = a__e ^ 2;
      t23 = t22 * S;
      t31 = exp(-H / 23800);
      t35 = Omega__E ^ 2;
      t36 = t35 * m * t13 * H;
      t39 = t35 * m;
      t41 = 0.3e1 * t39 * a__e * t13;
      t44 = 0.3e1 * t39 * t22 * H;
      t47 = t35 * m * t22 * a__e;
      t49 = -0.1e1 * t36 - t41 - t44 - 0.1e1 * t47;
      t51 = cos(lambda);
      t52 = t51 ^ 2;
      t56 = sin(lambda);
      t58 = t51 * t56 * t2;
      out_4 = -t31 * (t13 * t11 * (0.47560e-4 * S + 0.3903256749e-4 * t8) + H * t11 * (0.95120e-4 * S * a__e + 0.7806513498e-4 * a__e * t8) + t11 * (0.4756e-4 * t23 + 0.3903256749e-4 * t22 * t8)) - t52 * t1 * t49 - t58 * t4 * (t36 + t41 + t44 + t47) - m * t1 * mu;
      t63 = alpha * S;
      t66 = H * t11;
      t67 = a__e * t63;
      t74 = cos(beta);
      t83 = m * Omega__E;
      t88 = a__e * m * Omega__E;
      out_5 = -t31 * t74 * (-0.6812468184e-3 * t63 * t13 * t11 - 0.1362493637e-2 * t67 * t66 - 0.6812468184e-3 * t23 * alpha * t11) - t52 * t2 * t49 - t51 * (t56 * t1 * t4 * t49 + t5 * (-0.2e1 * t83 * t13 * V__R - 0.4e1 * t88 * V__R * H - 0.2e1 * t83 * t22 * V__R)) - t2 * (-0.1e1 * m * t66 - 0.1e1 * m * a__e * t11 + mu * m);
      t111 = sin(beta);
      t115 = m * t13;
      t118 = H * a__e;
      t121 = m * t22;
      t131 = 0.2e1 * H * m * Omega__E + 0.2e1 * t88;
      t140 = t2 ^ 2;
      out_6 = -0.1e1 / t51 * (t31 * t51 * t111 * t11 * (-0.6812468184e-3 * H * t63 - 0.6812468184e-3 * t67) + t52 * (t56 * t5 * (-0.1e1 * t35 * t115 - 0.2e1 * t39 * t118 - 0.1e1 * t35 * t121) + t1 * t4 * V__R * t131) - t58 * V__R * t131 - 0.1e1 * m * t56 * t5 * t140 * t11);
      out_7 = 0.1e1 * V_y58KN_1;
      t156 = (H + a__e) ^ 2;
      out_8 = -0.1e1 / m / t156 * V_y58KN_2 * (-0.1e1 * t115 - 0.2e1 * m * t118 - 0.1e1 * t121);

      % Store outputs
      out_fs = zeros(8, 1);
      out_fs(1) = out_1;
      out_fs(2) = out_2;
      out_fs(3) = out_3;
      out_fs(4) = out_4;
      out_fs(5) = out_5;
      out_fs(6) = out_6;
      out_fs(7) = out_7;
      out_fs(8) = out_8;
    end % fs
    %
    % - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    %
    function out_Jfs_x = Jfs_x( this, in_1, ~, in_3, ~ )
      % Evaluate the Jacobian of fs with respect to x.

      % Extract properties
      mu = this.m_mu;
      Omega__E = this.m_Omega__E;
      a__e = this.m_a__e;
      m = this.m_m;
      S = this.m_S;

      % Extract inputs
      H = in_1(1);
      lambda = in_1(3);
      V__R = in_1(4);
      theta = in_1(5);
      A = in_1(6);
      beta = in_1(7);
      alpha = in_1(8);
      V_y58KN_2 = in_3(2);

      % Evaluate function
      t2 = alpha ^ 2;
      t3 = t2 * S;
      t5 = 0.47560e-4 * S + 0.3903256749e-4 * t3;
      t6 = V__R ^ 2;
      t7 = t6 * t5;
      t10 = S * a__e;
      t14 = 0.95120e-4 * t10 + 0.7806513498e-4 * a__e * t3;
      t15 = t6 * t14;
      t18 = exp(-H / 23800);
      t20 = H ^ 2;
      t23 = a__e ^ 2;
      t24 = t23 * S;
      t28 = 0.4756e-4 * t24 + 0.3903256749e-4 * t23 * t3;
      t33 = m * t20;
      t34 = Omega__E ^ 2;
      t35 = t34 * t33;
      t37 = H * a__e;
      t38 = t34 * m;
      t39 = t38 * t37;
      t40 = 0.6e1 * t39;
      t41 = m * t23;
      t42 = t34 * t41;
      t43 = 0.3e1 * t42;
      t44 = -0.3e1 * t35 - t40 - t43;
      t45 = sin(theta);
      t47 = cos(lambda);
      t48 = t47 ^ 2;
      t52 = cos(A);
      t54 = cos(theta);
      t55 = sin(lambda);
      t57 = t47 * t55 * t54;
      out_4_1 = -t18 * (2 * H * t7 + t15) + t18 * (H * t15 + t20 * t7 + t6 * t28) / 23800 - t48 * t45 * t44 - t57 * t52 * (3 * t35 + t40 + t43);
      t59 = H * t6;
      t60 = alpha * S;
      t63 = alpha * t6;
      t67 = cos(beta);
      t70 = t20 * t6;
      t71 = t60 * t70;
      t73 = a__e * t60;
      t74 = t73 * t59;
      t76 = t24 * t63;
      t78 = -0.6812468184e-3 * t71 - 0.1362493637e-2 * t74 - 0.6812468184e-3 * t76;
      t85 = t55 * t45;
      t87 = V__R * H;
      t88 = m * Omega__E;
      t91 = V__R * a__e;
      t95 = sin(A);
      out_5_1 = -t18 * t67 * (-0.1362493637e-2 * t60 * t59 - 0.1362493637e-2 * t10 * t63) + t18 * t67 * t78 / 23800 - t48 * t54 * t44 - t47 * (t85 * t52 * t44 + t95 * (-0.4e1 * t88 * t87 - 0.4e1 * t88 * t91)) + 0.1e1 * t54 * m * t6;
      t103 = sin(beta);
      t105 = t18 * t47 * t103;
      t111 = -0.6812468184e-3 * H * t60 - 0.6812468184e-3 * t73;
      t112 = t6 * t111;
      t113 = t105 * t112;
      t115 = H * m;
      t118 = a__e * m;
      t125 = t52 * t45 * V__R;
      t134 = 0.1e1 / t47;
      out_6_1 = -t134 * (-0.6812468184e-3 * t105 * t6 * t60 - t113 / 23800 + t48 * (t55 * t95 * (-0.2e1 * t34 * t115 - 0.2e1 * t34 * t118) + 0.2e1 * t125 * t88) - 0.2e1 * t57 * V__R * t88);
      t140 = H + a__e;
      t141 = t140 ^ 2;
      t143 = 0.1e1 / m;
      out_8_1 = -t143 / t141 * V_y58KN_2 * (-0.2e1 * t115 - 0.2e1 * t118) + 2 * t143 / t141 / t140 * V_y58KN_2 * (-0.1e1 * t33 - 0.2e1 * m * t37 - 0.1e1 * t41);
      t159 = t34 * m * t20 * H;
      t163 = 0.3e1 * t38 * a__e * t20;
      t166 = 0.3e1 * t38 * t23 * H;
      t169 = t34 * m * t23 * a__e;
      t171 = -0.1e1 * t159 - t163 - t166 - 0.1e1 * t169;
      t173 = t55 * t47;
      t176 = t159 + t163 + t166 + t169;
      t177 = t52 * t176;
      t178 = t48 * t54;
      t180 = t55 ^ 2;
      t181 = t180 * t54;
      out_4_3 = 2 * t173 * t45 * t171 - t178 * t177 + t181 * t177;
      t183 = t54 * t171;
      t186 = t52 * t171;
      t187 = t48 * t45;
      t190 = t20 * V__R;
      t193 = Omega__E * t118;
      t199 = -0.2e1 * t88 * t190 - 0.4e1 * t193 * t87 - 0.2e1 * t88 * t23 * V__R;
      out_5_3 = 2 * t173 * t183 - t187 * t186 + t55 * (t85 * t186 + t95 * t199);
      t209 = -0.1e1 * t35 - 0.2e1 * t39 - 0.1e1 * t42;
      t210 = t95 * t209;
      t217 = 0.2e1 * Omega__E * t115 + 0.2e1 * t193;
      t218 = V__R * t217;
      t221 = t45 * t52 * t218 + t55 * t210;
      t225 = -t217;
      t226 = V__R * t225;
      t229 = t54 ^ 2;
      t230 = t229 * t6;
      t240 = m * t55 * t95;
      out_6_3 = -t134 * (-t18 * t55 * t103 * t112 + t48 * t47 * t210 - 2 * t55 * t47 * t221 + t178 * t226 - t181 * t226 - 0.1e1 * m * t47 * t95 * t230) - t55 / t48 * (t113 + t48 * t221 + t57 * t226 - 0.1e1 * t240 * t230);
      out_1_4 = t45;
      out_2_4 = t52 * t54;
      out_3_4 = t95 * t54;
      out_4_4 = -t18 * (2 * H * V__R * t14 + 2 * t20 * V__R * t5 + 2 * V__R * t28);
      out_5_4 = -t18 * t67 * (-0.1362493637e-2 * t60 * t190 - 0.2724987274e-2 * t73 * t87 - 0.1362493637e-2 * t24 * V__R * alpha) - t47 * t95 * (-0.2e1 * Omega__E * t33 - 0.4e1 * t88 * t37 - 0.2e1 * Omega__E * t41) - t54 * (-0.2e1 * m * t87 - 0.2e1 * m * t91);
      out_6_4 = -t134 * (2 * t105 * V__R * t111 + t187 * t52 * t217 + t173 * t54 * t225 - 0.2e1 * t240 * t229 * V__R);
      out_1_5 = t54 * V__R;
      out_2_5 = -t125;
      out_3_5 = -t95 * out_1_4 * V__R;
      t296 = t47 * t55 * out_1_4;
      out_4_5 = -m * mu * t54 + t296 * t177 - t48 * t183;
      out_5_5 = t48 * out_1_4 * t171 - t57 * t186 + out_1_4 * (-0.1e1 * m * t59 - 0.1e1 * m * a__e * t6 + mu * m);
      out_6_5 = -t134 * (t48 * t52 * t54 * t218 - t296 * t226 + 0.2e1 * out_1_4 * m * t55 * t95 * t54 * t6);
      t323 = t54 * V__R;
      out_2_6 = -t95 * t323;
      out_3_6 = t52 * t323;
      out_4_6 = t57 * t95 * t176;
      out_5_6 = -t47 * (-t85 * t95 * t171 + t52 * t199);
      out_6_6 = -t134 * (t48 * (-out_1_4 * t95 * t218 + t55 * t52 * t209) - 0.1e1 * m * t55 * t52 * t230);
      out_5_7 = t18 * t103 * t78;
      out_6_7 = -t18 * t67 * t112;
      out_4_8 = -t18 * (0.7806513498e-4 * t71 + 0.1561302700e-3 * t74 + 0.7806513498e-4 * t76);
      out_5_8 = -t18 * t67 * (-0.6812468184e-3 * S * t70 - 0.1362493637e-2 * t10 * t59 - 0.6812468184e-3 * t23 * S * t6);
      out_6_8 = -t18 * t103 * t6 * (-0.6812468184e-3 * S * H - 0.6812468184e-3 * t10);

      % Store outputs
      out_Jfs_x = zeros(8, 8);
      out_Jfs_x(4, 1) = out_4_1;
      out_Jfs_x(5, 1) = out_5_1;
      out_Jfs_x(6, 1) = out_6_1;
      out_Jfs_x(8, 1) = out_8_1;
      out_Jfs_x(4, 3) = out_4_3;
      out_Jfs_x(5, 3) = out_5_3;
      out_Jfs_x(6, 3) = out_6_3;
      out_Jfs_x(1, 4) = out_1_4;
      out_Jfs_x(2, 4) = out_2_4;
      out_Jfs_x(3, 4) = out_3_4;
      out_Jfs_x(4, 4) = out_4_4;
      out_Jfs_x(5, 4) = out_5_4;
      out_Jfs_x(6, 4) = out_6_4;
      out_Jfs_x(1, 5) = out_1_5;
      out_Jfs_x(2, 5) = out_2_5;
      out_Jfs_x(3, 5) = out_3_5;
      out_Jfs_x(4, 5) = out_4_5;
      out_Jfs_x(5, 5) = out_5_5;
      out_Jfs_x(6, 5) = out_6_5;
      out_Jfs_x(2, 6) = out_2_6;
      out_Jfs_x(3, 6) = out_3_6;
      out_Jfs_x(4, 6) = out_4_6;
      out_Jfs_x(5, 6) = out_5_6;
      out_Jfs_x(6, 6) = out_6_6;
      out_Jfs_x(5, 7) = out_5_7;
      out_Jfs_x(6, 7) = out_6_7;
      out_Jfs_x(4, 8) = out_4_8;
      out_Jfs_x(5, 8) = out_5_8;
      out_Jfs_x(6, 8) = out_6_8;
    end % Jfs_x
    %
    % - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    %
    function out_Jfs_y = Jfs_y( ~, ~, ~, ~, ~ )
      % Evaluate the Jacobian of fs with respect to y.

      % Extract properties
      % No properties

      % Extract inputs

      % Evaluate function
      % No body

      % Store outputs
      out_Jfs_y = zeros(8, 0);
    end % Jfs_y
    %
    % - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    %
    function out_Jfs_v = Jfs_v( this, in_1, ~, ~, ~ )
      % Evaluate the Jacobian of fs with respect to v.

      % Extract properties
      a__e = this.m_a__e;
      m = this.m_m;

      % Extract inputs
      H = in_1(1);

      % Evaluate function
      out_7_1 = 0.1e1;
      t1 = H ^ 2;
      t7 = a__e ^ 2;
      t12 = (H + a__e) ^ 2;
      out_8_2 = -0.1e1 / m / t12 * (-0.1e1 * m * t1 - 0.2e1 * H * a__e * m - 0.1e1 * m * t7);

      % Store outputs
      out_Jfs_v = zeros(8, 2);
      out_Jfs_v(7, 1) = out_7_1;
      out_Jfs_v(8, 2) = out_8_2;
    end % Jfs_v
    %
    % - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    %
    function out_A = A( ~, ~, ~, ~ )
      % Evaluate the matrix A.

      % Extract properties
      % No properties

      % Extract inputs

      % Evaluate function
      % No body

      % Store outputs
      out_A = zeros(0, 0);
    end % A
    %
    % - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    %
    function out_TA_x = TA_x( ~, ~, ~, ~ )
      % Evaluate tensor of A with respect to x.

      % Extract properties
      % No properties

      % Extract inputs

      % Evaluate function
      % No body

      % Store outputs
      out_TA_x = zeros(0, 0, 8);
    end % TA_x
    %
    % - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    %
    function out_TA_v = TA_v( ~, ~, ~, ~ )
      % Evaluate tensor of A with respect to v.

      % Extract properties
      % No properties

      % Extract inputs

      % Evaluate function
      % No body

      % Store outputs
      out_TA_v = zeros(0, 0, 2);
    end % TA_v
    %
    % - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    %
    function out_b = b( ~, ~, ~, ~ )
      % Evaluate the vector b.

      % Extract properties
      % No properties

      % Extract inputs

      % Evaluate function
      % No body

      % Store outputs
      out_b = zeros(0, 1);
    end % b
    %
    % - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    %
    function out_Jb_x = Jb_x( ~, ~, ~, ~ )
      % Evaluate the Jacobian of b with respect to x.

      % Extract properties
      % No properties

      % Extract inputs

      % Evaluate function
      % No body

      % Store outputs
      out_Jb_x = zeros(0, 8);
    end % Jb_x
    %
    % - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    %
    function out_Jb_v = Jb_v( ~, ~, ~, ~ )
      % Evaluate the Jacobian of b with respect to v.

      % Extract properties
      % No properties

      % Extract inputs

      % Evaluate function
      % No body

      % Store outputs
      out_Jb_v = zeros(0, 2);
    end % Jb_v
    %
    % - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    %
    function out_h = h( this, in_1, ~, ~, t )
      % Evaluate the residual of the invariants h.

      % Extract properties
      mu = this.m_mu;
      Omega__E = this.m_Omega__E;
      a__e = this.m_a__e;
      m = this.m_m;
      S = this.m_S;

      % Extract inputs
      H = in_1(1);
      lambda = in_1(3);
      V__R = in_1(4);
      theta = in_1(5);
      A = in_1(6);
      beta = in_1(7);
      alpha = in_1(8);

      % Evaluate function
      t2 = t ^ 2;
      t3 = t2 * pi;
      out_1 = -theta - pi / 180 - t3 / 1800000;
      out_2 = -A + pi / 4 + t3 / 180000;
      t7 = V__R ^ 2;
      t8 = H ^ 2;
      t10 = alpha * S;
      t13 = H * t7;
      t14 = a__e * t10;
      t18 = a__e ^ 2;
      t23 = cos(beta);
      t26 = exp(-H / 23800);
      t30 = Omega__E ^ 2;
      t33 = t30 * m;
      t42 = t30 * m * t8 * H + 0.3e1 * t33 * a__e * t8 + 0.3e1 * t33 * t18 * H + t30 * m * t18 * a__e;
      t43 = cos(theta);
      t45 = cos(lambda);
      t46 = t45 ^ 2;
      t48 = cos(A);
      t50 = sin(theta);
      t51 = sin(lambda);
      t54 = t8 * V__R;
      t55 = m * Omega__E;
      t58 = V__R * H;
      t60 = a__e * m * Omega__E;
      t63 = t18 * V__R;
      t67 = sin(A);
      t78 = m * t;
      t81 = a__e * t78;
      t87 = 0.1e1 / m;
      t89 = 0.1e1 / V__R;
      t90 = H + a__e;
      t91 = t90 ^ 2;
      out_3 = 0.1e1 / t91 * t89 * t87 * (t26 * t23 * (0.6812468184e-3 * t10 * t8 * t7 + 0.1362493637e-2 * t14 * t13 + 0.6812468184e-3 * t18 * S * alpha * t7) + t46 * t43 * t42 + t45 * (t51 * t50 * t48 * t42 + t67 * (0.2e1 * t55 * t54 + 0.4e1 * t60 * t58 + 0.2e1 * t55 * t63)) + t43 * (m * t13 + m * a__e * t7 - 0.1e1 * mu * m) + 0.3490658504e-5 * t78 * t54 + 0.6981317008e-5 * t81 * t58 + 0.3490658504e-5 * t78 * t63);
      t99 = sin(beta);
      t117 = -0.2e1 * H * m * Omega__E - 0.2e1 * t60;
      t135 = t43 ^ 2;
      out_4 = 0.1e1 / t45 * t89 / t90 * t87 / t43 * (t26 * t45 * t99 * t7 * (0.6812468184e-3 * H * t10 + 0.6812468184e-3 * t14) + t46 * (t51 * t67 * (t30 * m * t8 + 0.2e1 * t33 * H * a__e + t30 * m * t18) + t50 * t48 * V__R * t117) + t45 * (-t51 * t43 * V__R * t117 + t43 * V__R * (-0.3490658504e-4 * H * t78 - 0.3490658504e-4 * t81)) + m * t51 * t67 * t135 * t7);

      % Store outputs
      out_h = zeros(4, 1);
      out_h(1) = out_1;
      out_h(2) = out_2;
      out_h(3) = out_3;
      out_h(4) = out_4;
    end % h
    %
    % - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    %
    function out_Jh_x = Jh_x( this, in_1, ~, ~, t )
      % Evaluate the Jacobian of h with respect to x.

      % Extract properties
      mu = this.m_mu;
      Omega__E = this.m_Omega__E;
      a__e = this.m_a__e;
      m = this.m_m;
      S = this.m_S;

      % Extract inputs
      H = in_1(1);
      lambda = in_1(3);
      V__R = in_1(4);
      theta = in_1(5);
      A = in_1(6);
      beta = in_1(7);
      alpha = in_1(8);

      % Evaluate function
      t1 = V__R ^ 2;
      t2 = H * t1;
      t3 = alpha * S;
      t6 = alpha * t1;
      t7 = S * a__e;
      t11 = cos(beta);
      t14 = exp(-H / 23800);
      t16 = H ^ 2;
      t17 = t16 * t1;
      t20 = a__e * t3;
      t23 = a__e ^ 2;
      t24 = t23 * S;
      t27 = 0.6812468184e-3 * t3 * t17 + 0.1362493637e-2 * t20 * t2 + 0.6812468184e-3 * t24 * t6;
      t29 = t14 * t11 * t27;
      t31 = m * t16;
      t32 = Omega__E ^ 2;
      t33 = t32 * t31;
      t35 = H * a__e;
      t36 = t32 * m;
      t37 = t36 * t35;
      t39 = m * t23;
      t40 = t32 * t39;
      t42 = 3 * t33 + 0.6e1 * t37 + 0.3e1 * t40;
      t43 = cos(theta);
      t45 = cos(lambda);
      t46 = t45 ^ 2;
      t48 = cos(A);
      t50 = sin(theta);
      t51 = sin(lambda);
      t52 = t51 * t50;
      t54 = V__R * H;
      t55 = m * Omega__E;
      t58 = V__R * a__e;
      t62 = sin(A);
      t68 = m * t;
      t74 = 0.1e1 / m;
      t76 = 0.1e1 / V__R;
      t77 = H + a__e;
      t78 = t77 ^ 2;
      t79 = 0.1e1 / t78;
      t80 = t79 * t76;
      t94 = t32 * m * t16 * H + 0.3e1 * t36 * a__e * t16 + 0.3e1 * t36 * t23 * H + t32 * m * t23 * a__e;
      t95 = t43 * t94;
      t97 = t48 * t94;
      t99 = t16 * V__R;
      t102 = a__e * m;
      t103 = Omega__E * t102;
      t106 = t23 * V__R;
      t109 = 0.2e1 * t55 * t99 + 0.4e1 * t103 * t54 + 0.2e1 * t55 * t106;
      t111 = t62 * t109 + t52 * t97;
      t118 = m * t2 + m * a__e * t1 - 0.1e1 * mu * m;
      t122 = a__e * t68;
      t128 = t74 * (t29 + t46 * t95 + t45 * t111 + t43 * t118 + 0.3490658504e-5 * t68 * t99 + 0.6981317008e-5 * t122 * t54 + 0.3490658504e-5 * t68 * t106);
      out_3_1 = t80 * t74 * (t14 * t11 * (0.1362493637e-2 * t3 * t2 + 0.1362493637e-2 * t7 * t6) - t29 / 23800 + t46 * t43 * t42 + t45 * (t52 * t48 * t42 + t62 * (0.4e1 * t55 * t54 + 0.4e1 * t55 * t58)) + t43 * m * t1 + 0.6981317008e-5 * t54 * t68 + 0.6981317008e-5 * t58 * t68) - 2 / t78 / t77 * t76 * t128;
      t135 = sin(beta);
      t137 = t14 * t45 * t135;
      t143 = 0.6812468184e-3 * H * t3 + 0.6812468184e-3 * t20;
      t144 = t1 * t143;
      t145 = t137 * t144;
      t147 = H * m;
      t161 = t43 * V__R;
      t170 = 0.1e1 / t43;
      t173 = 0.1e1 / t77;
      t174 = t76 * t173;
      t175 = 0.1e1 / t45;
      t176 = t175 * t174;
      t179 = t33 + 0.2e1 * t37 + t40;
      t180 = t62 * t179;
      t185 = -0.2e1 * Omega__E * t147 - 0.2e1 * t103;
      t186 = V__R * t185;
      t189 = t50 * t48 * t186 + t51 * t180;
      t191 = -t185;
      t192 = V__R * t191;
      t193 = t51 * t43;
      t198 = -0.3490658504e-4 * H * t68 - 0.3490658504e-4 * t122;
      t199 = V__R * t198;
      t201 = t193 * t192 + t43 * t199;
      t203 = t43 ^ 2;
      t204 = t203 * t1;
      t206 = m * t51 * t62;
      t208 = t46 * t189 + t45 * t201 + t206 * t204 + t145;
      t210 = t74 * t170 * t208;
      out_4_1 = t176 * t74 * t170 * (0.6812468184e-3 * t137 * t1 * t3 - t145 / 23800 + t46 * (t51 * t62 * (2 * t32 * t147 + 0.2e1 * t32 * t102) - 0.2e1 * t50 * t48 * V__R * t55) + t45 * (0.2e1 * t51 * t161 * t55 - 0.3490658504e-4 * t161 * t68)) - t175 * t80 * t210;
      t216 = t46 * t50;
      out_3_3 = t80 * t74 * (-2 * t51 * t45 * t95 - t51 * t111 + t216 * t97);
      out_4_3 = t176 * t74 * t170 * (m * t45 * t62 * t204 - t14 * t51 * t135 * t144 + t46 * t45 * t180 - 2 * t51 * t45 * t189 + t46 * t43 * t192 - t51 * t201) + t51 / t46 * t174 * t210;
      t276 = 0.1e1 / t1;
      out_3_4 = t80 * t74 * (t14 * t11 * (0.1362493637e-2 * t3 * t99 + 0.2724987274e-2 * t20 * t54 + 0.1362493637e-2 * t24 * V__R * alpha) + t45 * t62 * (0.2e1 * Omega__E * t31 + 0.4e1 * t55 * t35 + 0.2e1 * Omega__E * t39) + t43 * (2 * m * t54 + 2 * m * t58) + 0.3490658504e-5 * t * t31 + 0.6981317008e-5 * t68 * t35 + 0.3490658504e-5 * t * t39) - t79 * t276 * t128;
      t279 = V__R * t143;
      out_4_4 = t176 * t74 * t170 * (2 * t137 * t279 + t216 * t48 * t185 + t45 * (t51 * t43 * t191 + t43 * t198) + 2 * t206 * t203 * V__R) - t175 * t276 * t173 * t210;
      out_1_5 = -1;
      out_3_5 = t80 * t74 * (t45 * t193 * t97 - t46 * t50 * t94 - t50 * t118);
      out_4_5 = t176 * t74 * t170 * (t46 * t43 * t48 * t186 + t45 * (-t52 * t192 - t50 * t199) - 2 * t50 * m * t51 * t62 * t43 * t1) + t50 * t175 * t174 * t74 / t203 * t208;
      out_2_6 = -1;
      t335 = t79 * t76 * t74;
      out_3_6 = t335 * t45 * (-t52 * t62 * t94 + t48 * t109);
      out_4_6 = t176 * t74 * t170 * (t46 * (t51 * t48 * t179 - t50 * t62 * t186) + m * t51 * t48 * t204);
      out_3_7 = -t335 * t14 * t135 * t27;
      t354 = t173 * t74 * t170 * t14;
      out_4_7 = t354 * t11 * t279;
      out_3_8 = t335 * t14 * t11 * (0.6812468184e-3 * S * t17 + 0.1362493637e-2 * t7 * t2 + 0.6812468184e-3 * t23 * S * t1);
      out_4_8 = t354 * t135 * V__R * (0.6812468184e-3 * S * H + 0.6812468184e-3 * t7);

      % Store outputs
      out_Jh_x = zeros(4, 8);
      out_Jh_x(3, 1) = out_3_1;
      out_Jh_x(4, 1) = out_4_1;
      out_Jh_x(3, 3) = out_3_3;
      out_Jh_x(4, 3) = out_4_3;
      out_Jh_x(3, 4) = out_3_4;
      out_Jh_x(4, 4) = out_4_4;
      out_Jh_x(1, 5) = out_1_5;
      out_Jh_x(3, 5) = out_3_5;
      out_Jh_x(4, 5) = out_4_5;
      out_Jh_x(2, 6) = out_2_6;
      out_Jh_x(3, 6) = out_3_6;
      out_Jh_x(4, 6) = out_4_6;
      out_Jh_x(3, 7) = out_3_7;
      out_Jh_x(4, 7) = out_4_7;
      out_Jh_x(3, 8) = out_3_8;
      out_Jh_x(4, 8) = out_4_8;
    end % Jh_x
    %
    % - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    %
    function out_Jh_y = Jh_y( ~, ~, ~, ~, ~ )
      % Evaluate the Jacobian of h with respect to y.

      % Extract properties
      % No properties

      % Extract inputs

      % Evaluate function
      % No body

      % Store outputs
      out_Jh_y = zeros(4, 0);
    end % Jh_y
    %
    % - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    %
    function out_Jh_v = Jh_v( ~, ~, ~, ~, ~ )
      % Evaluate the Jacobian of h with respect to v.

      % Extract properties
      % No properties

      % Extract inputs

      % Evaluate function
      % No body

      % Store outputs
      out_Jh_v = zeros(4, 2);
    end % Jh_v
    %
    % - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    %
    function out_v = v( this, in_1, ~ )
      % Evaluate the the veils v.

      % Extract properties
      mu = this.m_mu;
      Omega__E = this.m_Omega__E;
      a__e = this.m_a__e;
      m = this.m_m;
      S = this.m_S;

      % Extract inputs
      H = in_1(1);
      lambda = in_1(3);
      V__R = in_1(4);
      theta = in_1(5);
      A = in_1(6);
      beta = in_1(7);
      alpha = in_1(8);

      % Evaluate function
      t1 = alpha * S;
      t2 = a__e ^ 2;
      t3 = t2 ^ 2;
      t4 = m * t3;
      t5 = Omega__E ^ 2;
      t7 = t5 * t4 * t1;
      t8 = 0.1362493637e-2 * t7;
      t9 = H ^ 2;
      t10 = t9 ^ 2;
      t13 = t5 * m * t10 * t1;
      t14 = 0.1362493637e-2 * t13;
      t15 = t9 * H;
      t19 = t5 * m * a__e * t15 * t1;
      t22 = m * t2;
      t24 = t5 * t22 * t9 * t1;
      t27 = t2 * a__e;
      t28 = m * t27;
      t30 = t5 * t28 * H * t1;
      t32 = -t8 - t14 - 0.5449974548e-2 * t19 - 0.8174961822e-2 * t24 - 0.5449974548e-2 * t30;
      t33 = V__R ^ 2;
      t35 = sin(beta);
      t37 = sin(theta);
      t38 = cos(theta);
      t39 = t38 * t37;
      t40 = cos(lambda);
      t41 = t40 ^ 2;
      t42 = t41 ^ 2;
      t48 = sin(lambda);
      t49 = cos(A);
      t50 = t49 * t48;
      t51 = t38 ^ 2;
      t52 = t51 * t50;
      t54 = m * S;
      t55 = t5 * t54;
      t57 = t5 * m;
      t58 = alpha ^ 2;
      t59 = t58 * S;
      t60 = t59 * t57;
      t64 = a__e * t59;
      t65 = t64 * t57;
      t67 = S * a__e;
      t68 = t57 * t67;
      t72 = t2 * t59;
      t73 = t72 * t57;
      t75 = t2 * S;
      t76 = t57 * t75;
      t80 = S * t5;
      t81 = t58 * t80;
      t82 = t81 * t28;
      t84 = t27 * S;
      t85 = t57 * t84;
      t89 = S * t3;
      t90 = t57 * t89;
      t92 = t81 * t4;
      t96 = sin(A);
      t97 = t96 * t48;
      t105 = t48 * t35;
      t109 = Omega__E * alpha * S;
      t110 = t109 * m * t15;
      t112 = t109 * t28;
      t114 = m * t9;
      t117 = a__e * t1 * Omega__E * t114;
      t122 = t2 * t1 * H * m * Omega__E;
      t125 = t33 * V__R;
      t127 = cos(beta);
      t152 = t41 * t40;
      t162 = t9 * alpha;
      t176 = t33 ^ 2;
      t182 = mu * a__e;
      t192 = t58 * t54;
      t197 = m * t67;
      t200 = a__e * t58 * t54;
      t205 = t2 * t58 * t54;
      t207 = m * t75;
      t211 = t51 * t38;
      t222 = -0.6812468184e-3 * t114 * t1 - 0.6812468184e-3 * t22 * t1 - 0.1362493637e-2 * H * a__e * m * t1;
      t229 = t48 * t37;
      t230 = t96 * t229;
      t238 = exp(-H / 23800);
      t241 = S ^ 2;
      t242 = t241 * t58 * alpha;
      t244 = t241 * alpha;
      t248 = a__e * t244;
      t250 = a__e * t242;
      t254 = t2 * t242;
      t256 = t2 * t244;
      t260 = t27 * t244;
      t262 = t27 * t242;
      t266 = t38 * t35;
      t268 = t241 * t58;
      t287 = exp(-H / 11900);
      t289 = a__e * t10;
      t290 = m ^ 2;
      t291 = t5 ^ 2;
      t292 = t291 * t290;
      t294 = 0.10e2 * t292 * t289;
      t295 = t2 * t15;
      t297 = 0.20e2 * t292 * t295;
      t298 = t27 * t9;
      t300 = 0.20e2 * t292 * t298;
      t301 = H * t3;
      t303 = 0.10e2 * t292 * t301;
      t304 = H * t10;
      t307 = 0.2e1 * t291 * t290 * t304;
      t308 = a__e * t3;
      t310 = t291 * t290 * t308;
      t311 = 0.2e1 * t310;
      t317 = t5 * Omega__E;
      t318 = t317 * t3;
      t319 = t290 * t318;
      t322 = t290 * t317 * t10;
      t325 = a__e * t290;
      t326 = t325 * t317 * t15;
      t329 = t290 * t317;
      t330 = t329 * t2 * t9;
      t333 = t329 * t27 * H;
      t335 = 0.4e1 * t319 + 0.4e1 * t322 + 0.16e2 * t326 + 0.24e2 * t330 + 0.16e2 * t333;
      t337 = t38 * t49;
      t341 = t290 * t15;
      t342 = t5 * t341;
      t344 = t290 * t27;
      t345 = t5 * t344;
      t347 = t290 * t9;
      t348 = a__e * t5;
      t349 = t348 * t347;
      t351 = H * t290;
      t352 = t2 * t5;
      t353 = t352 * t351;
      t357 = t49 * t96;
      t367 = t49 ^ 2;
      t384 = t290 * t2;
      t389 = Omega__E * a__e;
      t392 = 0.2e1 * Omega__E * t384 + 0.2e1 * Omega__E * t347 + 0.4e1 * t389 * t351;
      t397 = t317 * t27;
      t399 = Omega__E * mu;
      t405 = mu * t389;
      t424 = H + a__e;
      t426 = t51 ^ 2;
      t445 = 0.2e1 * t351 + 0.2e1 * t325;
      t456 = 0.1e1 / t290;
      t458 = t424 ^ 2;
      t462 = 0.1e1 / t33;
      V_y58KN_1 = 0.1e1 / t41 / t51 * t462 / t458 / t424 * t456 * (t238 * (t42 * t39 * t35 * t33 * t32 + t152 * (-t52 * t35 * t33 * t32 + t38 * t97 * t33 * (t10 * (-0.4756e-4 * t55 - 0.3903256749e-4 * t60) + t15 * (-0.15613027e-3 * t65 - 0.19024e-3 * t68) + t9 * (-0.234195405e-3 * t73 - 0.28536e-3 * t76) + H * (-0.15613027e-3 * t82 - 0.19024e-3 * t85) - 0.4756e-4 * t90 - 0.3903256749e-4 * t92) + t49 * (t105 * t33 * (-0.5449974546e-2 * t19 - 0.5449974546e-2 * t30 - 0.817496182e-2 * t24 - t14 - t8) + t127 * t125 * (0.1362493637e-2 * t110 + 0.1362493637e-2 * t112 + 0.4087480911e-2 * t117 + 0.4087480911e-2 * t122)) + t96 * (t48 * t37 * t127 * t33 * (-0.6812468184e-3 * t7 - 0.6812468184e-3 * t13 - 0.2724987274e-2 * t19 - 0.408748091e-2 * t24 - 0.2724987274e-2 * t30) + t37 * t35 * t125 * (-0.8174961822e-2 * t117 - 0.8174961822e-2 * t122 - 0.2724987274e-2 * t112 - 0.2724987274e-2 * t110))) + t41 * t39 * t35 * (t176 * (0.286238159e-7 * t15 * S * m * alpha + t162 * m * (-0.6812468184e-3 * S + 0.858714477e-7 * t67) + alpha * H * m * (0.858714477e-7 * t75 - 0.1362493637e-2 * t67) + alpha * m * (0.286238159e-7 * t84 - 0.6812468184e-3 * t75)) + t33 * (0.1362493637e-2 * H * mu * m * t1 + 0.1362493637e-2 * m * t182 * t1)) + t40 * (t211 * t97 * t176 * (t9 * (0.3903256749e-4 * t192 + 0.4756e-4 * t54) + H * (0.9512e-4 * t197 + 0.7806513498e-4 * t200) + 0.3903256749e-4 * t205 + 0.4756e-4 * t207) + t51 * (t49 * t105 * t176 * t222 - t230 * t127 * t176 * t222))) + t287 * t41 * (t266 * t176 * (t15 * (0.2659081242e-7 * t242 + 0.3240009869e-7 * t244) + t9 * (0.9720029608e-7 * t248 + 0.7977243727e-7 * t250) + H * (0.7977243727e-7 * t254 + 0.9720029608e-7 * t256) + 0.3240009869e-7 * t260 + 0.2659081242e-7 * t262) + t37 * t35 * t127 * t176 * (-0.1392291683e-5 * a__e * t9 * t268 - 0.1392291683e-5 * t2 * H * t268 - 0.4640972276e-6 * t15 * t268 - 0.4640972276e-6 * t27 * t268)) + t42 * t41 * t49 * t96 * (t294 + t297 + t300 + t303 + t307 + t311) + t42 * t40 * t337 * V__R * t335 + t42 * (t51 * t357 * t33 * (-0.5e1 * t342 - 0.5e1 * t345 - 0.15e2 * t349 - 0.15e2 * t353) + t367 * t229 * V__R * (0.8e1 * t322 + 0.8e1 * t319 + 0.32e2 * t326 + 0.48e2 * t330 + 0.32e2 * t333) + t49 * t96 * (t33 * (0.8e1 * t345 + 0.8e1 * t342 + 0.24e2 * t349 + 0.24e2 * t353) - t294 - t297 - t300 - t303 - t307 - t311) - t229 * V__R * t335) + t152 * t38 * (t49 * (t125 * t392 + V__R * (-0.2e1 * t322 - 0.8e1 * t326 - 0.12e2 * t330 + H * t290 * (-0.8e1 * t397 - 0.2e1 * t399) + t290 * (-0.2e1 * t318 - 0.2e1 * t405))) + t230 * t33 * (-0.18e2 * t349 - 0.18e2 * t353 - 0.6e1 * t342 - 0.6e1 * t345)) + t41 * (t426 * t424 * t176 * t290 * t357 + t51 * t33 * (0.1047197551e-3 * a__e * t347 + 0.1047197551e-3 * t2 * t351 + 0.3490658504e-4 * t341 + 0.3490658504e-4 * t344)) + t40 * t211 * (-t49 * t125 * t392 + t230 * t176 * t445) - t426 * t357 * t176 * t445);
      t467 = t33 * t290;
      t468 = t304 * t467;
      t470 = t308 * t467;
      t472 = t298 * t467;
      t474 = t301 * t467;
      t476 = t289 * t467;
      t478 = t295 * t467;
      t488 = t10 * t9;
      t510 = m * t308;
      t518 = t3 * t2;
      t519 = m * t518;
      t526 = t488 * t33 * (-0.6978535320e-20 * t55 - 0.5727295015e-20 * t60) + t304 * t33 * (-0.3436377009e-19 * t65 - 0.4187121193e-19 * t68) + t10 * t33 * (-0.8590942523e-19 * t73 - 0.1046780298e-18 * t76) + t15 * t33 * (-0.1145459003e-18 * t82 - 0.1395707064e-18 * t85) + t9 * t33 * (-0.8590942523e-19 * t92 - 0.1046780298e-18 * t90) + H * t33 * (-0.3436377009e-19 * t81 * t510 - 0.4187121193e-19 * t80 * t510) + t33 * (-0.6978535320e-20 * t80 * t519 - 0.5727295015e-20 * t81 * t519);
      t528 = t304 * t33;
      t530 = t68 * alpha * t528;
      t532 = t10 * t33;
      t534 = t76 * alpha * t532;
      t538 = t85 * alpha * t15 * t33;
      t542 = t90 * alpha * t9 * t33;
      t544 = alpha * t33;
      t545 = S * t544;
      t548 = t57 * H * t308 * t545;
      t551 = t5 * t519 * t545;
      t555 = t55 * alpha * t488 * t33;
      t557 = -0.2153862366e-27 * t530 - 0.4307724732e-27 * t534 - 0.4307724732e-27 * t538 - 0.4307724732e-27 * t542 - 0.2153862366e-27 * t548 - 0.2153862366e-28 * t551 - 0.2153862366e-28 * t555;
      t580 = mu * m;
      t584 = S * mu * m;
      t634 = S * alpha * t304;
      t641 = t176 * alpha;
      t671 = mu * t27;
      t687 = -0.5997609317e-18 * t548 - 0.1499402329e-17 * t534 - 0.1999203105e-17 * t538 - 0.1499402329e-17 * t542 - 0.5997609317e-18 * t530 - 0.9996015527e-19 * t555 - 0.9996015527e-19 * t551;
      t689 = t127 ^ 2;
      t697 = t125 * m * Omega__E;
      t699 = 0.1999203106e-18 * t634 * t697;
      t702 = 0.1999203106e-18 * t308 * t1 * t697;
      t706 = 0.1999203106e-17 * t75 * alpha * t15 * t697;
      t709 = 0.1999203106e-17 * t84 * t162 * t697;
      t713 = 0.9996015527e-18 * t67 * alpha * t10 * t697;
      t716 = 0.9996015527e-18 * t301 * t1 * t697;
      t763 = t292 * t518 * H;
      t764 = 0.2054236637e-14 * t763;
      t766 = t292 * a__e * t488;
      t767 = 0.2054236637e-14 * t766;
      t769 = t292 * t2 * t304;
      t770 = 0.6162709915e-14 * t769;
      t772 = t292 * t27 * t10;
      t773 = 0.1027118319e-13 * t772;
      t775 = t292 * t308 * t9;
      t776 = 0.6162709915e-14 * t775;
      t778 = t292 * t3 * t15;
      t779 = 0.1027118319e-13 * t778;
      t782 = t291 * t290 * t10 * t15;
      t783 = 0.2934623769e-15 * t782;
      t786 = t291 * t290 * t3 * t27;
      t787 = 0.2934623769e-15 * t786;
      t788 = t764 + t767 + t770 + t773 + t776 + t779 + t783 + t787;
      t793 = 0.3081354957e-14 * t769;
      t794 = 0.5135591596e-14 * t772;
      t795 = 0.5135591596e-14 * t778;
      t796 = 0.3081354957e-14 * t775;
      t797 = 0.1027118319e-14 * t763;
      t798 = 0.1027118319e-14 * t766;
      t799 = 0.1467311884e-15 * t786;
      t800 = 0.1467311884e-15 * t782;
      t817 = t211 * t49;
      t823 = t290 * t5;
      t824 = t33 * t823;
      t826 = t291 * t384;
      t831 = a__e * t33 * t823;
      t832 = 0.7336559421e-15 * t831;
      t833 = t291 * t344;
      t838 = t2 * t33 * t823;
      t839 = 0.1467311884e-14 * t838;
      t841 = t291 * t290 * t3;
      t846 = t823 * t27 * t33;
      t847 = 0.1467311884e-14 * t846;
      t852 = t3 * t33 * t823;
      t853 = 0.7336559421e-15 * t852;
      t855 = t291 * t290 * t518;
      t860 = t308 * t33 * t823;
      t861 = 0.1467311884e-15 * t860;
      t864 = t528 * t823;
      t865 = 0.1467311884e-15 * t864;
      t866 = t290 * mu;
      t867 = t5 * t866;
      t868 = 0.5869247537e-15 * t867;
      t871 = t348 * t866;
      t872 = 0.2347699014e-14 * t871;
      t875 = t352 * t866;
      t876 = 0.3521548522e-14 * t875;
      t879 = t5 * t27;
      t880 = t879 * t866;
      t881 = 0.2347699014e-14 * t880;
      t884 = t3 * t5;
      t885 = t884 * t866;
      t886 = 0.5869247537e-15 * t885;
      t895 = 0.2934623766e-14 * t831;
      t899 = 0.5869247535e-14 * t838;
      t903 = 0.5869247535e-14 * t846;
      t907 = 0.2934623766e-14 * t852;
      t910 = 0.5869247537e-15 * t860;
      t917 = a__e * t304 * V__R * t329;
      t936 = t488 * V__R * t329;
      t965 = t125 * t290;
      t996 = t2 * mu;
      t1043 = t176 * t290;
      t1063 = mu ^ 2;
      t1064 = t290 * t1063;
      t1094 = 0.6812468184e-3 * H + 0.6812468184e-3 * a__e;
      t1095 = t1094 ^ 2;
      t1096 = t1095 ^ 2;
      V_y58KN_2 = 0.1e1 / t35 / t38 * t462 * t456 / t1096 / t1094 * (V_y58KN_1 * t51 * t127 * (-0.1467311884e-15 * t468 - 0.1467311884e-15 * t470 - 0.1467311884e-14 * t472 - 0.7336559421e-15 * t474 - 0.7336559421e-15 * t476 - 0.1467311884e-14 * t478) + t238 * (t35 * (t41 * (t39 * t127 * t557 + t51 * t526) + t40 * (t38 * t37 * t49 * t48 * t526 - t52 * t127 * t557) + t51 * (t10 * t176 * (0.6978535320e-20 * t54 + 0.5727295015e-20 * t192) + t15 * (t176 * (0.2290918007e-19 * t200 + 0.2791414128e-19 * t197) + t33 * (0.5727295015e-20 * t59 * t580 + 0.6978535320e-20 * t584)) + t9 * (t176 * (0.3436377009e-19 * t205 + 0.4187121193e-19 * t207) + t33 * (0.2093560596e-19 * t67 * t580 + 0.1718188504e-19 * t64 * t580)) + H * (t176 * (0.2290918007e-19 * t27 * t58 * t54 + 0.2791414128e-19 * t27 * t54) + t33 * (0.2093560596e-19 * t75 * t580 + 0.1718188504e-19 * t72 * t580)) + t176 * (0.6978535320e-20 * S * t4 + 0.5727295015e-20 * t59 * t4) + t33 * (0.5727295015e-20 * t27 * t59 * t580 + 0.6978535320e-20 * t84 * t580)) + t39 * t127 * (0.4200006523e-23 * t634 * t176 * m + t10 * t641 * m * (0.2100003262e-22 * t67 + 0.9996015527e-19 * S) + t15 * (t641 * m * (0.4200006526e-22 * t75 + 0.3998406212e-18 * t67) + 0.2153862366e-28 * t584 * t544) + t9 * t641 * m * (0.4200006526e-22 * t84 + 0.5997609317e-18 * t75) + H * t641 * m * (0.2100003262e-22 * t89 + 0.3998406212e-18 * t84) + t641 * m * (0.4200006523e-23 * t308 * S + 0.9996015527e-19 * t89) + 0.2153862366e-28 * m * t671 * t545)) + t40 * (t37 * t48 * (t689 * t96 * t687 - t96 * t687) + t49 * (t689 * (t699 + t702 + t706 + t709 + t713 + t716) - t706 - t709 - t713 - t716 - t699 - t702))) + t287 * t266 * t127 * (t304 * t176 * (0.4754104986e-23 * t244 + 0.3901701507e-23 * t242) + t10 * t176 * (0.2377052494e-22 * t248 + 0.1950850754e-22 * t250) + t15 * t176 * (0.4754104986e-22 * t256 + 0.3901701507e-22 * t254) + t9 * t176 * (0.4754104986e-22 * t260 + 0.3901701507e-22 * t262) + H * t176 * (0.2377052494e-22 * t3 * t244 + 0.1950850754e-22 * t3 * t242) + t176 * (0.3901701507e-23 * t308 * t242 + 0.4754104986e-23 * t308 * t244)) + t35 * (t42 * (t51 * t37 * (t367 * t788 + t764 + t767 + t770 + t773 + t776 + t779 + t783 + t787) + t37 * (t367 * (t793 + t794 + t795 + t796 + t797 + t798 + t799 + t800) - t800 - t799 - t797 - t798 - t793 - t794 - t795 - t796)) + t152 * (t817 * t48 * (-0.5869247537e-15 * t782 - 0.5869247537e-15 * t786 - 0.2054236638e-13 * t778 - 0.1232541983e-13 * t775 - 0.4108473274e-14 * t763 - 0.4108473274e-14 * t766 - 0.1232541983e-13 * t769 - 0.2054236638e-13 * t772) + t337 * t48 * t788) + t41 * (t51 * t37 * (t367 * (-t783 - t767 + t304 * (-0.1467311884e-15 * t824 - 0.6162709915e-14 * t826) + t10 * (-t832 - 0.1027118319e-13 * t833) + t15 * (-t839 - 0.1027118319e-13 * t841) + t9 * (-t847 - 0.6162709915e-14 * t310) + H * (-t853 - 0.2054236637e-14 * t855) - t861 - t787) - t865 + t10 * (-t832 - t868) + t15 * (-t839 - t872) + t9 * (-t847 - t876) + H * (-t853 - t881) - t886 - t861) + t37 * (t367 * (-t800 - t798 + t304 * (0.5869247537e-15 * t824 - 0.3081354957e-14 * t826) + t10 * (-0.5135591596e-14 * t833 + t895) + t15 * (-0.5135591596e-14 * t841 + t899) + t9 * (-0.3081354957e-14 * t310 + t903) + H * (-0.1027118319e-14 * t855 + t907) + t910 - t799) + t793 + t794 + t795 + t796 + t797 + t798 + t799 + t800) + t50 * t96 * (-0.3521548522e-14 * t917 - 0.3521548522e-14 * H * t308 * V__R * t329 - 0.8803871304e-14 * t2 * t10 * V__R * t329 - 0.1173849507e-13 * t27 * t15 * V__R * t329 - 0.8803871304e-14 * t3 * t9 * V__R * t329 - 0.5869247537e-15 * t936 - 0.5869247537e-15 * t518 * V__R * t329)) + t40 * (t817 * t48 * (0.2934623769e-15 * t864 + t10 * (0.1467311885e-14 * t831 + t868) + t15 * (0.2934623769e-14 * t838 + t872) + t9 * (0.2934623769e-14 * t846 + t876) + H * (0.1467311885e-14 * t852 + t881) + 0.2934623769e-15 * t860 + t886) + t38 * (t37 * t96 * (0.2934623769e-15 * t936 + 0.1760774261e-14 * t917 + t10 * (0.2934623769e-15 * Omega__E * t965 + 0.4401935652e-14 * t2 * V__R * t329) + t15 * (0.1173849507e-14 * t389 * t965 + V__R * t290 * (-0.2934623769e-15 * t399 + 0.5869247537e-14 * t397)) + t9 * (0.1760774261e-14 * Omega__E * t290 * t2 * t125 + V__R * t290 * (-0.8803871306e-15 * t405 + 0.4401935652e-14 * t318)) + H * (0.1173849507e-14 * Omega__E * t27 * t965 + V__R * t290 * (-0.8803871306e-15 * Omega__E * t996 + 0.1760774261e-14 * t308 * t317)) + 0.2934623769e-15 * Omega__E * t3 * t965 + V__R * t290 * (0.2934623769e-15 * t518 * t317 - 0.2934623769e-15 * Omega__E * t671)) + t49 * t48 * (-0.5869247537e-15 * t864 + t10 * (-t895 - 0.2934623769e-15 * t867) + t15 * (-t899 - 0.1173849507e-14 * t871) + t9 * (-t903 - 0.1760774261e-14 * t875) + H * (-t907 - 0.1173849507e-14 * t880) - t910 - 0.2934623769e-15 * t885))) + t51 * t37 * (t865 + 0.7336559421e-15 * a__e * t532 * t823 + t15 * (t839 + 0.2934623769e-15 * t1043) + t9 * (0.8803871304e-15 * a__e * t1043 + t33 * t290 * (0.1467311884e-14 * t879 - 0.4401935654e-15 * mu)) + H * (0.8803871304e-15 * t2 * t1043 + t33 * t290 * (-0.8803871306e-15 * t182 + 0.7336559421e-15 * t884) + 0.2934623769e-15 * t1064) + 0.2934623769e-15 * t27 * t1043 + t33 * t290 * (-0.4401935654e-15 * t996 + 0.1467311884e-15 * t308 * t5) + 0.2934623769e-15 * a__e * t1064) + t38 * (-0.5121884706e-21 * t470 - 0.5121884706e-21 * t468 - 0.2560942353e-20 * t476 - 0.5121884706e-20 * t478 - 0.5121884706e-20 * t472 - 0.2560942353e-20 * t474)));

      % Store outputs
      out_v = zeros(2, 1);
      out_v(1) = V_y58KN_1;
      out_v(2) = V_y58KN_2;
    end % v
    %
    % - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    %
    function out_Jv_x = Jv_x( this, in_1, in_2, ~ )
      % Evaluate the Jacobian of v with respect to x.

      % Extract properties
      mu = this.m_mu;
      Omega__E = this.m_Omega__E;
      a__e = this.m_a__e;
      m = this.m_m;
      S = this.m_S;

      % Extract inputs
      H = in_1(1);
      lambda = in_1(3);
      V__R = in_1(4);
      theta = in_1(5);
      A = in_1(6);
      beta = in_1(7);
      alpha = in_1(8);
      V_y58KN_1 = in_2(1);

      % Evaluate function
      t1 = alpha * S;
      t2 = H ^ 2;
      t3 = t2 * H;
      t4 = m * t3;
      t5 = Omega__E ^ 2;
      t7 = t5 * t4 * t1;
      t8 = 0.5449974548e-2 * t7;
      t9 = t2 * t1;
      t10 = a__e * m;
      t11 = t5 * t10;
      t12 = t11 * t9;
      t13 = 0.1634992364e-1 * t12;
      t14 = H * t1;
      t15 = a__e ^ 2;
      t16 = m * t15;
      t17 = t5 * t16;
      t18 = t17 * t14;
      t19 = 0.1634992364e-1 * t18;
      t20 = t15 * a__e;
      t21 = m * t20;
      t22 = t5 * t21;
      t23 = t22 * t1;
      t25 = -t8 - t13 - t19 - 0.5449974548e-2 * t23;
      t26 = V__R ^ 2;
      t28 = sin(beta);
      t30 = sin(theta);
      t31 = cos(theta);
      t32 = t31 * t30;
      t33 = cos(lambda);
      t34 = t33 ^ 2;
      t35 = t34 ^ 2;
      t36 = t35 * t32;
      t41 = sin(lambda);
      t42 = cos(A);
      t43 = t42 * t41;
      t44 = t31 ^ 2;
      t45 = t44 * t43;
      t47 = m * S;
      t48 = t5 * t47;
      t50 = t5 * m;
      t51 = alpha ^ 2;
      t52 = t51 * S;
      t53 = t52 * t50;
      t55 = -0.4756e-4 * t48 - 0.3903256749e-4 * t53;
      t58 = a__e * t52;
      t59 = t58 * t50;
      t61 = S * a__e;
      t62 = t50 * t61;
      t64 = -0.15613027e-3 * t59 - 0.19024e-3 * t62;
      t67 = t15 * t52;
      t68 = t67 * t50;
      t70 = t15 * S;
      t71 = t50 * t70;
      t73 = -0.234195405e-3 * t68 - 0.28536e-3 * t71;
      t76 = S * t5;
      t77 = t51 * t76;
      t78 = t77 * t21;
      t79 = 0.15613027e-3 * t78;
      t80 = t20 * S;
      t81 = t50 * t80;
      t82 = 0.19024e-3 * t81;
      t85 = sin(A);
      t86 = t85 * t41;
      t87 = t31 * t86;
      t92 = t41 * t28;
      t94 = m * t2;
      t96 = Omega__E * alpha * S;
      t97 = t96 * t94;
      t99 = H * m;
      t100 = Omega__E * t99;
      t101 = a__e * t1;
      t102 = t101 * t100;
      t104 = m * Omega__E;
      t105 = t15 * t1;
      t106 = t105 * t104;
      t109 = t26 * V__R;
      t111 = cos(beta);
      t121 = t30 * t111;
      t122 = t41 * t121;
      t129 = t30 * t28;
      t134 = t34 * t33;
      t136 = t94 * t1;
      t141 = m * (-0.6812468184e-3 * S + 0.858714477e-7 * t61);
      t142 = alpha * H;
      t148 = m * (0.858714477e-7 * t70 - 0.1362493637e-2 * t61);
      t151 = t26 ^ 2;
      t153 = alpha * t26;
      t155 = S * mu * m;
      t156 = t155 * t153;
      t160 = t34 * t32;
      t162 = t51 * t47;
      t165 = 0.3903256749e-4 * t162 + 0.4756e-4 * t47;
      t168 = m * t61;
      t169 = 0.9512e-4 * t168;
      t171 = a__e * t51 * t47;
      t172 = 0.7806513498e-4 * t171;
      t175 = t44 * t31;
      t176 = t175 * t86;
      t182 = -0.1362493637e-2 * t99 * t1 - 0.1362493637e-2 * t10 * t1;
      t184 = t42 * t92;
      t189 = t41 * t30;
      t190 = t85 * t189;
      t198 = exp(-H / 23800);
      t200 = t15 ^ 2;
      t201 = m * t200;
      t202 = t5 * t201;
      t203 = t202 * t1;
      t204 = 0.1362493637e-2 * t203;
      t205 = t2 ^ 2;
      t208 = t5 * m * t205 * t1;
      t209 = 0.1362493637e-2 * t208;
      t211 = t11 * t3 * t1;
      t213 = t17 * t9;
      t215 = t22 * t14;
      t217 = -t204 - t209 - 0.5449974548e-2 * t211 - 0.8174961822e-2 * t213 - 0.5449974548e-2 * t215;
      t218 = t26 * t217;
      t219 = t28 * t218;
      t221 = -t217;
      t222 = t26 * t221;
      t223 = t28 * t222;
      t230 = S * t200;
      t231 = t50 * t230;
      t233 = t77 * t201;
      t235 = t205 * t55 + t3 * t64 + t2 * t73 + H * (-t79 - t82) - 0.4756e-4 * t231 - 0.3903256749e-4 * t233;
      t236 = t26 * t235;
      t241 = -0.5449974546e-2 * t211 - 0.5449974546e-2 * t215 - 0.817496182e-2 * t213 - t209 - t204;
      t242 = t26 * t241;
      t244 = t96 * t4;
      t246 = t96 * t21;
      t249 = t101 * Omega__E * t94;
      t251 = t105 * t100;
      t253 = 0.1362493637e-2 * t244 + 0.1362493637e-2 * t246 + 0.4087480911e-2 * t249 + 0.4087480911e-2 * t251;
      t254 = t109 * t253;
      t256 = t111 * t254 + t92 * t242;
      t263 = -0.6812468184e-3 * t203 - 0.6812468184e-3 * t208 - 0.2724987274e-2 * t211 - 0.408748091e-2 * t213 - 0.2724987274e-2 * t215;
      t264 = t26 * t263;
      t270 = -0.8174961822e-2 * t249 - 0.8174961822e-2 * t251 - 0.2724987274e-2 * t246 - 0.2724987274e-2 * t244;
      t271 = t109 * t270;
      t273 = t122 * t264 + t129 * t271;
      t275 = t45 * t223 + t87 * t236 + t42 * t256 + t85 * t273;
      t278 = S * t3;
      t281 = t2 * alpha;
      t287 = m * (0.286238159e-7 * t80 - 0.6812468184e-3 * t70);
      t289 = 0.286238159e-7 * t278 * m * alpha + t281 * t141 + t142 * t148 + alpha * t287;
      t295 = mu * a__e;
      t299 = 0.1362493637e-2 * H * mu * m * t1 + 0.1362493637e-2 * m * t295 * t1;
      t301 = t151 * t289 + t26 * t299;
      t302 = t28 * t301;
      t308 = t15 * t51 * t47;
      t310 = m * t70;
      t312 = t2 * t165 + H * (t169 + t172) + 0.3903256749e-4 * t308 + 0.4756e-4 * t310;
      t313 = t151 * t312;
      t316 = t16 * t1;
      t318 = H * a__e;
      t320 = m * t318 * t1;
      t322 = -0.6812468184e-3 * t136 - 0.6812468184e-3 * t316 - 0.1362493637e-2 * t320;
      t323 = t151 * t322;
      t325 = -t322;
      t326 = t151 * t325;
      t327 = t111 * t326;
      t329 = t184 * t323 + t190 * t327;
      t331 = t176 * t313 + t44 * t329;
      t334 = t198 * (t134 * t275 + t160 * t302 + t36 * t219 + t33 * t331);
      t337 = S ^ 2;
      t338 = t337 * t51 * alpha;
      t340 = t337 * alpha;
      t342 = 0.2659081242e-7 * t338 + 0.3240009869e-7 * t340;
      t345 = a__e * t340;
      t347 = a__e * t338;
      t349 = 0.9720029608e-7 * t345 + 0.7977243727e-7 * t347;
      t352 = t15 * t338;
      t353 = 0.7977243727e-7 * t352;
      t354 = t15 * t340;
      t355 = 0.9720029608e-7 * t354;
      t358 = t31 * t28;
      t360 = t337 * t51;
      t363 = t15 * t360;
      t369 = t28 * t111;
      t370 = t30 * t369;
      t375 = exp(-H / 11900);
      t381 = t20 * t340;
      t383 = t20 * t338;
      t385 = t3 * t342 + t2 * t349 + H * (t353 + t355) + 0.3240009869e-7 * t381 + 0.2659081242e-7 * t383;
      t386 = t151 * t385;
      t388 = t2 * a__e;
      t391 = t15 * H;
      t396 = t20 * t360;
      t398 = -0.1392291683e-5 * t388 * t360 - 0.1392291683e-5 * t391 * t360 - 0.4640972276e-6 * t3 * t360 - 0.4640972276e-6 * t396;
      t399 = t151 * t398;
      t401 = t358 * t386 + t370 * t399;
      t403 = t375 * t34 * t401;
      t405 = a__e * t3;
      t406 = m ^ 2;
      t407 = t5 ^ 2;
      t408 = t407 * t406;
      t410 = 0.40e2 * t408 * t405;
      t411 = t2 * t15;
      t413 = 0.60e2 * t408 * t411;
      t414 = t20 * H;
      t416 = 0.40e2 * t408 * t414;
      t418 = t407 * t406 * t200;
      t419 = 0.10e2 * t418;
      t422 = 0.10e2 * t407 * t406 * t205;
      t425 = t35 * t34;
      t426 = t425 * t42;
      t428 = t5 * Omega__E;
      t429 = t428 * t3;
      t430 = t406 * t429;
      t433 = a__e * t406;
      t434 = t433 * t428 * t2;
      t436 = t406 * t428;
      t437 = t436 * t391;
      t439 = t428 * t20;
      t440 = t406 * t439;
      t442 = 0.16e2 * t430 + 0.48e2 * t434 + 0.48e2 * t437 + 0.16e2 * t440;
      t444 = t31 * t42;
      t445 = t35 * t33;
      t446 = t445 * t444;
      t448 = t406 * t2;
      t449 = t5 * t448;
      t451 = H * t406;
      t452 = a__e * t5;
      t453 = t452 * t451;
      t455 = t5 * t406;
      t456 = t15 * t455;
      t460 = t42 * t85;
      t461 = t44 * t460;
      t469 = t42 ^ 2;
      t470 = t469 * t189;
      t487 = Omega__E * t406;
      t490 = 0.4e1 * Omega__E * t451 + 0.4e1 * a__e * t487;
      t496 = Omega__E * mu;
      t499 = t406 * (-0.8e1 * t439 - 0.2e1 * t496);
      t513 = t151 * t406;
      t514 = t44 ^ 2;
      t516 = t514 * t513 * t460;
      t519 = t15 * t406;
      t536 = t198 * (t36 * t28 * t26 * t25 + t134 * (-t45 * t28 * t26 * t25 + t87 * t26 * (2 * H * t73 + 3 * t2 * t64 + 4 * t3 * t55 - t79 - t82) + t42 * (t92 * t26 * (-t13 - 0.5449974546e-2 * t23 - t19 - t8) + t111 * t109 * (0.4087480911e-2 * t97 + 0.8174961822e-2 * t102 + 0.4087480911e-2 * t106)) + t85 * (t122 * t26 * (-0.2724987274e-2 * t7 - 0.8174961822e-2 * t12 - 0.817496182e-2 * t18 - 0.2724987274e-2 * t23) + t129 * t109 * (-0.1634992364e-1 * t102 - 0.8174961822e-2 * t106 - 0.8174961822e-2 * t97))) + t160 * t28 * (t151 * (0.858714477e-7 * t136 + 2 * t142 * t141 + alpha * t148) + 0.1362493637e-2 * t156) + t33 * (t176 * t151 * (2 * H * t165 + t169 + t172) + t44 * (-t190 * t111 * t151 * t182 + t184 * t151 * t182))) - t334 / 23800 + t375 * t34 * (t358 * t151 * (2 * H * t349 + 3 * t2 * t342 + t353 + t355) + t370 * t151 * (-0.2784583366e-5 * t318 * t360 - 0.1392291683e-5 * t363 - 0.1392291683e-5 * t2 * t360)) - t403 / 11900 + t426 * t85 * (t410 + t413 + t416 + t419 + t422) + t446 * V__R * t442 + t35 * (t461 * t26 * (-0.15e2 * t449 - 0.30e2 * t453 - 0.15e2 * t456) + t470 * V__R * (0.32e2 * t430 + 0.96e2 * t434 + 0.96e2 * t437 + 0.32e2 * t440) + t42 * t85 * (t26 * (0.24e2 * t449 + 0.48e2 * t453 + 0.24e2 * t456) - t410 - t413 - t416 - t419 - t422) - t189 * V__R * t442) + t134 * t31 * (t42 * (t109 * t490 + V__R * (-0.8e1 * t430 - 0.24e2 * t434 - 0.24e2 * t437 + t499)) + t190 * t26 * (-0.36e2 * t453 - 0.18e2 * t456 - 0.18e2 * t449)) + t34 * (t516 + t44 * t26 * (0.2094395102e-3 * a__e * t451 + 0.1047197551e-3 * t519 + 0.1047197551e-3 * t448)) + t33 * t175 * (-t42 * t109 * t490 + 0.2e1 * t190 * t513) - 0.2e1 * t516;
      t537 = 0.1e1 / t406;
      t539 = H + a__e;
      t540 = t539 ^ 2;
      t542 = 0.1e1 / t540 / t539;
      t544 = 0.1e1 / t26;
      t545 = 0.1e1 / t44;
      t546 = t545 * t544;
      t547 = 0.1e1 / t34;
      t548 = t547 * t546;
      t550 = a__e * t205;
      t552 = 0.10e2 * t408 * t550;
      t553 = t15 * t3;
      t555 = 0.20e2 * t408 * t553;
      t556 = t20 * t2;
      t558 = 0.20e2 * t408 * t556;
      t559 = t200 * H;
      t561 = 0.10e2 * t408 * t559;
      t562 = t205 * H;
      t565 = 0.2e1 * t407 * t406 * t562;
      t566 = t200 * a__e;
      t568 = t407 * t406 * t566;
      t569 = 0.2e1 * t568;
      t570 = t552 + t555 + t558 + t561 + t565 + t569;
      t571 = t85 * t570;
      t573 = t428 * t200;
      t574 = t406 * t573;
      t577 = t406 * t428 * t205;
      t579 = t433 * t429;
      t581 = t436 * t411;
      t583 = t436 * t414;
      t585 = 0.4e1 * t574 + 0.4e1 * t577 + 0.16e2 * t579 + 0.24e2 * t581 + 0.16e2 * t583;
      t586 = V__R * t585;
      t588 = t406 * t3;
      t589 = t5 * t588;
      t591 = t406 * t20;
      t592 = t5 * t591;
      t594 = t452 * t448;
      t596 = t15 * t5;
      t597 = t596 * t451;
      t599 = -0.5e1 * t589 - 0.5e1 * t592 - 0.15e2 * t594 - 0.15e2 * t597;
      t600 = t26 * t599;
      t607 = 0.8e1 * t577 + 0.8e1 * t574 + 0.32e2 * t579 + 0.48e2 * t581 + 0.32e2 * t583;
      t608 = V__R * t607;
      t614 = 0.8e1 * t592 + 0.8e1 * t589 + 0.24e2 * t594 + 0.24e2 * t597;
      t616 = t26 * t614 - t552 - t555 - t558 - t561 - t565 - t569;
      t619 = -t585;
      t620 = V__R * t619;
      t622 = t42 * t85 * t616 + t189 * t620 + t461 * t600 + t470 * t608;
      t628 = Omega__E * a__e;
      t631 = 0.2e1 * Omega__E * t519 + 0.2e1 * Omega__E * t448 + 0.4e1 * t628 * t451;
      t633 = 0.2e1 * t577;
      t634 = 0.8e1 * t579;
      t635 = 0.12e2 * t581;
      t636 = H * t499;
      t638 = mu * t628;
      t641 = t406 * (-0.2e1 * t573 - 0.2e1 * t638);
      t644 = t109 * t631 + V__R * (-t633 - t634 - t635 + t636 + t641);
      t650 = -0.18e2 * t594 - 0.18e2 * t597 - 0.6e1 * t589 - 0.6e1 * t592;
      t651 = t26 * t650;
      t653 = t190 * t651 + t42 * t644;
      t654 = t31 * t653;
      t656 = t406 * t460;
      t657 = t539 * t151;
      t658 = t514 * t657;
      t666 = 0.1047197551e-3 * a__e * t448 + 0.1047197551e-3 * t15 * t451 + 0.3490658504e-4 * t588 + 0.3490658504e-4 * t591;
      t667 = t26 * t666;
      t669 = t44 * t667 + t658 * t656;
      t671 = -t631;
      t672 = t109 * t671;
      t676 = 0.2e1 * t451 + 0.2e1 * t433;
      t677 = t151 * t676;
      t679 = t190 * t677 + t42 * t672;
      t680 = t175 * t679;
      t682 = -t676;
      t683 = t151 * t682;
      t684 = t514 * t460;
      t687 = t537 * (t134 * t654 + t33 * t680 + t34 * t669 + t35 * t622 + t426 * t571 + t446 * t586 + t684 * t683 + t334 + t403);
      t688 = t540 ^ 2;
      D_V_y58KN_1_1 = t548 * t542 * t537 * t536 - 3 * t548 / t688 * t687;
      t693 = t26 * t406;
      t694 = t205 * t693;
      t696 = t414 * t693;
      t698 = t200 * t693;
      t700 = t405 * t693;
      t702 = t411 * t693;
      t706 = V_y58KN_1 * t44;
      t708 = t562 * t693;
      t710 = t566 * t693;
      t712 = t556 * t693;
      t714 = t559 * t693;
      t716 = t550 * t693;
      t718 = t553 * t693;
      t720 = -0.1467311884e-15 * t708 - 0.1467311884e-15 * t710 - 0.1467311884e-14 * t712 - 0.7336559421e-15 * t714 - 0.7336559421e-15 * t716 - 0.1467311884e-14 * t718;
      t721 = t111 * t720;
      t726 = -0.6978535320e-20 * t48 - 0.5727295015e-20 * t53;
      t727 = t26 * t726;
      t732 = -0.3436377009e-19 * t59 - 0.4187121193e-19 * t62;
      t733 = t26 * t732;
      t738 = -0.8590942523e-19 * t68 - 0.1046780298e-18 * t71;
      t739 = t26 * t738;
      t744 = -0.1145459003e-18 * t78 - 0.1395707064e-18 * t81;
      t745 = t26 * t744;
      t750 = -0.8590942523e-19 * t233 - 0.1046780298e-18 * t231;
      t751 = t26 * t750;
      t754 = m * t566;
      t759 = -0.3436377009e-19 * t77 * t754 - 0.4187121193e-19 * t76 * t754;
      t760 = t26 * t759;
      t761 = 2 * H * t751 + 3 * t2 * t745 + 5 * t205 * t733 + 4 * t3 * t739 + 6 * t562 * t727 + t760;
      t763 = t205 * t26;
      t764 = alpha * t763;
      t765 = t62 * t764;
      t767 = t3 * t26;
      t768 = alpha * t767;
      t769 = t71 * t768;
      t771 = t2 * t26;
      t772 = alpha * t771;
      t773 = t81 * t772;
      t777 = t231 * alpha * H * t26;
      t779 = S * t153;
      t781 = t5 * t754 * t779;
      t783 = t562 * t26;
      t784 = alpha * t783;
      t785 = t48 * t784;
      t787 = -0.1076931183e-26 * t765 - 0.1723089893e-26 * t769 - 0.1292317420e-26 * t773 - 0.8615449464e-27 * t777 - 0.2153862366e-27 * t781 - 0.1292317420e-27 * t785;
      t796 = t30 * t42;
      t797 = t31 * t796;
      t803 = 0.6978535320e-20 * t47 + 0.5727295015e-20 * t162;
      t804 = t151 * t803;
      t809 = 0.2290918007e-19 * t171 + 0.2791414128e-19 * t168;
      t811 = mu * m;
      t815 = 0.5727295015e-20 * t52 * t811 + 0.6978535320e-20 * t155;
      t817 = t151 * t809 + t26 * t815;
      t822 = 0.3436377009e-19 * t308 + 0.4187121193e-19 * t310;
      t824 = t61 * t811;
      t828 = 0.2093560596e-19 * t824 + 0.1718188504e-19 * t58 * t811;
      t830 = t151 * t822 + t26 * t828;
      t838 = 0.2290918007e-19 * t20 * t51 * t47 + 0.2791414128e-19 * t20 * t47;
      t839 = t151 * t838;
      t844 = 0.2093560596e-19 * t70 * t811 + 0.1718188504e-19 * t67 * t811;
      t845 = t26 * t844;
      t848 = t151 * m;
      t849 = alpha * t205;
      t850 = S * t849;
      t851 = t850 * t848;
      t856 = m * (0.2100003262e-22 * t61 + 0.9996015527e-19 * S);
      t857 = t151 * alpha;
      t864 = m * (0.4200006526e-22 * t70 + 0.3998406212e-18 * t61);
      t867 = t857 * t864 + 0.2153862366e-28 * t156;
      t873 = m * (0.4200006526e-22 * t80 + 0.5997609317e-18 * t70);
      t874 = H * t857;
      t880 = m * (0.2100003262e-22 * t230 + 0.3998406212e-18 * t80);
      t893 = -0.5997609317e-18 * t781 - 0.5997609316e-17 * t769 - 0.5997609315e-17 * t773 - 0.2998804658e-17 * t777 - 0.2998804658e-17 * t765 - 0.5997609316e-18 * t785;
      t895 = t111 ^ 2;
      t902 = t109 * t104;
      t904 = 0.9996015530e-18 * t850 * t902;
      t907 = 0.5997609318e-17 * t70 * t281 * t902;
      t910 = 0.3998406212e-17 * t80 * t142 * t902;
      t911 = alpha * t3;
      t914 = 0.3998406211e-17 * t61 * t911 * t902;
      t917 = 0.9996015527e-18 * t200 * t1 * t902;
      t926 = t205 * t2;
      t933 = t200 * t15;
      t934 = m * t933;
      t939 = -0.6978535320e-20 * t76 * t934 - 0.5727295015e-20 * t77 * t934;
      t941 = H * t760 + t2 * t751 + t205 * t739 + t26 * t939 + t3 * t745 + t562 * t733 + t926 * t727;
      t943 = t62 * t784;
      t945 = t71 * t764;
      t947 = t81 * t768;
      t949 = t231 * t772;
      t951 = H * t566;
      t952 = t50 * t951;
      t953 = t952 * t779;
      t955 = t5 * t934;
      t956 = t955 * t779;
      t958 = t926 * t26;
      t960 = t48 * alpha * t958;
      t962 = -0.2153862366e-27 * t943 - 0.4307724732e-27 * t945 - 0.4307724732e-27 * t947 - 0.4307724732e-27 * t949 - 0.2153862366e-27 * t953 - 0.2153862366e-28 * t956 - 0.2153862366e-28 * t960;
      t963 = t111 * t962;
      t965 = t32 * t963 + t44 * t941;
      t967 = -t962;
      t968 = t111 * t967;
      t970 = t41 * t941;
      t972 = t45 * t968 + t797 * t970;
      t983 = 0.6978535320e-20 * S * t201 + 0.5727295015e-20 * t52 * t201;
      t990 = 0.5727295015e-20 * t20 * t52 * t811 + 0.6978535320e-20 * t80 * t811;
      t992 = t205 * t804 + t3 * t817 + t2 * t830 + H * (t839 + t845) + t151 * t983 + t26 * t990;
      t995 = S * alpha * t562;
      t1008 = m * (0.4200006523e-23 * t566 * S + 0.9996015527e-19 * t230);
      t1010 = mu * t20;
      t1011 = m * t1010;
      t1012 = t1011 * t779;
      t1014 = 0.4200006523e-23 * t995 * t848 + t205 * t857 * t856 + t3 * t867 + t2 * t857 * t873 + t874 * t880 + t857 * t1008 + 0.2153862366e-28 * t1012;
      t1015 = t111 * t1014;
      t1017 = t32 * t1015 + t33 * t972 + t34 * t965 + t44 * t992;
      t1026 = -0.5997609317e-18 * t953 - 0.1499402329e-17 * t945 - 0.1999203105e-17 * t947 - 0.1499402329e-17 * t949 - 0.5997609317e-18 * t943 - 0.9996015527e-19 * t960 - 0.9996015527e-19 * t956;
      t1027 = t85 * t1026;
      t1029 = -t1026;
      t1031 = t895 * t1027 + t85 * t1029;
      t1032 = t41 * t1031;
      t1035 = 0.1999203106e-18 * t995 * t902;
      t1036 = t566 * t1;
      t1038 = 0.1999203106e-18 * t1036 * t902;
      t1039 = t70 * t911;
      t1041 = 0.1999203106e-17 * t1039 * t902;
      t1042 = t80 * t281;
      t1044 = 0.1999203106e-17 * t1042 * t902;
      t1045 = t61 * t849;
      t1047 = 0.9996015527e-18 * t1045 * t902;
      t1048 = t559 * t1;
      t1050 = 0.9996015527e-18 * t1048 * t902;
      t1051 = t1035 + t1038 + t1041 + t1044 + t1047 + t1050;
      t1053 = t895 * t1051 - t1035 - t1038 - t1041 - t1044 - t1047 - t1050;
      t1055 = t30 * t1032 + t42 * t1053;
      t1058 = t198 * (t28 * t1017 + t33 * t1055);
      t1062 = 0.4754104986e-23 * t340 + 0.3901701507e-23 * t338;
      t1063 = t151 * t1062;
      t1068 = 0.2377052494e-22 * t345 + 0.1950850754e-22 * t347;
      t1069 = t151 * t1068;
      t1074 = 0.4754104986e-22 * t354 + 0.3901701507e-22 * t352;
      t1075 = t151 * t1074;
      t1080 = 0.4754104986e-22 * t381 + 0.3901701507e-22 * t383;
      t1081 = t151 * t1080;
      t1088 = 0.2377052494e-22 * t200 * t340 + 0.1950850754e-22 * t200 * t338;
      t1089 = t151 * t1088;
      t1092 = t375 * t358;
      t1103 = 0.3901701507e-23 * t566 * t338 + 0.4754104986e-23 * t566 * t340;
      t1105 = H * t1089 + t562 * t1063 + t205 * t1069 + t3 * t1075 + t2 * t1081 + t151 * t1103;
      t1106 = t111 * t1105;
      t1107 = t1092 * t1106;
      t1110 = t407 * t406 * t933;
      t1111 = 0.2054236637e-14 * t1110;
      t1112 = a__e * t562;
      t1113 = t408 * t1112;
      t1114 = 0.1232541982e-13 * t1113;
      t1115 = t15 * t205;
      t1116 = t408 * t1115;
      t1117 = 0.3081354958e-13 * t1116;
      t1118 = t20 * t3;
      t1119 = t408 * t1118;
      t1120 = 0.4108473276e-13 * t1119;
      t1121 = t408 * t951;
      t1122 = 0.1232541983e-13 * t1121;
      t1123 = t200 * t2;
      t1124 = t408 * t1123;
      t1125 = 0.3081354957e-13 * t1124;
      t1127 = t407 * t406 * t926;
      t1128 = 0.2054236638e-14 * t1127;
      t1129 = t1111 + t1114 + t1117 + t1120 + t1122 + t1125 + t1128;
      t1134 = 0.1540677478e-13 * t1116;
      t1135 = 0.2054236638e-13 * t1119;
      t1136 = 0.1540677479e-13 * t1124;
      t1137 = 0.6162709914e-14 * t1121;
      t1138 = 0.1027118319e-14 * t1110;
      t1139 = 0.6162709914e-14 * t1113;
      t1140 = 0.1027118319e-14 * t1127;
      t1156 = t175 * t42;
      t1162 = t26 * t455;
      t1164 = t407 * t519;
      t1166 = -0.1467311884e-15 * t1162 - 0.6162709915e-14 * t1164;
      t1170 = a__e * t26 * t455;
      t1171 = 0.7336559421e-15 * t1170;
      t1172 = t407 * t591;
      t1174 = -t1171 - 0.1027118319e-13 * t1172;
      t1177 = t15 * t26;
      t1178 = t1177 * t455;
      t1179 = 0.1467311884e-14 * t1178;
      t1181 = -t1179 - 0.1027118319e-13 * t418;
      t1185 = t455 * t20 * t26;
      t1186 = 0.1467311884e-14 * t1185;
      t1188 = -t1186 - 0.6162709915e-14 * t568;
      t1192 = t200 * t26 * t455;
      t1193 = 0.7336559421e-15 * t1192;
      t1196 = t763 * t455;
      t1197 = 0.7336559420e-15 * t1196;
      t1198 = t406 * mu;
      t1199 = t5 * t1198;
      t1200 = 0.5869247537e-15 * t1199;
      t1201 = -t1171 - t1200;
      t1204 = t452 * t1198;
      t1205 = 0.2347699014e-14 * t1204;
      t1206 = -t1179 - t1205;
      t1209 = t596 * t1198;
      t1210 = 0.3521548522e-14 * t1209;
      t1211 = -t1186 - t1210;
      t1214 = t5 * t20;
      t1215 = t1214 * t1198;
      t1216 = 0.2347699014e-14 * t1215;
      t1222 = 0.5869247537e-15 * t1162 - 0.3081354957e-14 * t1164;
      t1226 = 0.2934623766e-14 * t1170;
      t1227 = -0.5135591596e-14 * t1172 + t1226;
      t1231 = 0.5869247535e-14 * t1178;
      t1232 = -0.5135591596e-14 * t418 + t1231;
      t1236 = 0.5869247535e-14 * t1185;
      t1237 = -0.3081354957e-14 * t568 + t1236;
      t1240 = 0.2934623766e-14 * t1192;
      t1245 = t205 * V__R;
      t1246 = a__e * t1245;
      t1247 = t1246 * t436;
      t1249 = t566 * V__R;
      t1252 = t3 * V__R;
      t1253 = t15 * t1252;
      t1256 = t2 * V__R;
      t1261 = t200 * H * V__R;
      t1264 = t562 * V__R;
      t1265 = t1264 * t436;
      t1274 = 0.1467311885e-14 * t1170 + t1200;
      t1278 = 0.2934623769e-14 * t1178 + t1205;
      t1282 = 0.2934623769e-14 * t1185 + t1210;
      t1285 = 0.1467311885e-14 * t1192;
      t1291 = t109 * t406;
      t1294 = t15 * V__R;
      t1297 = 0.2934623769e-15 * Omega__E * t1291 + 0.4401935652e-14 * t1294 * t436;
      t1305 = t406 * (-0.2934623769e-15 * t496 + 0.5869247537e-14 * t439);
      t1307 = 0.1173849507e-14 * t628 * t1291 + V__R * t1305;
      t1316 = t406 * (-0.8803871306e-15 * t638 + 0.4401935652e-14 * t573);
      t1318 = 0.1760774261e-14 * t487 * t15 * t109 + V__R * t1316;
      t1321 = Omega__E * t20;
      t1323 = 0.1173849507e-14 * t1321 * t1291;
      t1324 = t15 * mu;
      t1330 = t406 * (-0.8803871306e-15 * Omega__E * t1324 + 0.1760774261e-14 * t566 * t428);
      t1331 = V__R * t1330;
      t1337 = -t1226 - 0.2934623769e-15 * t1199;
      t1341 = -t1231 - 0.1173849507e-14 * t1204;
      t1345 = -t1236 - 0.1760774261e-14 * t1209;
      t1348 = 0.1173849507e-14 * t1215;
      t1360 = t1179 + 0.2934623769e-15 * t513;
      t1368 = t406 * (0.1467311884e-14 * t1214 - 0.4401935654e-15 * mu);
      t1370 = 0.8803871304e-15 * a__e * t513 + t26 * t1368;
      t1374 = 0.8803871304e-15 * t15 * t513;
      t1376 = t200 * t5;
      t1379 = t406 * (-0.8803871306e-15 * t295 + 0.7336559421e-15 * t1376);
      t1380 = t26 * t1379;
      t1381 = mu ^ 2;
      t1382 = t406 * t1381;
      t1383 = 0.2934623769e-15 * t1382;
      t1399 = 0.6812468184e-3 * H + 0.6812468184e-3 * a__e;
      t1400 = t1399 ^ 2;
      t1401 = t1400 ^ 2;
      t1403 = 0.1e1 / t1401 / t1399;
      t1406 = 0.1e1 / t31;
      t1407 = t1406 * t544;
      t1408 = 0.1e1 / t28;
      t1409 = t1408 * t1407;
      t1413 = t408 * t933 * H;
      t1414 = 0.2054236637e-14 * t1413;
      t1416 = t408 * a__e * t926;
      t1417 = 0.2054236637e-14 * t1416;
      t1419 = t408 * t15 * t562;
      t1420 = 0.6162709915e-14 * t1419;
      t1422 = t408 * t20 * t205;
      t1423 = 0.1027118319e-13 * t1422;
      t1425 = t408 * t566 * t2;
      t1426 = 0.6162709915e-14 * t1425;
      t1428 = t408 * t200 * t3;
      t1429 = 0.1027118319e-13 * t1428;
      t1432 = t407 * t406 * t205 * t3;
      t1433 = 0.2934623769e-15 * t1432;
      t1436 = t407 * t406 * t200 * t20;
      t1437 = 0.2934623769e-15 * t1436;
      t1438 = t1414 + t1417 + t1420 + t1423 + t1426 + t1429 + t1433 + t1437;
      t1440 = t469 * t1438 + t1414 + t1417 + t1420 + t1423 + t1426 + t1429 + t1433 + t1437;
      t1443 = 0.3081354957e-14 * t1419;
      t1444 = 0.5135591596e-14 * t1422;
      t1445 = 0.5135591596e-14 * t1428;
      t1446 = 0.3081354957e-14 * t1425;
      t1447 = 0.1027118319e-14 * t1413;
      t1448 = 0.1027118319e-14 * t1416;
      t1449 = 0.1467311884e-15 * t1436;
      t1450 = 0.1467311884e-15 * t1432;
      t1451 = t1443 + t1444 + t1445 + t1446 + t1447 + t1448 + t1449 + t1450;
      t1453 = t469 * t1451 - t1443 - t1444 - t1445 - t1446 - t1447 - t1448 - t1449 - t1450;
      t1455 = t44 * t30 * t1440 + t30 * t1453;
      t1465 = -0.5869247537e-15 * t1432 - 0.5869247537e-15 * t1436 - 0.2054236638e-13 * t1428 - 0.1232541983e-13 * t1425 - 0.4108473274e-14 * t1413 - 0.4108473274e-14 * t1416 - 0.1232541983e-13 * t1419 - 0.2054236638e-13 * t1422;
      t1466 = t41 * t1465;
      t1468 = t41 * t1438;
      t1470 = t1156 * t1466 + t444 * t1468;
      t1479 = t566 * t26 * t455;
      t1480 = 0.1467311884e-15 * t1479;
      t1481 = -t1433 - t1417 + t562 * t1166 + t205 * t1174 + t3 * t1181 + t2 * t1188 + H * (-t1193 - t1111) - t1480 - t1437;
      t1483 = t783 * t455;
      t1484 = 0.1467311884e-15 * t1483;
      t1490 = t1376 * t1198;
      t1491 = 0.5869247537e-15 * t1490;
      t1492 = t469 * t1481 - t1484 + t205 * t1201 + t3 * t1206 + t2 * t1211 + H * (-t1193 - t1216) - t1491 - t1480;
      t1501 = 0.5869247537e-15 * t1479;
      t1502 = -t1450 - t1448 + t562 * t1222 + t205 * t1227 + t3 * t1232 + t2 * t1237 + H * (-t1138 + t1240) + t1501 - t1449;
      t1504 = t469 * t1502 + t1443 + t1444 + t1445 + t1446 + t1447 + t1448 + t1449 + t1450;
      t1507 = a__e * t1264 * t436;
      t1521 = t926 * V__R;
      t1522 = t1521 * t436;
      t1527 = -0.3521548522e-14 * t1507 - 0.3521548522e-14 * H * t1249 * t436 - 0.8803871304e-14 * t15 * t1245 * t436 - 0.1173849507e-13 * t20 * t1252 * t436 - 0.8803871304e-14 * t200 * t1256 * t436 - 0.5869247537e-15 * t1522 - 0.5869247537e-15 * t933 * V__R * t436;
      t1528 = t85 * t1527;
      t1530 = t44 * t30 * t1492 + t30 * t1504 + t43 * t1528;
      t1539 = 0.2934623769e-15 * t1483 + t205 * t1274 + t3 * t1278 + t2 * t1282 + H * (t1285 + t1216) + 0.2934623769e-15 * t1479 + t1491;
      t1540 = t41 * t1539;
      t1549 = Omega__E * t200;
      t1557 = t406 * (0.2934623769e-15 * t933 * t428 - 0.2934623769e-15 * Omega__E * t1010);
      t1559 = 0.2934623769e-15 * t1522 + 0.1760774261e-14 * t1507 + t205 * t1297 + t3 * t1307 + t2 * t1318 + H * (t1323 + t1331) + 0.2934623769e-15 * t1549 * t1291 + V__R * t1557;
      t1560 = t85 * t1559;
      t1569 = -0.5869247537e-15 * t1483 + t205 * t1337 + t3 * t1341 + t2 * t1345 + H * (-t1240 - t1348) - t1501 - 0.2934623769e-15 * t1490;
      t1570 = t41 * t1569;
      t1572 = t30 * t1560 + t42 * t1570;
      t1574 = t1156 * t1540 + t31 * t1572;
      t1589 = t406 * (-0.4401935654e-15 * t1324 + 0.1467311884e-15 * t566 * t5);
      t1593 = t1484 + 0.7336559421e-15 * a__e * t763 * t455 + t3 * t1360 + t2 * t1370 + H * (t1374 + t1380 + t1383) + 0.2934623769e-15 * t20 * t513 + t26 * t1589 + 0.2934623769e-15 * a__e * t1382;
      t1602 = -0.5121884706e-21 * t710 - 0.5121884706e-21 * t708 - 0.2560942353e-20 * t716 - 0.5121884706e-20 * t718 - 0.5121884706e-20 * t712 - 0.2560942353e-20 * t714;
      t1604 = t44 * t30 * t1593 + t134 * t1470 + t35 * t1455 + t34 * t1530 + t33 * t1574 + t31 * t1602;
      t1606 = t28 * t1604 + t706 * t721 + t1058 + t1107;
      D_V_y58KN_2_1 = t1409 * t537 * t1403 * (t706 * t111 * (-0.7336559420e-15 * t694 - 0.2934623768e-14 * t696 - 0.7336559421e-15 * t698 - 0.2934623768e-14 * t700 - 0.4401935652e-14 * t702) + D_V_y58KN_1_1 * t44 * t721 + t198 * (t28 * (t34 * (t32 * t111 * t787 + t44 * t761) + t33 * (-t45 * t111 * t787 + t797 * t41 * t761) + t44 * (2 * H * t830 + 3 * t2 * t817 + 4 * t3 * t804 + t839 + t845) + t32 * t111 * (0.2100003262e-22 * t851 + 4 * t3 * t857 * t856 + 3 * t2 * t867 + 2 * t874 * t873 + t857 * t880)) + t33 * (t30 * t41 * (t895 * t85 * t893 - t85 * t893) + t42 * (t895 * (t904 + t907 + t910 + t914 + t917) - t907 - t910 - t914 - t917 - t904))) - t1058 / 23800 + t1092 * t111 * (2 * H * t1081 + 5 * t205 * t1063 + 4 * t3 * t1069 + 3 * t2 * t1075 + t1089) - t1107 / 11900 + t28 * (t35 * (t44 * t30 * (t469 * t1129 + t1111 + t1114 + t1117 + t1120 + t1122 + t1125 + t1128) + t30 * (t469 * (t1134 + t1135 + t1136 + t1137 + t1138 + t1139 + t1140) - t1140 - t1138 - t1139 - t1134 - t1135 - t1136 - t1137)) + t134 * (t1156 * t41 * (-0.4108473276e-14 * t1127 - 0.6162709914e-13 * t1124 - 0.2465083966e-13 * t1121 - 0.4108473274e-14 * t1110 - 0.2465083964e-13 * t1113 - 0.6162709915e-13 * t1116 - 0.8216946552e-13 * t1119) + t444 * t41 * t1129) + t34 * (t44 * t30 * (t469 * (2 * H * t1188 + 5 * t205 * t1166 + 4 * t3 * t1174 + 3 * t2 * t1181 - t1111 - t1114 - t1128 - t1193) - t1197 + 4 * t3 * t1201 + 3 * t2 * t1206 + 2 * H * t1211 - t1193 - t1216) + t30 * (t469 * (2 * H * t1237 + 5 * t205 * t1222 + 4 * t3 * t1227 + 3 * t2 * t1232 - t1138 - t1139 - t1140 + t1240) + t1134 + t1135 + t1136 + t1137 + t1138 + t1139 + t1140) + t43 * t85 * (-0.1760774261e-13 * t1247 - 0.3521548522e-14 * t1249 * t436 - 0.3521548522e-13 * t1253 * t436 - 0.3521548521e-13 * t20 * t1256 * t436 - 0.1760774261e-13 * t1261 * t436 - 0.3521548522e-14 * t1265)) + t33 * (t1156 * t41 * (0.1467311884e-14 * t1196 + 4 * t3 * t1274 + 3 * t2 * t1278 + 2 * H * t1282 + t1285 + t1216) + t31 * (t30 * t85 * (0.1760774261e-14 * t1265 + 0.8803871305e-14 * t1247 + 4 * t3 * t1297 + 3 * t2 * t1307 + 2 * H * t1318 + t1323 + t1331) + t42 * t41 * (-0.2934623768e-14 * t1196 + 4 * t3 * t1337 + 3 * t2 * t1341 + 2 * H * t1345 - t1240 - t1348))) + t44 * t30 * (t1197 + 0.2934623768e-14 * a__e * t767 * t455 + 3 * t2 * t1360 + 2 * H * t1370 + t1374 + t1380 + t1383) + t31 * (-0.2560942353e-20 * t694 - 0.1024376941e-19 * t700 - 0.1536565412e-19 * t702 - 0.1024376941e-19 * t696 - 0.2560942353e-20 * t698))) - 0.3406234092e-2 * t1409 * t537 / t1401 / t1400 * t1606;
      D_V_y58KN_1_2 = 0;
      D_V_y58KN_2_2 = 0;
      t1618 = t44 * t42 * t33;
      t1620 = t85 * t33;
      t1624 = t42 * t33 * t28;
      t1627 = t33 * t30;
      t1628 = t85 * t1627;
      t1636 = t33 * t31;
      t1687 = t198 * (-4 * t41 * t134 * t32 * t219 + t134 * (t1628 * t111 * t264 + t31 * t1620 * t236 + t1618 * t223 + t1624 * t242) - 3 * t41 * t34 * t275 - 2 * t41 * t1636 * t30 * t302 + t33 * (t175 * t1620 * t313 + t44 * (t1624 * t323 + t1628 * t327)) - t41 * t331) - 2 * t41 * t375 * t33 * t401 - 6 * t41 * t445 * t42 * t571 - 5 * t41 * t35 * t31 * t42 * t586 + t35 * (t469 * t1627 * t608 + t1627 * t620) - 4 * t41 * t134 * t622 + t31 * t85 * t35 * t30 * t651 - 3 * t41 * t34 * t654 - 2 * t41 * t33 * t669 + t175 * t85 * t34 * t30 * t677 - t41 * t680;
      t1691 = t542 * t687;
      D_V_y58KN_1_3 = t548 * t542 * t537 * t1687 + 2 * t41 / t134 * t546 * t1691;
      D_V_y58KN_2_3 = t1409 * t537 * t1403 * (D_V_y58KN_1_3 * t44 * t721 + t198 * (t28 * (-2 * t41 * t33 * t965 + t33 * (t797 * t33 * t941 + t1618 * t968) - t41 * t972) + t30 * t34 * t1031 - t41 * t1055) + t28 * (-4 * t41 * t134 * t1455 + t134 * (t1156 * t33 * t1465 + t444 * t33 * t1438) - 3 * t41 * t34 * t1470 + t42 * t134 * t1528 - 2 * t41 * t33 * t1530 + t33 * (t1156 * t33 * t1539 + t444 * t33 * t1569) - t41 * t1574));
      t1854 = 0.1e1 / t109;
      D_V_y58KN_1_4 = t548 * t542 * t537 * (t198 * (2 * t36 * t28 * V__R * t217 + t134 * (2 * t45 * t28 * V__R * t221 + 2 * t87 * V__R * t235 + t42 * (2 * t92 * V__R * t241 + 3 * t111 * t26 * t253) + t85 * (2 * t122 * V__R * t263 + 3 * t129 * t26 * t270)) + t160 * t28 * (2 * V__R * t299 + 4 * t109 * t289) + t33 * (4 * t176 * t109 * t312 + t44 * (4 * t190 * t111 * t109 * t325 + 4 * t184 * t109 * t322))) + t375 * t34 * (4 * t358 * t109 * t385 + 4 * t370 * t109 * t398) + t445 * t31 * t42 * t585 + t35 * (t469 * t41 * t30 * t607 + 2 * t460 * V__R * t614 + 2 * t461 * V__R * t599 + t41 * t30 * t619) + t134 * t31 * (t42 * (3 * t26 * t631 - t633 - t634 - t635 + t636 + t641) + 2 * t190 * V__R * t650) + t34 * (4 * t514 * t539 * t109 * t656 + 2 * t44 * V__R * t666) + t33 * t175 * (4 * t190 * t109 * t676 + 3 * t42 * t26 * t671) + 4 * t684 * t109 * t682) - 2 * t547 * t545 * t1854 * t1691;
      t1859 = V__R * t406;
      t1860 = t562 * t1859;
      t1862 = t566 * t1859;
      t1864 = t556 * t1859;
      t1866 = t559 * t1859;
      t1868 = t550 * t1859;
      t1870 = t553 * t1859;
      t1891 = 2 * H * V__R * t759 + 2 * t2 * V__R * t750 + 2 * t205 * V__R * t738 + 2 * t3 * V__R * t744 + 2 * t562 * V__R * t732 + 2 * t926 * V__R * t726 + 2 * V__R * t939;
      t1894 = t62 * alpha * t1264;
      t1897 = t71 * alpha * t1245;
      t1900 = t81 * alpha * t1252;
      t1903 = t231 * alpha * t1256;
      t1905 = alpha * V__R;
      t1906 = S * t1905;
      t1907 = t952 * t1906;
      t1909 = t955 * t1906;
      t1912 = t48 * alpha * t1521;
      t1914 = -0.4307724732e-27 * t1894 - 0.8615449464e-27 * t1897 - 0.8615449464e-27 * t1900 - 0.8615449464e-27 * t1903 - 0.4307724732e-27 * t1907 - 0.4307724732e-28 * t1909 - 0.4307724732e-28 * t1912;
      t1956 = t109 * alpha;
      t1988 = -0.1199521863e-17 * t1907 - 0.2998804658e-17 * t1897 - 0.3998406210e-17 * t1900 - 0.2998804658e-17 * t1903 - 0.1199521863e-17 * t1894 - 0.1999203105e-18 * t1912 - 0.1999203105e-18 * t1909;
      t1996 = t26 * t104;
      t1998 = 0.5997609318e-18 * t995 * t1996;
      t2000 = 0.5997609318e-18 * t1036 * t1996;
      t2002 = 0.5997609318e-17 * t1039 * t1996;
      t2004 = 0.5997609318e-17 * t1042 * t1996;
      t2006 = 0.2998804658e-17 * t1045 * t1996;
      t2008 = 0.2998804658e-17 * t1048 * t1996;
      t2032 = t1264 * t455;
      t2033 = 0.2934623768e-15 * t2032;
      t2034 = t1246 * t455;
      t2035 = 0.1467311884e-14 * t2034;
      t2036 = t1253 * t455;
      t2037 = 0.2934623768e-14 * t2036;
      t2039 = t449 * t20 * V__R;
      t2040 = 0.2934623768e-14 * t2039;
      t2041 = t1261 * t455;
      t2042 = 0.1467311884e-14 * t2041;
      t2043 = t1249 * t455;
      t2044 = 0.2934623768e-15 * t2043;
      t2056 = 0.1173849507e-14 * t2032 + 0.5869247532e-14 * t2034 + 0.1173849507e-13 * t2036 + 0.1173849507e-13 * t2039 + 0.5869247532e-14 * t2041 + 0.1173849507e-14 * t2043;
      t2059 = t1112 * t436;
      t2069 = t926 * t436;
      t2158 = t537 * t1403 * t1606;
      D_V_y58KN_2_4 = t1409 * t537 * t1403 * (t706 * t111 * (-0.2934623768e-15 * t1860 - 0.2934623768e-15 * t1862 - 0.2934623768e-14 * t1864 - 0.1467311884e-14 * t1866 - 0.1467311884e-14 * t1868 - 0.2934623768e-14 * t1870) + D_V_y58KN_1_4 * t44 * t721 + t198 * (t28 * (t34 * (t32 * t111 * t1914 + t44 * t1891) + t33 * (-t45 * t111 * t1914 + t797 * t41 * t1891) + t44 * (4 * t205 * t109 * t803 + t3 * (2 * V__R * t815 + 4 * t109 * t809) + t2 * (2 * V__R * t828 + 4 * t109 * t822) + H * (2 * V__R * t844 + 4 * t109 * t838) + 4 * t109 * t983 + 2 * V__R * t990) + t32 * t111 * (0.1680002609e-22 * t995 * t109 * m + 4 * t205 * t1956 * t856 + t3 * (4 * t1956 * t864 + 0.4307724732e-28 * t155 * t1905) + 4 * t2 * t1956 * t873 + 4 * H * t1956 * t880 + 4 * t1956 * t1008 + 0.4307724732e-28 * t1011 * t1906)) + t33 * (t30 * t41 * (t895 * t85 * t1988 - t85 * t1988) + t42 * (t895 * (t1998 + t2000 + t2002 + t2004 + t2006 + t2008) - t2002 - t2004 - t2006 - t2008 - t1998 - t2000))) + t1092 * t111 * (4 * H * t109 * t1088 + 4 * t562 * t109 * t1062 + 4 * t205 * t109 * t1068 + 4 * t3 * t109 * t1074 + 4 * t2 * t109 * t1080 + 4 * t109 * t1103) + t28 * (t34 * (t44 * t30 * (t469 * (-t2033 - t2035 - t2037 - t2040 - t2042 - t2044) - t2033 - t2035 - t2037 - t2040 - t2042 - t2044) + t30 * t469 * t2056 + t43 * t85 * (-0.3521548522e-14 * t2059 - 0.3521548522e-14 * t951 * t436 - 0.8803871304e-14 * t1115 * t436 - 0.1173849507e-13 * t1118 * t436 - 0.8803871304e-14 * t1123 * t436 - 0.5869247537e-15 * t2069 - 0.5869247537e-15 * t933 * t436)) + t33 * (t1156 * t41 * (0.5869247538e-15 * t2032 + 0.2934623770e-14 * t2034 + 0.5869247538e-14 * t2036 + 0.5869247538e-14 * t2039 + 0.2934623770e-14 * t2041 + 0.5869247538e-15 * t2043) + t31 * (t30 * t85 * (0.2934623769e-15 * t2069 + 0.1760774261e-14 * t2059 + t205 * (0.8803871307e-15 * Omega__E * t693 + 0.4401935652e-14 * t15 * t436) + t3 * (0.3521548521e-14 * t628 * t693 + t1305) + t2 * (0.5282322783e-14 * t487 * t1177 + t1316) + H * (0.3521548521e-14 * t1321 * t693 + t1330) + 0.8803871307e-15 * t1549 * t693 + t1557) - t42 * t41 * t2056)) + t44 * t30 * (t2033 + t2035 + t3 * (0.2934623768e-14 * t1294 * t455 + 0.1173849508e-14 * t1291) + t2 * (0.3521548522e-14 * a__e * t1291 + 2 * V__R * t1368) + H * (0.3521548522e-14 * t15 * t1291 + 2 * V__R * t1379) + 0.1173849508e-14 * t20 * t1291 + 2 * V__R * t1589) + t31 * (-0.1024376941e-20 * t1862 - 0.1024376941e-20 * t1860 - 0.5121884706e-20 * t1868 - 0.1024376941e-19 * t1870 - 0.1024376941e-19 * t1864 - 0.5121884706e-20 * t1866))) - 2 * t1408 * t1406 * t1854 * t2158;
      t2166 = t30 ^ 2;
      t2174 = t31 * t111;
      t2188 = t30 * t44 * t85;
      t2210 = t41 * t31;
      D_V_y58KN_1_5 = t548 * t542 * t537 * (t198 * (t35 * t44 * t28 * t218 - t35 * t2166 * t28 * t218 + t134 * (-2 * t32 * t43 * t223 - t190 * t236 + t85 * (t41 * t2174 * t264 + t358 * t271)) + t34 * t44 * t302 - t34 * t2166 * t302 + t33 * (-3 * t2188 * t41 * t313 - 2 * t30 * t31 * t329 + t176 * t327)) + t375 * t34 * (t31 * t369 * t399 - t129 * t386) - t445 * t796 * t586 + t35 * (t469 * t2210 * t608 - 2 * t797 * t85 * t600 + t2210 * t620) + t134 * t86 * t44 * t651 - t134 * t30 * t653 + t34 * (-4 * t30 * t175 * t657 * t656 - 2 * t32 * t667) + t33 * t86 * t514 * t677 - 3 * t1627 * t44 * t679 - 4 * t30 * t1156 * t85 * t683) + 2 * t30 * t547 / t175 * t544 * t1691;
      t2265 = t44 * t42;
      t2290 = t30 * t2265;
      D_V_y58KN_2_5 = t1409 * t537 * t1403 * (-2 * t30 * V_y58KN_1 * t31 * t721 + D_V_y58KN_1_5 * t44 * t721 + t198 * (t28 * (t34 * (-2 * t30 * t31 * t941 - t2166 * t963 + t44 * t963) + t33 * (-t2166 * t42 * t970 - 2 * t797 * t41 * t968 + t2265 * t970) - 2 * t30 * t31 * t992 + t44 * t1015 - t2166 * t1015) + t1636 * t1032) - t375 * t129 * t1106 + t28 * (t35 * (-2 * t31 * t2166 * t1440 + t175 * t1440 + t31 * t1453) + t134 * (-3 * t2290 * t1466 - t796 * t1468) + t34 * (-2 * t31 * t2166 * t1492 + t175 * t1492 + t31 * t1504) + t33 * (-3 * t2290 * t1540 + t44 * t1560 - t30 * t1572) + t175 * t1593 - 2 * t31 * t2166 * t1593 - t30 * t1602)) + t30 * t1408 * t546 * t2158;
      t2323 = t44 * t86;
      t2335 = t42 * t189;
      t2345 = t85 ^ 2;
      t2348 = t31 * t85;
      D_V_y58KN_1_6 = t548 * t542 * t537 * (t198 * (t134 * (t31 * t43 * t236 - t2323 * t223 - t85 * t256 + t42 * t273) + t33 * (t175 * t43 * t313 + t44 * (-t85 * t92 * t323 + t2335 * t327))) + t425 * t469 * t570 - t425 * t2345 * t570 - t445 * t2348 * t586 + t35 * (-2 * t85 * t43 * t30 * t608 - t44 * t2345 * t600 + t44 * t469 * t600 - t2345 * t616 + t469 * t616) + t134 * t31 * (t2335 * t651 - t85 * t644) + t34 * (-t658 * t406 * t2345 + t658 * t406 * t469) + t33 * t175 * (t2335 * t677 - t85 * t672) + t514 * t469 * t683 - t514 * t2345 * t683);
      t2389 = t30 * t85;
      t2413 = t175 * t85;
      D_V_y58KN_2_6 = t1409 * t537 * t1403 * (D_V_y58KN_1_6 * t44 * t721 + t198 * (t28 * t33 * (-t31 * t2389 * t970 - t2323 * t968) + t33 * (t30 * t41 * (t895 * t42 * t1026 + t42 * t1029) - t85 * t1053)) + t28 * (t35 * (-2 * t2188 * t42 * t1438 - 2 * t2389 * t42 * t1451) + t134 * (-t2413 * t1466 - t2348 * t1468) + t34 * (-2 * t2188 * t42 * t1481 - 2 * t2389 * t42 * t1502 - t41 * t2345 * t1527 + t41 * t469 * t1527) + t33 * (-t2413 * t1540 + t31 * (t30 * t42 * t1559 - t85 * t1570))));
      t2447 = t41 * t111;
      t2452 = t41 * t129;
      t2471 = t28 ^ 2;
      D_V_y58KN_1_7 = t548 * t542 * t537 * (t198 * (t36 * t111 * t218 + t134 * (t45 * t111 * t222 + t42 * (t2447 * t242 - t28 * t254) + t85 * (t121 * t271 - t2452 * t264)) + t160 * t111 * t301 + t33 * t44 * (-t190 * t28 * t326 + t42 * t2447 * t323)) + t375 * t34 * (-t30 * t2471 * t399 + t30 * t895 * t399 + t2174 * t386));
      t2507 = t375 * t31;
      D_V_y58KN_2_7 = t1409 * t537 * t1403 * (-t706 * t28 * t720 + D_V_y58KN_1_7 * t44 * t721 + t198 * (t28 * (-t1618 * t41 * t28 * t967 - t32 * t28 * t1014 - t160 * t28 * t962) + t111 * t1017 + t33 * (-2 * t42 * t28 * t111 * t1051 - 2 * t2452 * t111 * t1027)) - t2507 * t2471 * t1105 + t2507 * t895 * t1105 + t111 * t1604) - t111 / t2471 * t1407 * t2158;
      t2520 = 0.1362493637e-2 * t231;
      t2521 = t205 * S;
      t2522 = t50 * t2521;
      t2523 = 0.1362493637e-2 * t2522;
      t2524 = t11 * t278;
      t2526 = t2 * S;
      t2527 = t17 * t2526;
      t2529 = S * H;
      t2530 = t22 * t2529;
      t2532 = -t2520 - t2523 - 0.5449974548e-2 * t2524 - 0.8174961822e-2 * t2527 - 0.5449974548e-2 * t2530;
      t2554 = Omega__E * S;
      t2555 = t2554 * t4;
      t2557 = t2554 * t21;
      t2560 = a__e * t2554 * t94;
      t2563 = t15 * t2554 * t99;
      t2614 = -0.6812468184e-3 * m * t2526 - 0.6812468184e-3 * t310 - 0.1362493637e-2 * t10 * t2529;
      t2631 = a__e * t337;
      t2633 = a__e * t360;
      t2638 = t15 * t337;
      t2642 = t20 * t337;
      D_V_y58KN_1_8 = t548 * t542 * t537 * (t198 * (t36 * t28 * t26 * t2532 + t134 * (-t45 * t28 * t26 * t2532 + t87 * t26 * (-0.7806513498e-4 * t208 - 0.31226054e-3 * t211 - 0.468390810e-3 * t213 - 0.31226054e-3 * t215 - 0.7806513498e-4 * t203) + t42 * (t92 * t26 * (-0.5449974546e-2 * t2524 - 0.5449974546e-2 * t2530 - 0.817496182e-2 * t2527 - t2523 - t2520) + t111 * t109 * (0.1362493637e-2 * t2555 + 0.1362493637e-2 * t2557 + 0.4087480911e-2 * t2560 + 0.4087480911e-2 * t2563)) + t85 * (t122 * t26 * (-0.6812468184e-3 * t231 - 0.6812468184e-3 * t2522 - 0.2724987274e-2 * t2524 - 0.408748091e-2 * t2527 - 0.2724987274e-2 * t2530) + t129 * t109 * (-0.8174961822e-2 * t2560 - 0.8174961822e-2 * t2563 - 0.2724987274e-2 * t2557 - 0.2724987274e-2 * t2555))) + t160 * t28 * (t151 * (0.286238159e-7 * t3 * t47 + t2 * t141 + H * t148 + t287) + t26 * (0.1362493637e-2 * t811 * t2529 + 0.1362493637e-2 * t824)) + t33 * (t176 * t151 * (0.7806513498e-4 * t136 + 0.1561302700e-3 * t320 + 0.7806513498e-4 * t316) + t44 * (-t190 * t111 * t151 * t2614 + t184 * t151 * t2614))) + t375 * t34 * (t358 * t151 * (t3 * (0.7977243726e-7 * t360 + 0.3240009869e-7 * t337) + t2 * (0.9720029608e-7 * t2631 + 0.2393173118e-6 * t2633) + H * (0.2393173118e-6 * t363 + 0.9720029608e-7 * t2638) + 0.3240009869e-7 * t2642 + 0.7977243726e-7 * t396) + t370 * t151 * (-0.2784583366e-5 * t388 * t340 - 0.2784583366e-5 * t391 * t340 - 0.9281944552e-6 * t3 * t340 - 0.9281944552e-6 * t381)));
      t2673 = -0.1145459003e-19 * t960 - 0.6872754018e-19 * t943 - 0.1718188505e-18 * t945 - 0.2290918006e-18 * t947 - 0.1718188505e-18 * t949 - 0.6872754018e-19 * t953 - 0.1145459003e-19 * t956;
      t2676 = t11 * S * t783;
      t2679 = t17 * S * t763;
      t2682 = t22 * S * t767;
      t2685 = t202 * S * t771;
      t2687 = S * t26;
      t2690 = t5 * t99 * t566 * t2687;
      t2692 = t955 * t2687;
      t2694 = t48 * t958;
      t2696 = -0.2153862366e-27 * t2676 - 0.4307724732e-27 * t2679 - 0.4307724732e-27 * t2682 - 0.4307724732e-27 * t2685 - 0.2153862366e-27 * t2690 - 0.2153862366e-28 * t2692 - 0.2153862366e-28 * t2694;
      t2709 = a__e * alpha;
      t2716 = t15 * alpha;
      t2769 = -0.5997609317e-18 * t2690 - 0.1499402329e-17 * t2679 - 0.1999203105e-17 * t2682 - 0.1499402329e-17 * t2685 - 0.5997609317e-18 * t2676 - 0.9996015527e-19 * t2694 - 0.9996015527e-19 * t2692;
      t2780 = 0.1999203106e-18 * S * t562 * t109 * t104;
      t2784 = 0.1999203106e-18 * t566 * S * t109 * t104;
      t2787 = 0.1999203106e-17 * t15 * t278 * t902;
      t2790 = 0.1999203106e-17 * t20 * t2526 * t902;
      t2793 = 0.9996015527e-18 * a__e * t2521 * t902;
      t2796 = 0.9996015527e-18 * H * t230 * t902;
      D_V_y58KN_2_8 = t1409 * t537 * t1403 * (D_V_y58KN_1_8 * t44 * t721 + t198 * (t28 * (t34 * (t32 * t111 * t2696 + t44 * t2673) + t33 * (-t45 * t111 * t2696 + t797 * t41 * t2673) + t44 * (0.1145459003e-19 * t851 + t3 * (0.4581836014e-19 * t151 * t2709 * t47 + 0.1145459003e-19 * t156) + t2 * (0.6872754018e-19 * t151 * t2716 * t47 + 0.3436377008e-19 * t26 * t2709 * t155) + H * (0.4581836014e-19 * t151 * t20 * alpha * t47 + 0.3436377008e-19 * t26 * t2716 * t155) + 0.1145459003e-19 * t151 * t1 * t201 + 0.1145459003e-19 * t1012) + t32 * t111 * (0.4200006523e-23 * S * t562 * t848 + t205 * t151 * t856 + t3 * (t151 * t864 + 0.2153862366e-28 * t811 * t2687) + t2 * t151 * t873 + H * t151 * t880 + t151 * t1008 + 0.2153862366e-28 * t1011 * t2687)) + t33 * (t30 * t41 * (t895 * t85 * t2769 - t85 * t2769) + t42 * (t895 * (t2780 + t2784 + t2787 + t2790 + t2793 + t2796) - t2787 - t2790 - t2793 - t2796 - t2780 - t2784))) + t1092 * t111 * (t562 * t151 * (0.4754104986e-23 * t337 + 0.1170510452e-22 * t360) + t205 * t151 * (0.2377052494e-22 * t2631 + 0.5852552262e-22 * t2633) + t3 * t151 * (0.4754104986e-22 * t2638 + 0.1170510452e-21 * t363) + t2 * t151 * (0.4754104986e-22 * t2642 + 0.1170510452e-21 * t396) + H * t151 * (0.2377052494e-22 * t200 * t337 + 0.5852552262e-22 * t200 * t360) + t151 * (0.1170510452e-22 * t566 * t360 + 0.4754104986e-23 * t566 * t337)));

      % Store outputs
      out_Jv_x = zeros(2, 8);
      out_Jv_x(1, 1) = D_V_y58KN_1_1;
      out_Jv_x(2, 1) = D_V_y58KN_2_1;
      out_Jv_x(1, 2) = D_V_y58KN_1_2;
      out_Jv_x(2, 2) = D_V_y58KN_2_2;
      out_Jv_x(1, 3) = D_V_y58KN_1_3;
      out_Jv_x(2, 3) = D_V_y58KN_2_3;
      out_Jv_x(1, 4) = D_V_y58KN_1_4;
      out_Jv_x(2, 4) = D_V_y58KN_2_4;
      out_Jv_x(1, 5) = D_V_y58KN_1_5;
      out_Jv_x(2, 5) = D_V_y58KN_2_5;
      out_Jv_x(1, 6) = D_V_y58KN_1_6;
      out_Jv_x(2, 6) = D_V_y58KN_2_6;
      out_Jv_x(1, 7) = D_V_y58KN_1_7;
      out_Jv_x(2, 7) = D_V_y58KN_2_7;
      out_Jv_x(1, 8) = D_V_y58KN_1_8;
      out_Jv_x(2, 8) = D_V_y58KN_2_8;
    end % Jv_x
    %
    % - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    %
    function out_pivots = pivots( this, in_1, ~, ~ )
      % Evaluate the pivoting values

      % Extract properties
      a__e = this.m_a__e;
      m = this.m_m;
      S = this.m_S;

      % Extract inputs
      H = in_1(1);
      lambda = in_1(3);
      V__R = in_1(4);
      theta = in_1(5);
      beta = in_1(7);
      alpha = in_1(8);

      % Evaluate function
      out_1_1 = 1;
      out_2_1 = H + a__e;
      t1 = cos(lambda);
      out_3_1 = t1 * out_2_1;
      t2 = out_2_1 ^ 2;
      out_4_1 = m * t2;
      out_5_1 = t2 * V__R * m;
      t4 = cos(theta);
      out_6_1 = V__R * out_2_1 * m * t4;
      out_7_1 = -1;
      out_8_1 = -1;
      out_1_2 = 1;
      out_2_2 = out_2_1;
      out_3_2 = out_3_1;
      out_4_2 = out_4_1;
      out_5_2 = out_5_1;
      out_6_2 = out_6_1;
      out_7_2 = -1;
      out_8_2 = -1;
      out_1_3 = 1;
      out_2_3 = out_2_2;
      out_3_3 = out_3_2;
      out_4_3 = out_4_2;
      out_5_3 = out_5_2;
      out_6_3 = out_6_2;
      t8 = sin(beta);
      t11 = exp(-H / 23800);
      t12 = 0.1e1 / m;
      out_7_3 = 0.6812468184e-3 / t4 * t12 * t11 * t8 * V__R * S;
      t17 = H ^ 2;
      t21 = a__e ^ 2;
      out_8_3 = t12 / t2 / t8 * t11 * alpha * S * V__R * (-0.6812468184e-3 * t17 - 0.1362493637e-2 * H * a__e - 0.6812468184e-3 * t21);

      % Store outputs
      out_pivots = zeros(8, 3);
      out_pivots(1, 1) = out_1_1;
      out_pivots(2, 1) = out_2_1;
      out_pivots(3, 1) = out_3_1;
      out_pivots(4, 1) = out_4_1;
      out_pivots(5, 1) = out_5_1;
      out_pivots(6, 1) = out_6_1;
      out_pivots(7, 1) = out_7_1;
      out_pivots(8, 1) = out_8_1;
      out_pivots(1, 2) = out_1_2;
      out_pivots(2, 2) = out_2_2;
      out_pivots(3, 2) = out_3_2;
      out_pivots(4, 2) = out_4_2;
      out_pivots(5, 2) = out_5_2;
      out_pivots(6, 2) = out_6_2;
      out_pivots(7, 2) = out_7_2;
      out_pivots(8, 2) = out_8_2;
      out_pivots(1, 3) = out_1_3;
      out_pivots(2, 3) = out_2_3;
      out_pivots(3, 3) = out_3_3;
      out_pivots(4, 3) = out_4_3;
      out_pivots(5, 3) = out_5_3;
      out_pivots(6, 3) = out_6_3;
      out_pivots(7, 3) = out_7_3;
      out_pivots(8, 3) = out_8_3;
    end % pivots
    %
    % - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    %
    function out = in_domain( ~, ~, ~ )
      out = true;
    end % in_domain
    %
    % - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    %
  end
end % ShuttleTrajectory_Index2

% That's All Folks!
