% +--------------------------------------------------------------------------+
% | 'Indigo' module version 1.0 - BSD 3-Clause License - Copyright (c) 2023  |
% | Current version authors:                                                 |
% |   Davide Stocco and Enrico Bertolazzi.                                   |
% +--------------------------------------------------------------------------+

% Matlab generated code for implicit system: Transistor5
% This file has been automatically generated by Indigo.
% DISCLAIMER: If you need to edit it, do it wisely!

classdef Transistor5 < Indigo.Systems.Implicit
  %
  % No class description provided.
  %
  properties (SetAccess = protected, Hidden = true)
    % User data
    m_U__b = 6.0;
    m_U__f = .26e-1;
    m_alpha = .99;
    m_beta = .1e-5;
    m_R__0 = .1e4;
    m_R__1 = .9e4;
    m_R__2 = .9e4;
    m_R__3 = .9e4;
    m_R__4 = .9e4;
    m_R__5 = .9e4;
    m_R__6 = .9e4;
    m_C__1 = .1e-5;
    m_C__2 = .2e-5;
    m_C__3 = .3e-5;
  end
  %
  methods
    %
    % - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    %
    function this = Transistor5( varargin )
      % Class constructor.

      % Superclass constructor
      num_eqns = 5;
      num_veil = 0;
      num_invs = 2;
      this = this@Indigo.Systems.Implicit('Transistor5', num_eqns, num_veil, num_invs);

      % User data
      if (nargin == 0)
        % Keep default values
      elseif (nargin == 1 && isstruct(varargin{1}))
        this.m_U__b = varargin{1}.U__b;
        this.m_U__f = varargin{1}.U__f;
        this.m_alpha = varargin{1}.alpha;
        this.m_beta = varargin{1}.beta;
        this.m_R__0 = varargin{1}.R__0;
        this.m_R__1 = varargin{1}.R__1;
        this.m_R__2 = varargin{1}.R__2;
        this.m_R__3 = varargin{1}.R__3;
        this.m_R__4 = varargin{1}.R__4;
        this.m_R__5 = varargin{1}.R__5;
        this.m_R__6 = varargin{1}.R__6;
        this.m_C__1 = varargin{1}.C__1;
        this.m_C__2 = varargin{1}.C__2;
        this.m_C__3 = varargin{1}.C__3;
      elseif (nargin == 14)
        this.m_U__b = varargin{1};
        this.m_U__f = varargin{2};
        this.m_alpha = varargin{3};
        this.m_beta = varargin{4};
        this.m_R__0 = varargin{5};
        this.m_R__1 = varargin{6};
        this.m_R__2 = varargin{7};
        this.m_R__3 = varargin{8};
        this.m_R__4 = varargin{9};
        this.m_R__5 = varargin{10};
        this.m_R__6 = varargin{11};
        this.m_C__1 = varargin{12};
        this.m_C__2 = varargin{13};
        this.m_C__3 = varargin{14};
      else
        error('wrong number of input arguments.');
      end
    end % Transistor5
    %
    % - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    %
    function out_F = F( this, in_1, in_2, in_3, t )
      % Evaluate the function F.

      % Extract properties
      U__b = this.m_U__b;
      U__f = this.m_U__f;
      alpha = this.m_alpha;
      beta = this.m_beta;
      R__0 = this.m_R__0;
      R__1 = this.m_R__1;
      R__2 = this.m_R__2;
      R__3 = this.m_R__3;
      R__4 = this.m_R__4;
      R__5 = this.m_R__5;
      R__6 = this.m_R__6;
      C__1 = this.m_C__1;
      C__2 = this.m_C__2;
      C__3 = this.m_C__3;

      % Extract inputs
      y__1 = in_1(1);
      y__2 = in_1(2);
      y__3 = in_1(3);
      y__4 = in_1(4);
      y__5 = in_1(5);
      y__1_dot = in_2(1);
      y__2_dot = in_2(2);
      y__3_dot = in_2(3);
      y__4_dot = in_2(4);
      y__5_dot = in_2(5);

      % Evaluate function
      t3 = beta * R__3;
      t5 = 0.1e1 / U__f;
      t7 = exp(t5 * (y__2 - y__3));
      out_1 = 0.1e1 / R__3 * (-C__2 * y__3_dot * R__3 + t7 * t3 - t3 - y__3);
      t12 = alpha - 1;
      t17 = R__2 * C__1;
      t28 = 0.1e1 / R__1;
      t32 = 0.1e1 / R__2 / C__1;
      out_2 = t32 * t28 * (-t7 * t12 * R__2 * beta * R__1 - t17 * y__1_dot * R__1 + t17 * y__2_dot * R__1 + (R__2 + R__1) * y__2 + R__1 * (R__2 * t12 * beta - U__b));
      t33 = alpha * beta;
      t38 = y__5_dot * R__4;
      t42 = 0.1e1 / R__4;
      t44 = 0.1e1 / C__3;
      out_3 = t44 * t42 * (y__4_dot * R__4 * C__3 + t7 * R__4 * t33 - C__3 * t38 - R__4 * t33 - U__b + y__4);
      t48 = R__1 * R__2;
      t61 = cos(200 * pi * t);
      out_4 = 0.1e1 / R__0 * t32 * t28 * t5 * (t7 * (y__2_dot * t48 * (alpha - 0.1e1) * beta * R__0 + y__3_dot * t48 * (-0.1e1 * alpha + 0.1e1) * beta * R__0) - 0.2513274123e3 * t48 * U__f * t61 + (-0.1e1 * R__0 * R__1 * U__f - 0.1e1 * R__0 * R__2 * U__f) * y__2_dot - 0.1e1 * t48 * y__1_dot * U__f);
      out_5 = 0.1e1 / R__5 * t42 * t44 * t5 * (-t7 * (y__2_dot - y__3_dot) * alpha * R__4 * R__5 * beta - (y__4_dot * R__5 + t38) * U__f);

      % Store outputs
      out_F = zeros(5, 1);
      out_F(1) = out_1;
      out_F(2) = out_2;
      out_F(3) = out_3;
      out_F(4) = out_4;
      out_F(5) = out_5;
    end % F
    %
    % - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    %
    function out_JF_x = JF_x( this, in_1, in_2, in_3, t )
      % Evaluate the Jacobian of F with respect to x.

      % Extract properties
      U__b = this.m_U__b;
      U__f = this.m_U__f;
      alpha = this.m_alpha;
      beta = this.m_beta;
      R__0 = this.m_R__0;
      R__1 = this.m_R__1;
      R__2 = this.m_R__2;
      R__3 = this.m_R__3;
      R__4 = this.m_R__4;
      R__5 = this.m_R__5;
      R__6 = this.m_R__6;
      C__1 = this.m_C__1;
      C__2 = this.m_C__2;
      C__3 = this.m_C__3;

      % Extract inputs
      y__1 = in_1(1);
      y__2 = in_1(2);
      y__3 = in_1(3);
      y__4 = in_1(4);
      y__5 = in_1(5);
      y__1_dot = in_2(1);
      y__2_dot = in_2(2);
      y__3_dot = in_2(3);
      y__4_dot = in_2(4);
      y__5_dot = in_2(5);

      % Evaluate function
      t1 = 0.1e1 / U__f;
      t5 = exp(t1 * (y__2 - y__3));
      out_1_2 = t5 * t1 * beta;
      t8 = alpha - 1;
      t13 = 0.1e1 / R__1;
      t15 = 0.1e1 / R__2;
      t16 = 0.1e1 / C__1;
      out_2_2 = t16 * t15 * t13 * (-t5 * t1 * t8 * beta * R__1 * R__2 + R__1 + R__2);
      t18 = t5 * t1;
      t19 = alpha * beta;
      t20 = 0.1e1 / C__3;
      out_3_2 = t20 * t19 * t18;
      t25 = R__1 * R__2;
      t35 = U__f ^ 2;
      t36 = 0.1e1 / t35;
      out_4_2 = 0.1e1 / R__0 * t16 * t15 * t13 * t5 * t36 * (y__2_dot * t25 * (alpha - 0.1e1) * beta * R__0 + y__3_dot * t25 * (-0.1e1 * alpha + 0.1e1) * beta * R__0);
      t47 = t20 * t5 * t36 * (y__2_dot - y__3_dot) * t19;
      out_5_2 = -t47;
      out_1_3 = 0.1e1 / R__3 * (-t18 * beta * R__3 - 1);
      out_2_3 = t16 * t18 * t8 * beta;
      out_3_3 = -out_3_2;
      out_4_3 = -out_4_2;
      out_5_3 = t47;
      out_3_4 = t20 / R__4;

      % Store outputs
      out_JF_x = zeros(5, 5);
      out_JF_x(1, 2) = out_1_2;
      out_JF_x(2, 2) = out_2_2;
      out_JF_x(3, 2) = out_3_2;
      out_JF_x(4, 2) = out_4_2;
      out_JF_x(5, 2) = out_5_2;
      out_JF_x(1, 3) = out_1_3;
      out_JF_x(2, 3) = out_2_3;
      out_JF_x(3, 3) = out_3_3;
      out_JF_x(4, 3) = out_4_3;
      out_JF_x(5, 3) = out_5_3;
      out_JF_x(3, 4) = out_3_4;
    end % JF_x
    %
    % - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    %
    function out_JF_x_dot = JF_x_dot( this, in_1, in_2, in_3, t )
      % Evaluate the Jacobian of F with respect to x_dot.

      % Extract properties
      U__b = this.m_U__b;
      U__f = this.m_U__f;
      alpha = this.m_alpha;
      beta = this.m_beta;
      R__0 = this.m_R__0;
      R__1 = this.m_R__1;
      R__2 = this.m_R__2;
      R__3 = this.m_R__3;
      R__4 = this.m_R__4;
      R__5 = this.m_R__5;
      R__6 = this.m_R__6;
      C__1 = this.m_C__1;
      C__2 = this.m_C__2;
      C__3 = this.m_C__3;

      % Extract inputs
      y__1 = in_1(1);
      y__2 = in_1(2);
      y__3 = in_1(3);
      y__4 = in_1(4);
      y__5 = in_1(5);
      y__1_dot = in_2(1);
      y__2_dot = in_2(2);
      y__3_dot = in_2(3);
      y__4_dot = in_2(4);
      y__5_dot = in_2(5);

      % Evaluate function
      out_2_1 = -1;
      t1 = 0.1e1 / C__1;
      t2 = 0.1e1 / R__0;
      out_4_1 = -0.1e1 * t2 * t1;
      out_2_2 = 1;
      t8 = R__0 * R__1;
      t10 = 0.1e1 / U__f;
      t12 = exp(t10 * (y__2 - y__3));
      out_4_2 = t2 * t1 / R__2 / R__1 * t10 * (t12 * t8 * (alpha - 0.1e1) * beta * R__2 - 0.1e1 * U__f * t8 - 0.1e1 * R__0 * R__2 * U__f);
      t27 = t12 * t10;
      t29 = 0.1e1 / C__3;
      t31 = t29 * beta * alpha * t27;
      out_5_2 = -t31;
      out_1_3 = -C__2;
      out_4_3 = t1 * t27 * (-0.1e1 * alpha + 0.1e1) * beta;
      out_5_3 = t31;
      out_3_4 = 1;
      out_5_4 = -t29 / R__4;
      out_3_5 = -1;
      out_5_5 = -0.1e1 / R__5 * t29;

      % Store outputs
      out_JF_x_dot = zeros(5, 5);
      out_JF_x_dot(2, 1) = out_2_1;
      out_JF_x_dot(4, 1) = out_4_1;
      out_JF_x_dot(2, 2) = out_2_2;
      out_JF_x_dot(4, 2) = out_4_2;
      out_JF_x_dot(5, 2) = out_5_2;
      out_JF_x_dot(1, 3) = out_1_3;
      out_JF_x_dot(4, 3) = out_4_3;
      out_JF_x_dot(5, 3) = out_5_3;
      out_JF_x_dot(3, 4) = out_3_4;
      out_JF_x_dot(5, 4) = out_5_4;
      out_JF_x_dot(3, 5) = out_3_5;
      out_JF_x_dot(5, 5) = out_5_5;
    end % JF_x_dot
    %
    % - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    %
    function out_JF_v = JF_v( this, in_1, in_2, in_3, t )
      % Evaluate the Jacobian of F with respect to v.

      % Extract properties
      U__b = this.m_U__b;
      U__f = this.m_U__f;
      alpha = this.m_alpha;
      beta = this.m_beta;
      R__0 = this.m_R__0;
      R__1 = this.m_R__1;
      R__2 = this.m_R__2;
      R__3 = this.m_R__3;
      R__4 = this.m_R__4;
      R__5 = this.m_R__5;
      R__6 = this.m_R__6;
      C__1 = this.m_C__1;
      C__2 = this.m_C__2;
      C__3 = this.m_C__3;

      % Extract inputs
      y__1 = in_1(1);
      y__2 = in_1(2);
      y__3 = in_1(3);
      y__4 = in_1(4);
      y__5 = in_1(5);
      y__1_dot = in_2(1);
      y__2_dot = in_2(2);
      y__3_dot = in_2(3);
      y__4_dot = in_2(4);
      y__5_dot = in_2(5);

      % Evaluate function
      % No body

      % Store outputs
      out_JF_v = zeros(5, 0);
    end % JF_v
    %
    % - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    %
    function out_v = v( this, in_1, t )
      % Evaluate the the veils v.

      % Extract properties
      U__b = this.m_U__b;
      U__f = this.m_U__f;
      alpha = this.m_alpha;
      beta = this.m_beta;
      R__0 = this.m_R__0;
      R__1 = this.m_R__1;
      R__2 = this.m_R__2;
      R__3 = this.m_R__3;
      R__4 = this.m_R__4;
      R__5 = this.m_R__5;
      R__6 = this.m_R__6;
      C__1 = this.m_C__1;
      C__2 = this.m_C__2;
      C__3 = this.m_C__3;

      % Extract inputs
      y__1 = in_1(1);
      y__2 = in_1(2);
      y__3 = in_1(3);
      y__4 = in_1(4);
      y__5 = in_1(5);

      % Evaluate function
      % No body

      % Store outputs
      out_v = zeros(0, 1);
    end % v
    %
    % - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    %
    function out_Jv_x = Jv_x( this, in_1, in_2, t )
      % Evaluate the Jacobian of v with respect to x.

      % Extract properties
      U__b = this.m_U__b;
      U__f = this.m_U__f;
      alpha = this.m_alpha;
      beta = this.m_beta;
      R__0 = this.m_R__0;
      R__1 = this.m_R__1;
      R__2 = this.m_R__2;
      R__3 = this.m_R__3;
      R__4 = this.m_R__4;
      R__5 = this.m_R__5;
      R__6 = this.m_R__6;
      C__1 = this.m_C__1;
      C__2 = this.m_C__2;
      C__3 = this.m_C__3;

      % Extract inputs
      y__1 = in_1(1);
      y__2 = in_1(2);
      y__3 = in_1(3);
      y__4 = in_1(4);
      y__5 = in_1(5);

      % Evaluate function
      % No body

      % Store outputs
      out_Jv_x = zeros(0, 5);
    end % Jv_x
    %
    % - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    %
    function out_h = h( this, in_1, in_2, t )
      % Calculate the residual of the invariants h.

      % Extract properties
      U__b = this.m_U__b;
      U__f = this.m_U__f;
      alpha = this.m_alpha;
      beta = this.m_beta;
      R__0 = this.m_R__0;
      R__1 = this.m_R__1;
      R__2 = this.m_R__2;
      R__3 = this.m_R__3;
      R__4 = this.m_R__4;
      R__5 = this.m_R__5;
      R__6 = this.m_R__6;
      C__1 = this.m_C__1;
      C__2 = this.m_C__2;
      C__3 = this.m_C__3;

      % Extract inputs
      y__1 = in_1(1);
      y__2 = in_1(2);
      y__3 = in_1(3);
      y__4 = in_1(4);
      y__5 = in_1(5);

      % Evaluate function
      t4 = R__0 * R__1;
      t8 = exp((y__2 - y__3) / U__f);
      t11 = R__1 * R__2;
      t14 = sin(200 * pi * t);
      out_1 = 0.1e1 / R__2 / C__1 / R__0 / R__1 * (t8 * t4 * (alpha - 0.1e1) * beta * R__2 - 0.4e0 * t14 * t11 + y__2 * (-0.1e1 * t4 - 0.1e1 * R__0 * R__2) - 0.1e1 * y__1 * t11 + ((-0.1e1 * alpha + 0.1e1) * beta * R__2 + U__b) * R__0 * R__1);
      out_2 = 0.1e1 / C__3 / R__5 / R__4 * (-R__5 * alpha * beta * R__4 * t8 - y__4 * R__5 - y__5 * R__4 + R__5 * (alpha * beta * R__4 + U__b));

      % Store outputs
      out_h = zeros(2, 1);
      out_h(1) = out_1;
      out_h(2) = out_2;
    end % h
    %
    % - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    %
    function out_Jh_x = Jh_x( this, in_1, in_2, t )
      % Calculate the Jacobian of h with respect to x.

      % Extract properties
      U__b = this.m_U__b;
      U__f = this.m_U__f;
      alpha = this.m_alpha;
      beta = this.m_beta;
      R__0 = this.m_R__0;
      R__1 = this.m_R__1;
      R__2 = this.m_R__2;
      R__3 = this.m_R__3;
      R__4 = this.m_R__4;
      R__5 = this.m_R__5;
      R__6 = this.m_R__6;
      C__1 = this.m_C__1;
      C__2 = this.m_C__2;
      C__3 = this.m_C__3;

      % Extract inputs
      y__1 = in_1(1);
      y__2 = in_1(2);
      y__3 = in_1(3);
      y__4 = in_1(4);
      y__5 = in_1(5);

      % Evaluate function
      t1 = 0.1e1 / C__1;
      t2 = 0.1e1 / R__0;
      out_1_1 = -0.1e1 * t2 * t1;
      t6 = (alpha - 0.1e1) * beta;
      t8 = R__0 * R__1;
      t9 = 0.1e1 / U__f;
      t12 = exp(t9 * (y__2 - y__3));
      t13 = t12 * t9;
      out_1_2 = t2 * t1 / R__2 / R__1 * (t13 * t8 * R__2 * t6 - 0.1e1 * t8 - 0.1e1 * R__0 * R__2);
      t26 = 0.1e1 / C__3;
      t28 = t26 * beta * alpha * t13;
      out_2_2 = -t28;
      out_1_3 = -t1 * t13 * t6;
      out_2_3 = t28;
      out_2_4 = -t26 / R__4;
      out_2_5 = -0.1e1 / R__5 * t26;

      % Store outputs
      out_Jh_x = zeros(2, 5);
      out_Jh_x(1, 1) = out_1_1;
      out_Jh_x(1, 2) = out_1_2;
      out_Jh_x(2, 2) = out_2_2;
      out_Jh_x(1, 3) = out_1_3;
      out_Jh_x(2, 3) = out_2_3;
      out_Jh_x(2, 4) = out_2_4;
      out_Jh_x(2, 5) = out_2_5;
    end % Jh_x
    %
    % - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    %
    function out_Jh_v = Jh_v( this, in_1, in_2, t )
      % Calculate the Jacobian of h with respect to v.

      % Extract properties
      U__b = this.m_U__b;
      U__f = this.m_U__f;
      alpha = this.m_alpha;
      beta = this.m_beta;
      R__0 = this.m_R__0;
      R__1 = this.m_R__1;
      R__2 = this.m_R__2;
      R__3 = this.m_R__3;
      R__4 = this.m_R__4;
      R__5 = this.m_R__5;
      R__6 = this.m_R__6;
      C__1 = this.m_C__1;
      C__2 = this.m_C__2;
      C__3 = this.m_C__3;

      % Extract inputs
      y__1 = in_1(1);
      y__2 = in_1(2);
      y__3 = in_1(3);
      y__4 = in_1(4);
      y__5 = in_1(5);

      % Evaluate function
      % No body

      % Store outputs
      out_Jh_v = zeros(2, 0);
    end % Jh_v
    %
    % - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    %
  end
end % Transistor5

% That's All Folks!
