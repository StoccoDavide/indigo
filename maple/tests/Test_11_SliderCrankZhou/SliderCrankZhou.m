% +--------------------------------------------------------------------------+
% | 'Indigo' module version 1.0 - BSD 3-Clause License - Copyright (c) 2023  |
% | Current version authors:                                                 |
% |   Davide Stocco and Enrico Bertolazzi.                                   |
% +--------------------------------------------------------------------------+

% Matlab generated code for implicit system: SliderCrankZhou
% This file has been automatically generated by Indigo.
% DISCLAIMER: If you need to edit it, do it wisely!

classdef SliderCrankZhou < Indigo.Systems.Implicit
  %
  % No class description provided.
  %
  properties (SetAccess = protected, Hidden = true)
    % User data
    m_l__1 = 1.0;
    m_l__2 = 2.0;
    m_m__1 = 1.0;
    m_m__2 = 1.0;
    m_m__3 = 2.0;
    m_g = 9.8;
    m_J__1 = 4.5;
    m_J__2 = 5.5;
  end
  %
  methods
    %
    % - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    %
    function this = SliderCrankZhou( varargin )
      % Class constructor.

      % Superclass constructor
      num_eqns = 5;
      num_veil = 0;
      num_invs = 3;
      this = this@Indigo.Systems.Implicit('SliderCrankZhou', num_eqns, num_veil, num_invs);

      % User data
      if (nargin == 0)
        % Keep default values
      elseif (nargin == 1 && isstruct(varargin{1}))
        this.m_l__1 = varargin{1}.l__1;
        this.m_l__2 = varargin{1}.l__2;
        this.m_m__1 = varargin{1}.m__1;
        this.m_m__2 = varargin{1}.m__2;
        this.m_m__3 = varargin{1}.m__3;
        this.m_g = varargin{1}.g;
        this.m_J__1 = varargin{1}.J__1;
        this.m_J__2 = varargin{1}.J__2;
      elseif (nargin == 8)
        this.m_l__1 = varargin{1};
        this.m_l__2 = varargin{2};
        this.m_m__1 = varargin{3};
        this.m_m__2 = varargin{4};
        this.m_m__3 = varargin{5};
        this.m_g = varargin{6};
        this.m_J__1 = varargin{7};
        this.m_J__2 = varargin{8};
      else
        error('wrong number of input arguments.');
      end
    end % SliderCrankZhou
    %
    % - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    %
    function out_F = F( this, in_1, in_2, in_3, t )
      % Evaluate the function F.

      % Extract properties
      l__1 = this.m_l__1;
      l__2 = this.m_l__2;
      m__1 = this.m_m__1;
      m__2 = this.m_m__2;
      m__3 = this.m_m__3;
      g = this.m_g;
      J__1 = this.m_J__1;
      J__2 = this.m_J__2;

      % Extract inputs
      theta__1 = in_1(1);
      theta__2 = in_1(2);
      omega__1 = in_1(3);
      omega__2 = in_1(4);
      lambda = in_1(5);
      theta__1_dot = in_2(1);
      theta__2_dot = in_2(2);
      omega__1_dot = in_2(3);
      omega__2_dot = in_2(4);
      lambda_dot = in_2(5);

      % Evaluate function
      out_1 = -omega__1 + theta__1_dot;
      out_2 = -omega__2 + theta__2_dot;
      t1 = l__2 ^ 2;
      t2 = m__2 * t1;
      t3 = cos(theta__1);
      t4 = t3 ^ 2;
      t5 = l__1 ^ 2;
      t7 = m__2 * t5 * t4;
      t8 = m__1 * t5;
      t10 = m__2 * t5;
      t11 = 8 * J__1;
      t12 = t7 + 2 * t8 - t10 + t11;
      t13 = cos(theta__2);
      t14 = t13 ^ 2;
      t19 = t10 * t4 * J__2;
      t20 = 16 * t19;
      t21 = m__1 * t1;
      t30 = t8 / 4;
      t31 = t30 + J__1;
      t35 = sin(theta__1);
      t36 = 0.1e1 / t35;
      t38 = sin(theta__2);
      t39 = 0.1e1 / t38;
      t41 = 0.1e1 / l__1;
      t44 = 0.1e1 / m__2;
      t49 = omega__2 ^ 2;
      t56 = 2 * lambda;
      t57 = g * m__2 + t56;
      t64 = g * m__1 - t56;
      t67 = omega__1 ^ 2;
      t68 = t31 * t67;
      t70 = t35 * t64 * l__1 - 2 * t68;
      t72 = t38 * l__1;
      t73 = m__2 * t72;
      out_3 = omega__2_dot * t44 / l__2 * t41 * t39 * t36 * (4 * t14 * t12 * t2 + t20 + m__2 * (t5 * (-9 * t21 - 16 * J__2) - 36 * t1 * J__1) - 16 * J__2 * t31) / 6 - t39 * t36 * t44 * t41 * (t13 * (2 * t38 * t12 * m__2 * l__2 * t49 - 4 * (t7 - t30 - t10 - J__1) * t57) - 6 * t73 * t70 * t3) / 3;
      t82 = l__1 * t3;
      t87 = t7 + t5 * (2 * m__1 - m__2) + t11;
      t90 = l__1 * t35 * t67;
      t93 = m__1 / 4;
      t94 = -t93 - m__2;
      t104 = t13 * l__1;
      t105 = t104 * t2;
      t111 = m__2 * t21;
      t115 = J__2 * (m__1 + 4 * m__2);
      t117 = -0.9e1 / 0.16e2 * t111 - t115 / 4;
      t120 = 0.9e1 / 0.4e1 * t2 + J__2;
      t121 = t120 * J__1;
      t127 = t14 * t87 * t2;
      out_4 = -omega__1_dot * t82 - 0.1e1 / (4 * t127 + t20 + t5 * (-9 * t111 - 4 * t115) - 16 * t121) * (8 * t14 * t1 * (-t90 * t87 * m__2 / 2 + t57 * (t5 * t94 - J__1 + t7)) + 12 * t105 * t3 * t38 * t70 - 16 * (t5 * t117 - t121 + t19) * (-l__2 * t38 * t49 + t90));
      t137 = m__2 * l__2;
      t141 = -4 * lambda + g * (m__1 - m__2);
      t142 = l__1 * t141;
      t143 = t35 * t3;
      t150 = l__1 * m__2;
      t151 = t14 * t13;
      t152 = t151 * t150;
      t156 = 2 * t35 * t68;
      t157 = t4 * t142 - t142 + t156;
      t165 = -3 * lambda + g * (m__1 - m__2 / 2);
      t169 = t49 * J__2;
      t179 = t5 * (t93 - m__2 / 8) + J__1;
      t182 = t35 * l__1 * t165 - 2 * t67 * t179;
      t187 = t35 * l__1 * t169 + t38 * t182 * l__2;
      t194 = -t5 * t94 + J__1;
      t195 = t194 * t57;
      t196 = l__2 * t3;
      t202 = -t5 * t117 + t121;
      t203 = t49 * t202;
      t210 = t2 / 4 + J__2;
      t211 = t210 * t49;
      t216 = l__1 * (l__2 * t141 + 2 * t38 * t211);
      t222 = t4 * t216 - 2 * t72 * t211 - l__2 * (-t156 + t142);
      t225 = t13 * t150;
      t234 = t120 * l__1;
      t238 = l__1 * t169;
      t248 = t67 * t202;
      t250 = t35 * t64 * t234 - 2 * t248;
      t256 = (2 * t35 * t137 * t238 + t38 * t250) * l__1;
      t262 = 0.1e1 / t3;
      t269 = t127 + 4 * t19 + t5 * (-0.9e1 / 0.4e1 * t111 - t115) - 4 * t121;
      t270 = 0.1e1 / t269;
      t274 = t1 * t3 * t157;
      t284 = l__2 * (4 * l__1 * t67 * m__2 * t179 + t35 * t195);
      t289 = (t4 * t187 * t150 + t38 * t284 / 2 - t35 * t203) * l__2;
      t293 = l__2 * t222 * t3;
      t304 = t152 * t274 - 0.4e1 / 0.3e1 * t14 * t289 - t225 * t293 + 0.2e1 / 0.3e1 * t4 * t256 + 0.4e1 / 0.3e1 * (l__1 * t38 * t67 - l__2 * t35 * t49) * t202;
      t305 = t304 * t137;
      t310 = t269 ^ 2;
      t311 = 0.1e1 / t310;
      t313 = m__2 ^ 2;
      t334 = l__2 * t150;
      t344 = t38 * t13;
      t378 = t143 * t31 * omega__1;
      t383 = omega__1 * t179;
      t396 = t202 * l__1;
      t397 = t38 * omega__1;
      t405 = t270 * t262;
      t413 = omega__2 * t202;
      t420 = t210 * omega__2;
      t443 = t4 * l__1;
      t451 = t4 * t38 * t35;
      out_5 = theta__1_dot * (18 * t270 * t262 * (t152 * t1 * t3 * (-2 * t143 * t142 + 2 * t3 * t68) - t152 * t1 * t35 * t157 - 0.4e1 / 0.3e1 * t14 * (t4 * (t38 * t82 * t165 * l__2 + t82 * t169) * t150 - 2 * t35 * t3 * t187 * t150 + t38 * t196 * t195 / 2 - t3 * t203) * l__2 + t225 * l__2 * t222 * t35 - t225 * l__2 * (-2 * t143 * t216 + 2 * t196 * t68) * t3 + 0.2e1 / 0.3e1 * t4 * (t38 * t3 * t64 * t234 + 2 * t3 * t137 * t238) * l__1 - 0.4e1 / 0.3e1 * t143 * t256 - 0.4e1 / 0.3e1 * t196 * t203) * t137 + 18 * t35 * t270 / t4 * t305 - 18 * (-2 * t14 * t35 * t5 * t3 * t313 * t1 - 8 * t35 * t10 * t3 * J__2) * t311 * t262 * t305) + theta__2_dot * (18 * t270 * t262 * (-3 * t38 * t14 * t150 * t274 - 0.4e1 / 0.3e1 * t14 * (t4 * t13 * t182 * t334 + t13 * t284 / 2) * l__2 + 0.8e1 / 0.3e1 * t344 * t289 - t225 * l__2 * (2 * t4 * t104 * t211 - 2 * t104 * t211) * t3 + t73 * t293 + 0.2e1 / 0.3e1 * t4 * t13 * t250 * l__1 + 0.4e1 / 0.3e1 * t104 * t248) * t137 + 36 * t344 * t87 * t311 * t262 * t304 * t313 * t1 * l__2) + 18 * omega__1_dot * t405 * (4 * t151 * l__1 * t2 * t378 - 0.4e1 / 0.3e1 * t14 * (-4 * t4 * t38 * t383 * t334 + 4 * t38 * t383 * t334) * l__2 - 4 * t105 * t378 - 0.8e1 / 0.3e1 * t4 * t397 * t396 + 0.8e1 / 0.3e1 * t397 * t396) * t137 + 18 * omega__2_dot * t405 * (-0.4e1 / 0.3e1 * t14 * (2 * t4 * t35 * omega__2 * J__2 * t10 - 2 * t35 * t413) * l__2 - t225 * l__2 * (4 * t4 * t72 * t420 - 4 * t72 * t420) * t3 + 0.8e1 / 0.3e1 * t4 * t35 * t137 * omega__2 * J__2 * t5 - 0.8e1 / 0.3e1 * l__2 * t35 * t413) * t137 + 18 * lambda_dot * t405 * (t152 * t1 * t3 * (-4 * t443 + 4 * l__1) - 0.4e1 / 0.3e1 * t14 * (t38 * l__2 * t35 * t194 - 3 * t451 * l__2 * t10) * l__2 - t225 * l__2 * (4 * l__2 * l__1 - 4 * l__2 * t443) * t3 - 0.4e1 / 0.3e1 * t451 * t120 * t5) * t137;

      % Store outputs
      out_F = zeros(5, 1);
      out_F(1) = out_1;
      out_F(2) = out_2;
      out_F(3) = out_3;
      out_F(4) = out_4;
      out_F(5) = out_5;
    end % F
    %
    % - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    %
    function out_JF_x = JF_x( this, in_1, in_2, in_3, t )
      % Evaluate the Jacobian of F with respect to x.

      % Extract properties
      l__1 = this.m_l__1;
      l__2 = this.m_l__2;
      m__1 = this.m_m__1;
      m__2 = this.m_m__2;
      m__3 = this.m_m__3;
      g = this.m_g;
      J__1 = this.m_J__1;
      J__2 = this.m_J__2;

      % Extract inputs
      theta__1 = in_1(1);
      theta__2 = in_1(2);
      omega__1 = in_1(3);
      omega__2 = in_1(4);
      lambda = in_1(5);
      theta__1_dot = in_2(1);
      theta__2_dot = in_2(2);
      omega__1_dot = in_2(3);
      omega__2_dot = in_2(4);
      lambda_dot = in_2(5);

      % Evaluate function
      t1 = l__2 ^ 2;
      t2 = m__2 ^ 2;
      t3 = t2 * t1;
      t4 = cos(theta__1);
      t6 = l__1 ^ 2;
      t7 = sin(theta__1);
      t8 = t7 * t6;
      t9 = cos(theta__2);
      t10 = t9 ^ 2;
      t12 = t10 * t8 * t4 * t3;
      t15 = m__2 * t6;
      t16 = t7 * t15;
      t17 = t16 * t4 * J__2;
      t19 = -8 * t12 - 32 * t17;
      t20 = 0.1e1 / t7;
      t22 = sin(theta__2);
      t23 = 0.1e1 / t22;
      t25 = 0.1e1 / l__1;
      t26 = 0.1e1 / l__2;
      t28 = 0.1e1 / m__2;
      t33 = m__2 * t1;
      t34 = t4 ^ 2;
      t35 = t6 * t34;
      t36 = m__2 * t35;
      t37 = m__1 * t6;
      t38 = 2 * t37;
      t39 = 8 * J__1;
      t40 = t36 + t38 - t15 + t39;
      t45 = t15 * t34 * J__2;
      t46 = 16 * t45;
      t47 = m__1 * t1;
      t56 = t37 / 4;
      t57 = t56 + J__1;
      t60 = 4 * t10 * t40 * t33 + t46 + m__2 * (t6 * (-9 * t47 - 16 * J__2) - 36 * t1 * J__1) - 16 * J__2 * t57;
      t61 = t7 ^ 2;
      t62 = 0.1e1 / t61;
      t66 = t28 * t26;
      t71 = omega__2 ^ 2;
      t72 = l__2 * t71;
      t75 = t22 * t7;
      t80 = 2 * lambda;
      t81 = g * m__2 + t80;
      t83 = t16 * t4 * t81;
      t88 = g * m__1 - t80;
      t91 = omega__1 ^ 2;
      t92 = t57 * t91;
      t94 = t7 * t88 * l__1 - 2 * t92;
      t96 = t22 * l__1;
      t97 = m__2 * t96;
      t107 = t23 * t20 * t28;
      t110 = t40 * m__2;
      t117 = 2 * t22 * t110 * t72 - 4 * (t36 - t56 - t15 - J__1) * t81;
      t119 = t94 * t4;
      t124 = t28 * t25 * (t9 * t117 - 6 * t97 * t119);
      out_3_1 = omega__2_dot * t28 * t26 * t25 * t23 * t20 * t19 / 6 - t4 * omega__2_dot * t66 * t25 * t23 * t62 * t60 / 6 - t107 * t25 * (t9 * (-4 * t75 * t6 * t4 * t2 * t72 + 8 * t83) + 6 * t97 * t94 * t7 - 6 * m__2 * t22 * t88 * t35) / 3 + t4 * t23 * t62 * t124 / 3;
      t129 = l__1 * t7;
      t139 = t36 + t6 * (2 * m__1 - m__2) + t39;
      t140 = t139 * m__2;
      t141 = l__1 * t91;
      t153 = t9 * m__2;
      t157 = t22 * t94;
      t159 = t9 * l__1;
      t160 = t159 * t33;
      t164 = m__2 * t47;
      t168 = J__2 * (m__1 + 4 * m__2);
      t170 = -0.9e1 / 0.16e2 * t164 - t168 / 4;
      t173 = 0.9e1 / 0.4e1 * t33 + J__2;
      t174 = t173 * J__1;
      t175 = t6 * t170 - t174 + t45;
      t176 = t175 * l__1;
      t180 = l__1 * t7 * t91;
      t183 = -l__2 * t22 * t71 + t180;
      t189 = t10 * t139;
      t190 = t189 * t33;
      t197 = 4 * t190 + t46 + t6 * (-9 * t164 - 4 * t168) - 16 * t174;
      t198 = 0.1e1 / t197;
      t202 = m__1 / 4;
      t203 = -t202 - m__2;
      t205 = t6 * t203 - J__1 + t36;
      t208 = t1 * (-t180 * t140 / 2 + t81 * t205);
      t217 = t197 ^ 2;
      t219 = 0.1e1 / t217 * (12 * t160 * t4 * t157 + 8 * t10 * t208 - 16 * t175 * t183);
      out_4_1 = omega__1_dot * t129 - t198 * (8 * t10 * t1 * (t91 * t61 * t6 * l__1 * t4 * t2 - t4 * t141 * t140 / 2 - 2 * t83) + 12 * t153 * t1 * t22 * t34 * t88 * t6 - 12 * t160 * t7 * t157 - 16 * t176 * t4 * t91 + 32 * t16 * t4 * J__2 * t183) + t19 * t219;
      t221 = m__2 * l__2;
      t225 = -4 * lambda + g * (m__1 - m__2);
      t226 = l__1 * t225;
      t228 = t34 * t226;
      t229 = t7 * t92;
      t234 = l__1 * m__2;
      t235 = t10 * t9;
      t236 = t235 * t234;
      t238 = t7 * t4;
      t242 = -2 * t226 * t238 + 2 * t4 * t92;
      t247 = 2 * t229;
      t248 = t228 + t247 - t226;
      t250 = t1 * t4 * t248;
      t251 = t236 * t250;
      t256 = -3 * lambda + g * (m__1 - m__2 / 2);
      t257 = t256 * l__2;
      t260 = t71 * J__2;
      t261 = t129 * t260;
      t265 = t4 * l__1;
      t269 = t22 * t257 * t265 + t260 * t265;
      t279 = t6 * (t202 - m__2 / 8) + J__1;
      t282 = l__1 * t256 * t7 - 2 * t279 * t91;
      t285 = l__2 * t22 * t282 + t261;
      t290 = t34 * t285 * t234;
      t294 = -t203 * t6 + J__1;
      t295 = t294 * t81;
      t296 = l__2 * t7;
      t302 = -t170 * t6 + t174;
      t303 = t71 * t302;
      t304 = t7 * t303;
      t310 = t33 / 4 + J__2;
      t311 = t310 * t71;
      t316 = l__1 * (l__2 * t225 + 2 * t22 * t311);
      t317 = t34 * t316;
      t318 = t96 * t311;
      t322 = t317 - 2 * t318 - l__2 * (-t247 + t226);
      t324 = l__2 * t322 * t4;
      t325 = t9 * t234;
      t326 = t325 * t324;
      t328 = l__2 * t4;
      t331 = -2 * t238 * t316 + 2 * t328 * t92;
      t343 = t173 * l__1;
      t344 = t7 * t88;
      t347 = l__1 * t260;
      t350 = 2 * t7 * t221 * t347;
      t362 = (t22 * t343 * t4 * t88 + 2 * t221 * t347 * t4) * l__1;
      t366 = t91 * t302;
      t368 = t343 * t344 - 2 * t366;
      t371 = (t22 * t368 + t350) * l__1;
      t374 = t34 * t371;
      t378 = t236 * t1 * t4 * (2 * t226 * t61 - 2 * t228 - 2 * t229) - 2 * t236 * t1 * t7 * t242 - t251 - 0.4e1 / 0.3e1 * t10 * (t34 * (-t129 * t22 * t257 - t261) * t234 - 4 * t7 * t4 * t269 * t234 + 2 * t61 * t285 * t234 - 2 * t290 - t22 * t296 * t295 / 2 + t304) * l__2 + t326 + 2 * t325 * l__2 * t331 * t7 - t325 * l__2 * (-2 * t296 * t92 + 2 * t316 * t61 - 2 * t317) * t4 + 0.2e1 / 0.3e1 * t34 * (-t22 * t343 * t344 - t350) * l__1 - 0.8e1 / 0.3e1 * t238 * t362 + 0.4e1 / 0.3e1 * t61 * t371 - 0.4e1 / 0.3e1 * t374 + 0.4e1 / 0.3e1 * t296 * t303;
      t379 = 0.1e1 / t4;
      t386 = t190 + 4 * t45 + t6 * (-0.9e1 / 0.4e1 * t164 - t168) - 4 * t174;
      t387 = 0.1e1 / t386;
      t392 = t1 * t4 * t242;
      t395 = t1 * t7 * t248;
      t408 = (t34 * t269 * t234 - 2 * t7 * t4 * t285 * t234 + t22 * t328 * t295 / 2 - t4 * t303) * l__2;
      t412 = l__2 * t322 * t7;
      t415 = l__2 * t331 * t4;
      t423 = t236 * t392 - t236 * t395 - 0.4e1 / 0.3e1 * t10 * t408 + t325 * t412 - t325 * t415 + 0.2e1 / 0.3e1 * t34 * t362 - 0.4e1 / 0.3e1 * t238 * t371 - 0.4e1 / 0.3e1 * t328 * t303;
      t424 = t423 * t221;
      t425 = 0.1e1 / t34;
      t426 = t387 * t425;
      t427 = t7 * t426;
      t430 = t386 ^ 2;
      t431 = 0.1e1 / t430;
      t432 = t431 * t379;
      t435 = -2 * t12 - 8 * t17;
      t436 = t435 * t432;
      t444 = l__2 * (4 * m__2 * t141 * t279 + t295 * t7);
      t446 = t22 * t444 / 2;
      t448 = (t290 + t446 - t304) * l__2;
      t449 = t10 * t448;
      t459 = t251 - 0.4e1 / 0.3e1 * t449 - t326 + 0.2e1 / 0.3e1 * t374 + 0.4e1 / 0.3e1 * (l__1 * t22 * t91 - l__2 * t7 * t71) * t302;
      t460 = t459 * t221;
      t461 = t34 * t4;
      t472 = t379 * t459;
      t477 = 0.1e1 / t430 / t386;
      t479 = t435 ^ 2;
      t503 = t22 * t10 * t234;
      t508 = l__2 * t15;
      t512 = l__2 * t234;
      t513 = t9 * t282;
      t524 = t22 * t9;
      t527 = t34 * t159;
      t531 = -2 * t159 * t311 + 2 * t311 * t527;
      t543 = t173 * t6;
      t548 = t368 * l__1;
      t565 = (t34 * t513 * t512 + t9 * t444 / 2) * l__2;
      t571 = l__2 * t531 * t4;
      t574 = t34 * t9;
      t579 = -3 * t503 * t250 - 0.4e1 / 0.3e1 * t10 * t565 + 0.8e1 / 0.3e1 * t524 * t448 - t325 * t571 + t97 * t324 + 0.2e1 / 0.3e1 * t574 * t548 + 0.4e1 / 0.3e1 * t159 * t366;
      t580 = t579 * t221;
      t585 = t1 * l__2;
      t586 = t2 * t585;
      t589 = t139 * t431;
      t590 = t524 * t589;
      t605 = t2 * m__2;
      t612 = 18 * t387 * t379 * (-3 * t503 * t392 + 3 * t503 * t395 - 0.4e1 / 0.3e1 * t10 * (t9 * t461 * t256 * t508 - 2 * t238 * t513 * t512 + t9 * t328 * t295 / 2) * l__2 + 0.8e1 / 0.3e1 * t524 * t408 + t325 * l__2 * t531 * t7 + 4 * t221 * t8 * t10 * t310 * t71 * t34 - t97 * t412 + t97 * t415 + 0.2e1 / 0.3e1 * t9 * t461 * t88 * t543 - 0.4e1 / 0.3e1 * t7 * t4 * t9 * t548) * t221 + 18 * t427 * t580 - 18 * t436 * t580 + 36 * t590 * t379 * t423 * t586 + 36 * t7 * t524 * t589 * t425 * t459 * t586 - 72 * t435 * t524 * t139 * t477 * t472 * t586 - 72 * t524 * t8 * t431 * t459 * t605 * t585;
      t614 = t57 * omega__1;
      t615 = t34 * t614;
      t617 = t235 * l__1 * t33;
      t620 = t61 * t614;
      t625 = t22 * omega__1;
      t634 = t302 * l__1;
      t636 = t4 * t22;
      t640 = 4 * t617 * t615 - 4 * t617 * t620 - 0.32e2 / 0.3e1 * t10 * t238 * t625 * t279 * l__1 * t33 - 4 * t160 * t615 + 4 * t160 * t620 + 0.16e2 / 0.3e1 * t7 * t636 * omega__1 * t634;
      t642 = t387 * t379;
      t643 = omega__1_dot * t642;
      t646 = t238 * t614;
      t649 = omega__1 * t279;
      t650 = t34 * t22;
      t657 = (4 * t22 * t512 * t649 - 4 * t512 * t649 * t650) * l__2;
      t667 = 4 * t617 * t646 - 0.4e1 / 0.3e1 * t10 * t657 - 4 * t160 * t646 - 0.8e1 / 0.3e1 * t34 * t625 * t634 + 0.8e1 / 0.3e1 * t625 * t634;
      t668 = t667 * t221;
      t681 = J__2 * t15;
      t686 = omega__2 * t302;
      t693 = t310 * omega__2;
      t694 = t34 * t96;
      t698 = 4 * t693 * t694 - 4 * t693 * t96;
      t703 = t22 * t310;
      t709 = J__2 * t6;
      t710 = omega__2 * t709;
      t720 = -0.4e1 / 0.3e1 * t10 * (2 * J__2 * t15 * t461 * omega__2 - 4 * t4 * t61 * t681 * omega__2 - 2 * t4 * t686) * l__2 + t325 * l__2 * t698 * t7 + 8 * t9 * t221 * t8 * t703 * omega__2 * t34 + 0.8e1 / 0.3e1 * t461 * t221 * t710 - 0.16e2 / 0.3e1 * t4 * t61 * t221 * t710 - 0.8e1 / 0.3e1 * t328 * t686;
      t722 = omega__2_dot * t642;
      t731 = (2 * t34 * t681 * t7 * omega__2 - 2 * t686 * t7) * l__2;
      t735 = l__2 * t698 * t4;
      t743 = -0.4e1 / 0.3e1 * t10 * t731 - t325 * t735 + 0.8e1 / 0.3e1 * t34 * t7 * t221 * t710 - 0.8e1 / 0.3e1 * t296 * t686;
      t744 = t743 * t221;
      t757 = t34 * l__1;
      t759 = -4 * t757 + 4 * l__1;
      t768 = t4 * t22 * t61;
      t772 = t22 * l__2;
      t781 = 4 * l__2 * l__1 - 4 * l__2 * t757;
      t786 = m__2 * t7;
      t795 = 8 * t235 * t33 * t7 * t35 - t236 * t1 * t7 * t759 - 0.4e1 / 0.3e1 * t10 * (-3 * l__2 * t15 * t22 * t461 + t294 * t4 * t772 + 6 * t508 * t768) * l__2 + t325 * l__2 * t781 * t7 - 8 * t9 * t786 * t1 * t35 - 0.4e1 / 0.3e1 * t22 * t461 * t543 + 0.8e1 / 0.3e1 * t768 * t543;
      t797 = lambda_dot * t642;
      t801 = t1 * t4 * t759;
      t803 = t34 * t75;
      t806 = t7 * t294;
      t809 = (-3 * t508 * t803 + t772 * t806) * l__2;
      t813 = l__2 * t781 * t4;
      t817 = t236 * t801 - 0.4e1 / 0.3e1 * t10 * t809 - t325 * t813 - 0.4e1 / 0.3e1 * t803 * t543;
      t818 = t817 * t221;
      out_5_1 = theta__1_dot * (18 * t387 * t379 * t378 * t221 + 36 * t427 * t424 - 36 * t436 * t424 + 36 * t61 * t387 / t461 * t460 - 36 * t435 * t7 * t431 * t425 * t460 + 18 * t387 * t472 * t221 + 36 * t479 * t477 * t379 * t460 - 18 * (-2 * t1 * t10 * t2 * t34 * t6 + 2 * t10 * t3 * t6 * t61 + 8 * J__2 * t15 * t61 - 8 * t45) * t432 * t460) + theta__2_dot * t612 + 18 * t643 * t640 * t221 + 18 * t7 * omega__1_dot * t426 * t668 - 18 * t435 * omega__1_dot * t432 * t668 + 18 * t722 * t720 * t221 + 18 * t7 * omega__2_dot * t426 * t744 - 18 * t435 * omega__2_dot * t432 * t744 + 18 * t797 * t795 * t221 + 18 * t7 * lambda_dot * t426 * t818 - 18 * t435 * lambda_dot * t432 * t818;
      t834 = t22 ^ 2;
      t835 = 0.1e1 / t834;
      out_3_2 = -0.4e1 / 0.3e1 * omega__2_dot * t25 * t20 * t9 * t40 * l__2 - t9 * omega__2_dot * t66 * t25 * t835 * t20 * t60 / 6 - t107 * t25 * (2 * t10 * t110 * t72 - t117 * t22 - 6 * t119 * t325) / 3 + t9 * t835 * t20 * t124 / 3;
      t860 = l__1 * t33;
      t868 = t175 * l__2;
      out_4_2 = -t198 * (12 * t10 * t4 * t860 * t94 - 12 * t4 * t834 * t860 * t94 + 16 * t71 * t868 * t9 - 16 * t208 * t524) - 8 * t524 * t140 * t1 * t219;
      t907 = 6 * t834 * t9 * t234 * t250 - 3 * t251 - 0.4e1 / 0.3e1 * t10 * (-t22 * t282 * t34 * t512 - t446) * l__2 + 0.16e2 / 0.3e1 * t524 * t565 - 0.8e1 / 0.3e1 * t834 * t448 + 0.8e1 / 0.3e1 * t449 - t325 * l__2 * (-2 * t311 * t694 + 2 * t318) * t4 + 2 * t97 * t571 + t326 - 0.2e1 / 0.3e1 * t650 * t548 - 0.4e1 / 0.3e1 * t96 * t366;
      t916 = t1 ^ 2;
      t920 = t139 ^ 2;
      t926 = t459 * t586;
      t955 = t9 * omega__1;
      t961 = -12 * t22 * t10 * l__1 * t33 * t646 - 0.4e1 / 0.3e1 * t10 * (-4 * t512 * t574 * t649 + 4 * t512 * t649 * t9) * l__2 + 0.8e1 / 0.3e1 * t524 * t657 + 4 * t96 * t33 * t646 - 0.8e1 / 0.3e1 * t34 * t955 * t634 + 0.8e1 / 0.3e1 * t955 * t634;
      t966 = t379 * t667 * t586;
      t969 = t22 * t9 * t139;
      t983 = 0.8e1 / 0.3e1 * t524 * t731 - t325 * l__2 * (-4 * t159 * t693 + 4 * t527 * t693) * t4 + t97 * t735;
      t988 = t379 * t743 * t586;
      t996 = t34 * t9 * t7;
      t1010 = -3 * t503 * t801 - 0.4e1 / 0.3e1 * t10 * (l__2 * t806 * t9 - 3 * t508 * t996) * l__2 + 0.8e1 / 0.3e1 * t524 * t809 + t97 * t813 - 0.4e1 / 0.3e1 * t996 * t543;
      t1015 = t379 * t817 * t586;
      out_5_2 = theta__1_dot * t612 + theta__2_dot * (144 * l__2 * t10 * t472 * t477 * t605 * t834 * t916 * t920 - 36 * t139 * t432 * t834 * t926 + 18 * t221 * t379 * t387 * t907 + 72 * t379 * t579 * t586 * t590 + 36 * t189 * t432 * t926) + 18 * t643 * t961 * t221 + 36 * t969 * omega__1_dot * t431 * t966 + 18 * t722 * t983 * t221 + 36 * t969 * omega__2_dot * t431 * t988 + 18 * t797 * t1010 * t221 + 36 * t969 * lambda_dot * t431 * t1015;
      out_1_3 = -1;
      out_3_3 = -8 * t20 * t57 * omega__1 * t4;
      out_4_3 = -t198 * (-8 * t1 * t10 * t129 * t140 * omega__1 - 48 * t160 * t614 * t636 - 32 * t176 * t7 * omega__1);
      t1054 = t4 * t7 * t57;
      out_5_3 = theta__1_dot * (18 * t221 * t379 * t387 * t640 + 18 * t427 * t668 - 18 * t436 * t668) + theta__2_dot * (18 * t221 * t379 * t387 * t961 + 36 * t590 * t966) + 18 * t643 * (4 * t617 * t1054 - 0.4e1 / 0.3e1 * t10 * (4 * l__2 * t22 * t234 * t279 - 4 * t22 * t279 * t34 * t512) * l__2 - 4 * t160 * t1054 - 0.8e1 / 0.3e1 * t650 * t634 + 0.8e1 / 0.3e1 * t22 * t634) * t221;
      out_2_4 = -1;
      out_3_4 = -0.4e1 / 0.3e1 * t20 * t25 * t9 * t40 * l__2 * omega__2;
      out_4_4 = -32 * t198 * t868 * t22 * omega__2;
      t1107 = t7 * t302;
      out_5_4 = theta__1_dot * (18 * t221 * t379 * t387 * t720 + 18 * t427 * t744 - 18 * t436 * t744) + theta__2_dot * (18 * t221 * t379 * t387 * t983 + 36 * t590 * t988) + 18 * t722 * (-0.4e1 / 0.3e1 * t10 * (2 * J__2 * t15 * t34 * t7 - 2 * t1107) * l__2 - t325 * l__2 * (-4 * l__1 * t703 + 4 * t703 * t757) * t4 + 0.8e1 / 0.3e1 * t34 * t786 * l__2 * t709 - 0.8e1 / 0.3e1 * l__2 * t1107) * t221;
      out_3_5 = -t107 * t25 * (t9 * (-8 * t36 + t38 + 8 * t15 + t39) + 12 * m__2 * t22 * t6 * t238) / 3;
      out_4_5 = -t198 * (-24 * t1 * t153 * t22 * t4 * t8 + 16 * t1 * t10 * t205);
      out_5_5 = theta__1_dot * (18 * t221 * t379 * t387 * t795 + 18 * t427 * t818 - 18 * t436 * t818) + theta__2_dot * (18 * t1010 * t221 * t379 * t387 + 36 * t1015 * t590);

      % Store outputs
      out_JF_x = zeros(5, 5);
      out_JF_x(3, 1) = out_3_1;
      out_JF_x(4, 1) = out_4_1;
      out_JF_x(5, 1) = out_5_1;
      out_JF_x(3, 2) = out_3_2;
      out_JF_x(4, 2) = out_4_2;
      out_JF_x(5, 2) = out_5_2;
      out_JF_x(1, 3) = out_1_3;
      out_JF_x(3, 3) = out_3_3;
      out_JF_x(4, 3) = out_4_3;
      out_JF_x(5, 3) = out_5_3;
      out_JF_x(2, 4) = out_2_4;
      out_JF_x(3, 4) = out_3_4;
      out_JF_x(4, 4) = out_4_4;
      out_JF_x(5, 4) = out_5_4;
      out_JF_x(3, 5) = out_3_5;
      out_JF_x(4, 5) = out_4_5;
      out_JF_x(5, 5) = out_5_5;
    end % JF_x
    %
    % - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    %
    function out_JF_x_dot = JF_x_dot( this, in_1, in_2, in_3, t )
      % Evaluate the Jacobian of F with respect to x_dot.

      % Extract properties
      l__1 = this.m_l__1;
      l__2 = this.m_l__2;
      m__1 = this.m_m__1;
      m__2 = this.m_m__2;
      m__3 = this.m_m__3;
      g = this.m_g;
      J__1 = this.m_J__1;
      J__2 = this.m_J__2;

      % Extract inputs
      theta__1 = in_1(1);
      theta__2 = in_1(2);
      omega__1 = in_1(3);
      omega__2 = in_1(4);
      lambda = in_1(5);
      theta__1_dot = in_2(1);
      theta__2_dot = in_2(2);
      omega__1_dot = in_2(3);
      omega__2_dot = in_2(4);
      lambda_dot = in_2(5);

      % Evaluate function
      out_1_1 = 1;
      t1 = m__2 * l__2;
      t5 = -4 * lambda + g * (m__1 - m__2);
      t6 = l__1 * t5;
      t7 = cos(theta__1);
      t8 = sin(theta__1);
      t9 = t8 * t7;
      t11 = omega__1 ^ 2;
      t12 = l__1 ^ 2;
      t13 = m__1 * t12;
      t15 = t13 / 4 + J__1;
      t16 = t15 * t11;
      t21 = l__2 ^ 2;
      t23 = l__1 * m__2;
      t24 = cos(theta__2);
      t25 = t24 ^ 2;
      t26 = t25 * t24;
      t27 = t26 * t23;
      t29 = t7 ^ 2;
      t32 = 2 * t8 * t16;
      t33 = t29 * t6 + t32 - t6;
      t41 = -3 * lambda + g * (m__1 - m__2 / 2);
      t43 = l__1 * t7;
      t44 = sin(theta__2);
      t47 = omega__2 ^ 2;
      t48 = t47 * J__2;
      t55 = m__1 / 4;
      t59 = t12 * (t55 - m__2 / 8) + J__1;
      t62 = t8 * l__1 * t41 - 2 * t11 * t59;
      t67 = t8 * l__1 * t48 + t44 * t62 * l__2;
      t73 = 2 * lambda;
      t77 = t12 * (t55 + m__2) + J__1;
      t78 = t77 * (g * m__2 + t73);
      t79 = l__2 * t7;
      t83 = m__1 * t21;
      t84 = m__2 * t83;
      t88 = J__2 * (m__1 + 4 * m__2);
      t92 = m__2 * t21;
      t94 = 0.9e1 / 0.4e1 * t92 + J__2;
      t95 = t94 * J__1;
      t96 = t12 * (0.9e1 / 0.16e2 * t84 + t88 / 4) + t95;
      t97 = t47 * t96;
      t104 = t92 / 4 + J__2;
      t105 = t104 * t47;
      t110 = l__1 * (l__2 * t5 + 2 * t44 * t105);
      t112 = t44 * l__1;
      t117 = t29 * t110 - 2 * t112 * t105 - l__2 * (-t32 + t6);
      t120 = t24 * t23;
      t129 = t94 * l__1;
      t131 = g * m__1 - t73;
      t135 = l__1 * t48;
      t145 = t11 * t96;
      t147 = t8 * t131 * t129 - 2 * t145;
      t153 = (2 * t8 * t1 * t135 + t44 * t147) * l__1;
      t159 = 0.1e1 / t7;
      t162 = m__2 * t12 * t29;
      t166 = 8 * J__1;
      t167 = t162 + t12 * (2 * m__1 - m__2) + t166;
      t171 = m__2 * t12;
      t172 = t171 * t29 * J__2;
      t178 = t25 * t167 * t92 + 4 * t172 + t12 * (-0.9e1 / 0.4e1 * t84 - t88) - 4 * t95;
      t179 = 0.1e1 / t178;
      t183 = t21 * t7 * t33;
      t193 = l__2 * (4 * l__1 * t11 * m__2 * t59 + t8 * t78);
      t198 = (t29 * t67 * t23 + t44 * t193 / 2 - t8 * t97) * l__2;
      t202 = l__2 * t117 * t7;
      t213 = t27 * t183 - 0.4e1 / 0.3e1 * t25 * t198 - t120 * t202 + 0.2e1 / 0.3e1 * t29 * t153 + 0.4e1 / 0.3e1 * (l__1 * t44 * t11 - l__2 * t8 * t47) * t96;
      t214 = t213 * t1;
      t219 = t178 ^ 2;
      t220 = 0.1e1 / t219;
      t222 = m__2 ^ 2;
      out_5_1 = 18 * t179 * t159 * (t27 * t21 * t7 * (2 * t7 * t16 - 2 * t9 * t6) - t27 * t21 * t8 * t33 - 0.4e1 / 0.3e1 * t25 * (t29 * (t44 * t43 * t41 * l__2 + t43 * t48) * t23 - 2 * t8 * t7 * t67 * t23 + t44 * t79 * t78 / 2 - t7 * t97) * l__2 + t120 * l__2 * t117 * t8 - t120 * l__2 * (-2 * t9 * t110 + 2 * t79 * t16) * t7 + 0.2e1 / 0.3e1 * t29 * (t44 * t7 * t131 * t129 + 2 * t7 * t1 * t135) * l__1 - 0.4e1 / 0.3e1 * t9 * t153 - 0.4e1 / 0.3e1 * t79 * t97) * t1 + 18 * t8 * t179 / t29 * t214 - 18 * (-2 * t25 * t8 * t12 * t7 * t222 * t21 - 8 * t8 * t171 * t7 * J__2) * t220 * t159 * t214;
      out_2_2 = 1;
      t241 = l__2 * t23;
      t251 = t44 * t24;
      t254 = l__1 * t24;
      out_5_2 = 18 * t179 * t159 * (-3 * t44 * t25 * t23 * t183 - 0.4e1 / 0.3e1 * t25 * (t29 * t24 * t62 * t241 + t24 * t193 / 2) * l__2 + 0.8e1 / 0.3e1 * t251 * t198 - t120 * l__2 * (2 * t29 * t254 * t105 - 2 * t254 * t105) * t7 + t44 * t23 * t202 + 0.2e1 / 0.3e1 * t29 * t24 * t147 * l__1 + 0.4e1 / 0.3e1 * t254 * t145) * t1 + 36 * t251 * t167 * t220 * t159 * t213 * t222 * t21 * l__2;
      out_4_3 = -t43;
      t285 = t9 * t15 * omega__1;
      t290 = omega__1 * t59;
      t304 = t96 * l__1;
      t305 = t44 * omega__1;
      out_5_3 = 18 * t179 * t159 * (4 * t26 * l__1 * t92 * t285 - 0.4e1 / 0.3e1 * t25 * (-4 * t29 * t44 * t290 * t241 + 4 * t44 * t290 * t241) * l__2 - 4 * t254 * t92 * t285 - 0.8e1 / 0.3e1 * t29 * t305 * t304 + 0.8e1 / 0.3e1 * t305 * t304) * t1;
      out_3_4 = 0.1e1 / l__1 / l__2 / m__2 / t44 / t8 * (4 * t25 * (t162 + 2 * t13 - t171 + t166) * t92 + 16 * t172 + m__2 * (t12 * (-9 * t83 - 16 * J__2) - 36 * t21 * J__1) - 16 * J__2 * t15) / 6;
      t346 = omega__2 * t96;
      t353 = t104 * omega__2;
      out_5_4 = 18 * t179 * t159 * (-0.4e1 / 0.3e1 * t25 * (2 * t29 * t8 * omega__2 * J__2 * t171 - 2 * t8 * t346) * l__2 - t120 * l__2 * (4 * t29 * t112 * t353 - 4 * t112 * t353) * t7 + 0.8e1 / 0.3e1 * t29 * t8 * t1 * omega__2 * J__2 * t12 - 0.8e1 / 0.3e1 * l__2 * t8 * t346) * t1;
      t375 = t29 * l__1;
      t383 = t29 * t44 * t8;
      out_5_5 = 18 * t179 * t159 * (t27 * t21 * t7 * (-4 * t375 + 4 * l__1) - 0.4e1 / 0.3e1 * t25 * (t44 * l__2 * t8 * t77 - 3 * t383 * l__2 * t171) * l__2 - t120 * l__2 * (4 * l__2 * l__1 - 4 * l__2 * t375) * t7 - 0.4e1 / 0.3e1 * t383 * t94 * t12) * t1;

      % Store outputs
      out_JF_x_dot = zeros(5, 5);
      out_JF_x_dot(1, 1) = out_1_1;
      out_JF_x_dot(5, 1) = out_5_1;
      out_JF_x_dot(2, 2) = out_2_2;
      out_JF_x_dot(5, 2) = out_5_2;
      out_JF_x_dot(4, 3) = out_4_3;
      out_JF_x_dot(5, 3) = out_5_3;
      out_JF_x_dot(3, 4) = out_3_4;
      out_JF_x_dot(5, 4) = out_5_4;
      out_JF_x_dot(5, 5) = out_5_5;
    end % JF_x_dot
    %
    % - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    %
    function out_JF_v = JF_v( this, in_1, in_2, in_3, t )
      % Evaluate the Jacobian of F with respect to v.

      % Extract properties
      l__1 = this.m_l__1;
      l__2 = this.m_l__2;
      m__1 = this.m_m__1;
      m__2 = this.m_m__2;
      m__3 = this.m_m__3;
      g = this.m_g;
      J__1 = this.m_J__1;
      J__2 = this.m_J__2;

      % Extract inputs
      theta__1 = in_1(1);
      theta__2 = in_1(2);
      omega__1 = in_1(3);
      omega__2 = in_1(4);
      lambda = in_1(5);
      theta__1_dot = in_2(1);
      theta__2_dot = in_2(2);
      omega__1_dot = in_2(3);
      omega__2_dot = in_2(4);
      lambda_dot = in_2(5);

      % Evaluate function
      % No body

      % Store outputs
      out_JF_v = zeros(5, 0);
    end % JF_v
    %
    % - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    %
    function out_v = v( this, in_1, t )
      % Evaluate the the veils v.

      % Extract properties
      l__1 = this.m_l__1;
      l__2 = this.m_l__2;
      m__1 = this.m_m__1;
      m__2 = this.m_m__2;
      m__3 = this.m_m__3;
      g = this.m_g;
      J__1 = this.m_J__1;
      J__2 = this.m_J__2;

      % Extract inputs
      theta__1 = in_1(1);
      theta__2 = in_1(2);
      omega__1 = in_1(3);
      omega__2 = in_1(4);
      lambda = in_1(5);

      % Evaluate function
      % No body

      % Store outputs
      out_v = zeros(0, 1);
    end % v
    %
    % - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    %
    function out_Jv_x = Jv_x( this, in_1, in_2, t )
      % Evaluate the Jacobian of v with respect to x.

      % Extract properties
      l__1 = this.m_l__1;
      l__2 = this.m_l__2;
      m__1 = this.m_m__1;
      m__2 = this.m_m__2;
      m__3 = this.m_m__3;
      g = this.m_g;
      J__1 = this.m_J__1;
      J__2 = this.m_J__2;

      % Extract inputs
      theta__1 = in_1(1);
      theta__2 = in_1(2);
      omega__1 = in_1(3);
      omega__2 = in_1(4);
      lambda = in_1(5);

      % Evaluate function
      % No body

      % Store outputs
      out_Jv_x = zeros(0, 5);
    end % Jv_x
    %
    % - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    %
    function out_h = h( this, in_1, in_2, t )
      % Calculate the residual of the invariants h.

      % Extract properties
      l__1 = this.m_l__1;
      l__2 = this.m_l__2;
      m__1 = this.m_m__1;
      m__2 = this.m_m__2;
      m__3 = this.m_m__3;
      g = this.m_g;
      J__1 = this.m_J__1;
      J__2 = this.m_J__2;

      % Extract inputs
      theta__1 = in_1(1);
      theta__2 = in_1(2);
      omega__1 = in_1(3);
      omega__2 = in_1(4);
      lambda = in_1(5);

      % Evaluate function
      t1 = sin(theta__1);
      t2 = l__1 * t1;
      t3 = sin(theta__2);
      out_1 = -t3 * l__2 + t2;
      t5 = cos(theta__1);
      t8 = cos(theta__2);
      out_2 = -omega__1 * l__1 * t5 + omega__2 * l__2 * t8;
      t11 = m__2 * l__2;
      t15 = -4 * lambda + g * (m__1 - m__2);
      t16 = l__1 * t15;
      t17 = t5 ^ 2;
      t19 = omega__1 ^ 2;
      t20 = l__1 ^ 2;
      t26 = 2 * t1 * (m__1 * t20 / 4 + J__1) * t19;
      t29 = l__2 ^ 2;
      t31 = l__1 * m__2;
      t32 = t8 ^ 2;
      t43 = m__1 / 4;
      t47 = t20 * (t43 - m__2 / 8) + J__1;
      t53 = omega__2 ^ 2;
      t54 = t53 * J__2;
      t60 = 2 * lambda;
      t76 = m__2 * m__1 * t29;
      t80 = J__2 * (m__1 + 4 * m__2);
      t84 = m__2 * t29;
      t86 = 0.9e1 / 0.4e1 * t84 + J__2;
      t87 = t86 * J__1;
      t88 = t20 * (0.9e1 / 0.16e2 * t76 + t80 / 4) + t87;
      t97 = (t84 / 4 + J__2) * t53;
      out_3 = 18 / (t32 * (m__2 * t20 * t17 + t20 * (2 * m__1 - m__2) + 8 * J__1) * t84 + 4 * m__2 * t20 * t17 * J__2 + t20 * (-0.9e1 / 0.4e1 * t76 - t80) - 4 * t87) / t5 * (t32 * t8 * t31 * t29 * t5 * (t17 * t16 - t16 + t26) - 0.4e1 / 0.3e1 * t32 * (t17 * (t3 * (t1 * l__1 * (-3 * lambda + g * (m__1 - m__2 / 2)) - 2 * t19 * t47) * l__2 + t2 * t54) * t31 + t3 * l__2 * (t1 * (t20 * (t43 + m__2) + J__1) * (g * m__2 + t60) + 4 * l__1 * t19 * m__2 * t47) / 2 - t1 * t53 * t88) * l__2 - t8 * t31 * l__2 * (t17 * l__1 * (l__2 * t15 + 2 * t3 * t97) - 2 * t3 * l__1 * t97 - l__2 * (-t26 + t16)) * t5 + 0.2e1 / 0.3e1 * t17 * (t3 * (t1 * (g * m__1 - t60) * t86 * l__1 - 2 * t19 * t88) + 2 * t1 * t11 * l__1 * t54) * l__1 + 0.4e1 / 0.3e1 * (l__1 * t3 * t19 - l__2 * t1 * t53) * t88) * t11;

      % Store outputs
      out_h = zeros(3, 1);
      out_h(1) = out_1;
      out_h(2) = out_2;
      out_h(3) = out_3;
    end % h
    %
    % - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    %
    function out_Jh_x = Jh_x( this, in_1, in_2, t )
      % Calculate the Jacobian of h with respect to x.

      % Extract properties
      l__1 = this.m_l__1;
      l__2 = this.m_l__2;
      m__1 = this.m_m__1;
      m__2 = this.m_m__2;
      m__3 = this.m_m__3;
      g = this.m_g;
      J__1 = this.m_J__1;
      J__2 = this.m_J__2;

      % Extract inputs
      theta__1 = in_1(1);
      theta__2 = in_1(2);
      omega__1 = in_1(3);
      omega__2 = in_1(4);
      lambda = in_1(5);

      % Evaluate function
      t1 = cos(theta__1);
      out_1_1 = l__1 * t1;
      t2 = sin(theta__1);
      out_2_1 = l__1 * t2 * omega__1;
      t4 = m__2 * l__2;
      t8 = -4 * lambda + g * (m__1 - m__2);
      t9 = l__1 * t8;
      t10 = t2 * t1;
      t12 = omega__1 ^ 2;
      t13 = l__1 ^ 2;
      t16 = m__1 * t13 / 4 + J__1;
      t17 = t16 * t12;
      t22 = l__2 ^ 2;
      t24 = l__1 * m__2;
      t25 = cos(theta__2);
      t26 = t25 ^ 2;
      t27 = t26 * t25;
      t28 = t27 * t24;
      t30 = t1 ^ 2;
      t33 = 2 * t2 * t17;
      t34 = t30 * t9 + t33 - t9;
      t42 = -3 * lambda + g * (m__1 - m__2 / 2);
      t45 = sin(theta__2);
      t48 = omega__2 ^ 2;
      t49 = t48 * J__2;
      t56 = m__1 / 4;
      t60 = t13 * (t56 - m__2 / 8) + J__1;
      t63 = t2 * l__1 * t42 - 2 * t12 * t60;
      t68 = t2 * l__1 * t49 + t45 * t63 * l__2;
      t74 = 2 * lambda;
      t78 = t13 * (t56 + m__2) + J__1;
      t79 = t78 * (g * m__2 + t74);
      t80 = t1 * l__2;
      t85 = m__2 * m__1 * t22;
      t89 = J__2 * (m__1 + 4 * m__2);
      t93 = m__2 * t22;
      t95 = 0.9e1 / 0.4e1 * t93 + J__2;
      t96 = t95 * J__1;
      t97 = t13 * (0.9e1 / 0.16e2 * t85 + t89 / 4) + t96;
      t98 = t48 * t97;
      t105 = t93 / 4 + J__2;
      t106 = t105 * t48;
      t111 = l__1 * (l__2 * t8 + 2 * t45 * t106);
      t113 = t45 * l__1;
      t118 = t30 * t111 - 2 * t113 * t106 - l__2 * (-t33 + t9);
      t121 = t25 * t24;
      t130 = t95 * l__1;
      t132 = g * m__1 - t74;
      t136 = l__1 * t49;
      t146 = t12 * t97;
      t148 = t2 * t132 * t130 - 2 * t146;
      t154 = (2 * t2 * t4 * t136 + t45 * t148) * l__1;
      t160 = 0.1e1 / t1;
      t168 = m__2 * t13 * t30 + t13 * (2 * m__1 - m__2) + 8 * J__1;
      t172 = m__2 * t13;
      t179 = t26 * t168 * t93 + 4 * t172 * t30 * J__2 + t13 * (-0.9e1 / 0.4e1 * t85 - t89) - 4 * t96;
      t180 = 0.1e1 / t179;
      t184 = t22 * t1 * t34;
      t194 = l__2 * (4 * l__1 * t12 * m__2 * t60 + t2 * t79);
      t199 = (t30 * t68 * t24 + t45 * t194 / 2 - t2 * t98) * l__2;
      t203 = l__2 * t118 * t1;
      t214 = t28 * t184 - 0.4e1 / 0.3e1 * t26 * t199 - t121 * t203 + 0.2e1 / 0.3e1 * t30 * t154 + 0.4e1 / 0.3e1 * (l__1 * t45 * t12 - l__2 * t2 * t48) * t97;
      t215 = t214 * t4;
      t220 = t179 ^ 2;
      t221 = 0.1e1 / t220;
      t223 = m__2 ^ 2;
      out_3_1 = 18 * t180 * t160 * (t28 * t22 * t1 * (2 * t1 * t17 - 2 * t10 * t9) - t28 * t22 * t2 * t34 - 0.4e1 / 0.3e1 * t26 * (t30 * (t45 * l__1 * t1 * t42 * l__2 + out_1_1 * t49) * t24 - 2 * t2 * t1 * t68 * t24 + t45 * t80 * t79 / 2 - t1 * t98) * l__2 + t121 * l__2 * t118 * t2 - t121 * l__2 * (-2 * t10 * t111 + 2 * t80 * t17) * t1 + 0.2e1 / 0.3e1 * t30 * (t45 * t1 * t132 * t130 + 2 * t1 * t4 * t136) * l__1 - 0.4e1 / 0.3e1 * t10 * t154 - 0.4e1 / 0.3e1 * t80 * t98) * t4 + 18 * t2 * t180 / t30 * t215 - 18 * (-2 * t26 * t2 * t13 * t1 * t223 * t22 - 8 * t2 * t172 * t1 * J__2) * t221 * t160 * t215;
      t238 = t25 * l__2;
      out_1_2 = -t238;
      out_2_2 = -l__2 * t45 * omega__2;
      t245 = l__2 * t24;
      t255 = t45 * t25;
      t258 = l__1 * t25;
      out_3_2 = 18 * t180 * t160 * (-3 * t45 * t26 * t24 * t184 - 0.4e1 / 0.3e1 * t26 * (t30 * t25 * t63 * t245 + t25 * t194 / 2) * l__2 + 0.8e1 / 0.3e1 * t255 * t199 - t121 * l__2 * (2 * t30 * t258 * t106 - 2 * t258 * t106) * t1 + t45 * t24 * t203 + 0.2e1 / 0.3e1 * t30 * t25 * t148 * l__1 + 0.4e1 / 0.3e1 * t258 * t146) * t4 + 36 * t255 * t168 * t221 * t160 * t214 * t223 * t22 * l__2;
      out_2_3 = -out_1_1;
      t289 = t10 * t16 * omega__1;
      t294 = omega__1 * t60;
      t308 = t97 * l__1;
      t309 = t45 * omega__1;
      out_3_3 = 18 * t180 * t160 * (4 * t27 * l__1 * t93 * t289 - 0.4e1 / 0.3e1 * t26 * (-4 * t30 * t45 * t294 * t245 + 4 * t45 * t294 * t245) * l__2 - 4 * t258 * t93 * t289 - 0.8e1 / 0.3e1 * t30 * t309 * t308 + 0.8e1 / 0.3e1 * t309 * t308) * t4;
      out_2_4 = t238;
      t323 = omega__2 * t97;
      t330 = t105 * omega__2;
      out_3_4 = 18 * t180 * t160 * (-0.4e1 / 0.3e1 * t26 * (2 * t30 * t2 * omega__2 * J__2 * t172 - 2 * t2 * t323) * l__2 - t121 * l__2 * (4 * t30 * t113 * t330 - 4 * t113 * t330) * t1 + 0.8e1 / 0.3e1 * t30 * t2 * t4 * omega__2 * J__2 * t13 - 0.8e1 / 0.3e1 * l__2 * t2 * t323) * t4;
      t352 = t30 * l__1;
      t360 = t30 * t45 * t2;
      out_3_5 = 18 * t180 * t160 * (t28 * t22 * t1 * (-4 * t352 + 4 * l__1) - 0.4e1 / 0.3e1 * t26 * (t45 * l__2 * t2 * t78 - 3 * t360 * l__2 * t172) * l__2 - t121 * l__2 * (4 * l__2 * l__1 - 4 * l__2 * t352) * t1 - 0.4e1 / 0.3e1 * t360 * t95 * t13) * t4;

      % Store outputs
      out_Jh_x = zeros(3, 5);
      out_Jh_x(1, 1) = out_1_1;
      out_Jh_x(2, 1) = out_2_1;
      out_Jh_x(3, 1) = out_3_1;
      out_Jh_x(1, 2) = out_1_2;
      out_Jh_x(2, 2) = out_2_2;
      out_Jh_x(3, 2) = out_3_2;
      out_Jh_x(2, 3) = out_2_3;
      out_Jh_x(3, 3) = out_3_3;
      out_Jh_x(2, 4) = out_2_4;
      out_Jh_x(3, 4) = out_3_4;
      out_Jh_x(3, 5) = out_3_5;
    end % Jh_x
    %
    % - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    %
    function out_Jh_v = Jh_v( this, in_1, in_2, t )
      % Calculate the Jacobian of h with respect to v.

      % Extract properties
      l__1 = this.m_l__1;
      l__2 = this.m_l__2;
      m__1 = this.m_m__1;
      m__2 = this.m_m__2;
      m__3 = this.m_m__3;
      g = this.m_g;
      J__1 = this.m_J__1;
      J__2 = this.m_J__2;

      % Extract inputs
      theta__1 = in_1(1);
      theta__2 = in_1(2);
      omega__1 = in_1(3);
      omega__2 = in_1(4);
      lambda = in_1(5);

      % Evaluate function
      % No body

      % Store outputs
      out_Jh_v = zeros(3, 0);
    end % Jh_v
    %
    % - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    %
  end
end % SliderCrankZhou

% That's All Folks!
