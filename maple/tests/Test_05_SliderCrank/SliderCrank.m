% +--------------------------------------------------------------------------+
% | 'Indigo' module version 1.0 - BSD 3-Clause License - Copyright (c) 2023  |
% | Current version authors:                                                 |
% |   Davide Stocco and Enrico Bertolazzi.                                   |
% +--------------------------------------------------------------------------+

% Matlab generated code for implicit system: SliderCrank
% This file has been automatically generated by Indigo.
% DISCLAIMER: If you need to edit it, do it wisely!

classdef SliderCrank < Indigo.Systems.Implicit
  %
  % No class description provided.
  %
  properties (SetAccess = protected, Hidden = true)
    % User data
    m_m__1 = 1.0;
    m_m__2 = 1.0;
    m_J__1 = 1.0;
    m_J__2 = 1.0;
    m_g = 9.81;
    m_ell__1 = 1.0;
    m_ell__2 = 1.0;
  end
  %
  methods
    %
    % - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    %
    function this = SliderCrank( varargin )
      % Class constructor.

      % Superclass constructor
      num_eqns = 15;
      num_veil = 0;
      num_invs = 9;
      this = this@Indigo.Systems.Implicit('SliderCrank', num_eqns, num_veil, num_invs);

      % User data
      if (nargin == 0)
        % Keep default values
      elseif (nargin == 1 && isstruct(varargin{1}))
        this.m_m__1 = varargin{1}.m__1;
        this.m_m__2 = varargin{1}.m__2;
        this.m_J__1 = varargin{1}.J__1;
        this.m_J__2 = varargin{1}.J__2;
        this.m_g = varargin{1}.g;
        this.m_ell__1 = varargin{1}.ell__1;
        this.m_ell__2 = varargin{1}.ell__2;
      elseif (nargin == 7)
        this.m_m__1 = varargin{1};
        this.m_m__2 = varargin{2};
        this.m_J__1 = varargin{3};
        this.m_J__2 = varargin{4};
        this.m_g = varargin{5};
        this.m_ell__1 = varargin{6};
        this.m_ell__2 = varargin{7};
      else
        error('wrong number of input arguments.');
      end
    end % SliderCrank
    %
    % - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    %
    function out_F = F( this, in_1, in_2, in_3, t )
      % Evaluate the function F.

      % Extract properties
      m__1 = this.m_m__1;
      m__2 = this.m_m__2;
      J__1 = this.m_J__1;
      J__2 = this.m_J__2;
      g = this.m_g;
      ell__1 = this.m_ell__1;
      ell__2 = this.m_ell__2;

      % Extract inputs
      x__1 = in_1(1);
      y__1 = in_1(2);
      theta__1 = in_1(3);
      x__2 = in_1(4);
      y__2 = in_1(5);
      theta__2 = in_1(6);
      u__1 = in_1(7);
      v__1 = in_1(8);
      omega__1 = in_1(9);
      u__2 = in_1(10);
      v__2 = in_1(11);
      omega__2 = in_1(12);
      lambda__1 = in_1(13);
      lambda__2 = in_1(14);
      lambda__3 = in_1(15);
      x__1_dot = in_2(1);
      y__1_dot = in_2(2);
      theta__1_dot = in_2(3);
      x__2_dot = in_2(4);
      y__2_dot = in_2(5);
      theta__2_dot = in_2(6);
      u__1_dot = in_2(7);
      v__1_dot = in_2(8);
      omega__1_dot = in_2(9);
      u__2_dot = in_2(10);
      v__2_dot = in_2(11);
      omega__2_dot = in_2(12);
      lambda__1_dot = in_2(13);
      lambda__2_dot = in_2(14);
      lambda__3_dot = in_2(15);

      % Evaluate function
      out_1 = -u__1 + x__1_dot;
      out_2 = -v__1 + y__1_dot;
      out_3 = -u__2 + x__2_dot;
      out_4 = -v__2 + y__2_dot;
      out_5 = -omega__2 + theta__2_dot;
      out_6 = -omega__1 + theta__1_dot;
      t1 = J__2 * omega__2_dot;
      t3 = -lambda__2 - lambda__3;
      t4 = cos(theta__2);
      t6 = sin(theta__2);
      t11 = 0.1e1 / J__2;
      out_7 = t11 * (2 * t1 + ell__2 * (t4 * t3 + lambda__1 * t6)) / 2;
      t16 = t4 ^ 2;
      t17 = lambda__1 * t16;
      t18 = ell__2 ^ 2;
      t19 = m__2 * t18;
      t21 = -t3;
      t22 = t21 * ell__2;
      t23 = t6 * t22;
      t24 = omega__2 ^ 2;
      t25 = t24 * J__2;
      t37 = 0.1e1 / m__2;
      out_8 = t37 * t11 * (4 * u__2_dot * J__2 * m__2 - t19 * t17 - t4 * m__2 * (t23 + 2 * t25) * ell__2 + 4 * lambda__1 * (t19 / 4 + J__2)) / 4;
      t44 = t6 * t4;
      out_9 = t37 * t11 * (4 * v__2_dot * J__2 * m__2 + t16 * t21 * t19 - m__2 * t18 * lambda__1 * t44 + 4 * J__2 * (-ell__2 * m__2 * t6 * t24 / 2 + g * m__2 - lambda__3 + lambda__2)) / 4;
      t59 = sin(theta__1);
      t60 = omega__1 ^ 2;
      t62 = ell__1 * m__1;
      t64 = cos(theta__1);
      t65 = omega__1_dot * t64;
      t73 = 0.1e1 / m__1;
      out_10 = t73 * (-t62 * t60 * t59 + 2 * g * m__1 + 2 * v__1_dot * m__1 + t62 * t65 - 2 * lambda__2);
      t76 = ell__1 * t59;
      t81 = 0.1e1 / J__1;
      out_11 = t81 * (-lambda__2 * ell__1 * t64 + 2 * J__1 * omega__1_dot + lambda__1 * t76) / 2;
      t86 = t64 ^ 2;
      t87 = lambda__1 * t86;
      t88 = ell__1 ^ 2;
      t89 = m__1 * t88;
      t91 = lambda__2 * t76;
      t92 = t60 * J__1;
      out_12 = t73 * t81 * (4 * u__1_dot * J__1 * m__1 - t89 * t87 - t64 * (t91 + 2 * t92) * t62 - 4 * (-t89 / 4 + J__1) * lambda__1) / 4;
      t104 = t18 * J__1;
      t105 = m__1 * m__2;
      t107 = t16 * t105 * t104;
      t111 = t88 * J__2;
      t114 = J__1 * J__2;
      t148 = -t111 * t59 * t64 - t104 * t44;
      t155 = ell__1 * omega__1;
      t174 = t37 * t11 / ell__1;
      out_13 = t174 * t73 * t81 * (lambda__1_dot * (-t107 - m__2 * t89 * t86 * J__2 + m__1 * (m__2 * (t104 + t111) + 4 * t114) + 4 * m__2 * t114) + 2 * m__2 * (ell__2 * theta__2_dot * J__1 * (-t16 * t22 + ell__2 * t6 * t4 * lambda__1 + t24 * J__2 * t6 + t22 / 2) + theta__1_dot * (t76 * t64 * lambda__1 - ell__1 * t86 * lambda__2 + t60 * J__1 * t59 + lambda__2 * ell__1 / 2) * J__2 * ell__1 + lambda__2_dot * t148 / 2 - 2 * J__1 * (lambda__3_dot * t4 * t6 * t18 / 4 + (omega__2_dot * t4 * omega__2 * ell__2 + t155 * t65) * J__2)) * m__1) / 4;
      t183 = ell__2 * t17 + t4 * (t23 + t25) - lambda__1 * ell__2 / 2;
      t204 = J__2 * m__2;
      t212 = m__2 * t18 * t16;
      t213 = 4 * J__2;
      t214 = t212 - t213;
      out_14 = t174 * t73 * t81 * (-2 * theta__2_dot * t183 * m__2 * m__1 * J__1 * ell__2 + lambda__2_dot * (t107 + J__2 * (t86 * t88 * t105 + 4 * J__1 * (m__1 + m__2))) - 2 * (theta__1_dot * t204 * (ell__1 * t87 + t64 * (t91 + t92) - lambda__1 * ell__1 / 2) * ell__1 - lambda__1_dot * t148 * m__2 / 2 - J__1 * (lambda__3_dot * t214 - 4 * (ell__2 * omega__2_dot * t6 * omega__2 + t155 * omega__1_dot * t59) * t204) / 2) * m__1) / 2;
      out_15 = t37 * t11 * (-2 * m__2 * theta__2_dot * t183 * ell__2 + lambda__2_dot * t214 + lambda__3_dot * (t212 + t213) - (ell__2 * lambda__1_dot * t4 + 4 * omega__2 * t1) * ell__2 * m__2 * t6) / 2;

      % Store outputs
      out_F = zeros(15, 1);
      out_F(1) = out_1;
      out_F(2) = out_2;
      out_F(3) = out_3;
      out_F(4) = out_4;
      out_F(5) = out_5;
      out_F(6) = out_6;
      out_F(7) = out_7;
      out_F(8) = out_8;
      out_F(9) = out_9;
      out_F(10) = out_10;
      out_F(11) = out_11;
      out_F(12) = out_12;
      out_F(13) = out_13;
      out_F(14) = out_14;
      out_F(15) = out_15;
    end % F
    %
    % - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    %
    function out_JF_x = JF_x( this, in_1, in_2, in_3, t )
      % Evaluate the Jacobian of F with respect to x.

      % Extract properties
      m__1 = this.m_m__1;
      m__2 = this.m_m__2;
      J__1 = this.m_J__1;
      J__2 = this.m_J__2;
      g = this.m_g;
      ell__1 = this.m_ell__1;
      ell__2 = this.m_ell__2;

      % Extract inputs
      x__1 = in_1(1);
      y__1 = in_1(2);
      theta__1 = in_1(3);
      x__2 = in_1(4);
      y__2 = in_1(5);
      theta__2 = in_1(6);
      u__1 = in_1(7);
      v__1 = in_1(8);
      omega__1 = in_1(9);
      u__2 = in_1(10);
      v__2 = in_1(11);
      omega__2 = in_1(12);
      lambda__1 = in_1(13);
      lambda__2 = in_1(14);
      lambda__3 = in_1(15);
      x__1_dot = in_2(1);
      y__1_dot = in_2(2);
      theta__1_dot = in_2(3);
      x__2_dot = in_2(4);
      y__2_dot = in_2(5);
      theta__2_dot = in_2(6);
      u__1_dot = in_2(7);
      v__1_dot = in_2(8);
      omega__1_dot = in_2(9);
      u__2_dot = in_2(10);
      v__2_dot = in_2(11);
      omega__2_dot = in_2(12);
      lambda__1_dot = in_2(13);
      lambda__2_dot = in_2(14);
      lambda__3_dot = in_2(15);

      % Evaluate function
      t1 = cos(theta__1);
      t2 = omega__1 ^ 2;
      t4 = ell__1 * m__1;
      t6 = sin(theta__1);
      t10 = 0.1e1 / m__1;
      out_10_3 = t10 * (-t4 * t2 * t1 - t4 * omega__1_dot * t6);
      t11 = ell__1 * t6;
      t12 = lambda__2 * t11;
      t13 = ell__1 * t1;
      t16 = 0.1e1 / J__1;
      out_11_3 = t16 * (lambda__1 * t13 + t12) / 2;
      t18 = lambda__1 * t1;
      t19 = ell__1 ^ 2;
      t20 = m__1 * t19;
      t24 = t1 ^ 2;
      t25 = lambda__2 * t24;
      t27 = t2 * J__1;
      out_12_3 = t10 * t16 * (2 * t6 * t20 * t18 - t25 * t20 + t6 * (t12 + 2 * t27) * t4) / 4;
      t35 = t1 * J__2;
      t37 = m__1 * m__2;
      t41 = J__2 * ell__1;
      t42 = t6 ^ 2;
      t59 = -t19 * J__2 * t24 + t19 * J__2 * t42;
      t65 = ell__1 * omega__1 * J__1;
      t75 = 0.1e1 / ell__1;
      t76 = 0.1e1 / J__2;
      t77 = t76 * t75;
      t78 = 0.1e1 / m__2;
      t79 = t78 * t77;
      out_13_3 = t79 * t10 * t16 * (2 * lambda__1_dot * t6 * t37 * t19 * t35 + 2 * m__2 * (theta__1_dot * (t2 * J__1 * t1 + ell__1 * t24 * lambda__1 - ell__1 * t42 * lambda__1 + 2 * t11 * t1 * lambda__2) * t41 + lambda__2_dot * t59 / 2 + 2 * t65 * omega__1_dot * t6 * J__2) * m__1) / 4;
      t82 = t6 * t1;
      t93 = J__2 * m__2;
      t94 = theta__1_dot * t93;
      t101 = omega__1_dot * ell__1;
      t102 = omega__1 * J__1;
      out_14_3 = t79 * t10 * t16 * (-2 * J__2 * lambda__2_dot * t82 * t19 * t37 - 2 * (t94 * (-2 * t11 * t18 + ell__1 * t25 - t6 * (t12 + t27)) * ell__1 - lambda__1_dot * t59 * m__2 / 2 + 2 * t102 * t101 * t1 * t93) * m__1) / 2;
      t113 = -lambda__2 - lambda__3;
      t114 = sin(theta__2);
      t116 = cos(theta__2);
      t117 = lambda__1 * t116;
      out_7_6 = t76 * ell__2 * (-t114 * t113 + t117) / 2;
      t121 = t114 * t116;
      t122 = ell__2 ^ 2;
      t127 = m__2 * t122;
      t128 = -t113;
      t129 = t116 ^ 2;
      t132 = t128 * ell__2;
      t133 = t114 * t132;
      t134 = omega__2 ^ 2;
      t135 = t134 * J__2;
      t139 = m__2 * t114;
      out_8_6 = t78 * t76 * (2 * m__2 * t122 * lambda__1 * t121 - t129 * t128 * t127 + t139 * (t133 + 2 * t135) * ell__2) / 4;
      t148 = t114 ^ 2;
      t149 = lambda__1 * t148;
      t151 = lambda__1 * t129;
      t153 = t116 * J__2;
      out_9_6 = t78 * t76 * (-2 * m__2 * ell__2 * t134 * t153 - 2 * t114 * t116 * t128 * t127 + t127 * t149 - t127 * t151) / 4;
      t161 = t122 * J__1;
      t162 = m__1 * t161;
      t163 = t116 * m__2;
      t174 = ell__2 * theta__2_dot;
      t180 = -t122 * J__1 * t129 + t122 * J__1 * t148;
      t183 = t129 * t122;
      t189 = J__2 * omega__2;
      t190 = t114 * ell__2;
      t191 = omega__2_dot * t190;
      out_13_6 = t79 * t10 * t16 * (2 * lambda__1_dot * t114 * t163 * t162 + 2 * m__2 * (t174 * J__1 * (-ell__2 * t149 + ell__2 * t151 + 2 * t121 * t132 + t134 * t153) + lambda__2_dot * t180 / 2 - 2 * J__1 * (lambda__3_dot * t183 / 4 - lambda__3_dot * t148 * t122 / 4 - t191 * t189)) * m__1) / 4;
      t204 = J__1 * m__1;
      t205 = ell__2 * t204;
      t211 = -2 * t190 * t117 + t129 * t132 - t114 * (t133 + t135);
      t221 = t122 * t116;
      t224 = 2 * lambda__3_dot * t139 * t221;
      t226 = ell__2 * t116;
      out_14_6 = t79 * t10 * t16 * (-2 * theta__2_dot * t211 * m__2 * t205 - 2 * lambda__2_dot * t114 * t163 * t162 - 2 * (-lambda__1_dot * t180 * m__2 / 2 - J__1 * (-4 * omega__2_dot * t226 * omega__2 * t93 - t224) / 2) * m__1) / 2;
      out_15_6 = t78 * t76 * (-2 * m__2 * theta__2_dot * t211 * ell__2 - 2 * lambda__2_dot * t139 * t221 - t224 - (4 * omega__2_dot * J__2 * omega__2 + ell__2 * lambda__1_dot * t116) * ell__2 * t163 + lambda__1_dot * t122 * m__2 * t148) / 2;
      out_1_7 = -1;
      out_2_8 = -1;
      out_6_9 = -1;
      out_10_9 = -2 * ell__1 * t6 * omega__1;
      out_12_9 = -ell__1 * t1 * omega__1;
      t269 = J__1 * t101;
      out_13_9 = t77 * t16 * (2 * theta__1_dot * t102 * t6 * t41 - 2 * t269 * t35) / 2;
      t276 = J__2 * theta__1_dot;
      out_14_9 = -t79 * t16 * (2 * t276 * m__2 * t1 * t65 + 2 * t269 * t6 * t93);
      out_3_10 = -1;
      out_4_11 = -1;
      out_5_12 = -1;
      out_8_12 = -ell__2 * t116 * omega__2;
      out_9_12 = -ell__2 * t114 * omega__2;
      t294 = J__2 * ell__2;
      out_13_12 = t77 * t16 * (2 * J__1 * ell__2 * theta__2_dot * omega__2 * J__2 * t114 - 2 * J__1 * omega__2_dot * t116 * t294) / 2;
      out_14_12 = t79 * t10 * t16 * (-4 * omega__2_dot * J__1 * t190 * m__1 * J__2 * m__2 - 4 * theta__2_dot * t116 * t189 * ell__2 * m__2 * t204) / 2;
      out_15_12 = t78 * t76 * (-4 * theta__2_dot * t163 * omega__2 * t294 - 4 * t191 * t93) / 2;
      out_7_13 = t76 * t190 / 2;
      t326 = m__2 * t183;
      t327 = 4 * J__2;
      out_8_13 = t78 * t76 * (-t326 + t127 + t327) / 4;
      out_9_13 = -t76 * t122 * t121 / 4;
      out_11_13 = t16 * t11 / 2;
      out_12_13 = t10 * t16 * (-m__1 * t19 * t24 - 4 * J__1 + t20) / 4;
      out_13_13 = t77 * t16 * (theta__1_dot * t82 * t19 * J__2 + theta__2_dot * t161 * t121) / 2;
      t351 = t129 * ell__2 - ell__2 / 2;
      t357 = ell__1 * t24 - ell__1 / 2;
      out_14_13 = t79 * t10 * t16 * (-2 * theta__2_dot * t351 * m__2 * t205 - 2 * t94 * t357 * t4) / 2;
      out_15_13 = -t76 * theta__2_dot * t351 * ell__2;
      out_7_14 = -t76 * t226 / 2;
      out_8_14 = out_9_13;
      out_9_14 = t78 * t76 * (t326 + t327) / 4;
      out_10_14 = -2 * t10;
      out_11_14 = -t16 * t13 / 2;
      out_12_14 = -t16 * t1 * t6 * t19 / 4;
      t380 = -t351;
      out_13_14 = t77 * t16 * (t174 * J__1 * t380 - theta__1_dot * t357 * t41) / 2;
      t389 = theta__2_dot * t114;
      out_14_14 = t79 * t10 * t16 * (-2 * t276 * m__2 * t6 * t1 * t20 - 2 * t389 * t163 * t162) / 2;
      out_15_14 = -t76 * t389 * t221;
      out_7_15 = out_7_14;
      out_8_15 = out_8_14;
      out_9_15 = t78 * t76 * (t326 - t327) / 4;
      t408 = t76 * t75 * theta__2_dot;
      out_13_15 = t408 * ell__2 * t380 / 2;
      out_14_15 = -t408 * t114 * t221;
      out_15_15 = out_15_14;

      % Store outputs
      out_JF_x = zeros(15, 15);
      out_JF_x(10, 3) = out_10_3;
      out_JF_x(11, 3) = out_11_3;
      out_JF_x(12, 3) = out_12_3;
      out_JF_x(13, 3) = out_13_3;
      out_JF_x(14, 3) = out_14_3;
      out_JF_x(7, 6) = out_7_6;
      out_JF_x(8, 6) = out_8_6;
      out_JF_x(9, 6) = out_9_6;
      out_JF_x(13, 6) = out_13_6;
      out_JF_x(14, 6) = out_14_6;
      out_JF_x(15, 6) = out_15_6;
      out_JF_x(1, 7) = out_1_7;
      out_JF_x(2, 8) = out_2_8;
      out_JF_x(6, 9) = out_6_9;
      out_JF_x(10, 9) = out_10_9;
      out_JF_x(12, 9) = out_12_9;
      out_JF_x(13, 9) = out_13_9;
      out_JF_x(14, 9) = out_14_9;
      out_JF_x(3, 10) = out_3_10;
      out_JF_x(4, 11) = out_4_11;
      out_JF_x(5, 12) = out_5_12;
      out_JF_x(8, 12) = out_8_12;
      out_JF_x(9, 12) = out_9_12;
      out_JF_x(13, 12) = out_13_12;
      out_JF_x(14, 12) = out_14_12;
      out_JF_x(15, 12) = out_15_12;
      out_JF_x(7, 13) = out_7_13;
      out_JF_x(8, 13) = out_8_13;
      out_JF_x(9, 13) = out_9_13;
      out_JF_x(11, 13) = out_11_13;
      out_JF_x(12, 13) = out_12_13;
      out_JF_x(13, 13) = out_13_13;
      out_JF_x(14, 13) = out_14_13;
      out_JF_x(15, 13) = out_15_13;
      out_JF_x(7, 14) = out_7_14;
      out_JF_x(8, 14) = out_8_14;
      out_JF_x(9, 14) = out_9_14;
      out_JF_x(10, 14) = out_10_14;
      out_JF_x(11, 14) = out_11_14;
      out_JF_x(12, 14) = out_12_14;
      out_JF_x(13, 14) = out_13_14;
      out_JF_x(14, 14) = out_14_14;
      out_JF_x(15, 14) = out_15_14;
      out_JF_x(7, 15) = out_7_15;
      out_JF_x(8, 15) = out_8_15;
      out_JF_x(9, 15) = out_9_15;
      out_JF_x(13, 15) = out_13_15;
      out_JF_x(14, 15) = out_14_15;
      out_JF_x(15, 15) = out_15_15;
    end % JF_x
    %
    % - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    %
    function out_JF_x_dot = JF_x_dot( this, in_1, in_2, in_3, t )
      % Evaluate the Jacobian of F with respect to x_dot.

      % Extract properties
      m__1 = this.m_m__1;
      m__2 = this.m_m__2;
      J__1 = this.m_J__1;
      J__2 = this.m_J__2;
      g = this.m_g;
      ell__1 = this.m_ell__1;
      ell__2 = this.m_ell__2;

      % Extract inputs
      x__1 = in_1(1);
      y__1 = in_1(2);
      theta__1 = in_1(3);
      x__2 = in_1(4);
      y__2 = in_1(5);
      theta__2 = in_1(6);
      u__1 = in_1(7);
      v__1 = in_1(8);
      omega__1 = in_1(9);
      u__2 = in_1(10);
      v__2 = in_1(11);
      omega__2 = in_1(12);
      lambda__1 = in_1(13);
      lambda__2 = in_1(14);
      lambda__3 = in_1(15);
      x__1_dot = in_2(1);
      y__1_dot = in_2(2);
      theta__1_dot = in_2(3);
      x__2_dot = in_2(4);
      y__2_dot = in_2(5);
      theta__2_dot = in_2(6);
      u__1_dot = in_2(7);
      v__1_dot = in_2(8);
      omega__1_dot = in_2(9);
      u__2_dot = in_2(10);
      v__2_dot = in_2(11);
      omega__2_dot = in_2(12);
      lambda__1_dot = in_2(13);
      lambda__2_dot = in_2(14);
      lambda__3_dot = in_2(15);

      % Evaluate function
      out_1_1 = 1;
      out_2_2 = 1;
      out_6_3 = 1;
      t1 = cos(theta__1);
      t3 = sin(theta__1);
      t4 = ell__1 * t3;
      t6 = t1 ^ 2;
      t10 = omega__1 ^ 2;
      t15 = 0.1e1 / J__1;
      out_13_3 = t15 * (t4 * t1 * lambda__1 - ell__1 * t6 * lambda__2 + t10 * J__1 * t3 + lambda__2 * ell__1 / 2) / 2;
      out_14_3 = -t15 * (ell__1 * t6 * lambda__1 + t1 * (t10 * J__1 + lambda__2 * t4) - lambda__1 * ell__1 / 2);
      out_3_4 = 1;
      out_4_5 = 1;
      out_5_6 = 1;
      t28 = ell__2 * (lambda__2 + lambda__3);
      t29 = cos(theta__2);
      t30 = t29 ^ 2;
      t33 = sin(theta__2);
      t34 = ell__2 * t33;
      t37 = omega__2 ^ 2;
      t42 = 0.1e1 / ell__1;
      t43 = 0.1e1 / J__2;
      t44 = t43 * t42;
      out_13_6 = t44 * ell__2 * (-t30 * t28 + t34 * t29 * lambda__1 + t37 * J__2 * t33 + t28 / 2) / 2;
      t55 = (ell__2 * t30 * lambda__1 + t29 * (t37 * J__2 + t33 * t28) - lambda__1 * ell__2 / 2) * ell__2;
      out_14_6 = -t44 * t55;
      out_15_6 = -t43 * t55;
      out_12_7 = 1;
      out_10_8 = 2;
      out_10_9 = ell__1 * t1;
      out_11_9 = 1;
      out_13_9 = -t1 * omega__1;
      out_14_9 = -2 * t3 * omega__1;
      out_8_10 = 1;
      out_9_11 = 1;
      out_7_12 = 1;
      t62 = t42 * t29;
      out_13_12 = -t62 * omega__2 * ell__2;
      out_14_12 = -2 * t42 * omega__2 * t34;
      out_15_12 = -2 * ell__2 * t33 * omega__2;
      t70 = ell__2 ^ 2;
      t71 = t70 * J__1;
      t72 = m__1 * m__2;
      t74 = t30 * t72 * t71;
      t76 = ell__1 ^ 2;
      t80 = t76 * J__2;
      t83 = J__1 * J__2;
      t91 = 0.1e1 / m__1;
      t93 = 0.1e1 / m__2;
      t94 = t93 * t44;
      out_13_13 = t94 * t91 * t15 * (-t74 - m__2 * m__1 * t76 * t6 * J__2 + m__1 * (m__2 * (t71 + t80) + 4 * t83) + 4 * m__2 * t83) / 4;
      t98 = t33 * t29;
      t100 = t80 * t3 * t1 + t71 * t98;
      out_14_13 = -t44 * t15 * t100 / 2;
      out_15_13 = -t43 * t70 * t98 / 2;
      out_13_14 = -t44 * t15 * t100 / 4;
      out_14_14 = t94 * t91 * t15 * (t74 + J__2 * (t6 * t76 * t72 + 4 * J__1 * (m__1 + m__2))) / 2;
      t123 = m__2 * t70 * t30;
      t124 = 4 * J__2;
      t125 = t123 - t124;
      out_15_14 = t93 * t43 * t125 / 2;
      out_13_15 = -t43 * t62 * t33 * t70 / 4;
      out_14_15 = t93 * t43 * t42 * t125 / 2;
      out_15_15 = t93 * t43 * (t123 + t124) / 2;

      % Store outputs
      out_JF_x_dot = zeros(15, 15);
      out_JF_x_dot(1, 1) = out_1_1;
      out_JF_x_dot(2, 2) = out_2_2;
      out_JF_x_dot(6, 3) = out_6_3;
      out_JF_x_dot(13, 3) = out_13_3;
      out_JF_x_dot(14, 3) = out_14_3;
      out_JF_x_dot(3, 4) = out_3_4;
      out_JF_x_dot(4, 5) = out_4_5;
      out_JF_x_dot(5, 6) = out_5_6;
      out_JF_x_dot(13, 6) = out_13_6;
      out_JF_x_dot(14, 6) = out_14_6;
      out_JF_x_dot(15, 6) = out_15_6;
      out_JF_x_dot(12, 7) = out_12_7;
      out_JF_x_dot(10, 8) = out_10_8;
      out_JF_x_dot(10, 9) = out_10_9;
      out_JF_x_dot(11, 9) = out_11_9;
      out_JF_x_dot(13, 9) = out_13_9;
      out_JF_x_dot(14, 9) = out_14_9;
      out_JF_x_dot(8, 10) = out_8_10;
      out_JF_x_dot(9, 11) = out_9_11;
      out_JF_x_dot(7, 12) = out_7_12;
      out_JF_x_dot(13, 12) = out_13_12;
      out_JF_x_dot(14, 12) = out_14_12;
      out_JF_x_dot(15, 12) = out_15_12;
      out_JF_x_dot(13, 13) = out_13_13;
      out_JF_x_dot(14, 13) = out_14_13;
      out_JF_x_dot(15, 13) = out_15_13;
      out_JF_x_dot(13, 14) = out_13_14;
      out_JF_x_dot(14, 14) = out_14_14;
      out_JF_x_dot(15, 14) = out_15_14;
      out_JF_x_dot(13, 15) = out_13_15;
      out_JF_x_dot(14, 15) = out_14_15;
      out_JF_x_dot(15, 15) = out_15_15;
    end % JF_x_dot
    %
    % - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    %
    function out_JF_v = JF_v( this, in_1, in_2, in_3, t )
      % Evaluate the Jacobian of F with respect to v.

      % Extract properties
      m__1 = this.m_m__1;
      m__2 = this.m_m__2;
      J__1 = this.m_J__1;
      J__2 = this.m_J__2;
      g = this.m_g;
      ell__1 = this.m_ell__1;
      ell__2 = this.m_ell__2;

      % Extract inputs
      x__1 = in_1(1);
      y__1 = in_1(2);
      theta__1 = in_1(3);
      x__2 = in_1(4);
      y__2 = in_1(5);
      theta__2 = in_1(6);
      u__1 = in_1(7);
      v__1 = in_1(8);
      omega__1 = in_1(9);
      u__2 = in_1(10);
      v__2 = in_1(11);
      omega__2 = in_1(12);
      lambda__1 = in_1(13);
      lambda__2 = in_1(14);
      lambda__3 = in_1(15);
      x__1_dot = in_2(1);
      y__1_dot = in_2(2);
      theta__1_dot = in_2(3);
      x__2_dot = in_2(4);
      y__2_dot = in_2(5);
      theta__2_dot = in_2(6);
      u__1_dot = in_2(7);
      v__1_dot = in_2(8);
      omega__1_dot = in_2(9);
      u__2_dot = in_2(10);
      v__2_dot = in_2(11);
      omega__2_dot = in_2(12);
      lambda__1_dot = in_2(13);
      lambda__2_dot = in_2(14);
      lambda__3_dot = in_2(15);

      % Evaluate function
      % No body

      % Store outputs
      out_JF_v = zeros(15, 0);
    end % JF_v
    %
    % - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    %
    function out_v = v( this, in_1, t )
      % Evaluate the the veils v.

      % Extract properties
      m__1 = this.m_m__1;
      m__2 = this.m_m__2;
      J__1 = this.m_J__1;
      J__2 = this.m_J__2;
      g = this.m_g;
      ell__1 = this.m_ell__1;
      ell__2 = this.m_ell__2;

      % Extract inputs
      x__1 = in_1(1);
      y__1 = in_1(2);
      theta__1 = in_1(3);
      x__2 = in_1(4);
      y__2 = in_1(5);
      theta__2 = in_1(6);
      u__1 = in_1(7);
      v__1 = in_1(8);
      omega__1 = in_1(9);
      u__2 = in_1(10);
      v__2 = in_1(11);
      omega__2 = in_1(12);
      lambda__1 = in_1(13);
      lambda__2 = in_1(14);
      lambda__3 = in_1(15);

      % Evaluate function
      % No body

      % Store outputs
      out_v = zeros(0, 1);
    end % v
    %
    % - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    %
    function out_Jv_x = Jv_x( this, in_1, in_2, t )
      % Evaluate the Jacobian of v with respect to x.

      % Extract properties
      m__1 = this.m_m__1;
      m__2 = this.m_m__2;
      J__1 = this.m_J__1;
      J__2 = this.m_J__2;
      g = this.m_g;
      ell__1 = this.m_ell__1;
      ell__2 = this.m_ell__2;

      % Extract inputs
      x__1 = in_1(1);
      y__1 = in_1(2);
      theta__1 = in_1(3);
      x__2 = in_1(4);
      y__2 = in_1(5);
      theta__2 = in_1(6);
      u__1 = in_1(7);
      v__1 = in_1(8);
      omega__1 = in_1(9);
      u__2 = in_1(10);
      v__2 = in_1(11);
      omega__2 = in_1(12);
      lambda__1 = in_1(13);
      lambda__2 = in_1(14);
      lambda__3 = in_1(15);

      % Evaluate function
      % No body

      % Store outputs
      out_Jv_x = zeros(0, 15);
    end % Jv_x
    %
    % - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    %
    function out_h = h( this, in_1, in_2, t )
      % Calculate the residual of the invariants h.

      % Extract properties
      m__1 = this.m_m__1;
      m__2 = this.m_m__2;
      J__1 = this.m_J__1;
      J__2 = this.m_J__2;
      g = this.m_g;
      ell__1 = this.m_ell__1;
      ell__2 = this.m_ell__2;

      % Extract inputs
      x__1 = in_1(1);
      y__1 = in_1(2);
      theta__1 = in_1(3);
      x__2 = in_1(4);
      y__2 = in_1(5);
      theta__2 = in_1(6);
      u__1 = in_1(7);
      v__1 = in_1(8);
      omega__1 = in_1(9);
      u__2 = in_1(10);
      v__2 = in_1(11);
      omega__2 = in_1(12);
      lambda__1 = in_1(13);
      lambda__2 = in_1(14);
      lambda__3 = in_1(15);

      % Evaluate function
      t1 = cos(theta__1);
      out_1 = 16 * ell__1 * t1 + 16 * x__1 - 16 * x__2;
      t4 = sin(theta__1);
      t5 = ell__1 * t4;
      out_2 = 16 * t5 + 16 * y__1 - 16 * y__2;
      t7 = sin(theta__2);
      out_3 = 16 * ell__2 * t7 + 16 * y__2;
      t13 = 0.1e1 / ell__1;
      out_4 = t13 * (ell__1 * t4 * omega__1 - u__1 + u__2);
      out_5 = t13 * (-ell__1 * t1 * omega__1 - v__1 + v__2);
      t17 = cos(theta__2);
      out_6 = -ell__2 * t17 * omega__2 - v__2;
      t20 = t17 ^ 2;
      t23 = ell__2 ^ 2;
      t27 = lambda__2 + lambda__3;
      t30 = omega__2 ^ 2;
      t36 = m__2 * ell__2;
      t39 = t1 ^ 2;
      t42 = ell__1 ^ 2;
      t44 = m__2 * m__1 * t42;
      t49 = omega__1 ^ 2;
      t56 = t23 * J__1;
      t61 = J__1 * J__2;
      t69 = 0.1e1 / J__1;
      t71 = 0.1e1 / m__1;
      t73 = 0.1e1 / J__2;
      t75 = 0.1e1 / m__2;
      t76 = t75 * t73 * t13;
      out_7 = t76 * t71 * t69 * (-m__2 * m__1 * t23 * lambda__1 * t20 * J__1 - t17 * t36 * J__1 * m__1 * (t7 * t27 * ell__2 + 2 * t30 * J__2) - t44 * lambda__1 * t39 * J__2 - t1 * (2 * t49 * J__1 + lambda__2 * t5) * ell__1 * J__2 * m__1 * m__2 + 4 * lambda__1 * (m__1 * (m__2 * (t42 * J__2 / 4 + t56 / 4) + t61) + m__2 * t61)) / 4;
      t84 = t23 * lambda__1;
      out_8 = t76 * t71 * t69 * (t20 * t27 * m__2 * m__1 * t56 - m__1 * m__2 * t84 * t7 * t17 * J__1 - (-t39 * t42 * m__2 * lambda__2 * m__1 + t44 * t4 * t1 * lambda__1 - 4 * (-t49 * ell__1 * m__2 * m__1 * t4 / 2 - t30 * t36 * m__1 * t7 / 2 + (m__1 + m__2) * lambda__2 - lambda__3 * m__1) * J__1) * J__2) / 2;
      out_9 = t75 * t73 * (t20 * t27 * t23 * m__2 - m__2 * t84 * t7 * t17 - 4 * J__2 * (t36 * t7 * t30 / 2 + g * m__2 - lambda__3 + lambda__2)) / 2;

      % Store outputs
      out_h = zeros(9, 1);
      out_h(1) = out_1;
      out_h(2) = out_2;
      out_h(3) = out_3;
      out_h(4) = out_4;
      out_h(5) = out_5;
      out_h(6) = out_6;
      out_h(7) = out_7;
      out_h(8) = out_8;
      out_h(9) = out_9;
    end % h
    %
    % - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    %
    function out_Jh_x = Jh_x( this, in_1, in_2, t )
      % Calculate the Jacobian of h with respect to x.

      % Extract properties
      m__1 = this.m_m__1;
      m__2 = this.m_m__2;
      J__1 = this.m_J__1;
      J__2 = this.m_J__2;
      g = this.m_g;
      ell__1 = this.m_ell__1;
      ell__2 = this.m_ell__2;

      % Extract inputs
      x__1 = in_1(1);
      y__1 = in_1(2);
      theta__1 = in_1(3);
      x__2 = in_1(4);
      y__2 = in_1(5);
      theta__2 = in_1(6);
      u__1 = in_1(7);
      v__1 = in_1(8);
      omega__1 = in_1(9);
      u__2 = in_1(10);
      v__2 = in_1(11);
      omega__2 = in_1(12);
      lambda__1 = in_1(13);
      lambda__2 = in_1(14);
      lambda__3 = in_1(15);

      % Evaluate function
      out_1_1 = 16;
      out_2_2 = 16;
      t1 = sin(theta__1);
      t2 = ell__1 * t1;
      out_1_3 = -16 * t2;
      t4 = cos(theta__1);
      out_2_3 = 16 * ell__1 * t4;
      out_4_3 = t4 * omega__1;
      out_5_3 = t1 * omega__1;
      t8 = ell__1 ^ 2;
      t10 = m__1 * m__2;
      t14 = t4 ^ 2;
      t15 = t14 * J__2;
      t17 = m__1 * t8;
      t18 = m__2 * t17;
      t23 = omega__1 ^ 2;
      t24 = t23 * J__1;
      t31 = 0.1e1 / J__1;
      t33 = 0.1e1 / m__1;
      t35 = 0.1e1 / ell__1;
      t36 = 0.1e1 / J__2;
      t38 = 0.1e1 / m__2;
      t39 = t38 * t36 * t35;
      out_7_3 = t39 * t33 * t31 * (2 * t10 * t8 * lambda__1 * t4 * t1 * J__2 - t18 * lambda__2 * t15 + t1 * (lambda__2 * t2 + 2 * t24) * ell__1 * J__2 * m__1 * m__2) / 4;
      t46 = t1 ^ 2;
      out_8_3 = -t38 * t35 * t33 * t31 * (2 * t1 * t4 * t8 * lambda__2 * m__1 * m__2 + 2 * ell__1 * m__1 * m__2 * t4 * t24 + t18 * t14 * lambda__1 - t18 * t46 * lambda__1) / 2;
      out_1_4 = -16;
      out_2_5 = -16;
      out_3_5 = 16;
      t63 = cos(theta__2);
      t64 = ell__2 * t63;
      out_3_6 = 16 * t64;
      t65 = sin(theta__2);
      out_6_6 = ell__2 * t65 * omega__2;
      t69 = ell__2 ^ 2;
      t74 = t69 * J__1;
      t75 = m__1 * t74;
      t76 = lambda__2 + lambda__3;
      t77 = t76 * m__2;
      t78 = t63 ^ 2;
      t83 = omega__2 ^ 2;
      out_7_6 = t39 * t33 * t31 * (2 * t10 * t69 * lambda__1 * t65 * t63 * J__1 - t78 * t77 * t75 + t65 * m__2 * ell__2 * J__1 * m__1 * (t65 * t76 * ell__2 + 2 * t83 * J__2)) / 4;
      t96 = t65 * t63;
      t100 = t65 ^ 2;
      t104 = m__2 * m__1 * t69;
      t109 = J__1 * J__2;
      t111 = ell__2 * t83;
      out_8_6 = t39 * t33 * t31 * (t104 * lambda__1 * t100 * J__1 - t104 * lambda__1 * t78 * J__1 - 2 * t10 * t111 * t63 * t109 - 2 * t96 * t77 * t75) / 2;
      t119 = t69 * m__2;
      out_9_6 = t38 * t36 * (-2 * m__2 * t111 * t63 * J__2 - 2 * t65 * t63 * t76 * t119 + t119 * lambda__1 * t100 - t119 * lambda__1 * t78) / 2;
      out_4_7 = -t35;
      out_5_8 = out_4_7;
      out_4_9 = t1;
      out_5_9 = -t4;
      out_7_9 = -out_4_3;
      out_8_9 = -2 * out_5_3;
      out_4_10 = t35;
      out_5_11 = out_4_10;
      out_6_11 = -1;
      out_6_12 = -t64;
      t137 = out_5_11 * t63;
      out_7_12 = -t137 * omega__2 * ell__2;
      out_8_12 = -2 * out_5_11 * omega__2 * ell__2 * t65;
      out_9_12 = -2 * out_6_6;
      t145 = t78 * t10 * t74;
      out_7_13 = t39 * t33 * t31 * (-t145 - t18 * t15 + 4 * m__1 * (m__2 * (t8 * J__2 / 4 + t74 / 4) + t109) + 4 * m__2 * t109) / 4;
      t160 = t65 * t69;
      t172 = t39 * t33 * t31 * (-t63 * m__2 * J__1 * m__1 * t160 - t4 * out_4_9 * m__2 * J__2 * t17);
      out_8_13 = t172 / 2;
      out_9_13 = -t36 * t69 * t96 / 2;
      out_7_14 = t172 / 4;
      out_8_14 = t39 * t33 * t31 * (t145 - (-t14 * t8 * t10 - 4 * J__1 * (m__1 + m__2)) * J__2) / 2;
      t188 = m__2 * t69 * t78;
      t189 = 4 * J__2;
      out_9_14 = t38 * t36 * (t188 - t189) / 2;
      out_7_15 = -t36 * t137 * t160 / 4;
      out_8_15 = t39 * t33 * t31 * (-4 * m__1 * J__1 * J__2 + t145) / 2;
      out_9_15 = t38 * t36 * (t188 + t189) / 2;

      % Store outputs
      out_Jh_x = zeros(9, 15);
      out_Jh_x(1, 1) = out_1_1;
      out_Jh_x(2, 2) = out_2_2;
      out_Jh_x(1, 3) = out_1_3;
      out_Jh_x(2, 3) = out_2_3;
      out_Jh_x(4, 3) = out_4_3;
      out_Jh_x(5, 3) = out_5_3;
      out_Jh_x(7, 3) = out_7_3;
      out_Jh_x(8, 3) = out_8_3;
      out_Jh_x(1, 4) = out_1_4;
      out_Jh_x(2, 5) = out_2_5;
      out_Jh_x(3, 5) = out_3_5;
      out_Jh_x(3, 6) = out_3_6;
      out_Jh_x(6, 6) = out_6_6;
      out_Jh_x(7, 6) = out_7_6;
      out_Jh_x(8, 6) = out_8_6;
      out_Jh_x(9, 6) = out_9_6;
      out_Jh_x(4, 7) = out_4_7;
      out_Jh_x(5, 8) = out_5_8;
      out_Jh_x(4, 9) = out_4_9;
      out_Jh_x(5, 9) = out_5_9;
      out_Jh_x(7, 9) = out_7_9;
      out_Jh_x(8, 9) = out_8_9;
      out_Jh_x(4, 10) = out_4_10;
      out_Jh_x(5, 11) = out_5_11;
      out_Jh_x(6, 11) = out_6_11;
      out_Jh_x(6, 12) = out_6_12;
      out_Jh_x(7, 12) = out_7_12;
      out_Jh_x(8, 12) = out_8_12;
      out_Jh_x(9, 12) = out_9_12;
      out_Jh_x(7, 13) = out_7_13;
      out_Jh_x(8, 13) = out_8_13;
      out_Jh_x(9, 13) = out_9_13;
      out_Jh_x(7, 14) = out_7_14;
      out_Jh_x(8, 14) = out_8_14;
      out_Jh_x(9, 14) = out_9_14;
      out_Jh_x(7, 15) = out_7_15;
      out_Jh_x(8, 15) = out_8_15;
      out_Jh_x(9, 15) = out_9_15;
    end % Jh_x
    %
    % - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    %
    function out_Jh_v = Jh_v( this, in_1, in_2, t )
      % Calculate the Jacobian of h with respect to v.

      % Extract properties
      m__1 = this.m_m__1;
      m__2 = this.m_m__2;
      J__1 = this.m_J__1;
      J__2 = this.m_J__2;
      g = this.m_g;
      ell__1 = this.m_ell__1;
      ell__2 = this.m_ell__2;

      % Extract inputs
      x__1 = in_1(1);
      y__1 = in_1(2);
      theta__1 = in_1(3);
      x__2 = in_1(4);
      y__2 = in_1(5);
      theta__2 = in_1(6);
      u__1 = in_1(7);
      v__1 = in_1(8);
      omega__1 = in_1(9);
      u__2 = in_1(10);
      v__2 = in_1(11);
      omega__2 = in_1(12);
      lambda__1 = in_1(13);
      lambda__2 = in_1(14);
      lambda__3 = in_1(15);

      % Evaluate function
      % No body

      % Store outputs
      out_Jh_v = zeros(9, 0);
    end % Jh_v
    %
    % - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    %
  end
end % SliderCrank

% That's All Folks!
