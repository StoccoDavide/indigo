% +--------------------------------------------------------------------------+
% | 'Indigo' module version 1.0 - BSD 3-Clause License - Copyright (c) 2023  |
% | Current version authors:                                                 |
% |   Davide Stocco and Enrico Bertolazzi.                                   |
% +--------------------------------------------------------------------------+

% Matlab generated code for implicit system: DoubleFourBar
% This file has been automatically generated by Indigo.
% DISCLAIMER: If you need to edit it, do it wisely!

classdef DoubleFourBar < Indigo.Systems.Implicit
  %
  % No class description provided.
  %
  properties (SetAccess = protected, Hidden = true)
    % User data
    m_m = 1.0;
    m_g = 9.81;
    m_l = 1.0;
  end
  %
  methods
    %
    % - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    %
    function this = DoubleFourBar( varargin )
      % Class constructor.

      % Superclass constructor
      num_eqns = 14;
      num_veil = 0;
      num_invs = 12;
      this = this@Indigo.Systems.Implicit('DoubleFourBar', num_eqns, num_veil, num_invs);

      % User data
      if (nargin == 0)
        % Keep default values
      elseif (nargin == 1 && isstruct(varargin{1}))
        this.m_m = varargin{1}.m;
        this.m_g = varargin{1}.g;
        this.m_l = varargin{1}.l;
      elseif (nargin == 3)
        this.m_m = varargin{1};
        this.m_g = varargin{2};
        this.m_l = varargin{3};
      else
        error('wrong number of input arguments.');
      end
    end % DoubleFourBar
    %
    % - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    %
    function out_F = F( this, in_1, in_2, in_3, t )
      % Evaluate the function F.

      % Extract properties
      m = this.m_m;
      g = this.m_g;
      l = this.m_l;

      % Extract inputs
      theta__A1 = in_1(1);
      theta__B2 = in_1(2);
      theta__C3 = in_1(3);
      theta__12 = in_1(4);
      theta__23 = in_1(5);
      omega__A1 = in_1(6);
      omega__B2 = in_1(7);
      omega__C3 = in_1(8);
      omega__12 = in_1(9);
      omega__23 = in_1(10);
      lambda__1 = in_1(11);
      lambda__2 = in_1(12);
      lambda__3 = in_1(13);
      lambda__4 = in_1(14);
      theta__A1_dot = in_2(1);
      theta__B2_dot = in_2(2);
      theta__C3_dot = in_2(3);
      theta__12_dot = in_2(4);
      theta__23_dot = in_2(5);
      omega__A1_dot = in_2(6);
      omega__B2_dot = in_2(7);
      omega__C3_dot = in_2(8);
      omega__12_dot = in_2(9);
      omega__23_dot = in_2(10);
      lambda__1_dot = in_2(11);
      lambda__2_dot = in_2(12);
      lambda__3_dot = in_2(13);
      lambda__4_dot = in_2(14);

      % Evaluate function
      out_1 = -omega__A1 + theta__A1_dot;
      out_2 = -omega__C3 + theta__C3_dot;
      out_3 = -omega__12 + theta__12_dot;
      out_4 = -omega__23 + theta__23_dot;
      t4 = g * m;
      t5 = t4 + lambda__2;
      t7 = cos(theta__A1);
      t9 = sin(theta__A1);
      t13 = 0.1e1 / l;
      t15 = 0.1e1 / m;
      out_5 = t15 * t13 * (4 * omega__A1_dot * l * m + 3 * t7 * t5 - 3 * t9 * lambda__1) / 4;
      t19 = cos(theta__C3);
      t22 = sin(theta__C3);
      t23 = t22 * lambda__3;
      out_6 = t15 * t13 * (omega__C3_dot * l * m - 3 * t19 * lambda__4 + 3 * t23);
      t29 = cos(theta__12);
      t32 = sin(theta__12);
      out_7 = t15 * t13 * (omega__12_dot * l * m + 3 * t29 * lambda__2 - 3 * t32 * lambda__1);
      t39 = cos(theta__23);
      t42 = sin(theta__23);
      out_8 = t15 * t13 * (omega__23_dot * l * m + 3 * t39 * lambda__4 - 3 * t42 * lambda__3);
      t50 = t4 - lambda__2 + lambda__4;
      t52 = cos(theta__B2);
      t54 = sin(theta__B2);
      t55 = lambda__1 - lambda__3;
      t56 = t55 * t54;
      out_9 = t15 * t13 * (4 * omega__B2_dot * l * m + 3 * t52 * t50 + 3 * t56) / 4;
      out_10 = -omega__B2 + theta__B2_dot;
      t61 = 6 * t50;
      t62 = t52 ^ 2;
      t65 = 6 * t52 * t56;
      t66 = omega__B2 ^ 2;
      t68 = l * m;
      t70 = 4 * t68 * t54 * t66;
      t71 = 3 * t4;
      t72 = 3 * lambda__2;
      t73 = 3 * lambda__4;
      t77 = -6 * t5;
      t78 = t7 ^ 2;
      t83 = omega__A1 ^ 2;
      t89 = 3 * t62;
      t90 = 3 * t78;
      t91 = t29 ^ 2;
      t92 = 12 * t91;
      t95 = omega__12 ^ 2;
      t101 = t29 * t32;
      t107 = t52 * t54;
      t108 = 3 * t107;
      t112 = -3 * t7 * t9 - 12 * t101 - t108;
      t115 = 3 * t62 - 3;
      t122 = omega__B2_dot * t52 * omega__B2;
      out_11 = t15 * t13 * (theta__B2_dot * (t62 * t61 + t65 + t70 - t71 + t72 - t73) + theta__A1_dot * (-4 * t68 * t9 * t83 + 6 * t9 * lambda__1 * t7 + t78 * t77 + t71 + t72) + lambda__1_dot * (-t89 - t90 - t92 + 18) + theta__12_dot * (-4 * t68 * t32 * t95 + 24 * lambda__1 * t101 - 24 * lambda__2 * t91 + 12 * lambda__2) + lambda__2_dot * t112 + lambda__3_dot * t115 + 3 * lambda__4_dot * t107 + 8 * (omega__12_dot * t29 * omega__12 + omega__A1_dot * t7 * omega__A1 - t122) * t68) / 4;
      t132 = -6 * t55;
      t137 = 4 * m * l * t66;
      t140 = 3 * lambda__1;
      t141 = 3 * lambda__3;
      t175 = omega__B2_dot * t54 * omega__B2;
      out_12 = t15 * t13 * (theta__B2_dot * (t62 * t132 + t52 * (t54 * t61 - t137) + t140 - t141) + theta__A1_dot * (-6 * lambda__1 * t78 + t7 * (4 * m * l * t83 + t9 * t77) + t140) + theta__12_dot * (-24 * lambda__1 * t91 + t29 * (-24 * lambda__2 * t32 + 4 * t95 * t68) + 12 * lambda__1) + lambda__1_dot * t112 + lambda__2_dot * (t89 + t90 + t92) + 3 * lambda__3_dot * t107 - 3 * lambda__4_dot * t62 + 8 * (omega__12_dot * t32 * omega__12 + omega__A1_dot * t9 * omega__A1 - t175) * t68) / 4;
      t184 = -t61;
      t188 = t39 ^ 2;
      t189 = 12 * t188;
      t190 = t19 ^ 2;
      t191 = 12 * t190;
      t194 = omega__23 ^ 2;
      t200 = t42 * t39;
      t203 = 12 * lambda__4;
      t206 = omega__C3 ^ 2;
      t219 = -12 * t22 * t19 - t108 - 12 * t200;
      out_13 = t15 * t13 * (theta__B2_dot * (t62 * t184 - t65 - t70 + t71 - t72 + t73) + lambda__3_dot * (-t189 - t191 - t89 + 27) + theta__23_dot * (-4 * t68 * t42 * t194 - 24 * lambda__4 * t188 + 24 * lambda__3 * t200 + t203) + theta__C3_dot * (4 * t68 * t22 * t206 + 24 * t19 * t23 - 24 * t190 * lambda__4 + t203) + lambda__4_dot * t219 + lambda__1_dot * t115 + 3 * lambda__2_dot * t107 + 8 * (-omega__C3_dot * t19 * omega__C3 + omega__23_dot * t39 * omega__23 + t122) * t68) / 4;
      t249 = 12 * lambda__3;
      out_14 = t15 * t13 * (theta__B2_dot * (-t62 * t132 + t52 * (t54 * t184 + t137) - t140 + t141) + theta__23_dot * (-24 * lambda__3 * t188 + t39 * (4 * t194 * t68 - 24 * lambda__4 * t42) + t249) + theta__C3_dot * (-24 * t190 * lambda__3 + t19 * (-4 * m * l * t206 - 24 * lambda__4 * t22) + t249) + lambda__3_dot * t219 + lambda__4_dot * (t189 + t191 + t89) + 3 * lambda__1_dot * t107 - 3 * lambda__2_dot * t62 + 8 * (-omega__C3_dot * t22 * omega__C3 + omega__23_dot * t42 * omega__23 + t175) * t68) / 4;

      % Store outputs
      out_F = zeros(14, 1);
      out_F(1) = out_1;
      out_F(2) = out_2;
      out_F(3) = out_3;
      out_F(4) = out_4;
      out_F(5) = out_5;
      out_F(6) = out_6;
      out_F(7) = out_7;
      out_F(8) = out_8;
      out_F(9) = out_9;
      out_F(10) = out_10;
      out_F(11) = out_11;
      out_F(12) = out_12;
      out_F(13) = out_13;
      out_F(14) = out_14;
    end % F
    %
    % - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    %
    function out_JF_x = JF_x( this, in_1, in_2, in_3, t )
      % Evaluate the Jacobian of F with respect to x.

      % Extract properties
      m = this.m_m;
      g = this.m_g;
      l = this.m_l;

      % Extract inputs
      theta__A1 = in_1(1);
      theta__B2 = in_1(2);
      theta__C3 = in_1(3);
      theta__12 = in_1(4);
      theta__23 = in_1(5);
      omega__A1 = in_1(6);
      omega__B2 = in_1(7);
      omega__C3 = in_1(8);
      omega__12 = in_1(9);
      omega__23 = in_1(10);
      lambda__1 = in_1(11);
      lambda__2 = in_1(12);
      lambda__3 = in_1(13);
      lambda__4 = in_1(14);
      theta__A1_dot = in_2(1);
      theta__B2_dot = in_2(2);
      theta__C3_dot = in_2(3);
      theta__12_dot = in_2(4);
      theta__23_dot = in_2(5);
      omega__A1_dot = in_2(6);
      omega__B2_dot = in_2(7);
      omega__C3_dot = in_2(8);
      omega__12_dot = in_2(9);
      omega__23_dot = in_2(10);
      lambda__1_dot = in_2(11);
      lambda__2_dot = in_2(12);
      lambda__3_dot = in_2(13);
      lambda__4_dot = in_2(14);

      % Evaluate function
      t1 = g * m;
      t2 = t1 + lambda__2;
      t4 = sin(theta__A1);
      t6 = cos(theta__A1);
      t7 = t6 * lambda__1;
      t10 = 0.1e1 / l;
      t12 = 0.1e1 / m;
      out_5_1 = t12 * t10 * (-3 * t4 * t2 - 3 * t7) / 4;
      t15 = -6 * t2;
      t19 = t4 ^ 2;
      t22 = t6 ^ 2;
      t25 = omega__A1 ^ 2;
      t27 = l * m;
      t32 = t6 * t4;
      t36 = -3 * t22 + 3 * t19;
      t38 = t4 * omega__A1;
      out_11_1 = t12 * t10 * (theta__A1_dot * (-2 * t4 * t6 * t15 - 4 * t27 * t6 * t25 - 6 * t19 * lambda__1 + 6 * lambda__1 * t22) + 6 * lambda__1_dot * t32 + lambda__2_dot * t36 - 8 * omega__A1_dot * t38 * t27) / 4;
      out_12_1 = t12 * t10 * (theta__A1_dot * (12 * t4 * t7 + t22 * t15 - t4 * (4 * m * l * t25 + t4 * t15)) + lambda__1_dot * t36 - 6 * lambda__2_dot * t32 + 8 * omega__A1_dot * t6 * omega__A1 * t27) / 4;
      t66 = t1 - lambda__2 + lambda__4;
      t68 = sin(theta__B2);
      t70 = cos(theta__B2);
      t71 = lambda__1 - lambda__3;
      out_9_2 = t12 * t10 * (-3 * t68 * t66 + 3 * t71 * t70) / 4;
      t77 = 6 * t66;
      t81 = t70 ^ 2;
      t83 = 6 * t71 * t81;
      t84 = t68 ^ 2;
      t86 = 6 * t71 * t84;
      t87 = omega__B2 ^ 2;
      t90 = 4 * t27 * t70 * t87;
      t93 = t68 * t70;
      t95 = 6 * lambda__1_dot * t93;
      t97 = -3 * t81 + 3 * t84;
      t100 = 6 * lambda__3_dot * t93;
      t105 = t68 * omega__B2;
      t108 = 8 * omega__B2_dot * t105 * t27;
      out_11_2 = t12 * t10 * (theta__B2_dot * (-2 * t68 * t70 * t77 + t83 - t86 + t90) + t95 + lambda__2_dot * t97 - t100 + 3 * lambda__4_dot * t81 - 3 * lambda__4_dot * t84 + t108) / 4;
      t113 = -6 * t71;
      t121 = 4 * m * l * t87;
      t128 = 6 * lambda__2_dot * t93;
      t134 = 6 * lambda__4_dot * t93;
      t138 = 8 * omega__B2_dot * t70 * omega__B2 * t27;
      out_12_2 = t12 * t10 * (theta__B2_dot * (-2 * t68 * t70 * t113 + t81 * t77 - t68 * (t68 * t77 - t121)) + lambda__1_dot * t97 - t128 + 3 * lambda__3_dot * t81 - 3 * lambda__3_dot * t84 + t134 - t138) / 4;
      t142 = -t77;
      out_13_2 = t12 * t10 * (theta__B2_dot * (-2 * t68 * t70 * t142 - t83 + t86 - t90) + t100 + lambda__4_dot * t97 - t95 - 3 * lambda__2_dot * t84 + 3 * lambda__2_dot * t81 - t108) / 4;
      out_14_2 = t12 * t10 * (theta__B2_dot * (2 * t68 * t70 * t113 + t81 * t142 - t68 * (t68 * t142 + t121)) + lambda__3_dot * t97 - t134 - 3 * lambda__1_dot * t84 + 3 * lambda__1_dot * t81 + t128 + t138) / 4;
      t174 = sin(theta__C3);
      t175 = lambda__4 * t174;
      t176 = cos(theta__C3);
      out_6_3 = t12 * t10 * (3 * t176 * lambda__3 + 3 * t175);
      t181 = t174 * t176;
      t184 = omega__C3 ^ 2;
      t190 = t176 ^ 2;
      t193 = t174 ^ 2;
      t199 = 12 * t193 - 12 * t190;
      t201 = t174 * omega__C3;
      out_13_3 = t12 * t10 * (24 * lambda__3_dot * t181 + theta__C3_dot * (4 * t27 * t176 * t184 + 48 * t176 * t175 + 24 * t190 * lambda__3 - 24 * t193 * lambda__3) + lambda__4_dot * t199 + 8 * omega__C3_dot * t201 * t27) / 4;
      out_14_3 = t12 * t10 * (theta__C3_dot * (48 * t176 * t174 * lambda__3 - 24 * t190 * lambda__4 - t174 * (-4 * m * l * t184 - 24 * t175)) + lambda__3_dot * t199 - 24 * lambda__4_dot * t181 - 8 * omega__C3_dot * t176 * omega__C3 * t27) / 4;
      t231 = sin(theta__12);
      t232 = lambda__2 * t231;
      t233 = cos(theta__12);
      out_7_4 = t12 * t10 * (-3 * t233 * lambda__1 - 3 * t232);
      t238 = t233 * t231;
      t241 = omega__12 ^ 2;
      t247 = t233 ^ 2;
      t250 = t231 ^ 2;
      t256 = -12 * t247 + 12 * t250;
      t258 = t231 * omega__12;
      out_11_4 = t12 * t10 * (24 * lambda__1_dot * t238 + theta__12_dot * (-4 * t27 * t233 * t241 + 48 * lambda__2 * t238 + 24 * lambda__1 * t247 - 24 * lambda__1 * t250) + lambda__2_dot * t256 - 8 * omega__12_dot * t258 * t27) / 4;
      t279 = t233 * omega__12;
      out_12_4 = t12 * t10 * (theta__12_dot * (48 * lambda__1 * t238 - 24 * lambda__2 * t247 - t231 * (4 * t241 * t27 - 24 * t232)) + lambda__1_dot * t256 - 24 * lambda__2_dot * t238 + 8 * omega__12_dot * t279 * t27) / 4;
      t286 = sin(theta__23);
      t287 = lambda__4 * t286;
      t288 = cos(theta__23);
      out_8_5 = t12 * t10 * (-3 * t288 * lambda__3 - 3 * t287);
      t293 = t286 * t288;
      t296 = omega__23 ^ 2;
      t302 = t286 ^ 2;
      t305 = t288 ^ 2;
      t311 = 12 * t302 - 12 * t305;
      t313 = t286 * omega__23;
      out_13_5 = t12 * t10 * (24 * lambda__3_dot * t293 + theta__23_dot * (-4 * t27 * t288 * t296 + 48 * lambda__4 * t293 - 24 * lambda__3 * t302 + 24 * lambda__3 * t305) + lambda__4_dot * t311 - 8 * omega__23_dot * t313 * t27) / 4;
      t334 = t288 * omega__23;
      out_14_5 = t12 * t10 * (theta__23_dot * (48 * lambda__3 * t293 - 24 * lambda__4 * t305 - t286 * (4 * t296 * t27 - 24 * t287)) + lambda__3_dot * t311 - 24 * lambda__4_dot * t293 + 8 * omega__23_dot * t334 * t27) / 4;
      out_1_6 = -1;
      out_11_6 = t12 * t10 * (-8 * theta__A1_dot * t27 * t38 + 8 * omega__A1_dot * t6 * t27) / 4;
      out_12_6 = t12 * t10 * (8 * theta__A1_dot * t6 * m * omega__A1 * l + 8 * omega__A1_dot * t4 * t27) / 4;
      out_10_7 = -1;
      t364 = 8 * theta__B2_dot * t27 * t105 - 8 * omega__B2_dot * t70 * t27;
      out_11_7 = t12 * t10 * t364 / 4;
      t374 = -8 * theta__B2_dot * t70 * m * omega__B2 * l - 8 * omega__B2_dot * t68 * t27;
      out_12_7 = t12 * t10 * t374 / 4;
      out_13_7 = -t12 * t10 * t364 / 4;
      out_14_7 = -t12 * t10 * t374 / 4;
      out_2_8 = -1;
      out_13_8 = t12 * t10 * (-8 * omega__C3_dot * t176 * t27 + 8 * theta__C3_dot * t27 * t201) / 4;
      out_14_8 = t12 * t10 * (-8 * theta__C3_dot * t176 * m * omega__C3 * l - 8 * omega__C3_dot * t174 * t27) / 4;
      out_3_9 = -1;
      out_11_9 = t12 * t10 * (8 * omega__12_dot * t233 * t27 - 8 * theta__12_dot * t27 * t258) / 4;
      out_12_9 = t12 * t10 * (8 * omega__12_dot * t231 * t27 + 8 * theta__12_dot * t279 * t27) / 4;
      out_4_10 = -1;
      out_13_10 = t12 * t10 * (8 * omega__23_dot * t288 * t27 - 8 * theta__23_dot * t27 * t313) / 4;
      out_14_10 = t12 * t10 * (8 * omega__23_dot * t286 * t27 + 8 * theta__23_dot * t334 * t27) / 4;
      out_5_11 = -0.3e1 / 0.4e1 * t12 * t10 * t4;
      out_7_11 = -3 * t12 * t10 * t231;
      out_9_11 = 0.3e1 / 0.4e1 * t12 * t10 * t68;
      t442 = 6 * theta__B2_dot * t93;
      t447 = 24 * theta__12_dot * t238 + 6 * theta__A1_dot * t32 + t442;
      out_11_11 = t12 * t10 * t447 / 4;
      t451 = -6 * t81 + 3;
      t452 = theta__B2_dot * t451;
      out_12_11 = t12 * t10 * (t452 + theta__A1_dot * (-6 * t22 + 3) + theta__12_dot * (-24 * t247 + 12)) / 4;
      t465 = 0.3e1 / 0.2e1 * t12 * t10 * theta__B2_dot * t93;
      out_13_11 = -t465;
      out_14_11 = -t12 * t10 * theta__B2_dot * t451 / 4;
      out_5_12 = 0.3e1 / 0.4e1 * t12 * t10 * t6;
      out_7_12 = 3 * t12 * t10 * t233;
      t476 = 0.3e1 / 0.4e1 * t12 * t10 * t70;
      out_9_12 = -t476;
      out_11_12 = out_12_11;
      out_12_12 = -t12 * t10 * t447 / 4;
      out_13_12 = out_14_11;
      out_14_12 = t465;
      out_6_13 = 3 * t12 * t10 * t174;
      out_8_13 = -3 * t12 * t10 * t286;
      out_9_13 = -out_9_11;
      out_11_13 = out_13_11;
      out_12_13 = out_13_12;
      t489 = 24 * theta__C3_dot * t181 + 24 * theta__23_dot * t293 + t442;
      out_13_13 = t12 * t10 * t489 / 4;
      out_14_13 = t12 * t10 * (t452 + theta__23_dot * (-24 * t305 + 12) + theta__C3_dot * (-24 * t190 + 12)) / 4;
      out_6_14 = -3 * t12 * t10 * t176;
      out_8_14 = 3 * t12 * t10 * t288;
      out_9_14 = t476;
      out_11_14 = out_12_13;
      out_12_14 = out_14_12;
      out_13_14 = out_14_13;
      out_14_14 = -t12 * t10 * t489 / 4;

      % Store outputs
      out_JF_x = zeros(14, 14);
      out_JF_x(5, 1) = out_5_1;
      out_JF_x(11, 1) = out_11_1;
      out_JF_x(12, 1) = out_12_1;
      out_JF_x(9, 2) = out_9_2;
      out_JF_x(11, 2) = out_11_2;
      out_JF_x(12, 2) = out_12_2;
      out_JF_x(13, 2) = out_13_2;
      out_JF_x(14, 2) = out_14_2;
      out_JF_x(6, 3) = out_6_3;
      out_JF_x(13, 3) = out_13_3;
      out_JF_x(14, 3) = out_14_3;
      out_JF_x(7, 4) = out_7_4;
      out_JF_x(11, 4) = out_11_4;
      out_JF_x(12, 4) = out_12_4;
      out_JF_x(8, 5) = out_8_5;
      out_JF_x(13, 5) = out_13_5;
      out_JF_x(14, 5) = out_14_5;
      out_JF_x(1, 6) = out_1_6;
      out_JF_x(11, 6) = out_11_6;
      out_JF_x(12, 6) = out_12_6;
      out_JF_x(10, 7) = out_10_7;
      out_JF_x(11, 7) = out_11_7;
      out_JF_x(12, 7) = out_12_7;
      out_JF_x(13, 7) = out_13_7;
      out_JF_x(14, 7) = out_14_7;
      out_JF_x(2, 8) = out_2_8;
      out_JF_x(13, 8) = out_13_8;
      out_JF_x(14, 8) = out_14_8;
      out_JF_x(3, 9) = out_3_9;
      out_JF_x(11, 9) = out_11_9;
      out_JF_x(12, 9) = out_12_9;
      out_JF_x(4, 10) = out_4_10;
      out_JF_x(13, 10) = out_13_10;
      out_JF_x(14, 10) = out_14_10;
      out_JF_x(5, 11) = out_5_11;
      out_JF_x(7, 11) = out_7_11;
      out_JF_x(9, 11) = out_9_11;
      out_JF_x(11, 11) = out_11_11;
      out_JF_x(12, 11) = out_12_11;
      out_JF_x(13, 11) = out_13_11;
      out_JF_x(14, 11) = out_14_11;
      out_JF_x(5, 12) = out_5_12;
      out_JF_x(7, 12) = out_7_12;
      out_JF_x(9, 12) = out_9_12;
      out_JF_x(11, 12) = out_11_12;
      out_JF_x(12, 12) = out_12_12;
      out_JF_x(13, 12) = out_13_12;
      out_JF_x(14, 12) = out_14_12;
      out_JF_x(6, 13) = out_6_13;
      out_JF_x(8, 13) = out_8_13;
      out_JF_x(9, 13) = out_9_13;
      out_JF_x(11, 13) = out_11_13;
      out_JF_x(12, 13) = out_12_13;
      out_JF_x(13, 13) = out_13_13;
      out_JF_x(14, 13) = out_14_13;
      out_JF_x(6, 14) = out_6_14;
      out_JF_x(8, 14) = out_8_14;
      out_JF_x(9, 14) = out_9_14;
      out_JF_x(11, 14) = out_11_14;
      out_JF_x(12, 14) = out_12_14;
      out_JF_x(13, 14) = out_13_14;
      out_JF_x(14, 14) = out_14_14;
    end % JF_x
    %
    % - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    %
    function out_JF_x_dot = JF_x_dot( this, in_1, in_2, in_3, t )
      % Evaluate the Jacobian of F with respect to x_dot.

      % Extract properties
      m = this.m_m;
      g = this.m_g;
      l = this.m_l;

      % Extract inputs
      theta__A1 = in_1(1);
      theta__B2 = in_1(2);
      theta__C3 = in_1(3);
      theta__12 = in_1(4);
      theta__23 = in_1(5);
      omega__A1 = in_1(6);
      omega__B2 = in_1(7);
      omega__C3 = in_1(8);
      omega__12 = in_1(9);
      omega__23 = in_1(10);
      lambda__1 = in_1(11);
      lambda__2 = in_1(12);
      lambda__3 = in_1(13);
      lambda__4 = in_1(14);
      theta__A1_dot = in_2(1);
      theta__B2_dot = in_2(2);
      theta__C3_dot = in_2(3);
      theta__12_dot = in_2(4);
      theta__23_dot = in_2(5);
      omega__A1_dot = in_2(6);
      omega__B2_dot = in_2(7);
      omega__C3_dot = in_2(8);
      omega__12_dot = in_2(9);
      omega__23_dot = in_2(10);
      lambda__1_dot = in_2(11);
      lambda__2_dot = in_2(12);
      lambda__3_dot = in_2(13);
      lambda__4_dot = in_2(14);

      % Evaluate function
      out_1_1 = 1;
      t1 = g * m;
      t3 = -6 * t1 - 6 * lambda__2;
      t4 = cos(theta__A1);
      t5 = t4 ^ 2;
      t8 = sin(theta__A1);
      t11 = omega__A1 ^ 2;
      t13 = l * m;
      t16 = 3 * t1;
      t17 = 3 * lambda__2;
      t19 = 0.1e1 / l;
      t21 = 0.1e1 / m;
      out_11_1 = t21 * t19 * (-4 * t13 * t8 * t11 + 6 * t8 * lambda__1 * t4 + t5 * t3 + t16 + t17) / 4;
      t31 = 3 * lambda__1;
      out_12_1 = t21 * t19 * (-6 * lambda__1 * t5 + t4 * (4 * m * l * t11 + t8 * t3) + t31) / 4;
      out_10_2 = 1;
      t36 = 6 * t1 - 6 * lambda__2 + 6 * lambda__4;
      t37 = cos(theta__B2);
      t38 = t37 ^ 2;
      t40 = sin(theta__B2);
      t41 = lambda__1 - lambda__3;
      t44 = 6 * t37 * t41 * t40;
      t45 = omega__B2 ^ 2;
      t48 = 4 * t13 * t40 * t45;
      t49 = 3 * lambda__4;
      out_11_2 = t21 * t19 * (t38 * t36 - t16 + t17 + t44 + t48 - t49) / 4;
      t54 = -6 * t41;
      t59 = 4 * m * l * t45;
      t62 = 3 * lambda__3;
      out_12_2 = t21 * t19 * (t38 * t54 + t37 * (t40 * t36 - t59) + t31 - t62) / 4;
      t66 = -t36;
      out_13_2 = t21 * t19 * (t38 * t66 + t16 - t17 - t44 - t48 + t49) / 4;
      out_14_2 = t21 * t19 * (-t38 * t54 + t37 * (t40 * t66 + t59) - t31 + t62) / 4;
      out_2_3 = 1;
      t79 = omega__C3 ^ 2;
      t80 = sin(theta__C3);
      t84 = cos(theta__C3);
      t85 = t84 ^ 2;
      t91 = 12 * lambda__4;
      out_13_3 = t21 * t19 * (4 * t13 * t80 * t79 + 24 * t84 * t80 * lambda__3 - 24 * t85 * lambda__4 + t91) / 4;
      t104 = 12 * lambda__3;
      out_14_3 = t21 * t19 * (-24 * t85 * lambda__3 + t84 * (-4 * m * l * t79 - 24 * lambda__4 * t80) + t104) / 4;
      out_3_4 = 1;
      t108 = omega__12 ^ 2;
      t109 = sin(theta__12);
      t113 = cos(theta__12);
      t114 = t113 ^ 2;
      t117 = t113 * t109;
      out_11_4 = t21 * t19 * (-4 * t13 * t109 * t108 - 24 * lambda__2 * t114 + 24 * lambda__1 * t117 + 12 * lambda__2) / 4;
      out_12_4 = t21 * t19 * (-24 * lambda__1 * t114 + t113 * (4 * t108 * t13 - 24 * lambda__2 * t109) + 12 * lambda__1) / 4;
      out_4_5 = 1;
      t136 = omega__23 ^ 2;
      t137 = sin(theta__23);
      t141 = cos(theta__23);
      t142 = t141 ^ 2;
      t145 = t137 * t141;
      out_13_5 = t21 * t19 * (-4 * t13 * t137 * t136 - 24 * lambda__4 * t142 + 24 * lambda__3 * t145 + t91) / 4;
      out_14_5 = t21 * t19 * (-24 * lambda__3 * t142 + t141 * (4 * t136 * t13 - 24 * lambda__4 * t137) + t104) / 4;
      out_5_6 = 1;
      out_11_6 = 2 * t4 * omega__A1;
      out_12_6 = 2 * t8 * omega__A1;
      out_9_7 = 1;
      t165 = 2 * t37 * omega__B2;
      out_11_7 = -t165;
      t167 = 2 * t40 * omega__B2;
      out_12_7 = -t167;
      out_13_7 = t165;
      out_14_7 = t167;
      out_6_8 = 1;
      out_13_8 = -2 * t84 * omega__C3;
      out_14_8 = -2 * t80 * omega__C3;
      out_7_9 = 1;
      out_11_9 = 2 * t113 * omega__12;
      out_12_9 = 2 * t109 * omega__12;
      out_8_10 = 1;
      out_13_10 = 2 * t141 * omega__23;
      out_14_10 = 2 * t137 * omega__23;
      t176 = 3 * t38;
      t177 = 3 * t5;
      t178 = 12 * t114;
      out_11_11 = t21 * t19 * (-t176 - t177 - t178 + 18) / 4;
      t182 = t37 * t40;
      t183 = 3 * t182;
      out_12_11 = t21 * t19 * (-3 * t4 * t8 - 12 * t117 - t183) / 4;
      out_13_11 = t21 * t19 * (3 * t38 - 3) / 4;
      out_14_11 = 0.3e1 / 0.4e1 * t21 * t19 * t182;
      out_11_12 = out_12_11;
      out_12_12 = t21 * t19 * (t176 + t177 + t178) / 4;
      out_13_12 = out_14_11;
      out_14_12 = -0.3e1 / 0.4e1 * t21 * t19 * t38;
      out_11_13 = out_13_11;
      out_12_13 = out_13_12;
      t202 = 12 * t142;
      t203 = 12 * t85;
      out_13_13 = t21 * t19 * (-t202 - t203 - t176 + 27) / 4;
      out_14_13 = t21 * t19 * (-12 * t80 * t84 - 12 * t145 - t183) / 4;
      out_11_14 = out_12_13;
      out_12_14 = out_14_12;
      out_13_14 = out_14_13;
      out_14_14 = t21 * t19 * (t202 + t203 + t176) / 4;

      % Store outputs
      out_JF_x_dot = zeros(14, 14);
      out_JF_x_dot(1, 1) = out_1_1;
      out_JF_x_dot(11, 1) = out_11_1;
      out_JF_x_dot(12, 1) = out_12_1;
      out_JF_x_dot(10, 2) = out_10_2;
      out_JF_x_dot(11, 2) = out_11_2;
      out_JF_x_dot(12, 2) = out_12_2;
      out_JF_x_dot(13, 2) = out_13_2;
      out_JF_x_dot(14, 2) = out_14_2;
      out_JF_x_dot(2, 3) = out_2_3;
      out_JF_x_dot(13, 3) = out_13_3;
      out_JF_x_dot(14, 3) = out_14_3;
      out_JF_x_dot(3, 4) = out_3_4;
      out_JF_x_dot(11, 4) = out_11_4;
      out_JF_x_dot(12, 4) = out_12_4;
      out_JF_x_dot(4, 5) = out_4_5;
      out_JF_x_dot(13, 5) = out_13_5;
      out_JF_x_dot(14, 5) = out_14_5;
      out_JF_x_dot(5, 6) = out_5_6;
      out_JF_x_dot(11, 6) = out_11_6;
      out_JF_x_dot(12, 6) = out_12_6;
      out_JF_x_dot(9, 7) = out_9_7;
      out_JF_x_dot(11, 7) = out_11_7;
      out_JF_x_dot(12, 7) = out_12_7;
      out_JF_x_dot(13, 7) = out_13_7;
      out_JF_x_dot(14, 7) = out_14_7;
      out_JF_x_dot(6, 8) = out_6_8;
      out_JF_x_dot(13, 8) = out_13_8;
      out_JF_x_dot(14, 8) = out_14_8;
      out_JF_x_dot(7, 9) = out_7_9;
      out_JF_x_dot(11, 9) = out_11_9;
      out_JF_x_dot(12, 9) = out_12_9;
      out_JF_x_dot(8, 10) = out_8_10;
      out_JF_x_dot(13, 10) = out_13_10;
      out_JF_x_dot(14, 10) = out_14_10;
      out_JF_x_dot(11, 11) = out_11_11;
      out_JF_x_dot(12, 11) = out_12_11;
      out_JF_x_dot(13, 11) = out_13_11;
      out_JF_x_dot(14, 11) = out_14_11;
      out_JF_x_dot(11, 12) = out_11_12;
      out_JF_x_dot(12, 12) = out_12_12;
      out_JF_x_dot(13, 12) = out_13_12;
      out_JF_x_dot(14, 12) = out_14_12;
      out_JF_x_dot(11, 13) = out_11_13;
      out_JF_x_dot(12, 13) = out_12_13;
      out_JF_x_dot(13, 13) = out_13_13;
      out_JF_x_dot(14, 13) = out_14_13;
      out_JF_x_dot(11, 14) = out_11_14;
      out_JF_x_dot(12, 14) = out_12_14;
      out_JF_x_dot(13, 14) = out_13_14;
      out_JF_x_dot(14, 14) = out_14_14;
    end % JF_x_dot
    %
    % - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    %
    function out_JF_v = JF_v( this, in_1, in_2, in_3, t )
      % Evaluate the Jacobian of F with respect to v.

      % Extract properties
      m = this.m_m;
      g = this.m_g;
      l = this.m_l;

      % Extract inputs
      theta__A1 = in_1(1);
      theta__B2 = in_1(2);
      theta__C3 = in_1(3);
      theta__12 = in_1(4);
      theta__23 = in_1(5);
      omega__A1 = in_1(6);
      omega__B2 = in_1(7);
      omega__C3 = in_1(8);
      omega__12 = in_1(9);
      omega__23 = in_1(10);
      lambda__1 = in_1(11);
      lambda__2 = in_1(12);
      lambda__3 = in_1(13);
      lambda__4 = in_1(14);
      theta__A1_dot = in_2(1);
      theta__B2_dot = in_2(2);
      theta__C3_dot = in_2(3);
      theta__12_dot = in_2(4);
      theta__23_dot = in_2(5);
      omega__A1_dot = in_2(6);
      omega__B2_dot = in_2(7);
      omega__C3_dot = in_2(8);
      omega__12_dot = in_2(9);
      omega__23_dot = in_2(10);
      lambda__1_dot = in_2(11);
      lambda__2_dot = in_2(12);
      lambda__3_dot = in_2(13);
      lambda__4_dot = in_2(14);

      % Evaluate function
      % No body

      % Store outputs
      out_JF_v = zeros(14, 0);
    end % JF_v
    %
    % - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    %
    function out_v = v( this, in_1, t )
      % Evaluate the the veils v.

      % Extract properties
      m = this.m_m;
      g = this.m_g;
      l = this.m_l;

      % Extract inputs
      theta__A1 = in_1(1);
      theta__B2 = in_1(2);
      theta__C3 = in_1(3);
      theta__12 = in_1(4);
      theta__23 = in_1(5);
      omega__A1 = in_1(6);
      omega__B2 = in_1(7);
      omega__C3 = in_1(8);
      omega__12 = in_1(9);
      omega__23 = in_1(10);
      lambda__1 = in_1(11);
      lambda__2 = in_1(12);
      lambda__3 = in_1(13);
      lambda__4 = in_1(14);

      % Evaluate function
      % No body

      % Store outputs
      out_v = zeros(0, 1);
    end % v
    %
    % - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    %
    function out_Jv_x = Jv_x( this, in_1, in_2, t )
      % Evaluate the Jacobian of v with respect to x.

      % Extract properties
      m = this.m_m;
      g = this.m_g;
      l = this.m_l;

      % Extract inputs
      theta__A1 = in_1(1);
      theta__B2 = in_1(2);
      theta__C3 = in_1(3);
      theta__12 = in_1(4);
      theta__23 = in_1(5);
      omega__A1 = in_1(6);
      omega__B2 = in_1(7);
      omega__C3 = in_1(8);
      omega__12 = in_1(9);
      omega__23 = in_1(10);
      lambda__1 = in_1(11);
      lambda__2 = in_1(12);
      lambda__3 = in_1(13);
      lambda__4 = in_1(14);

      % Evaluate function
      % No body

      % Store outputs
      out_Jv_x = zeros(0, 14);
    end % Jv_x
    %
    % - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    %
    function out_h = h( this, in_1, in_2, t )
      % Calculate the residual of the invariants h.

      % Extract properties
      m = this.m_m;
      g = this.m_g;
      l = this.m_l;

      % Extract inputs
      theta__A1 = in_1(1);
      theta__B2 = in_1(2);
      theta__C3 = in_1(3);
      theta__12 = in_1(4);
      theta__23 = in_1(5);
      omega__A1 = in_1(6);
      omega__B2 = in_1(7);
      omega__C3 = in_1(8);
      omega__12 = in_1(9);
      omega__23 = in_1(10);
      lambda__1 = in_1(11);
      lambda__2 = in_1(12);
      lambda__3 = in_1(13);
      lambda__4 = in_1(14);

      % Evaluate function
      t1 = cos(theta__A1);
      t2 = cos(theta__12);
      t3 = cos(theta__B2);
      out_1 = -(t1 + t2 - 1 - t3) * l;
      t6 = sin(theta__A1);
      t7 = sin(theta__12);
      t8 = sin(theta__B2);
      out_2 = -(t6 + t7 - t8) * l;
      t11 = cos(theta__23);
      t12 = cos(theta__C3);
      out_3 = -(t3 + t11 - 1 - t12) * l;
      t15 = sin(theta__23);
      t16 = sin(theta__C3);
      out_4 = -(t15 + t8 - t16) * l;
      t19 = t8 * omega__B2;
      out_5 = -t6 * omega__A1 - t7 * omega__12 + t19;
      t22 = t3 * omega__B2;
      out_6 = t1 * omega__A1 + t2 * omega__12 - t22;
      out_7 = -t15 * omega__23 + t16 * omega__C3 - t19;
      out_8 = t11 * omega__23 - t12 * omega__C3 + t22;
      t29 = -lambda__1 + lambda__3;
      t30 = 3 * t29;
      t31 = t3 ^ 2;
      t33 = g * m;
      t35 = 3 * t33 - 3 * lambda__2 + 3 * lambda__4;
      t37 = omega__B2 ^ 2;
      t40 = 4 * m * l * t37;
      t43 = t1 ^ 2;
      t47 = -3 * t33 - 3 * lambda__2;
      t49 = omega__A1 ^ 2;
      t55 = t2 ^ 2;
      t58 = l * m;
      t59 = omega__12 ^ 2;
      t69 = 0.1e1 / l;
      t71 = 0.1e1 / m;
      out_9 = t71 * t69 * (t31 * t30 + t3 * (t8 * t35 - t40) - 3 * lambda__1 * t43 + t1 * (4 * m * l * t49 + t6 * t47) - 12 * lambda__1 * t55 + t2 * (4 * t59 * t58 - 12 * lambda__2 * t7) + 18 * lambda__1 - 3 * lambda__3) / 4;
      t73 = -t35;
      t78 = -3 * t3 * t29 * t8;
      t86 = 4 * t58 * t8 * t37;
      out_10 = t71 * t69 * (t31 * t73 - t78 - t43 * t47 - 3 * t6 * lambda__1 * t1 - t86 + 12 * lambda__2 * t55 - 12 * lambda__1 * t2 * t7 + 4 * (t6 * t49 + t7 * t59) * t58) / 4;
      t105 = t11 ^ 2;
      t108 = omega__23 ^ 2;
      t115 = t12 ^ 2;
      t118 = omega__C3 ^ 2;
      out_11 = t71 * t69 * (-t31 * t30 + t3 * (t8 * t73 + t40) - 12 * lambda__3 * t105 + t11 * (4 * t108 * t58 - 12 * lambda__4 * t15) - 12 * t115 * lambda__3 + t12 * (-4 * m * l * t118 - 12 * lambda__4 * t16) - 3 * lambda__1 + 27 * lambda__3) / 4;
      out_12 = t71 * t69 * (t31 * t35 + t78 + t86 + 12 * lambda__4 * t105 - 12 * lambda__3 * t15 * t11 + 12 * t115 * lambda__4 - 12 * t12 * t16 * lambda__3 - 4 * (-t15 * t108 + t16 * t118) * t58) / 4;

      % Store outputs
      out_h = zeros(12, 1);
      out_h(1) = out_1;
      out_h(2) = out_2;
      out_h(3) = out_3;
      out_h(4) = out_4;
      out_h(5) = out_5;
      out_h(6) = out_6;
      out_h(7) = out_7;
      out_h(8) = out_8;
      out_h(9) = out_9;
      out_h(10) = out_10;
      out_h(11) = out_11;
      out_h(12) = out_12;
    end % h
    %
    % - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    %
    function out_Jh_x = Jh_x( this, in_1, in_2, t )
      % Calculate the Jacobian of h with respect to x.

      % Extract properties
      m = this.m_m;
      g = this.m_g;
      l = this.m_l;

      % Extract inputs
      theta__A1 = in_1(1);
      theta__B2 = in_1(2);
      theta__C3 = in_1(3);
      theta__12 = in_1(4);
      theta__23 = in_1(5);
      omega__A1 = in_1(6);
      omega__B2 = in_1(7);
      omega__C3 = in_1(8);
      omega__12 = in_1(9);
      omega__23 = in_1(10);
      lambda__1 = in_1(11);
      lambda__2 = in_1(12);
      lambda__3 = in_1(13);
      lambda__4 = in_1(14);

      % Evaluate function
      t1 = sin(theta__A1);
      out_1_1 = t1 * l;
      t2 = cos(theta__A1);
      out_2_1 = -t2 * l;
      t4 = t2 * omega__A1;
      out_5_1 = -t4;
      t5 = t1 * omega__A1;
      out_6_1 = -t5;
      t9 = g * m;
      t11 = -3 * t9 - 3 * lambda__2;
      t12 = t2 ^ 2;
      t15 = omega__A1 ^ 2;
      t22 = 0.1e1 / l;
      t24 = 0.1e1 / m;
      out_9_1 = t24 * t22 * (6 * t1 * lambda__1 * t2 + t12 * t11 - t1 * (4 * m * l * t15 + t1 * t11)) / 4;
      t30 = t1 ^ 2;
      t36 = l * m;
      out_10_1 = t24 * t22 * (2 * t1 * t2 * t11 + 4 * t36 * t2 * t15 - 3 * lambda__1 * t12 + 3 * t30 * lambda__1) / 4;
      t42 = sin(theta__B2);
      t43 = t42 * l;
      out_1_2 = -t43;
      t44 = cos(theta__B2);
      out_2_2 = t44 * l;
      out_3_2 = t43;
      out_4_2 = -out_2_2;
      out_5_2 = t44 * omega__B2;
      out_6_2 = t42 * omega__B2;
      out_7_2 = -out_5_2;
      out_8_2 = -out_6_2;
      t45 = -lambda__1 + lambda__3;
      t46 = 3 * t45;
      t51 = 3 * t9 - 3 * lambda__2 + 3 * lambda__4;
      t52 = t44 ^ 2;
      t55 = omega__B2 ^ 2;
      t58 = 4 * m * l * t55;
      out_9_2 = t24 * t22 * (-2 * t42 * t44 * t46 + t52 * t51 - t42 * (t42 * t51 - t58)) / 4;
      t64 = -t51;
      t68 = -t45;
      t70 = 3 * t68 * t52;
      t71 = t42 ^ 2;
      t73 = 3 * t68 * t71;
      t76 = 4 * t36 * t44 * t55;
      out_10_2 = t24 * t22 * (-2 * t42 * t44 * t64 - t70 + t73 - t76) / 4;
      out_11_2 = t24 * t22 * (2 * t42 * t44 * t46 + t52 * t64 - t42 * (t42 * t64 + t58)) / 4;
      out_12_2 = t24 * t22 * (-2 * t42 * t44 * t51 + t70 - t73 + t76) / 4;
      t97 = sin(theta__C3);
      out_3_3 = -t97 * l;
      t99 = cos(theta__C3);
      out_4_3 = t99 * l;
      out_7_3 = t99 * omega__C3;
      out_8_3 = t97 * omega__C3;
      t103 = t99 ^ 2;
      t106 = omega__C3 ^ 2;
      t110 = lambda__4 * t97;
      out_11_3 = t24 * t22 * (24 * t99 * t97 * lambda__3 - 12 * t103 * lambda__4 - t97 * (-4 * m * l * t106 - 12 * t110)) / 4;
      t124 = t97 ^ 2;
      out_12_3 = t24 * t22 * (-4 * t36 * t99 * t106 - 12 * t103 * lambda__3 - 24 * t99 * t110 + 12 * t124 * lambda__3) / 4;
      t130 = sin(theta__12);
      out_1_4 = l * t130;
      t131 = cos(theta__12);
      out_2_4 = -l * t131;
      t133 = t131 * omega__12;
      out_5_4 = -t133;
      t134 = t130 * omega__12;
      out_6_4 = -t134;
      t135 = t131 * t130;
      t138 = t131 ^ 2;
      t141 = omega__12 ^ 2;
      out_9_4 = t24 * t22 * (24 * lambda__1 * t135 - 12 * lambda__2 * t138 - t130 * (-12 * lambda__2 * t130 + 4 * t141 * t36)) / 4;
      t156 = t130 ^ 2;
      out_10_4 = t24 * t22 * (4 * t36 * t131 * t141 - 24 * lambda__2 * t135 - 12 * lambda__1 * t138 + 12 * lambda__1 * t156) / 4;
      t164 = sin(theta__23);
      out_3_5 = l * t164;
      t165 = cos(theta__23);
      out_4_5 = -l * t165;
      t167 = t165 * omega__23;
      out_7_5 = -t167;
      t168 = t164 * omega__23;
      out_8_5 = -t168;
      t169 = t164 * t165;
      t172 = t165 ^ 2;
      t175 = omega__23 ^ 2;
      out_11_5 = t24 * t22 * (24 * lambda__3 * t169 - 12 * lambda__4 * t172 - t164 * (-12 * lambda__4 * t164 + 4 * t175 * t36)) / 4;
      t192 = t164 ^ 2;
      out_12_5 = t24 * t22 * (4 * t36 * t165 * t175 - 24 * lambda__4 * t169 - 12 * lambda__3 * t172 + 12 * lambda__3 * t192) / 4;
      out_5_6 = -t1;
      out_6_6 = t2;
      out_9_6 = 2 * t4;
      out_10_6 = 2 * t5;
      out_5_7 = t42;
      out_6_7 = -t44;
      out_7_7 = -out_5_7;
      out_8_7 = t44;
      t198 = 2 * out_5_2;
      out_9_7 = -t198;
      t199 = 2 * out_6_2;
      out_10_7 = -t199;
      out_11_7 = t198;
      out_12_7 = t199;
      out_7_8 = t97;
      out_8_8 = -t99;
      out_11_8 = -2 * out_7_3;
      out_12_8 = -2 * out_8_3;
      out_5_9 = -t130;
      out_6_9 = t131;
      out_9_9 = 2 * t133;
      out_10_9 = 2 * t134;
      out_7_10 = -t164;
      out_8_10 = t165;
      out_11_10 = 2 * t167;
      out_12_10 = 2 * t168;
      t202 = 3 * t52;
      t203 = 3 * t12;
      t204 = 12 * t138;
      out_9_11 = t24 * t22 * (-t202 - t203 - t204 + 18) / 4;
      t208 = out_8_7 * out_5_7;
      t209 = 3 * t208;
      out_10_11 = t24 * t22 * (-3 * out_6_6 * t1 - 12 * out_6_9 * t130 - t209) / 4;
      out_11_11 = t24 * t22 * (3 * t52 - 3) / 4;
      out_12_11 = 0.3e1 / 0.4e1 * t24 * t22 * t208;
      out_9_12 = out_10_11;
      out_10_12 = t24 * t22 * (t202 + t203 + t204) / 4;
      out_11_12 = out_12_11;
      out_12_12 = -0.3e1 / 0.4e1 * t24 * t22 * t52;
      out_9_13 = out_11_11;
      out_10_13 = out_11_12;
      t229 = 12 * t172;
      t230 = 12 * t103;
      out_11_13 = t24 * t22 * (-t229 - t230 - t202 + 27) / 4;
      out_12_13 = t24 * t22 * (-12 * out_7_8 * t99 - 12 * t164 * out_8_10 - t209) / 4;
      out_9_14 = out_10_13;
      out_10_14 = out_12_12;
      out_11_14 = out_12_13;
      out_12_14 = t24 * t22 * (t229 + t230 + t202) / 4;

      % Store outputs
      out_Jh_x = zeros(12, 14);
      out_Jh_x(1, 1) = out_1_1;
      out_Jh_x(2, 1) = out_2_1;
      out_Jh_x(5, 1) = out_5_1;
      out_Jh_x(6, 1) = out_6_1;
      out_Jh_x(9, 1) = out_9_1;
      out_Jh_x(10, 1) = out_10_1;
      out_Jh_x(1, 2) = out_1_2;
      out_Jh_x(2, 2) = out_2_2;
      out_Jh_x(3, 2) = out_3_2;
      out_Jh_x(4, 2) = out_4_2;
      out_Jh_x(5, 2) = out_5_2;
      out_Jh_x(6, 2) = out_6_2;
      out_Jh_x(7, 2) = out_7_2;
      out_Jh_x(8, 2) = out_8_2;
      out_Jh_x(9, 2) = out_9_2;
      out_Jh_x(10, 2) = out_10_2;
      out_Jh_x(11, 2) = out_11_2;
      out_Jh_x(12, 2) = out_12_2;
      out_Jh_x(3, 3) = out_3_3;
      out_Jh_x(4, 3) = out_4_3;
      out_Jh_x(7, 3) = out_7_3;
      out_Jh_x(8, 3) = out_8_3;
      out_Jh_x(11, 3) = out_11_3;
      out_Jh_x(12, 3) = out_12_3;
      out_Jh_x(1, 4) = out_1_4;
      out_Jh_x(2, 4) = out_2_4;
      out_Jh_x(5, 4) = out_5_4;
      out_Jh_x(6, 4) = out_6_4;
      out_Jh_x(9, 4) = out_9_4;
      out_Jh_x(10, 4) = out_10_4;
      out_Jh_x(3, 5) = out_3_5;
      out_Jh_x(4, 5) = out_4_5;
      out_Jh_x(7, 5) = out_7_5;
      out_Jh_x(8, 5) = out_8_5;
      out_Jh_x(11, 5) = out_11_5;
      out_Jh_x(12, 5) = out_12_5;
      out_Jh_x(5, 6) = out_5_6;
      out_Jh_x(6, 6) = out_6_6;
      out_Jh_x(9, 6) = out_9_6;
      out_Jh_x(10, 6) = out_10_6;
      out_Jh_x(5, 7) = out_5_7;
      out_Jh_x(6, 7) = out_6_7;
      out_Jh_x(7, 7) = out_7_7;
      out_Jh_x(8, 7) = out_8_7;
      out_Jh_x(9, 7) = out_9_7;
      out_Jh_x(10, 7) = out_10_7;
      out_Jh_x(11, 7) = out_11_7;
      out_Jh_x(12, 7) = out_12_7;
      out_Jh_x(7, 8) = out_7_8;
      out_Jh_x(8, 8) = out_8_8;
      out_Jh_x(11, 8) = out_11_8;
      out_Jh_x(12, 8) = out_12_8;
      out_Jh_x(5, 9) = out_5_9;
      out_Jh_x(6, 9) = out_6_9;
      out_Jh_x(9, 9) = out_9_9;
      out_Jh_x(10, 9) = out_10_9;
      out_Jh_x(7, 10) = out_7_10;
      out_Jh_x(8, 10) = out_8_10;
      out_Jh_x(11, 10) = out_11_10;
      out_Jh_x(12, 10) = out_12_10;
      out_Jh_x(9, 11) = out_9_11;
      out_Jh_x(10, 11) = out_10_11;
      out_Jh_x(11, 11) = out_11_11;
      out_Jh_x(12, 11) = out_12_11;
      out_Jh_x(9, 12) = out_9_12;
      out_Jh_x(10, 12) = out_10_12;
      out_Jh_x(11, 12) = out_11_12;
      out_Jh_x(12, 12) = out_12_12;
      out_Jh_x(9, 13) = out_9_13;
      out_Jh_x(10, 13) = out_10_13;
      out_Jh_x(11, 13) = out_11_13;
      out_Jh_x(12, 13) = out_12_13;
      out_Jh_x(9, 14) = out_9_14;
      out_Jh_x(10, 14) = out_10_14;
      out_Jh_x(11, 14) = out_11_14;
      out_Jh_x(12, 14) = out_12_14;
    end % Jh_x
    %
    % - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    %
    function out_Jh_v = Jh_v( this, in_1, in_2, t )
      % Calculate the Jacobian of h with respect to v.

      % Extract properties
      m = this.m_m;
      g = this.m_g;
      l = this.m_l;

      % Extract inputs
      theta__A1 = in_1(1);
      theta__B2 = in_1(2);
      theta__C3 = in_1(3);
      theta__12 = in_1(4);
      theta__23 = in_1(5);
      omega__A1 = in_1(6);
      omega__B2 = in_1(7);
      omega__C3 = in_1(8);
      omega__12 = in_1(9);
      omega__23 = in_1(10);
      lambda__1 = in_1(11);
      lambda__2 = in_1(12);
      lambda__3 = in_1(13);
      lambda__4 = in_1(14);

      % Evaluate function
      % No body

      % Store outputs
      out_Jh_v = zeros(12, 0);
    end % Jh_v
    %
    % - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    %
  end
end % DoubleFourBar

% That's All Folks!
