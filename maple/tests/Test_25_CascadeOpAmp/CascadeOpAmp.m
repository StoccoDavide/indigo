% +--------------------------------------------------------------------------+
% | 'Indigo' module version 1.0 - BSD 3-Clause License - Copyright (c) 2023  |
% | Current version authors:                                                 |
% |   Davide Stocco and Enrico Bertolazzi.                                   |
% +--------------------------------------------------------------------------+

% Matlab generated code for implicit system: CascadeOpAmp
% This file has been automatically generated by Indigo.
% DISCLAIMER: If you need to edit it, do it wisely!

classdef CascadeOpAmp < Indigo.DAE.Explicit
  %
  % No class description provided.
  %
  properties (SetAccess = protected, Hidden = true)
    % User data
    m_U_i = 12;
    m_f = 300;
    m_R__1 = .1e7;
    m_R__2 = .1e7;
    m_R__3 = .1e7;
    m_R__4 = .1e7;
    m_R__5 = .1e7;
    m_R__6 = .1e7;
    m_R__7 = .1e7;
    m_R__8 = .1e7;
    m_R__9 = .1e7;
    m_R__10 = .1e7;
    m_C__1 = .1e-5;
    m_C__2 = .1e-5;
    m_C__3 = .1e-5;
    m_C__4 = .1e-5;
    m_C__5 = .1e-5;
    m_C__6 = .1e-5;
    m_C__7 = .1e-5;
    m_C__8 = .1e-5;
    m_C__9 = .1e-5;
    m_C__10 = .1e-5;
  end
  %
  methods
    %
    % - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    %
    function this = CascadeOpAmp( varargin )
      % Class constructor.

      % Superclass constructor
      num_eqns = 10;
      num_veil = 0;
      num_invs = 10;
      this = this@Indigo.DAE.Explicit('CascadeOpAmp', num_eqns, num_veil, num_invs);

      % User data
      if (nargin == 0)
        % Keep default values
      elseif (nargin == 1 && isstruct(varargin{1}))
        this.m_U_i = varargin{1}.U_i;
        this.m_f = varargin{1}.f;
        this.m_R__1 = varargin{1}.R__1;
        this.m_R__2 = varargin{1}.R__2;
        this.m_R__3 = varargin{1}.R__3;
        this.m_R__4 = varargin{1}.R__4;
        this.m_R__5 = varargin{1}.R__5;
        this.m_R__6 = varargin{1}.R__6;
        this.m_R__7 = varargin{1}.R__7;
        this.m_R__8 = varargin{1}.R__8;
        this.m_R__9 = varargin{1}.R__9;
        this.m_R__10 = varargin{1}.R__10;
        this.m_C__1 = varargin{1}.C__1;
        this.m_C__2 = varargin{1}.C__2;
        this.m_C__3 = varargin{1}.C__3;
        this.m_C__4 = varargin{1}.C__4;
        this.m_C__5 = varargin{1}.C__5;
        this.m_C__6 = varargin{1}.C__6;
        this.m_C__7 = varargin{1}.C__7;
        this.m_C__8 = varargin{1}.C__8;
        this.m_C__9 = varargin{1}.C__9;
        this.m_C__10 = varargin{1}.C__10;
      elseif (nargin == 22)
        this.m_U_i = varargin{1};
        this.m_f = varargin{2};
        this.m_R__1 = varargin{3};
        this.m_R__2 = varargin{4};
        this.m_R__3 = varargin{5};
        this.m_R__4 = varargin{6};
        this.m_R__5 = varargin{7};
        this.m_R__6 = varargin{8};
        this.m_R__7 = varargin{9};
        this.m_R__8 = varargin{10};
        this.m_R__9 = varargin{11};
        this.m_R__10 = varargin{12};
        this.m_C__1 = varargin{13};
        this.m_C__2 = varargin{14};
        this.m_C__3 = varargin{15};
        this.m_C__4 = varargin{16};
        this.m_C__5 = varargin{17};
        this.m_C__6 = varargin{18};
        this.m_C__7 = varargin{19};
        this.m_C__8 = varargin{20};
        this.m_C__9 = varargin{21};
        this.m_C__10 = varargin{22};
      else
        error('wrong number of input arguments.');
      end
    end % CascadeOpAmp
    %
    % - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    %
    function out_f = f( this, ~, ~, t )
      % Evaluate the function f.

      % Extract properties
      U_i = this.m_U_i;
      f = this.m_f;
      R__1 = this.m_R__1;
      R__2 = this.m_R__2;
      R__3 = this.m_R__3;
      R__4 = this.m_R__4;
      R__5 = this.m_R__5;
      R__6 = this.m_R__6;
      R__7 = this.m_R__7;
      R__8 = this.m_R__8;
      R__9 = this.m_R__9;
      R__10 = this.m_R__10;
      C__1 = this.m_C__1;
      C__2 = this.m_C__2;
      C__3 = this.m_C__3;
      C__4 = this.m_C__4;
      C__5 = this.m_C__5;
      C__6 = this.m_C__6;
      C__7 = this.m_C__7;
      C__8 = this.m_C__8;
      C__9 = this.m_C__9;
      C__10 = this.m_C__10;

      % Extract inputs

      % Evaluate function
      t1 = R__1 * C__1;
      t2 = U_i * t1;
      t3 = pi ^ 2;
      t4 = f ^ 2;
      t8 = 2 * pi * f * t;
      t9 = cos(t8);
      out_1 = 4 * t9 * t4 * t3 * t2;
      t12 = C__2 * R__2;
      t13 = t1 * t12;
      t14 = t3 * pi;
      t16 = t4 * f;
      t17 = sin(t8);
      out_2 = 8 * t17 * t16 * t14 * U_i * t13;
      t21 = C__3 * R__3;
      t23 = C__1 * t12 * t21;
      t24 = R__1 * U_i;
      t25 = t3 ^ 2;
      t26 = t4 ^ 2;
      out_3 = -16 * t9 * t26 * t25 * t24 * t23;
      t32 = C__4 * R__4;
      t33 = C__3 * t32;
      t34 = C__2 * R__3;
      t35 = R__2 * t34;
      t36 = t35 * t33;
      out_4 = -32 * t17 * t26 * f * t25 * pi * t2 * t36;
      t44 = C__5 * R__5;
      t45 = C__4 * t44;
      t46 = R__4 * C__3;
      t49 = C__1 * R__2;
      out_5 = 64 * t9 * t26 * t4 * t25 * t3 * U_i * R__1 * t49 * t34 * t46 * t45;
      t58 = C__6 * R__6;
      out_6 = 128 * t17 * t26 * t16 * t25 * t14 * U_i * t13 * t21 * t32 * t44 * t58;
      t69 = C__7 * R__7;
      t74 = t25 ^ 2;
      t75 = t26 ^ 2;
      out_7 = -256 * t9 * t75 * t74 * t24 * t49 * t34 * t33 * t44 * t58 * t69;
      t82 = C__8 * R__8;
      t83 = C__6 * t69;
      t85 = R__6 * C__5;
      out_8 = -512 * t17 * t75 * f * t74 * pi * t24 * t23 * R__5 * C__4 * R__4 * t85 * t83 * t82;
      out_9 = 1024 * t9 * t75 * t4 * t74 * t3 * t2 * t35 * t46 * t45 * R__7 * C__6 * R__6 * C__7 * t82 * C__9 * R__9;
      out_10 = 2048 * t17 * t75 * t16 * t74 * t14 * t2 * t36 * R__5 * t85 * t83 * C__10 * R__10 * C__9 * R__9 * C__8 * R__8;

      % Store outputs
      out_f = zeros(10, 1);
      out_f(1) = out_1;
      out_f(2) = out_2;
      out_f(3) = out_3;
      out_f(4) = out_4;
      out_f(5) = out_5;
      out_f(6) = out_6;
      out_f(7) = out_7;
      out_f(8) = out_8;
      out_f(9) = out_9;
      out_f(10) = out_10;
    end % f
    %
    % - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    %
    function out_Jf_x = Jf_x( ~, ~, ~, ~ )
      % Evaluate the Jacobian of f with respect to x.

      % Extract properties
      % No properties

      % Extract inputs

      % Evaluate function
      % No body

      % Store outputs
      out_Jf_x = zeros(10, 10);
    end % Jf_x
    %
    % - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    %
    function out_Jf_v = Jf_v( ~, ~, ~, ~ )
      % Evaluate the Jacobian of f with respect to v.

      % Extract properties
      % No properties

      % Extract inputs

      % Evaluate function
      % No body

      % Store outputs
      out_Jf_v = zeros(10, 0);
    end % Jf_v
    %
    % - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    %
    function out_v = v( ~, ~, ~ )
      % Evaluate the the veils v.

      % Extract properties
      % No properties

      % Extract inputs

      % Evaluate function
      % No body

      % Store outputs
      out_v = zeros(0, 1);
    end % v
    %
    % - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    %
    function out_Jv_x = Jv_x( ~, ~, ~, ~ )
      % Evaluate the Jacobian of v with respect to x.

      % Extract properties
      % No properties

      % Extract inputs

      % Evaluate function
      % No body

      % Store outputs
      out_Jv_x = zeros(0, 10);
    end % Jv_x
    %
    % - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    %
    function out_h = h( this, in_1, ~, t )
      % Calculate the residual of the invariants h.

      % Extract properties
      U_i = this.m_U_i;
      f = this.m_f;
      R__1 = this.m_R__1;
      R__2 = this.m_R__2;
      R__3 = this.m_R__3;
      R__4 = this.m_R__4;
      R__5 = this.m_R__5;
      R__6 = this.m_R__6;
      R__7 = this.m_R__7;
      R__8 = this.m_R__8;
      R__9 = this.m_R__9;
      R__10 = this.m_R__10;
      C__1 = this.m_C__1;
      C__2 = this.m_C__2;
      C__3 = this.m_C__3;
      C__4 = this.m_C__4;
      C__5 = this.m_C__5;
      C__6 = this.m_C__6;
      C__7 = this.m_C__7;
      C__8 = this.m_C__8;
      C__9 = this.m_C__9;
      C__10 = this.m_C__10;

      % Extract inputs
      x__1 = in_1(1);
      x__2 = in_1(2);
      x__3 = in_1(3);
      x__4 = in_1(4);
      x__5 = in_1(5);
      x__6 = in_1(6);
      x__7 = in_1(7);
      x__8 = in_1(8);
      x__9 = in_1(9);
      x__10 = in_1(10);

      % Evaluate function
      t1 = R__1 * C__1;
      t2 = U_i * t1;
      t3 = f * pi;
      t5 = 2 * t * t3;
      t6 = sin(t5);
      out_1 = 2 * t6 * t3 * t2 - x__1;
      t10 = C__2 * R__2;
      t11 = t1 * t10;
      t12 = pi ^ 2;
      t14 = f ^ 2;
      t15 = cos(t5);
      out_2 = -4 * t15 * t14 * t12 * U_i * t11 - x__2;
      t20 = C__3 * R__3;
      t22 = C__1 * t10 * t20;
      t23 = R__1 * U_i;
      t24 = t12 * pi;
      t25 = t14 * f;
      out_3 = -8 * t6 * t25 * t24 * t23 * t22 - x__3;
      t31 = C__4 * R__4;
      t32 = C__3 * t31;
      t33 = C__2 * R__3;
      t34 = R__2 * t33;
      t35 = t34 * t32;
      t36 = t12 ^ 2;
      t37 = t14 ^ 2;
      out_4 = 16 * t15 * t37 * t36 * t2 * t35 - x__4;
      t43 = C__5 * R__5;
      t44 = C__4 * t43;
      t45 = R__4 * C__3;
      t48 = C__1 * R__2;
      out_5 = 32 * t6 * t37 * f * t36 * pi * U_i * R__1 * t48 * t33 * t45 * t44 - x__5;
      t58 = C__6 * R__6;
      out_6 = -64 * t15 * t37 * t14 * t36 * t12 * U_i * t11 * t20 * t31 * t43 * t58 - x__6;
      t70 = C__7 * R__7;
      out_7 = -128 * t6 * t37 * t25 * t36 * t24 * t23 * t48 * t33 * t32 * t43 * t58 * t70 - x__7;
      t83 = C__8 * R__8;
      t84 = C__6 * t70;
      t86 = R__6 * C__5;
      t91 = t36 ^ 2;
      t92 = t37 ^ 2;
      out_8 = 256 * t15 * t92 * t91 * t23 * t22 * R__5 * C__4 * R__4 * t86 * t84 * t83 - x__8;
      out_9 = 512 * t6 * t92 * f * t91 * pi * t2 * t34 * t45 * t44 * R__7 * C__6 * R__6 * C__7 * t83 * C__9 * R__9 - x__9;
      out_10 = -1024 * t15 * t92 * t14 * t91 * t12 * t2 * t35 * R__5 * t86 * t84 * C__10 * R__10 * C__9 * R__9 * C__8 * R__8 - x__10;

      % Store outputs
      out_h = zeros(10, 1);
      out_h(1) = out_1;
      out_h(2) = out_2;
      out_h(3) = out_3;
      out_h(4) = out_4;
      out_h(5) = out_5;
      out_h(6) = out_6;
      out_h(7) = out_7;
      out_h(8) = out_8;
      out_h(9) = out_9;
      out_h(10) = out_10;
    end % h
    %
    % - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    %
    function out_Jh_x = Jh_x( ~, ~, ~, ~ )
      % Calculate the Jacobian of h with respect to x.

      % Extract properties
      % No properties

      % Extract inputs

      % Evaluate function
      out_1_1 = -1;
      out_2_2 = -1;
      out_3_3 = -1;
      out_4_4 = -1;
      out_5_5 = -1;
      out_6_6 = -1;
      out_7_7 = -1;
      out_8_8 = -1;
      out_9_9 = -1;
      out_10_10 = -1;

      % Store outputs
      out_Jh_x = zeros(10, 10);
      out_Jh_x(1, 1) = out_1_1;
      out_Jh_x(2, 2) = out_2_2;
      out_Jh_x(3, 3) = out_3_3;
      out_Jh_x(4, 4) = out_4_4;
      out_Jh_x(5, 5) = out_5_5;
      out_Jh_x(6, 6) = out_6_6;
      out_Jh_x(7, 7) = out_7_7;
      out_Jh_x(8, 8) = out_8_8;
      out_Jh_x(9, 9) = out_9_9;
      out_Jh_x(10, 10) = out_10_10;
    end % Jh_x
    %
    % - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    %
    function out_Jh_v = Jh_v( ~, ~, ~, ~ )
      % Calculate the Jacobian of h with respect to v.

      % Extract properties
      % No properties

      % Extract inputs

      % Evaluate function
      % No body

      % Store outputs
      out_Jh_v = zeros(10, 0);
    end % Jh_v
    %
    % - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    %
    function out_pivots = pivots( this, ~, ~, ~ )
      % Calculate the pivoting values

      % Extract properties
      R__2 = this.m_R__2;
      R__3 = this.m_R__3;
      R__4 = this.m_R__4;
      R__5 = this.m_R__5;
      R__6 = this.m_R__6;
      R__7 = this.m_R__7;
      R__8 = this.m_R__8;
      R__9 = this.m_R__9;
      R__10 = this.m_R__10;
      C__2 = this.m_C__2;
      C__3 = this.m_C__3;
      C__4 = this.m_C__4;
      C__5 = this.m_C__5;
      C__6 = this.m_C__6;
      C__7 = this.m_C__7;
      C__8 = this.m_C__8;
      C__9 = this.m_C__9;
      C__10 = this.m_C__10;

      % Extract inputs

      % Evaluate function
      out_1_1 = C__2 * R__2;
      out_2_1 = C__3 * R__3;
      out_3_1 = C__4 * R__4;
      out_4_1 = C__5 * R__5;
      out_5_1 = C__6 * R__6;
      out_6_1 = C__7 * R__7;
      out_7_1 = C__8 * R__8;
      out_8_1 = C__9 * R__9;
      out_9_1 = C__10 * R__10;
      out_10_1 = -1;
      out_1_2 = out_2_1;
      out_2_2 = out_3_1;
      out_3_2 = out_4_1;
      out_4_2 = out_5_1;
      out_5_2 = out_6_1;
      out_6_2 = out_7_1;
      out_7_2 = out_8_1;
      out_8_2 = out_9_1;
      out_9_2 = -1;
      out_10_2 = -1;
      out_1_3 = -1;
      out_2_3 = out_2_2;
      out_3_3 = out_3_2;
      out_4_3 = out_4_2;
      out_5_3 = out_5_2;
      out_6_3 = out_6_2;
      out_7_3 = out_7_2;
      out_8_3 = out_8_2;
      out_9_3 = -1;
      out_10_3 = -1;
      out_1_4 = -1;
      out_2_4 = -1;
      out_3_4 = out_3_3;
      out_4_4 = out_4_3;
      out_5_4 = out_5_3;
      out_6_4 = out_6_3;
      out_7_4 = out_7_3;
      out_8_4 = out_8_3;
      out_9_4 = -1;
      out_10_4 = -1;
      out_1_5 = -1;
      out_2_5 = -1;
      out_3_5 = -1;
      out_4_5 = out_4_4;
      out_5_5 = out_5_4;
      out_6_5 = out_6_4;
      out_7_5 = out_7_4;
      out_8_5 = out_8_4;
      out_9_5 = -1;
      out_10_5 = -1;
      out_1_6 = -1;
      out_2_6 = -1;
      out_3_6 = -1;
      out_4_6 = -1;
      out_5_6 = out_5_5;
      out_6_6 = out_6_5;
      out_7_6 = out_7_5;
      out_8_6 = out_8_5;
      out_9_6 = -1;
      out_10_6 = -1;
      out_1_7 = -1;
      out_2_7 = -1;
      out_3_7 = -1;
      out_4_7 = -1;
      out_5_7 = -1;
      out_6_7 = out_6_6;
      out_7_7 = out_7_6;
      out_8_7 = out_8_6;
      out_9_7 = -1;
      out_10_7 = -1;
      out_1_8 = -1;
      out_2_8 = -1;
      out_3_8 = -1;
      out_4_8 = -1;
      out_5_8 = -1;
      out_6_8 = -1;
      out_7_8 = out_7_7;
      out_8_8 = out_8_7;
      out_9_8 = -1;
      out_10_8 = -1;
      out_1_9 = -1;
      out_2_9 = -1;
      out_3_9 = -1;
      out_4_9 = -1;
      out_5_9 = -1;
      out_6_9 = -1;
      out_7_9 = -1;
      out_8_9 = out_8_8;
      out_9_9 = -1;
      out_10_9 = -1;
      out_1_10 = -1;
      out_2_10 = -1;
      out_3_10 = -1;
      out_4_10 = -1;
      out_5_10 = -1;
      out_6_10 = -1;
      out_7_10 = -1;
      out_8_10 = -1;
      out_9_10 = -1;
      out_10_10 = -1;
      out_1_11 = -1;
      out_2_11 = -1;
      out_3_11 = -1;
      out_4_11 = -1;
      out_5_11 = -1;
      out_6_11 = -1;
      out_7_11 = -1;
      out_8_11 = -1;
      out_9_11 = -1;
      out_10_11 = -1;

      % Store outputs
      out_pivots = zeros(10, 11);
      out_pivots(1, 1) = out_1_1;
      out_pivots(2, 1) = out_2_1;
      out_pivots(3, 1) = out_3_1;
      out_pivots(4, 1) = out_4_1;
      out_pivots(5, 1) = out_5_1;
      out_pivots(6, 1) = out_6_1;
      out_pivots(7, 1) = out_7_1;
      out_pivots(8, 1) = out_8_1;
      out_pivots(9, 1) = out_9_1;
      out_pivots(10, 1) = out_10_1;
      out_pivots(1, 2) = out_1_2;
      out_pivots(2, 2) = out_2_2;
      out_pivots(3, 2) = out_3_2;
      out_pivots(4, 2) = out_4_2;
      out_pivots(5, 2) = out_5_2;
      out_pivots(6, 2) = out_6_2;
      out_pivots(7, 2) = out_7_2;
      out_pivots(8, 2) = out_8_2;
      out_pivots(9, 2) = out_9_2;
      out_pivots(10, 2) = out_10_2;
      out_pivots(1, 3) = out_1_3;
      out_pivots(2, 3) = out_2_3;
      out_pivots(3, 3) = out_3_3;
      out_pivots(4, 3) = out_4_3;
      out_pivots(5, 3) = out_5_3;
      out_pivots(6, 3) = out_6_3;
      out_pivots(7, 3) = out_7_3;
      out_pivots(8, 3) = out_8_3;
      out_pivots(9, 3) = out_9_3;
      out_pivots(10, 3) = out_10_3;
      out_pivots(1, 4) = out_1_4;
      out_pivots(2, 4) = out_2_4;
      out_pivots(3, 4) = out_3_4;
      out_pivots(4, 4) = out_4_4;
      out_pivots(5, 4) = out_5_4;
      out_pivots(6, 4) = out_6_4;
      out_pivots(7, 4) = out_7_4;
      out_pivots(8, 4) = out_8_4;
      out_pivots(9, 4) = out_9_4;
      out_pivots(10, 4) = out_10_4;
      out_pivots(1, 5) = out_1_5;
      out_pivots(2, 5) = out_2_5;
      out_pivots(3, 5) = out_3_5;
      out_pivots(4, 5) = out_4_5;
      out_pivots(5, 5) = out_5_5;
      out_pivots(6, 5) = out_6_5;
      out_pivots(7, 5) = out_7_5;
      out_pivots(8, 5) = out_8_5;
      out_pivots(9, 5) = out_9_5;
      out_pivots(10, 5) = out_10_5;
      out_pivots(1, 6) = out_1_6;
      out_pivots(2, 6) = out_2_6;
      out_pivots(3, 6) = out_3_6;
      out_pivots(4, 6) = out_4_6;
      out_pivots(5, 6) = out_5_6;
      out_pivots(6, 6) = out_6_6;
      out_pivots(7, 6) = out_7_6;
      out_pivots(8, 6) = out_8_6;
      out_pivots(9, 6) = out_9_6;
      out_pivots(10, 6) = out_10_6;
      out_pivots(1, 7) = out_1_7;
      out_pivots(2, 7) = out_2_7;
      out_pivots(3, 7) = out_3_7;
      out_pivots(4, 7) = out_4_7;
      out_pivots(5, 7) = out_5_7;
      out_pivots(6, 7) = out_6_7;
      out_pivots(7, 7) = out_7_7;
      out_pivots(8, 7) = out_8_7;
      out_pivots(9, 7) = out_9_7;
      out_pivots(10, 7) = out_10_7;
      out_pivots(1, 8) = out_1_8;
      out_pivots(2, 8) = out_2_8;
      out_pivots(3, 8) = out_3_8;
      out_pivots(4, 8) = out_4_8;
      out_pivots(5, 8) = out_5_8;
      out_pivots(6, 8) = out_6_8;
      out_pivots(7, 8) = out_7_8;
      out_pivots(8, 8) = out_8_8;
      out_pivots(9, 8) = out_9_8;
      out_pivots(10, 8) = out_10_8;
      out_pivots(1, 9) = out_1_9;
      out_pivots(2, 9) = out_2_9;
      out_pivots(3, 9) = out_3_9;
      out_pivots(4, 9) = out_4_9;
      out_pivots(5, 9) = out_5_9;
      out_pivots(6, 9) = out_6_9;
      out_pivots(7, 9) = out_7_9;
      out_pivots(8, 9) = out_8_9;
      out_pivots(9, 9) = out_9_9;
      out_pivots(10, 9) = out_10_9;
      out_pivots(1, 10) = out_1_10;
      out_pivots(2, 10) = out_2_10;
      out_pivots(3, 10) = out_3_10;
      out_pivots(4, 10) = out_4_10;
      out_pivots(5, 10) = out_5_10;
      out_pivots(6, 10) = out_6_10;
      out_pivots(7, 10) = out_7_10;
      out_pivots(8, 10) = out_8_10;
      out_pivots(9, 10) = out_9_10;
      out_pivots(10, 10) = out_10_10;
      out_pivots(1, 11) = out_1_11;
      out_pivots(2, 11) = out_2_11;
      out_pivots(3, 11) = out_3_11;
      out_pivots(4, 11) = out_4_11;
      out_pivots(5, 11) = out_5_11;
      out_pivots(6, 11) = out_6_11;
      out_pivots(7, 11) = out_7_11;
      out_pivots(8, 11) = out_8_11;
      out_pivots(9, 11) = out_9_11;
      out_pivots(10, 11) = out_10_11;
    end % pivots
    %
    % - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    %
    function out = in_domain( ~, ~, ~ )
      out = true;
    end % in_domain
    %
    % - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    %
  end
end % CascadeOpAmp

% That's All Folks!
