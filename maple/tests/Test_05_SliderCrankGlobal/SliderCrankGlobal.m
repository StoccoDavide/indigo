% +--------------------------------------------------------------------------+
% | 'Indigo' module version 1.0 - BSD 3-Clause License - Copyright (c) 2023  |
% | Current version authors:                                                 |
% |   Davide Stocco and Enrico Bertolazzi.                                   |
% +--------------------------------------------------------------------------+

% Matlab generated code for implicit system: SliderCrankGlobal
% This file has been automatically generated by Indigo.
% DISCLAIMER: If you need to edit it, do it wisely!

classdef SliderCrankGlobal < Indigo.Systems.Implicit
  %
  % No class description provided.
  %
  properties (SetAccess = protected, Hidden = true)
    % User data
    m_l__1 = 1.0;
    m_l__2 = 2.0;
    m_m__1 = 1.0;
    m_m__2 = 1.0;
    m_m__3 = 2.0;
    m_g = 9.8;
    m_J__1 = 4.5;
    m_J__2 = 5.5;
  end
  %
  methods
    %
    % - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    %
    function this = SliderCrankGlobal( varargin )
      % Class constructor.

      % Superclass constructor
      num_eqns = 17;
      num_veil = 0;
      num_invs = 15;
      this = this@Indigo.Systems.Implicit('SliderCrankGlobal', num_eqns, num_veil, num_invs);

      % User data
      if (nargin == 0)
        % Keep default values
      elseif (nargin == 1 && isstruct(varargin{1}))
        this.m_l__1 = varargin{1}.l__1;
        this.m_l__2 = varargin{1}.l__2;
        this.m_m__1 = varargin{1}.m__1;
        this.m_m__2 = varargin{1}.m__2;
        this.m_m__3 = varargin{1}.m__3;
        this.m_g = varargin{1}.g;
        this.m_J__1 = varargin{1}.J__1;
        this.m_J__2 = varargin{1}.J__2;
      elseif (nargin == 8)
        this.m_l__1 = varargin{1};
        this.m_l__2 = varargin{2};
        this.m_m__1 = varargin{3};
        this.m_m__2 = varargin{4};
        this.m_m__3 = varargin{5};
        this.m_g = varargin{6};
        this.m_J__1 = varargin{7};
        this.m_J__2 = varargin{8};
      else
        error('wrong number of input arguments.');
      end
    end % SliderCrankGlobal
    %
    % - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    %
    function out_F = F( this, in_1, in_2, in_3, t )
      % Evaluate the function F.

      % Extract properties
      l__1 = this.m_l__1;
      l__2 = this.m_l__2;
      m__1 = this.m_m__1;
      m__2 = this.m_m__2;
      m__3 = this.m_m__3;
      g = this.m_g;
      J__1 = this.m_J__1;
      J__2 = this.m_J__2;

      % Extract inputs
      x__1 = in_1(1);
      y__1 = in_1(2);
      theta__1 = in_1(3);
      x__2 = in_1(4);
      y__2 = in_1(5);
      theta__2 = in_1(6);
      u__1 = in_1(7);
      v__1 = in_1(8);
      omega__1 = in_1(9);
      u__2 = in_1(10);
      v__2 = in_1(11);
      omega__2 = in_1(12);
      lambda__1 = in_1(13);
      lambda__2 = in_1(14);
      lambda__3 = in_1(15);
      lambda__4 = in_1(16);
      lambda__5 = in_1(17);
      x__1_dot = in_2(1);
      y__1_dot = in_2(2);
      theta__1_dot = in_2(3);
      x__2_dot = in_2(4);
      y__2_dot = in_2(5);
      theta__2_dot = in_2(6);
      u__1_dot = in_2(7);
      v__1_dot = in_2(8);
      omega__1_dot = in_2(9);
      u__2_dot = in_2(10);
      v__2_dot = in_2(11);
      omega__2_dot = in_2(12);
      lambda__1_dot = in_2(13);
      lambda__2_dot = in_2(14);
      lambda__3_dot = in_2(15);
      lambda__4_dot = in_2(16);
      lambda__5_dot = in_2(17);

      % Evaluate function
      out_1 = -u__1 + x__1_dot;
      out_2 = -v__1 + y__1_dot;
      out_3 = -u__2 + x__2_dot;
      out_4 = -v__2 + y__2_dot;
      out_5 = -omega__2 + theta__2_dot;
      out_6 = -omega__1 + theta__1_dot;
      out_7 = -u__1_dot;
      out_8 = v__1_dot;
      t1 = l__2 ^ 2;
      t2 = m__3 * t1;
      t6 = J__2 * m__3;
      t7 = m__2 * (t2 / 4 + J__2) + t6;
      t8 = m__2 + m__3;
      t9 = t8 * t7;
      t13 = m__2 + 2 * m__3;
      t16 = m__2 * lambda__3 + lambda__5 * t13;
      t18 = cos(theta__2);
      t19 = t18 ^ 2;
      t20 = t19 * t13;
      t23 = sin(theta__2);
      t24 = t23 * lambda__4;
      t25 = t13 ^ 2;
      t26 = t25 * t1;
      t30 = omega__2 ^ 2;
      t41 = 0.1e1 / t7;
      t43 = 0.1e1 / t8;
      out_9 = t43 * t41 * (-8 * v__2_dot * t9 - 2 * t20 * t1 * t16 - 2 * t18 * t26 * t24 - 8 * (t23 * t13 * t30 * l__2 / 2 + g * m__2 + g * m__3 + lambda__5 - lambda__3) * t7) / 8;
      t45 = m__2 * t1;
      t49 = 4 * t8 * J__2 + m__3 * t45;
      out_10 = 0.1e1 / t49 * (omega__2_dot * t49 + 2 * (t13 * t24 + t18 * t16) * l__2);
      t61 = t19 * t25;
      t64 = t13 * l__2;
      t65 = t16 * l__2;
      t66 = t23 * t65;
      t67 = t30 * t7;
      out_11 = t43 * t41 * (8 * u__2_dot * t9 - 2 * t61 * lambda__4 * t1 + 2 * t18 * (t66 - 2 * t67) * t64 + 8 * (t45 / 4 + t2 + J__2) * lambda__4 * t8) / 8;
      t81 = J__1 * omega__1_dot;
      t83 = lambda__2 - lambda__5;
      t84 = cos(theta__1);
      t86 = sin(theta__1);
      t87 = lambda__1 - lambda__4;
      t92 = 0.1e1 / J__1;
      out_12 = t92 * (2 * t81 + l__1 * (t84 * t83 - t87 * t86)) / 2;
      t94 = l__1 * m__1;
      t96 = -t83 * l__1;
      t97 = t84 ^ 2;
      t99 = l__1 * t86;
      t101 = t84 * t87 * t99;
      t103 = omega__1 ^ 2;
      t104 = t103 * t86 * J__1;
      t110 = l__1 ^ 2;
      t112 = m__1 * t110 * t97;
      t113 = m__1 * t110;
      t114 = 4 * J__1;
      t125 = 4 * omega__1 * t81;
      t132 = 0.1e1 / l__1;
      t133 = t132 / m__1;
      out_13 = t133 * t92 * (2 * theta__1_dot * (t97 * t96 + t101 - t104 - t96 / 2) * t94 + lambda__1_dot * (-t112 + t113 + t114) + lambda__4_dot * (t112 - t113 + t114) - (l__1 * lambda__2_dot * t86 - l__1 * lambda__5_dot * t86 - t125) * m__1 * l__1 * t84) / 2;
      t135 = t87 * l__1;
      t136 = t97 * t135;
      t138 = t103 * J__1;
      t141 = t135 / 2;
      out_14 = t133 * t92 * (2 * theta__1_dot * (-t136 + t84 * (t86 * t96 + t138) + t141) * t94 + lambda__2_dot * (t112 + t114) + lambda__5_dot * (-t112 + t114) - (l__1 * lambda__1_dot * t84 - l__1 * lambda__4_dot * t84 - t125) * m__1 * t99) / 2;
      t160 = l__2 * lambda__4;
      t166 = -t20 * t160 + t18 * (t66 - t67) + t13 * t160 / 2;
      t173 = t19 * m__2 * t1 * t13;
      t177 = -2 * t2 - 8 * J__2;
      t179 = 8 * t6;
      t183 = m__2 ^ 2;
      t193 = 4 * omega__2_dot * t7 * omega__2;
      out_15 = t43 / l__2 * t41 * (-4 * m__2 * theta__2_dot * t166 * l__2 + lambda__5_dot * (m__2 * t177 + 2 * t173 - t179) + lambda__3_dot * (2 * t183 * t1 * t19 - m__2 * t177 + t179) + 2 * m__2 * (t64 * lambda__4_dot * t18 + t193) * t23 * l__2) / 8;
      t205 = t83 * l__1;
      t210 = t8 * l__1;
      t211 = theta__1_dot * t210;
      t214 = t110 * t7;
      t215 = t97 * t8;
      t217 = 4 * t215 * t214;
      t218 = t1 * J__1;
      t226 = t110 * J__2 / 2;
      t262 = 2 * t18 * J__1 * t23 * t26 - 4 * t84 * t9 * t86 * t110;
      t265 = t110 * t86 * t7;
      t266 = t84 * t8;
      t288 = t43 * t92 * t132;
      out_16 = t288 * t41 * (-8 * t211 * t7 * (-t97 * t205 + t101 - t104 + t205 / 2) + lambda__4_dot * (-t217 - 2 * t61 * t218 + 8 * t8 * (m__2 * (m__3 * t1 * t110 / 8 + t218 / 4 + t226) + m__3 * (t218 + t226) + J__1 * J__2)) + 4 * theta__2_dot * (t19 * t65 + t18 * t64 * t24 + t23 * t67 - t65 / 2) * J__1 * t64 + 4 * lambda__1_dot * t8 * (t84 - 1) * (t84 + 1) * t214 + lambda__5_dot * t262 + 4 * lambda__2_dot * t266 * t265 - 16 * J__1 * (omega__1_dot * t210 * t7 * t84 * omega__1 - l__2 * t18 * t13 * (l__2 * m__2 * lambda__3_dot * t23 - t193) / 8)) / 8;
      t303 = t2 + 4 * J__2;
      t305 = 4 * t6;
      out_17 = t288 * t41 * (8 * t211 * t7 * (t136 + t84 * (t86 * t205 - t138) - t141) - 4 * theta__2_dot * t166 * J__1 * t64 + lambda__5_dot * (t217 + 2 * J__1 * (m__2 * t303 + t19 * t26 + t305)) + lambda__4_dot * t262 + 4 * lambda__1_dot * t266 * t265 - 4 * lambda__2_dot * t215 * t214 + 2 * J__1 * (lambda__3_dot * (-m__2 * t303 + t173 - t305) - 8 * (omega__1_dot * t8 * omega__1 * t99 - t13 * omega__2 * l__2 * omega__2_dot * t23 / 2) * t7)) / 8;

      % Store outputs
      out_F = zeros(17, 1);
      out_F(1) = out_1;
      out_F(2) = out_2;
      out_F(3) = out_3;
      out_F(4) = out_4;
      out_F(5) = out_5;
      out_F(6) = out_6;
      out_F(7) = out_7;
      out_F(8) = out_8;
      out_F(9) = out_9;
      out_F(10) = out_10;
      out_F(11) = out_11;
      out_F(12) = out_12;
      out_F(13) = out_13;
      out_F(14) = out_14;
      out_F(15) = out_15;
      out_F(16) = out_16;
      out_F(17) = out_17;
    end % F
    %
    % - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    %
    function out_JF_x = JF_x( this, in_1, in_2, in_3, t )
      % Evaluate the Jacobian of F with respect to x.

      % Extract properties
      l__1 = this.m_l__1;
      l__2 = this.m_l__2;
      m__1 = this.m_m__1;
      m__2 = this.m_m__2;
      m__3 = this.m_m__3;
      g = this.m_g;
      J__1 = this.m_J__1;
      J__2 = this.m_J__2;

      % Extract inputs
      x__1 = in_1(1);
      y__1 = in_1(2);
      theta__1 = in_1(3);
      x__2 = in_1(4);
      y__2 = in_1(5);
      theta__2 = in_1(6);
      u__1 = in_1(7);
      v__1 = in_1(8);
      omega__1 = in_1(9);
      u__2 = in_1(10);
      v__2 = in_1(11);
      omega__2 = in_1(12);
      lambda__1 = in_1(13);
      lambda__2 = in_1(14);
      lambda__3 = in_1(15);
      lambda__4 = in_1(16);
      lambda__5 = in_1(17);
      x__1_dot = in_2(1);
      y__1_dot = in_2(2);
      theta__1_dot = in_2(3);
      x__2_dot = in_2(4);
      y__2_dot = in_2(5);
      theta__2_dot = in_2(6);
      u__1_dot = in_2(7);
      v__1_dot = in_2(8);
      omega__1_dot = in_2(9);
      u__2_dot = in_2(10);
      v__2_dot = in_2(11);
      omega__2_dot = in_2(12);
      lambda__1_dot = in_2(13);
      lambda__2_dot = in_2(14);
      lambda__3_dot = in_2(15);
      lambda__4_dot = in_2(16);
      lambda__5_dot = in_2(17);

      % Evaluate function
      t1 = lambda__2 - lambda__5;
      t2 = sin(theta__1);
      t4 = cos(theta__1);
      t5 = lambda__1 - lambda__4;
      t6 = t5 * t4;
      t9 = 0.1e1 / J__1;
      out_12_3 = t9 * l__1 * (-t2 * t1 - t6) / 2;
      t11 = l__1 * m__1;
      t13 = -t1 * l__1;
      t14 = t2 * t4;
      t18 = t4 ^ 2;
      t19 = t18 * t5 * l__1;
      t20 = t2 ^ 2;
      t22 = t5 * l__1 * t20;
      t24 = omega__1 ^ 2;
      t25 = t24 * t4 * J__1;
      t30 = l__1 ^ 2;
      t31 = t30 * t4;
      t32 = t2 * m__1;
      t39 = l__1 * t2;
      t44 = J__1 * omega__1_dot;
      t46 = 4 * omega__1 * t44;
      t50 = l__1 * t4;
      t61 = 0.1e1 / l__1;
      t62 = t61 / m__1;
      out_13_3 = t62 * t9 * (2 * theta__1_dot * (-2 * t14 * t13 + t19 - t22 - t25) * t11 + 2 * lambda__1_dot * t32 * t31 - 2 * lambda__4_dot * t32 * t31 + (l__1 * lambda__2_dot * t2 - l__1 * lambda__5_dot * t2 - t46) * m__1 * t39 - (l__1 * lambda__2_dot * t4 - l__1 * lambda__5_dot * t4) * m__1 * t50) / 2;
      t65 = 2 * t6 * t39;
      t68 = t24 * J__1;
      out_14_3 = t62 * t9 * (2 * theta__1_dot * (t65 + t18 * t13 - t2 * (t2 * t13 + t68)) * t11 - 2 * lambda__2_dot * t32 * t31 + 2 * lambda__5_dot * t32 * t31 - (l__1 * lambda__1_dot * t4 - l__1 * lambda__4_dot * t4 - t46) * m__1 * t50 - (-l__1 * lambda__1_dot * t2 + l__1 * lambda__4_dot * t2) * m__1 * t39) / 2;
      t98 = t1 * l__1;
      t102 = l__2 ^ 2;
      t103 = m__3 * t102;
      t106 = m__2 * (t103 / 4 + J__2);
      t107 = J__2 * m__3;
      t108 = t106 + t107;
      t110 = m__2 + m__3;
      t111 = t110 * l__1;
      t112 = theta__1_dot * t111;
      t115 = t2 * t30;
      t116 = t108 * t115;
      t117 = t4 * t110;
      t126 = t30 * t108;
      t133 = t18 * t110;
      t136 = t110 * t108;
      t139 = 4 * t136 * t20 * t30 - 4 * t133 * t126;
      t144 = t20 * t108;
      t145 = t110 * t30;
      t149 = t2 * omega__1;
      t155 = 0.1e1 / t108;
      t158 = 0.1e1 / t110;
      t159 = t158 * t9 * t61;
      out_16_3 = t159 * t155 * (-8 * t112 * t108 * (2 * t14 * t98 + t19 - t22 - t25) + 8 * lambda__4_dot * t117 * t116 - 4 * lambda__1_dot * t110 * (t4 - 1) * t116 - 4 * lambda__1_dot * t110 * t2 * (t4 + 1) * t126 + lambda__5_dot * t139 + 4 * lambda__2_dot * t133 * t126 - 4 * lambda__2_dot * t145 * t144 + 16 * t44 * t111 * t108 * t149) / 8;
      t174 = lambda__1_dot * t145;
      t183 = l__1 * t4 * t108;
      out_17_3 = t159 * t155 * (8 * t112 * t108 * (-t65 + t18 * t98 - t2 * (t2 * t98 - t68)) - 8 * lambda__5_dot * t117 * t116 + lambda__4_dot * t139 + 4 * t174 * t18 * t108 - 4 * t174 * t144 + 8 * lambda__2_dot * t117 * t116 - 16 * t44 * t110 * omega__1 * t183) / 8;
      t192 = m__2 + 2 * m__3;
      t195 = m__2 * lambda__3 + lambda__5 * t192;
      t196 = t102 * t195;
      t197 = cos(theta__2);
      t198 = t197 * t192;
      t199 = sin(theta__2);
      t204 = t192 ^ 2;
      t205 = t197 ^ 2;
      t206 = t205 * t204;
      t209 = t199 ^ 2;
      t210 = t209 * lambda__4;
      t211 = t204 * t102;
      t214 = l__2 * t108;
      t215 = omega__2 ^ 2;
      out_9_6 = t158 * t155 * (-4 * t197 * t192 * t215 * t214 - 2 * t206 * lambda__4 * t102 + 4 * t199 * t198 * t196 + 2 * t211 * t210) / 8;
      t228 = m__2 * t102;
      t233 = 0.1e1 / (4 * t110 * J__2 + m__3 * t228);
      out_10_6 = 2 * t233 * (t192 * lambda__4 * t197 - t199 * t195) * l__2;
      t235 = t199 * lambda__4;
      t239 = t205 * t192;
      t242 = t192 * l__2;
      t243 = t195 * l__2;
      t244 = t199 * t243;
      t245 = t215 * t108;
      out_11_6 = t158 * t155 * (4 * t197 * t211 * t235 + 2 * t239 * t196 - 2 * t199 * (t244 - 2 * t245) * t242) / 8;
      t260 = 2 * t197 * t242 * t235 + t205 * t243 - t199 * (t244 - t245);
      t262 = m__2 * theta__2_dot;
      t265 = t102 * t192;
      t266 = m__2 * t265;
      t267 = t199 * t197;
      t272 = m__2 ^ 2;
      t277 = t197 * l__2;
      t278 = t108 * omega__2;
      t280 = 4 * omega__2_dot * t278;
      t295 = t158 / l__2;
      out_15_6 = t295 * t155 * (-4 * t262 * t260 * l__2 - 4 * lambda__5_dot * t267 * t266 - 4 * lambda__3_dot * t199 * t272 * t102 * t197 + 2 * m__2 * (t242 * lambda__4_dot * t197 + t280) * t277 - 2 * m__2 * t192 * lambda__4_dot * t209 * t102) / 8;
      t297 = t199 * t211;
      t298 = t197 * J__1;
      t318 = 2 * t206 * t102 * J__1 - 2 * J__1 * t209 * t211;
      t323 = l__2 * m__2;
      t327 = l__2 * t199;
      out_16_6 = t159 * t155 * (4 * lambda__4_dot * t298 * t297 + 4 * theta__2_dot * (t239 * l__2 * lambda__4 + t197 * t245 - t242 * t210 - 2 * t267 * t243) * J__1 * t242 + lambda__5_dot * t318 - 16 * J__1 * (-t266 * lambda__3_dot * t205 / 8 + t327 * t192 * (t323 * lambda__3_dot * t199 - t280) / 8)) / 8;
      t349 = omega__2 * l__2;
      out_17_6 = t159 * t155 * (-4 * theta__2_dot * t260 * J__1 * t242 - 4 * lambda__5_dot * t298 * t297 + lambda__4_dot * t318 + 2 * J__1 * (4 * t192 * t349 * omega__2_dot * t197 * t108 - 2 * lambda__3_dot * t267 * t266)) / 8;
      out_1_7 = -1;
      out_2_8 = -1;
      out_6_9 = -1;
      t359 = J__1 * t11;
      t363 = m__1 * J__1 * omega__1_dot;
      out_13_9 = t62 * t9 * (-4 * theta__1_dot * t149 * t359 + 4 * t363 * t50) / 2;
      out_14_9 = t62 * t9 * (4 * theta__1_dot * t4 * omega__1 * t359 + 4 * t363 * t39) / 2;
      t381 = theta__1_dot * t110 * l__1 * t108;
      t384 = J__1 * omega__1_dot * t110;
      out_16_9 = t159 * t155 * (16 * J__1 * t2 * t381 * omega__1 - 16 * t183 * t384) / 8;
      out_17_9 = t159 * t155 * (-16 * J__1 * t381 * t4 * omega__1 - 16 * l__1 * t108 * t2 * t384) / 8;
      out_3_10 = -1;
      out_4_11 = -1;
      out_5_12 = -1;
      out_9_12 = -t158 * t199 * t192 * t349;
      out_11_12 = -t158 * t197 * omega__2 * t242;
      t407 = m__2 * t197;
      t410 = omega__2_dot * t108;
      out_15_12 = t295 * t155 * (8 * t214 * t407 * omega__2 * theta__2_dot + 8 * m__2 * t327 * t410) / 8;
      t417 = J__1 * t242;
      out_16_12 = t159 * t155 * (-8 * J__1 * t192 * t277 * t410 + 8 * t199 * t278 * t417 * theta__2_dot) / 8;
      t428 = theta__2_dot * t197;
      out_17_12 = t159 * t155 * (8 * t108 * t199 * t417 * omega__2_dot + 8 * t278 * t417 * t428) / 8;
      t439 = t9 * t39 / 2;
      out_12_13 = -t439;
      out_13_13 = t9 * theta__1_dot * t4 * t39;
      t444 = -t18 * l__1 + l__1 / 2;
      out_14_13 = t9 * theta__1_dot * t444;
      out_16_13 = -out_13_13;
      t446 = -t444;
      out_17_13 = t9 * theta__1_dot * t446;
      out_12_14 = t9 * t50 / 2;
      out_13_14 = out_14_13;
      out_14_14 = out_16_13;
      out_16_14 = -out_13_14;
      out_17_14 = out_13_13;
      t452 = 8 * t106;
      t453 = 8 * t107;
      out_9_15 = t158 * t155 * (-2 * m__2 * t205 * t265 + t452 + t453) / 8;
      out_10_15 = 2 * t233 * m__2 * t277;
      t460 = t158 * t155;
      out_11_15 = t460 * t407 * t199 * t265 / 4;
      out_15_15 = -t460 * t428 * t272 * t327 / 2;
      t471 = t155 * theta__2_dot;
      out_16_15 = t158 * t61 * t471 * (t205 * t323 - t323 / 2) * t242 / 2;
      out_17_15 = -t158 * t61 * t155 * t428 * m__2 * t199 * t265 / 2;
      t485 = t158 * t155 * t197 * t297 / 4;
      out_9_16 = -t485;
      t486 = t233 * t192;
      out_10_16 = 2 * t486 * t327;
      t489 = 2 * t205 * t211;
      out_11_16 = t158 * t155 * (-t489 + 8 * (t228 / 4 + t103 + J__2) * t110) / 8;
      out_12_16 = t439;
      out_13_16 = out_14_14;
      out_14_16 = out_17_13;
      t499 = -t205 * t242 + t242 / 2;
      out_15_16 = -t158 * t471 * m__2 * t499 / 2;
      t512 = 4 * J__1 * t211 * t267 * theta__2_dot + 8 * t115 * t136 * t4 * theta__1_dot;
      out_16_16 = t159 * t155 * t512 / 8;
      out_17_16 = t159 * t155 * (-4 * J__1 * t242 * t499 * theta__2_dot + 8 * t108 * t112 * t444) / 8;
      out_9_17 = t158 * t155 * (-t489 - t452 - t453) / 8;
      out_10_17 = 2 * t486 * t277;
      out_11_17 = t485;
      out_12_17 = -out_12_14;
      out_13_17 = out_14_16;
      out_14_17 = out_17_14;
      out_15_17 = -t460 * t262 * t198 * t327 / 2;
      out_16_17 = t159 * t155 * (-4 * J__1 * t242 * t499 * theta__2_dot - 8 * t108 * t112 * t446) / 8;
      out_17_17 = -t159 * t155 * t512 / 8;

      % Store outputs
      out_JF_x = zeros(17, 17);
      out_JF_x(12, 3) = out_12_3;
      out_JF_x(13, 3) = out_13_3;
      out_JF_x(14, 3) = out_14_3;
      out_JF_x(16, 3) = out_16_3;
      out_JF_x(17, 3) = out_17_3;
      out_JF_x(9, 6) = out_9_6;
      out_JF_x(10, 6) = out_10_6;
      out_JF_x(11, 6) = out_11_6;
      out_JF_x(15, 6) = out_15_6;
      out_JF_x(16, 6) = out_16_6;
      out_JF_x(17, 6) = out_17_6;
      out_JF_x(1, 7) = out_1_7;
      out_JF_x(2, 8) = out_2_8;
      out_JF_x(6, 9) = out_6_9;
      out_JF_x(13, 9) = out_13_9;
      out_JF_x(14, 9) = out_14_9;
      out_JF_x(16, 9) = out_16_9;
      out_JF_x(17, 9) = out_17_9;
      out_JF_x(3, 10) = out_3_10;
      out_JF_x(4, 11) = out_4_11;
      out_JF_x(5, 12) = out_5_12;
      out_JF_x(9, 12) = out_9_12;
      out_JF_x(11, 12) = out_11_12;
      out_JF_x(15, 12) = out_15_12;
      out_JF_x(16, 12) = out_16_12;
      out_JF_x(17, 12) = out_17_12;
      out_JF_x(12, 13) = out_12_13;
      out_JF_x(13, 13) = out_13_13;
      out_JF_x(14, 13) = out_14_13;
      out_JF_x(16, 13) = out_16_13;
      out_JF_x(17, 13) = out_17_13;
      out_JF_x(12, 14) = out_12_14;
      out_JF_x(13, 14) = out_13_14;
      out_JF_x(14, 14) = out_14_14;
      out_JF_x(16, 14) = out_16_14;
      out_JF_x(17, 14) = out_17_14;
      out_JF_x(9, 15) = out_9_15;
      out_JF_x(10, 15) = out_10_15;
      out_JF_x(11, 15) = out_11_15;
      out_JF_x(15, 15) = out_15_15;
      out_JF_x(16, 15) = out_16_15;
      out_JF_x(17, 15) = out_17_15;
      out_JF_x(9, 16) = out_9_16;
      out_JF_x(10, 16) = out_10_16;
      out_JF_x(11, 16) = out_11_16;
      out_JF_x(12, 16) = out_12_16;
      out_JF_x(13, 16) = out_13_16;
      out_JF_x(14, 16) = out_14_16;
      out_JF_x(15, 16) = out_15_16;
      out_JF_x(16, 16) = out_16_16;
      out_JF_x(17, 16) = out_17_16;
      out_JF_x(9, 17) = out_9_17;
      out_JF_x(10, 17) = out_10_17;
      out_JF_x(11, 17) = out_11_17;
      out_JF_x(12, 17) = out_12_17;
      out_JF_x(13, 17) = out_13_17;
      out_JF_x(14, 17) = out_14_17;
      out_JF_x(15, 17) = out_15_17;
      out_JF_x(16, 17) = out_16_17;
      out_JF_x(17, 17) = out_17_17;
    end % JF_x
    %
    % - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    %
    function out_JF_x_dot = JF_x_dot( this, in_1, in_2, in_3, t )
      % Evaluate the Jacobian of F with respect to x_dot.

      % Extract properties
      l__1 = this.m_l__1;
      l__2 = this.m_l__2;
      m__1 = this.m_m__1;
      m__2 = this.m_m__2;
      m__3 = this.m_m__3;
      g = this.m_g;
      J__1 = this.m_J__1;
      J__2 = this.m_J__2;

      % Extract inputs
      x__1 = in_1(1);
      y__1 = in_1(2);
      theta__1 = in_1(3);
      x__2 = in_1(4);
      y__2 = in_1(5);
      theta__2 = in_1(6);
      u__1 = in_1(7);
      v__1 = in_1(8);
      omega__1 = in_1(9);
      u__2 = in_1(10);
      v__2 = in_1(11);
      omega__2 = in_1(12);
      lambda__1 = in_1(13);
      lambda__2 = in_1(14);
      lambda__3 = in_1(15);
      lambda__4 = in_1(16);
      lambda__5 = in_1(17);
      x__1_dot = in_2(1);
      y__1_dot = in_2(2);
      theta__1_dot = in_2(3);
      x__2_dot = in_2(4);
      y__2_dot = in_2(5);
      theta__2_dot = in_2(6);
      u__1_dot = in_2(7);
      v__1_dot = in_2(8);
      omega__1_dot = in_2(9);
      u__2_dot = in_2(10);
      v__2_dot = in_2(11);
      omega__2_dot = in_2(12);
      lambda__1_dot = in_2(13);
      lambda__2_dot = in_2(14);
      lambda__3_dot = in_2(15);
      lambda__4_dot = in_2(16);
      lambda__5_dot = in_2(17);

      % Evaluate function
      out_1_1 = 1;
      out_2_2 = 1;
      out_6_3 = 1;
      t1 = -lambda__2 + lambda__5;
      t2 = t1 * l__1;
      t3 = cos(theta__1);
      t4 = t3 ^ 2;
      t6 = sin(theta__1);
      t7 = l__1 * t6;
      t8 = lambda__1 - lambda__4;
      t10 = t3 * t8 * t7;
      t12 = omega__1 ^ 2;
      t13 = t12 * t6 * J__1;
      t16 = 0.1e1 / J__1;
      out_13_3 = t16 * (t2 * t4 + t10 - t13 - t2 / 2);
      t17 = t8 * l__1;
      t18 = t4 * t17;
      t20 = t12 * J__1;
      t23 = t17 / 2;
      out_14_3 = t16 * (-t18 + t3 * (t6 * t2 + t20) + t23);
      t26 = -t1 * l__1;
      out_16_3 = -t16 * (-t4 * t26 + t10 - t13 + t26 / 2);
      out_17_3 = t16 * (t18 + t3 * (t6 * t26 - t20) - t23);
      out_3_4 = 1;
      out_4_5 = 1;
      out_5_6 = 1;
      t35 = l__2 * lambda__4;
      t37 = m__2 + 2 * m__3;
      t38 = cos(theta__2);
      t39 = t38 ^ 2;
      t45 = (m__2 * lambda__3 + lambda__5 * t37) * l__2;
      t46 = sin(theta__2);
      t48 = l__2 ^ 2;
      t49 = m__3 * t48;
      t53 = J__2 * m__3;
      t54 = m__2 * (t49 / 4 + J__2) + t53;
      t55 = omega__2 ^ 2;
      t56 = t55 * t54;
      t61 = -t39 * t37 * t35 + t38 * (t46 * t45 - t56) + t37 * t35 / 2;
      t63 = 0.1e1 / t54;
      t64 = m__2 + m__3;
      t65 = 0.1e1 / t64;
      t66 = t65 * t63;
      out_15_6 = -t66 * m__2 * t61 / 2;
      t69 = l__2 * t37;
      t78 = 0.1e1 / l__1;
      t80 = t65 * t78 * t63;
      out_16_6 = t80 * (t39 * t45 + t38 * t69 * t46 * lambda__4 + t46 * t56 - t45 / 2) * t69 / 2;
      out_17_6 = -t80 * t61 * t69 / 2;
      out_7_7 = -1;
      out_8_8 = 1;
      out_12_9 = 1;
      out_13_9 = 2 * t3 * omega__1;
      out_14_9 = 2 * t6 * omega__1;
      out_16_9 = -out_13_9;
      out_17_9 = -out_14_9;
      out_11_10 = 1;
      out_9_11 = -1;
      out_10_12 = 1;
      out_15_12 = t65 * m__2 * omega__2 * t46;
      t90 = l__2 * t37 * omega__2;
      out_16_12 = -t65 * t78 * t38 * t90;
      out_17_12 = t65 * t78 * t46 * t90;
      t96 = l__1 ^ 2;
      t98 = m__1 * t96 * t4;
      t99 = m__1 * t96;
      t100 = 4 * J__1;
      t104 = t78 / m__1;
      out_13_13 = t104 * t16 * (-t98 + t99 + t100) / 2;
      t108 = t16 * t3 * t7 / 2;
      out_14_13 = -t108;
      out_16_13 = t16 * (t3 - 1) * (t3 + 1) * l__1 / 2;
      out_17_13 = t108;
      out_13_14 = out_14_13;
      out_14_14 = t104 * t16 * (t98 + t100) / 2;
      out_16_14 = out_17_13;
      out_17_14 = -t16 * t4 * l__1 / 2;
      t121 = m__2 ^ 2;
      t126 = 2 * t49 + 8 * J__2;
      t128 = 8 * t53;
      t132 = t65 / l__2;
      out_15_15 = t132 * t63 * (2 * t121 * t48 * t39 + m__2 * t126 + t128) / 8;
      t138 = t65 * t78;
      out_16_15 = t138 * t63 * t38 * t37 * t46 * m__2 * t48 / 4;
      t143 = t39 * m__2 * t48 * t37;
      t145 = -t49 - 4 * J__2;
      t147 = 4 * t53;
      out_17_15 = t138 * t63 * (m__2 * t145 + t143 - t147) / 4;
      out_13_16 = t104 * t16 * (t98 - t99 + t100) / 2;
      out_14_16 = out_16_14;
      out_15_16 = t66 * t38 * t37 * m__2 * l__2 * t46 / 4;
      t162 = 4 * t4 * t64 * t96 * t54;
      t163 = t48 * J__1;
      t164 = t37 ^ 2;
      t173 = t96 * J__2 / 2;
      t185 = t65 * t16 * t78;
      out_16_16 = t185 * t63 * (-t162 - 2 * t39 * t164 * t163 + 8 * t64 * (m__2 * (m__3 * t48 * t96 / 8 + t163 / 4 + t173) + m__3 * (t163 + t173) + J__1 * J__2)) / 8;
      t192 = t48 * t164;
      out_17_16 = t185 * t63 * (-4 * t3 * t64 * t54 * t6 * t96 + 2 * t38 * J__1 * t46 * t192) / 8;
      out_13_17 = out_14_16;
      out_14_17 = t104 * t16 * (-t98 + t100) / 2;
      out_15_17 = t132 * t63 * (-m__2 * t126 - t128 + 2 * t143) / 8;
      out_16_17 = out_17_16;
      out_17_17 = t185 * t63 * (t162 + 2 * J__1 * (-m__2 * t145 + t39 * t192 + t147)) / 8;

      % Store outputs
      out_JF_x_dot = zeros(17, 17);
      out_JF_x_dot(1, 1) = out_1_1;
      out_JF_x_dot(2, 2) = out_2_2;
      out_JF_x_dot(6, 3) = out_6_3;
      out_JF_x_dot(13, 3) = out_13_3;
      out_JF_x_dot(14, 3) = out_14_3;
      out_JF_x_dot(16, 3) = out_16_3;
      out_JF_x_dot(17, 3) = out_17_3;
      out_JF_x_dot(3, 4) = out_3_4;
      out_JF_x_dot(4, 5) = out_4_5;
      out_JF_x_dot(5, 6) = out_5_6;
      out_JF_x_dot(15, 6) = out_15_6;
      out_JF_x_dot(16, 6) = out_16_6;
      out_JF_x_dot(17, 6) = out_17_6;
      out_JF_x_dot(7, 7) = out_7_7;
      out_JF_x_dot(8, 8) = out_8_8;
      out_JF_x_dot(12, 9) = out_12_9;
      out_JF_x_dot(13, 9) = out_13_9;
      out_JF_x_dot(14, 9) = out_14_9;
      out_JF_x_dot(16, 9) = out_16_9;
      out_JF_x_dot(17, 9) = out_17_9;
      out_JF_x_dot(11, 10) = out_11_10;
      out_JF_x_dot(9, 11) = out_9_11;
      out_JF_x_dot(10, 12) = out_10_12;
      out_JF_x_dot(15, 12) = out_15_12;
      out_JF_x_dot(16, 12) = out_16_12;
      out_JF_x_dot(17, 12) = out_17_12;
      out_JF_x_dot(13, 13) = out_13_13;
      out_JF_x_dot(14, 13) = out_14_13;
      out_JF_x_dot(16, 13) = out_16_13;
      out_JF_x_dot(17, 13) = out_17_13;
      out_JF_x_dot(13, 14) = out_13_14;
      out_JF_x_dot(14, 14) = out_14_14;
      out_JF_x_dot(16, 14) = out_16_14;
      out_JF_x_dot(17, 14) = out_17_14;
      out_JF_x_dot(15, 15) = out_15_15;
      out_JF_x_dot(16, 15) = out_16_15;
      out_JF_x_dot(17, 15) = out_17_15;
      out_JF_x_dot(13, 16) = out_13_16;
      out_JF_x_dot(14, 16) = out_14_16;
      out_JF_x_dot(15, 16) = out_15_16;
      out_JF_x_dot(16, 16) = out_16_16;
      out_JF_x_dot(17, 16) = out_17_16;
      out_JF_x_dot(13, 17) = out_13_17;
      out_JF_x_dot(14, 17) = out_14_17;
      out_JF_x_dot(15, 17) = out_15_17;
      out_JF_x_dot(16, 17) = out_16_17;
      out_JF_x_dot(17, 17) = out_17_17;
    end % JF_x_dot
    %
    % - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    %
    function out_JF_v = JF_v( this, in_1, in_2, in_3, t )
      % Evaluate the Jacobian of F with respect to v.

      % Extract properties
      l__1 = this.m_l__1;
      l__2 = this.m_l__2;
      m__1 = this.m_m__1;
      m__2 = this.m_m__2;
      m__3 = this.m_m__3;
      g = this.m_g;
      J__1 = this.m_J__1;
      J__2 = this.m_J__2;

      % Extract inputs
      x__1 = in_1(1);
      y__1 = in_1(2);
      theta__1 = in_1(3);
      x__2 = in_1(4);
      y__2 = in_1(5);
      theta__2 = in_1(6);
      u__1 = in_1(7);
      v__1 = in_1(8);
      omega__1 = in_1(9);
      u__2 = in_1(10);
      v__2 = in_1(11);
      omega__2 = in_1(12);
      lambda__1 = in_1(13);
      lambda__2 = in_1(14);
      lambda__3 = in_1(15);
      lambda__4 = in_1(16);
      lambda__5 = in_1(17);
      x__1_dot = in_2(1);
      y__1_dot = in_2(2);
      theta__1_dot = in_2(3);
      x__2_dot = in_2(4);
      y__2_dot = in_2(5);
      theta__2_dot = in_2(6);
      u__1_dot = in_2(7);
      v__1_dot = in_2(8);
      omega__1_dot = in_2(9);
      u__2_dot = in_2(10);
      v__2_dot = in_2(11);
      omega__2_dot = in_2(12);
      lambda__1_dot = in_2(13);
      lambda__2_dot = in_2(14);
      lambda__3_dot = in_2(15);
      lambda__4_dot = in_2(16);
      lambda__5_dot = in_2(17);

      % Evaluate function
      % No body

      % Store outputs
      out_JF_v = zeros(17, 0);
    end % JF_v
    %
    % - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    %
    function out_v = v( this, in_1, t )
      % Evaluate the the veils v.

      % Extract properties
      l__1 = this.m_l__1;
      l__2 = this.m_l__2;
      m__1 = this.m_m__1;
      m__2 = this.m_m__2;
      m__3 = this.m_m__3;
      g = this.m_g;
      J__1 = this.m_J__1;
      J__2 = this.m_J__2;

      % Extract inputs
      x__1 = in_1(1);
      y__1 = in_1(2);
      theta__1 = in_1(3);
      x__2 = in_1(4);
      y__2 = in_1(5);
      theta__2 = in_1(6);
      u__1 = in_1(7);
      v__1 = in_1(8);
      omega__1 = in_1(9);
      u__2 = in_1(10);
      v__2 = in_1(11);
      omega__2 = in_1(12);
      lambda__1 = in_1(13);
      lambda__2 = in_1(14);
      lambda__3 = in_1(15);
      lambda__4 = in_1(16);
      lambda__5 = in_1(17);

      % Evaluate function
      % No body

      % Store outputs
      out_v = zeros(0, 1);
    end % v
    %
    % - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    %
    function out_Jv_x = Jv_x( this, in_1, in_2, t )
      % Evaluate the Jacobian of v with respect to x.

      % Extract properties
      l__1 = this.m_l__1;
      l__2 = this.m_l__2;
      m__1 = this.m_m__1;
      m__2 = this.m_m__2;
      m__3 = this.m_m__3;
      g = this.m_g;
      J__1 = this.m_J__1;
      J__2 = this.m_J__2;

      % Extract inputs
      x__1 = in_1(1);
      y__1 = in_1(2);
      theta__1 = in_1(3);
      x__2 = in_1(4);
      y__2 = in_1(5);
      theta__2 = in_1(6);
      u__1 = in_1(7);
      v__1 = in_1(8);
      omega__1 = in_1(9);
      u__2 = in_1(10);
      v__2 = in_1(11);
      omega__2 = in_1(12);
      lambda__1 = in_1(13);
      lambda__2 = in_1(14);
      lambda__3 = in_1(15);
      lambda__4 = in_1(16);
      lambda__5 = in_1(17);

      % Evaluate function
      % No body

      % Store outputs
      out_Jv_x = zeros(0, 17);
    end % Jv_x
    %
    % - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    %
    function out_h = h( this, in_1, in_2, t )
      % Calculate the residual of the invariants h.

      % Extract properties
      l__1 = this.m_l__1;
      l__2 = this.m_l__2;
      m__1 = this.m_m__1;
      m__2 = this.m_m__2;
      m__3 = this.m_m__3;
      g = this.m_g;
      J__1 = this.m_J__1;
      J__2 = this.m_J__2;

      % Extract inputs
      x__1 = in_1(1);
      y__1 = in_1(2);
      theta__1 = in_1(3);
      x__2 = in_1(4);
      y__2 = in_1(5);
      theta__2 = in_1(6);
      u__1 = in_1(7);
      v__1 = in_1(8);
      omega__1 = in_1(9);
      u__2 = in_1(10);
      v__2 = in_1(11);
      omega__2 = in_1(12);
      lambda__1 = in_1(13);
      lambda__2 = in_1(14);
      lambda__3 = in_1(15);
      lambda__4 = in_1(16);
      lambda__5 = in_1(17);

      % Evaluate function
      t1 = m__2 + m__3;
      t2 = t1 ^ 2;
      out_1 = 16 * x__1 * t2;
      out_2 = 16 * y__1 * t2;
      t5 = sin(theta__2);
      out_3 = -16 * (l__2 * t5 - y__2) * t2;
      t10 = cos(theta__1);
      out_4 = 16 * (l__1 * t10 + x__1 - x__2) * t2;
      t14 = sin(theta__1);
      out_5 = 16 * (l__1 * t14 + y__1 - y__2) * t2;
      out_6 = -u__1;
      out_7 = -v__1;
      t18 = cos(theta__2);
      out_8 = l__2 * t18 * omega__2 - v__2;
      out_9 = l__1 * t14 * omega__1 + out_6 + u__2;
      out_10 = -l__1 * t10 * omega__1 + out_7 + v__2;
      t25 = l__1 ^ 2;
      t26 = m__1 * t25;
      t27 = lambda__1 - lambda__4;
      t28 = t10 ^ 2;
      t31 = -lambda__2 + lambda__5;
      t34 = omega__1 ^ 2;
      t36 = 2 * t34 * J__1;
      t49 = 0.1e1 / J__1;
      t52 = 0.1e1 / l__1;
      t53 = t52 / m__1;
      out_11 = t53 * t49 * (-t28 * t27 * t26 + t10 * m__1 * (t14 * t31 * l__1 + t36) * l__1 + lambda__1 * (t26 + 4 * J__1) + 4 * (-t26 / 4 + J__1) * lambda__4) / 2;
      out_12 = t53 * t49 * (-t28 * t31 * t26 - t10 * t27 * m__1 * t25 * t14 - 4 * (-l__1 * m__1 * t14 * t34 / 2 + g * m__1 - lambda__5 - lambda__2) * J__1) / 2;
      t74 = m__2 + 2 * m__3;
      t77 = m__2 * lambda__3 + lambda__5 * t74;
      t78 = l__2 ^ 2;
      t79 = t78 * t77;
      t80 = t18 ^ 2;
      t84 = t5 * lambda__4;
      t95 = m__2 * (m__3 * t78 / 4 + J__2) + J__2 * m__3;
      t96 = omega__2 ^ 2;
      t97 = t96 * l__2;
      t101 = g * m__2;
      t102 = g * m__3;
      t107 = 0.1e1 / t95;
      t110 = 0.1e1 / t1;
      out_13 = t110 / l__2 * t107 * (2 * t80 * m__2 * t79 + 2 * t18 * t74 * m__2 * t78 * t84 - 8 * (-m__2 * t5 * t97 / 2 + t101 + t102 + lambda__5 - lambda__3) * t95) / 8;
      t114 = t1 * t25;
      t115 = t28 * t114;
      t118 = -t31;
      t123 = t1 * l__1;
      t128 = t74 ^ 2;
      t129 = t128 * t78;
      t146 = t78 * J__1;
      t148 = t25 * J__2;
      out_14 = t110 * t49 * t52 * t107 * (4 * t115 * t95 * t27 + 4 * t10 * t123 * t95 * (t14 * t118 * l__1 - t36) - 2 * t80 * t129 * lambda__4 * J__1 + 2 * t18 * J__1 * l__2 * t74 * (t5 * t77 * l__2 - 2 * t96 * t95) - 4 * t1 * (lambda__4 * (m__2 * (-m__3 * t78 * t25 / 4 - t146 / 2 - t148) + m__3 * (-2 * t146 - t148) - 2 * J__1 * J__2) + t25 * t95 * lambda__1)) / 8;
      out_15 = t110 * t52 * t107 * t49 * (-4 * t115 * t95 * t118 + 4 * t10 * t114 * t95 * t27 * t14 + 8 * (-t14 * t123 * t95 * t34 + t80 * t74 * t79 / 4 + t18 * t129 * t84 / 4 + (t5 * t74 * t97 / 2 + t101 + t102 + lambda__5 - lambda__3) * t95) * J__1) / 8;

      % Store outputs
      out_h = zeros(15, 1);
      out_h(1) = out_1;
      out_h(2) = out_2;
      out_h(3) = out_3;
      out_h(4) = out_4;
      out_h(5) = out_5;
      out_h(6) = out_6;
      out_h(7) = out_7;
      out_h(8) = out_8;
      out_h(9) = out_9;
      out_h(10) = out_10;
      out_h(11) = out_11;
      out_h(12) = out_12;
      out_h(13) = out_13;
      out_h(14) = out_14;
      out_h(15) = out_15;
    end % h
    %
    % - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    %
    function out_Jh_x = Jh_x( this, in_1, in_2, t )
      % Calculate the Jacobian of h with respect to x.

      % Extract properties
      l__1 = this.m_l__1;
      l__2 = this.m_l__2;
      m__1 = this.m_m__1;
      m__2 = this.m_m__2;
      m__3 = this.m_m__3;
      g = this.m_g;
      J__1 = this.m_J__1;
      J__2 = this.m_J__2;

      % Extract inputs
      x__1 = in_1(1);
      y__1 = in_1(2);
      theta__1 = in_1(3);
      x__2 = in_1(4);
      y__2 = in_1(5);
      theta__2 = in_1(6);
      u__1 = in_1(7);
      v__1 = in_1(8);
      omega__1 = in_1(9);
      u__2 = in_1(10);
      v__2 = in_1(11);
      omega__2 = in_1(12);
      lambda__1 = in_1(13);
      lambda__2 = in_1(14);
      lambda__3 = in_1(15);
      lambda__4 = in_1(16);
      lambda__5 = in_1(17);

      % Evaluate function
      t1 = m__2 + m__3;
      t2 = t1 ^ 2;
      out_1_1 = 16 * t2;
      out_4_1 = out_1_1;
      out_2_2 = out_4_1;
      out_5_2 = out_2_2;
      t3 = sin(theta__1);
      out_4_3 = -16 * l__1 * t3 * t2;
      t7 = cos(theta__1);
      out_5_3 = 16 * l__1 * t7 * t2;
      t10 = t7 * omega__1;
      out_9_3 = l__1 * t10;
      t11 = t3 * omega__1;
      out_10_3 = l__1 * t11;
      t12 = l__1 ^ 2;
      t13 = m__1 * t12;
      t14 = lambda__1 - lambda__4;
      t19 = -lambda__2 + lambda__5;
      t20 = t7 ^ 2;
      t25 = omega__1 ^ 2;
      t26 = t25 * J__1;
      t27 = 2 * t26;
      t33 = 0.1e1 / J__1;
      t36 = 0.1e1 / l__1;
      t37 = t36 / m__1;
      out_11_3 = t37 * t33 * (2 * t3 * t7 * t14 * t13 + t20 * t19 * t13 - t3 * m__1 * (t3 * t19 * l__1 + t27) * l__1) / 2;
      t43 = t12 * t20;
      t45 = -t14 * m__1;
      t47 = t3 ^ 2;
      t50 = l__1 * t7;
      out_12_3 = t37 * t33 * (2 * t3 * t7 * t19 * t13 + 2 * m__1 * t50 * t26 - t45 * t12 * t47 + t45 * t43) / 2;
      t58 = l__2 ^ 2;
      t62 = m__2 * (m__3 * t58 / 4 + J__2);
      t63 = J__2 * m__3;
      t64 = t62 + t63;
      t66 = t1 * t12;
      t70 = -t19;
      t71 = t64 * t70;
      t72 = t20 * t66;
      t79 = t1 * l__1;
      t84 = 0.1e1 / t64;
      t87 = 0.1e1 / t1;
      t88 = t87 * t33 * t36;
      out_14_3 = t88 * t84 * (-8 * t7 * t66 * t64 * t14 * t3 + 4 * t72 * t71 - 4 * t3 * t79 * t64 * (t3 * t70 * l__1 - t27)) / 8;
      t99 = t12 * t64;
      t100 = t1 * t99;
      t110 = t87 * t36 * t84;
      out_15_3 = t110 * t33 * (8 * t3 * t7 * t1 * t12 * t71 - 8 * t7 * t79 * t64 * t26 - 4 * t100 * t14 * t47 + 4 * t72 * t64 * t14) / 8;
      out_4_4 = -out_5_2;
      out_3_5 = out_5_2;
      out_5_5 = out_4_4;
      t112 = cos(theta__2);
      out_3_6 = -16 * l__2 * t112 * t2;
      t116 = sin(theta__2);
      t117 = omega__2 * t116;
      out_8_6 = -l__2 * t117;
      t120 = m__2 + 2 * m__3;
      t123 = m__2 * lambda__3 + lambda__5 * t120;
      t124 = t58 * t123;
      t129 = t112 ^ 2;
      t131 = m__2 * t58;
      t132 = t120 * t131;
      t135 = t116 ^ 2;
      t136 = t135 * lambda__4;
      t139 = l__2 * t64;
      t140 = omega__2 ^ 2;
      t148 = t87 / l__2;
      out_13_6 = t148 * t84 * (-4 * t116 * t112 * m__2 * t124 + 4 * m__2 * t112 * t140 * t139 + 2 * t132 * t129 * lambda__4 - 2 * t132 * t136) / 8;
      t152 = t120 ^ 2;
      out_14_6 = t88 * t84 * (4 * t116 * t112 * t152 * t58 * J__1 * lambda__4 + 2 * J__1 * t120 * t129 * t124 - 2 * t116 * J__1 * l__2 * t120 * (t116 * t123 * l__2 - 2 * t140 * t64)) / 8;
      t174 = t112 * t120;
      t179 = t129 * t152;
      t182 = t152 * t58;
      t191 = t87 * t36;
      out_15_6 = t191 * t84 * (-t116 * t174 * t124 / 2 + t179 * lambda__4 * t58 / 4 - t182 * t136 / 4 + t112 * t120 * t140 * t139 / 2);
      out_6_7 = -1;
      out_9_7 = -1;
      out_7_8 = -1;
      out_10_8 = -1;
      out_9_9 = l__1 * t3;
      out_10_9 = -t50;
      out_11_9 = 2 * t10;
      out_12_9 = 2 * t11;
      out_14_9 = -out_11_9;
      out_15_9 = -out_12_9;
      out_9_10 = 1;
      out_8_11 = -1;
      out_10_11 = 1;
      out_8_12 = l__2 * t112;
      out_13_12 = t87 * m__2 * t117;
      t194 = l__2 * t120 * omega__2;
      out_14_12 = -t87 * t36 * t112 * t194;
      out_15_12 = t87 * t36 * t116 * t194;
      t200 = m__1 * t43;
      t201 = 4 * J__1;
      out_11_13 = t37 * t33 * (-t200 + t13 + t201) / 2;
      t207 = t33 * t7 * out_9_9 / 2;
      out_12_13 = -t207;
      t209 = t20 * t1 * t99;
      out_14_13 = t88 * t84 * (4 * t209 - 4 * t100) / 8;
      out_15_13 = t207;
      out_11_14 = out_12_13;
      out_12_14 = t37 * t33 * (t200 + t201) / 2;
      out_14_14 = out_15_13;
      out_15_14 = -t33 * t20 * l__1 / 2;
      t221 = m__2 ^ 2;
      t224 = 8 * t62;
      t225 = 8 * t63;
      out_13_15 = t148 * t84 * (2 * t221 * t58 * t129 + t224 + t225) / 8;
      out_14_15 = t191 * t84 * t112 * t120 * t116 * t131 / 4;
      t236 = t129 * m__2 * t58 * t120;
      out_15_15 = t191 * t84 * (t236 / 4 - t62 - t63);
      out_11_16 = t37 * t33 * (t200 - t13 + t201) / 2;
      out_12_16 = out_14_14;
      out_13_16 = t87 * t84 * t174 * m__2 * l__2 * t116 / 4;
      t248 = 4 * t209;
      t249 = t58 * J__1;
      t256 = t12 * J__2;
      out_14_16 = t88 * t84 * (-t248 - 2 * t179 * t249 - 4 * t1 * (m__2 * (-m__3 * t58 * t12 / 4 - t249 / 2 - t256) + m__3 * (-2 * t249 - t256) - 2 * J__1 * J__2)) / 8;
      out_15_16 = t88 * t84 * (-4 * t7 * t1 * t64 * t3 * t12 + 2 * t112 * J__1 * t116 * t182) / 8;
      out_11_17 = out_12_16;
      out_12_17 = t37 * t33 * (-t200 + t201) / 2;
      out_13_17 = t148 * t84 * (2 * t236 - t224 - t225) / 8;
      out_14_17 = out_15_16;
      out_15_17 = t110 * t33 * (t248 + 8 * (t129 * t182 / 4 + t62 + t63) * J__1) / 8;

      % Store outputs
      out_Jh_x = zeros(15, 17);
      out_Jh_x(1, 1) = out_1_1;
      out_Jh_x(4, 1) = out_4_1;
      out_Jh_x(2, 2) = out_2_2;
      out_Jh_x(5, 2) = out_5_2;
      out_Jh_x(4, 3) = out_4_3;
      out_Jh_x(5, 3) = out_5_3;
      out_Jh_x(9, 3) = out_9_3;
      out_Jh_x(10, 3) = out_10_3;
      out_Jh_x(11, 3) = out_11_3;
      out_Jh_x(12, 3) = out_12_3;
      out_Jh_x(14, 3) = out_14_3;
      out_Jh_x(15, 3) = out_15_3;
      out_Jh_x(4, 4) = out_4_4;
      out_Jh_x(3, 5) = out_3_5;
      out_Jh_x(5, 5) = out_5_5;
      out_Jh_x(3, 6) = out_3_6;
      out_Jh_x(8, 6) = out_8_6;
      out_Jh_x(13, 6) = out_13_6;
      out_Jh_x(14, 6) = out_14_6;
      out_Jh_x(15, 6) = out_15_6;
      out_Jh_x(6, 7) = out_6_7;
      out_Jh_x(9, 7) = out_9_7;
      out_Jh_x(7, 8) = out_7_8;
      out_Jh_x(10, 8) = out_10_8;
      out_Jh_x(9, 9) = out_9_9;
      out_Jh_x(10, 9) = out_10_9;
      out_Jh_x(11, 9) = out_11_9;
      out_Jh_x(12, 9) = out_12_9;
      out_Jh_x(14, 9) = out_14_9;
      out_Jh_x(15, 9) = out_15_9;
      out_Jh_x(9, 10) = out_9_10;
      out_Jh_x(8, 11) = out_8_11;
      out_Jh_x(10, 11) = out_10_11;
      out_Jh_x(8, 12) = out_8_12;
      out_Jh_x(13, 12) = out_13_12;
      out_Jh_x(14, 12) = out_14_12;
      out_Jh_x(15, 12) = out_15_12;
      out_Jh_x(11, 13) = out_11_13;
      out_Jh_x(12, 13) = out_12_13;
      out_Jh_x(14, 13) = out_14_13;
      out_Jh_x(15, 13) = out_15_13;
      out_Jh_x(11, 14) = out_11_14;
      out_Jh_x(12, 14) = out_12_14;
      out_Jh_x(14, 14) = out_14_14;
      out_Jh_x(15, 14) = out_15_14;
      out_Jh_x(13, 15) = out_13_15;
      out_Jh_x(14, 15) = out_14_15;
      out_Jh_x(15, 15) = out_15_15;
      out_Jh_x(11, 16) = out_11_16;
      out_Jh_x(12, 16) = out_12_16;
      out_Jh_x(13, 16) = out_13_16;
      out_Jh_x(14, 16) = out_14_16;
      out_Jh_x(15, 16) = out_15_16;
      out_Jh_x(11, 17) = out_11_17;
      out_Jh_x(12, 17) = out_12_17;
      out_Jh_x(13, 17) = out_13_17;
      out_Jh_x(14, 17) = out_14_17;
      out_Jh_x(15, 17) = out_15_17;
    end % Jh_x
    %
    % - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    %
    function out_Jh_v = Jh_v( this, in_1, in_2, t )
      % Calculate the Jacobian of h with respect to v.

      % Extract properties
      l__1 = this.m_l__1;
      l__2 = this.m_l__2;
      m__1 = this.m_m__1;
      m__2 = this.m_m__2;
      m__3 = this.m_m__3;
      g = this.m_g;
      J__1 = this.m_J__1;
      J__2 = this.m_J__2;

      % Extract inputs
      x__1 = in_1(1);
      y__1 = in_1(2);
      theta__1 = in_1(3);
      x__2 = in_1(4);
      y__2 = in_1(5);
      theta__2 = in_1(6);
      u__1 = in_1(7);
      v__1 = in_1(8);
      omega__1 = in_1(9);
      u__2 = in_1(10);
      v__2 = in_1(11);
      omega__2 = in_1(12);
      lambda__1 = in_1(13);
      lambda__2 = in_1(14);
      lambda__3 = in_1(15);
      lambda__4 = in_1(16);
      lambda__5 = in_1(17);

      % Evaluate function
      % No body

      % Store outputs
      out_Jh_v = zeros(15, 0);
    end % Jh_v
    %
    % - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    %
  end
end % SliderCrankGlobal

% That's All Folks!
