% +--------------------------------------------------------------------------+
% | 'Indigo' module version 1.0 - BSD 3-Clause License - Copyright (c) 2023  |
% | Current version authors:                                                 |
% |   Davide Stocco and Enrico Bertolazzi.                                   |
% +--------------------------------------------------------------------------+

% Matlab generated code for implicit system: SliderCrankGlobal
% This file has been automatically generated by Indigo.
% DISCLAIMER: If you need to edit it, do it wisely!

classdef SliderCrankGlobal < Indigo.DAE.Implicit
  %
  % No class description provided.
  %
  properties (SetAccess = protected, Hidden = true)
    % User data
    m_l__1 = 1.0;
    m_l__2 = 2.0;
    m_m__1 = 1.0;
    m_m__2 = 1.0;
    m_m__3 = 2.0;
    m_g = 9.8;
    m_J__1 = 4.5;
    m_J__2 = 5.5;
  end
  %
  methods
    %
    % - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    %
    function this = SliderCrankGlobal( varargin )
      % Class constructor.

      % Superclass constructor
      num_eqns = 17;
      num_veil = 27;
      num_invs = 15;
      this = this@Indigo.DAE.Implicit('SliderCrankGlobal', num_eqns, num_veil, num_invs);

      % User data
      if (nargin == 0)
        % Keep default values
      elseif (nargin == 1 && isstruct(varargin{1}))
        this.m_l__1 = varargin{1}.l__1;
        this.m_l__2 = varargin{1}.l__2;
        this.m_m__1 = varargin{1}.m__1;
        this.m_m__2 = varargin{1}.m__2;
        this.m_m__3 = varargin{1}.m__3;
        this.m_g = varargin{1}.g;
        this.m_J__1 = varargin{1}.J__1;
        this.m_J__2 = varargin{1}.J__2;
      elseif (nargin == 8)
        this.m_l__1 = varargin{1};
        this.m_l__2 = varargin{2};
        this.m_m__1 = varargin{3};
        this.m_m__2 = varargin{4};
        this.m_m__3 = varargin{5};
        this.m_g = varargin{6};
        this.m_J__1 = varargin{7};
        this.m_J__2 = varargin{8};
      else
        error('wrong number of input arguments.');
      end
    end % SliderCrankGlobal
    %
    % - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    %
    function out_F = F( this, in_1, in_2, in_3, ~ )
      % Evaluate the function F.

      % Extract properties
      l__1 = this.m_l__1;
      l__2 = this.m_l__2;
      m__1 = this.m_m__1;
      m__2 = this.m_m__2;
      m__3 = this.m_m__3;
      J__1 = this.m_J__1;

      % Extract inputs
      theta__1 = in_1(3);
      theta__2 = in_1(6);
      u__1 = in_1(7);
      v__1 = in_1(8);
      omega__1 = in_1(9);
      u__2 = in_1(10);
      v__2 = in_1(11);
      omega__2 = in_1(12);
      lambda__1 = in_1(13);
      lambda__2 = in_1(14);
      lambda__3 = in_1(15);
      lambda__4 = in_1(16);
      lambda__5 = in_1(17);
      x__1_dot = in_2(1);
      y__1_dot = in_2(2);
      theta__1_dot = in_2(3);
      x__2_dot = in_2(4);
      y__2_dot = in_2(5);
      theta__2_dot = in_2(6);
      u__1_dot = in_2(7);
      v__1_dot = in_2(8);
      omega__1_dot = in_2(9);
      u__2_dot = in_2(10);
      v__2_dot = in_2(11);
      omega__2_dot = in_2(12);
      lambda__1_dot = in_2(13);
      lambda__2_dot = in_2(14);
      lambda__3_dot = in_2(15);
      lambda__4_dot = in_2(16);
      lambda__5_dot = in_2(17);
      V_y58KN_1 = in_3(1);
      V_y58KN_3 = in_3(3);
      V_y58KN_4 = in_3(4);

      % Evaluate function
      out_1 = -u__1 + x__1_dot;
      out_2 = -v__1 + y__1_dot;
      out_3 = -u__2 + x__2_dot;
      out_4 = -v__2 + y__2_dot;
      out_5 = -omega__2 + theta__2_dot;
      out_6 = -omega__1 + theta__1_dot;
      out_7 = -u__1_dot;
      out_8 = -v__1_dot;
      t1 = m__2 + m__3;
      t2 = t1 * V_y58KN_1;
      t5 = m__2 + 2 * m__3;
      t7 = m__2 * lambda__3;
      t8 = lambda__5 * t5 + t7;
      t9 = cos(theta__2);
      t11 = sin(theta__2);
      t12 = lambda__4 * t11;
      t18 = 0.1e1 / t1;
      out_9 = t18 * (omega__2_dot * t2 + 2 * l__2 * (t5 * t12 + t9 * t8));
      out_10 = 2 * u__2_dot * t1 + V_y58KN_3;
      out_11 = -v__2_dot - V_y58KN_4;
      t21 = J__1 * omega__1_dot;
      t23 = lambda__2 - lambda__5;
      t24 = cos(theta__1);
      t26 = sin(theta__1);
      t27 = lambda__1 - lambda__4;
      out_12 = 4 * t21 + 2 * (t24 * t23 - t27 * t26) * l__1;
      t32 = t27 * l__1;
      t33 = t24 ^ 2;
      t34 = t33 * t32;
      t36 = -t23 * l__1;
      t38 = omega__1 ^ 2;
      t39 = t38 * J__1;
      t42 = t32 / 2;
      t45 = m__1 * theta__1_dot;
      t48 = l__1 ^ 2;
      t50 = m__1 * t48 * t33;
      t51 = 4 * J__1;
      t56 = l__1 * t26;
      t62 = 4 * omega__1 * t21;
      t67 = 0.1e1 / J__1;
      out_13 = t67 * (2 * t45 * (-t34 + t24 * (t26 * t36 + t39) + t42) * l__1 + lambda__2_dot * (t50 + t51) + lambda__5_dot * (-t50 + t51) - (l__1 * lambda__1_dot * t24 - l__1 * lambda__4_dot * t24 - t62) * m__1 * t56) / 2;
      t69 = l__2 * lambda__4;
      t70 = t9 ^ 2;
      t71 = t70 * t5;
      t73 = omega__2 ^ 2;
      t77 = t11 * t8;
      t88 = l__2 ^ 2;
      t95 = m__2 ^ 2;
      t104 = t1 * omega__2;
      t105 = t104 * omega__2_dot * V_y58KN_1;
      t112 = 0.1e1 / V_y58KN_1;
      out_14 = t18 * t112 * (4 * l__2 * theta__2_dot * (t71 * t69 + t9 * (V_y58KN_1 * t1 * t73 / 4 - l__2 * t77) - t5 * t69 / 2) * m__2 + lambda__5_dot * (2 * t71 * m__2 * t88 - 2 * t2) + lambda__3_dot * (2 * t95 * t88 * t70 + 2 * t2) + 2 * l__2 * t11 * m__2 * (lambda__4_dot * t5 * l__2 * t9 + t105));
      t116 = t24 * t27 * t56;
      t118 = t38 * t26 * J__1;
      t124 = m__1 * t48;
      out_15 = t67 * (2 * t45 * (t33 * t36 + t116 - t118 - t36 / 2) * l__1 + lambda__1_dot * (-t50 + t124 + t51) + lambda__4_dot * (t50 - t124 + t51) - (l__1 * lambda__2_dot * t26 - l__1 * lambda__5_dot * t26 - t62) * m__1 * l__1 * t24) / 2;
      t139 = l__1 * V_y58KN_1;
      t140 = t23 * l__1;
      t144 = t1 ^ 2;
      t149 = l__2 * t5;
      t167 = t1 * t48;
      t175 = t88 * J__1;
      t176 = t5 ^ 2;
      t186 = t144 * t48 * V_y58KN_1;
      t192 = t26 * t24;
      t194 = t11 * t9;
      t200 = t48 * t192;
      t210 = m__2 * l__2;
      out_16 = t67 / t144 * t112 * (-2 * theta__1_dot * t144 * (-t33 * t140 + t116 - t118 + t140 / 2) * t139 + 4 * theta__2_dot * (t2 * t73 * t11 / 4 + l__2 * (t70 * t8 + t9 * t5 * t12 + (-m__2 / 2 - m__3) * lambda__5 - t7 / 2)) * J__1 * t149 + lambda__4_dot * (-V_y58KN_1 * t1 * (-m__2 * t48 - m__3 * t48 + t33 * t167 - 2 * J__1) - 2 * (t9 + 1) * (t9 - 1) * t176 * t175) + lambda__1_dot * (t24 + 1) * (t24 - 1) * t186 + lambda__5_dot * (2 * t176 * t175 * t194 - t186 * t192) + lambda__2_dot * V_y58KN_1 * t144 * t200 - 4 * J__1 * (omega__1_dot * t144 * omega__1 * l__1 * V_y58KN_1 * t24 - (t210 * lambda__3_dot * t11 - t105) * t9 * t149 / 2)) / 2;
      t235 = t5 * lambda__4;
      t253 = V_y58KN_1 * t33;
      out_17 = t67 * t18 * t112 * (2 * theta__1_dot * (t34 + t24 * (t26 * t140 - t39) - t42) * t1 * t139 - 8 * J__1 * theta__2_dot * l__2 * (-t2 * t73 * t9 / 4 + (-t70 * t235 + t9 * t77 + t235 / 2) * l__2) + lambda__4_dot * (-V_y58KN_1 * t167 * t192 + 4 * t5 * t175 * t194) + lambda__5_dot * (4 * t5 * t88 * J__1 * t70 + t253 * t167) + lambda__1_dot * t2 * t200 - lambda__2_dot * t253 * t167 + 4 * J__1 * (-omega__1_dot * t1 * omega__1 * l__1 * V_y58KN_1 * t26 + (omega__2_dot * t104 * V_y58KN_1 * t11 + t210 * lambda__3_dot * t70) * l__2)) / 2;

      % Store outputs
      out_F = zeros(17, 1);
      out_F(1) = out_1;
      out_F(2) = out_2;
      out_F(3) = out_3;
      out_F(4) = out_4;
      out_F(5) = out_5;
      out_F(6) = out_6;
      out_F(7) = out_7;
      out_F(8) = out_8;
      out_F(9) = out_9;
      out_F(10) = out_10;
      out_F(11) = out_11;
      out_F(12) = out_12;
      out_F(13) = out_13;
      out_F(14) = out_14;
      out_F(15) = out_15;
      out_F(16) = out_16;
      out_F(17) = out_17;
    end % F
    %
    % - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    %
    function out_JF_x = JF_x( this, in_1, in_2, in_3, ~ )
      % Evaluate the Jacobian of F with respect to x.

      % Extract properties
      l__1 = this.m_l__1;
      l__2 = this.m_l__2;
      m__1 = this.m_m__1;
      m__2 = this.m_m__2;
      m__3 = this.m_m__3;
      J__1 = this.m_J__1;

      % Extract inputs
      theta__1 = in_1(3);
      theta__2 = in_1(6);
      omega__1 = in_1(9);
      omega__2 = in_1(12);
      lambda__1 = in_1(13);
      lambda__2 = in_1(14);
      lambda__3 = in_1(15);
      lambda__4 = in_1(16);
      lambda__5 = in_1(17);
      theta__1_dot = in_2(3);
      theta__2_dot = in_2(6);
      omega__1_dot = in_2(9);
      omega__2_dot = in_2(12);
      lambda__1_dot = in_2(13);
      lambda__2_dot = in_2(14);
      lambda__3_dot = in_2(15);
      lambda__4_dot = in_2(16);
      lambda__5_dot = in_2(17);
      V_y58KN_1 = in_3(1);

      % Evaluate function
      t1 = lambda__2 - lambda__5;
      t2 = sin(theta__1);
      t4 = cos(theta__1);
      t5 = lambda__1 - lambda__4;
      t6 = t5 * t4;
      out_12_3 = 2 * (-t2 * t1 - t6) * l__1;
      t9 = l__1 * t2;
      t11 = 2 * t6 * t9;
      t13 = -t1 * l__1;
      t14 = t4 ^ 2;
      t17 = omega__1 ^ 2;
      t18 = t17 * J__1;
      t23 = m__1 * theta__1_dot;
      t26 = l__1 ^ 2;
      t27 = t26 * t4;
      t28 = t2 * m__1;
      t35 = l__1 * t4;
      t40 = J__1 * omega__1_dot;
      t42 = 4 * omega__1 * t40;
      t54 = 0.1e1 / J__1;
      out_13_3 = t54 * (2 * t23 * (t11 + t14 * t13 - t2 * (t2 * t13 + t18)) * l__1 - 2 * lambda__2_dot * t28 * t27 + 2 * lambda__5_dot * t28 * t27 - (l__1 * lambda__1_dot * t4 - l__1 * lambda__4_dot * t4 - t42) * m__1 * t35 - (-l__1 * lambda__1_dot * t2 + l__1 * lambda__4_dot * t2) * m__1 * t9) / 2;
      t56 = t2 * t4;
      t60 = t14 * t5 * l__1;
      t61 = t2 ^ 2;
      t63 = t5 * l__1 * t61;
      t65 = t17 * t4 * J__1;
      out_15_3 = t54 * (2 * t23 * (-2 * t56 * t13 + t60 - t63 - t65) * l__1 + 2 * lambda__1_dot * t28 * t27 - 2 * lambda__4_dot * t28 * t27 + (l__1 * lambda__2_dot * t2 - l__1 * lambda__5_dot * t2 - t42) * m__1 * t9 - (l__1 * lambda__2_dot * t4 - l__1 * lambda__5_dot * t4) * m__1 * t35) / 2;
      t92 = l__1 * V_y58KN_1;
      t93 = t1 * l__1;
      t97 = m__2 + m__3;
      t98 = t97 ^ 2;
      t103 = t26 * t56;
      t104 = V_y58KN_1 * t98;
      t108 = t26 * V_y58KN_1;
      t109 = t98 * t108;
      t118 = t26 * t61;
      t120 = t26 * t14;
      t124 = lambda__2_dot * t104;
      t128 = l__1 * V_y58KN_1 * t2;
      t134 = 0.1e1 / V_y58KN_1;
      t136 = 0.1e1 / t98;
      t137 = t54 * t136;
      out_16_3 = t137 * t134 * (-2 * theta__1_dot * t98 * (2 * t56 * t93 + t60 - t63 - t65) * t92 + 2 * lambda__4_dot * t104 * t103 - lambda__1_dot * (t4 + 1) * t2 * t109 - lambda__1_dot * t2 * (t4 - 1) * t109 + lambda__5_dot * (t104 * t118 - t104 * t120) - t124 * t118 + t124 * t120 + 4 * t40 * t98 * omega__1 * t128) / 2;
      t148 = V_y58KN_1 * t97;
      t150 = t97 * t26;
      t158 = lambda__1_dot * t148;
      t167 = l__1 * V_y58KN_1 * t4;
      t174 = 0.1e1 / t97;
      t175 = t54 * t174;
      out_17_3 = t175 * t134 * (2 * theta__1_dot * (-t11 + t14 * t93 - t2 * (t2 * t93 - t18)) * t97 * t92 + lambda__4_dot * (-V_y58KN_1 * t14 * t150 + t148 * t118) - 2 * lambda__5_dot * t148 * t103 - t158 * t118 + t158 * t120 + 2 * t2 * lambda__2_dot * V_y58KN_1 * t4 * t150 - 4 * t40 * t97 * omega__1 * t167) / 2;
      t178 = m__2 + 2 * m__3;
      t181 = m__2 * lambda__3 + lambda__5 * t178;
      t182 = sin(theta__2);
      t183 = t182 * t181;
      t184 = cos(theta__2);
      t186 = t178 * lambda__4 * t184;
      out_9_6 = 2 * t174 * l__2 * (-t183 + t186);
      t190 = l__2 * t182;
      t194 = t184 ^ 2;
      t196 = omega__2 ^ 2;
      t205 = l__2 * theta__2_dot;
      t208 = l__2 ^ 2;
      t211 = t182 * t184;
      t216 = m__2 ^ 2;
      t217 = t182 * t216;
      t221 = t182 ^ 2;
      t223 = lambda__4_dot * t178;
      t227 = l__2 * t184;
      t230 = t97 * omega__2;
      t231 = t230 * omega__2_dot * V_y58KN_1;
      out_14_6 = t174 * t134 * (4 * t205 * (-2 * t186 * t190 - t194 * l__2 * t181 - t182 * (V_y58KN_1 * t97 * t196 / 4 - l__2 * t183)) * m__2 - 4 * lambda__5_dot * t211 * t178 * m__2 * t208 - 4 * lambda__3_dot * t217 * t208 * t184 - 2 * m__2 * t223 * t208 * t221 + 2 * t227 * m__2 * (t223 * t227 + t231));
      t238 = l__2 * t178;
      t255 = t208 * J__1;
      t256 = t178 ^ 2;
      t268 = J__1 * t221;
      t269 = t256 * t208;
      t271 = J__1 * t194;
      t277 = m__2 * l__2;
      t282 = t208 * t178;
      out_16_6 = t137 * t134 * (4 * theta__2_dot * (t148 * t196 * t184 / 4 + l__2 * (t194 * t178 * lambda__4 - t178 * t221 * lambda__4 - 2 * t184 * t183)) * J__1 * t238 + lambda__4_dot * (2 * (t184 + 1) * t182 * t256 * t255 + 2 * t182 * (t184 - 1) * t256 * t255) + lambda__5_dot * (-2 * t269 * t268 + 2 * t269 * t271) - 4 * J__1 * ((t277 * lambda__3_dot * t182 - t231) * t182 * t238 / 2 - m__2 * lambda__3_dot * t194 * t282 / 2)) / 2;
      t306 = J__1 * theta__2_dot;
      t318 = V_y58KN_1 * t184;
      t322 = t182 * t277;
      out_17_6 = t175 * t134 * (-8 * t306 * l__2 * (t148 * t196 * t182 / 4 + (2 * t184 * t178 * t182 * lambda__4 + t194 * t181 - t221 * t181) * l__2) + lambda__4_dot * (-4 * t282 * t268 + 4 * t282 * t271) - 8 * lambda__5_dot * t282 * J__1 * t211 + 4 * J__1 * (-2 * t322 * lambda__3_dot * t184 + omega__2_dot * t230 * t318) * l__2) / 2;
      out_1_7 = -1;
      out_2_8 = -1;
      out_6_9 = -1;
      t332 = J__1 * l__1;
      t338 = m__1 * J__1 * omega__1_dot;
      out_13_9 = t54 * (4 * theta__1_dot * m__1 * t4 * omega__1 * t332 + 4 * t338 * t9) / 2;
      out_15_9 = t54 * (-4 * omega__1 * m__1 * theta__1_dot * t2 * t332 + 4 * t338 * t35) / 2;
      out_16_9 = t137 * t134 * (4 * theta__1_dot * t98 * omega__1 * t2 * J__1 * t92 - 4 * J__1 * omega__1_dot * t98 * t167) / 2;
      t365 = theta__1_dot * t4;
      out_17_9 = t175 * t134 * (-4 * t365 * J__1 * omega__1 * t97 * t92 - 4 * J__1 * omega__1_dot * t97 * t128) / 2;
      out_3_10 = -1;
      out_4_11 = -1;
      out_5_12 = -1;
      out_14_12 = t174 * t134 * (2 * t205 * t318 * t97 * omega__2 * m__2 + 2 * t322 * omega__2_dot * t148);
      out_16_12 = t137 * t134 * (2 * V_y58KN_1 * theta__2_dot * t230 * t182 * J__1 * t238 - 2 * omega__2_dot * J__1 * t148 * t184 * t238) / 2;
      out_17_12 = t175 * t134 * (4 * t306 * V_y58KN_1 * l__2 * t97 * omega__2 * t184 + 4 * J__1 * omega__2_dot * t97 * V_y58KN_1 * t190) / 2;
      t410 = 2 * t9;
      out_12_13 = -t410;
      t413 = -t14 * l__1 + l__1 / 2;
      t414 = t413 * l__1;
      t415 = t54 * t23;
      out_13_13 = t415 * t414;
      out_15_13 = t415 * t103;
      t418 = t54 * t365 * t2 * t26;
      out_16_13 = -t418;
      t419 = -t413;
      t420 = t419 * l__1;
      t421 = t54 * theta__1_dot;
      out_17_13 = t421 * t420;
      out_12_14 = 2 * t35;
      out_13_14 = -out_15_13;
      out_15_14 = out_13_13;
      out_16_14 = -t421 * t414;
      out_17_14 = t418;
      out_9_15 = 2 * t174 * l__2 * t184 * m__2;
      t428 = t174 * t134;
      out_14_15 = -4 * t428 * theta__2_dot * t208 * t184 * t217;
      t433 = m__2 / 2;
      t436 = t134 * theta__2_dot;
      out_16_15 = 2 * t136 * t436 * (t194 * m__2 - t433) * t282;
      out_17_15 = -4 * t428 * m__2 * theta__2_dot * t208 * t211;
      t444 = t174 * t178;
      out_9_16 = 2 * t444 * t190;
      out_12_16 = t410;
      out_13_16 = t415 * t420;
      out_14_16 = 4 * t174 * t436 * l__2 * (t194 * t238 - t238 / 2) * m__2;
      out_15_16 = out_13_14;
      out_16_16 = t137 * t134 * (2 * theta__1_dot * t98 * t4 * t2 * t108 + 4 * theta__2_dot * t211 * J__1 * t269) / 2;
      t470 = -t194 * t178 + m__3 + t433;
      out_17_16 = t175 * t134 * (2 * theta__1_dot * t413 * t97 * t92 - 8 * t306 * t470 * t208) / 2;
      out_9_17 = 2 * t444 * t227;
      out_12_17 = -out_12_14;
      out_13_17 = out_15_13;
      out_14_17 = -4 * t428 * theta__2_dot * t184 * t282 * t182 * m__2;
      out_15_17 = out_13_16;
      out_16_17 = t137 * t134 * (-4 * theta__2_dot * t470 * J__1 * t282 - 2 * theta__1_dot * t98 * t419 * t92) / 2;
      out_17_17 = t175 * t134 * (-8 * theta__2_dot * J__1 * t184 * t178 * t208 * t182 - 2 * theta__1_dot * t56 * t97 * t108) / 2;

      % Store outputs
      out_JF_x = zeros(17, 17);
      out_JF_x(12, 3) = out_12_3;
      out_JF_x(13, 3) = out_13_3;
      out_JF_x(15, 3) = out_15_3;
      out_JF_x(16, 3) = out_16_3;
      out_JF_x(17, 3) = out_17_3;
      out_JF_x(9, 6) = out_9_6;
      out_JF_x(14, 6) = out_14_6;
      out_JF_x(16, 6) = out_16_6;
      out_JF_x(17, 6) = out_17_6;
      out_JF_x(1, 7) = out_1_7;
      out_JF_x(2, 8) = out_2_8;
      out_JF_x(6, 9) = out_6_9;
      out_JF_x(13, 9) = out_13_9;
      out_JF_x(15, 9) = out_15_9;
      out_JF_x(16, 9) = out_16_9;
      out_JF_x(17, 9) = out_17_9;
      out_JF_x(3, 10) = out_3_10;
      out_JF_x(4, 11) = out_4_11;
      out_JF_x(5, 12) = out_5_12;
      out_JF_x(14, 12) = out_14_12;
      out_JF_x(16, 12) = out_16_12;
      out_JF_x(17, 12) = out_17_12;
      out_JF_x(12, 13) = out_12_13;
      out_JF_x(13, 13) = out_13_13;
      out_JF_x(15, 13) = out_15_13;
      out_JF_x(16, 13) = out_16_13;
      out_JF_x(17, 13) = out_17_13;
      out_JF_x(12, 14) = out_12_14;
      out_JF_x(13, 14) = out_13_14;
      out_JF_x(15, 14) = out_15_14;
      out_JF_x(16, 14) = out_16_14;
      out_JF_x(17, 14) = out_17_14;
      out_JF_x(9, 15) = out_9_15;
      out_JF_x(14, 15) = out_14_15;
      out_JF_x(16, 15) = out_16_15;
      out_JF_x(17, 15) = out_17_15;
      out_JF_x(9, 16) = out_9_16;
      out_JF_x(12, 16) = out_12_16;
      out_JF_x(13, 16) = out_13_16;
      out_JF_x(14, 16) = out_14_16;
      out_JF_x(15, 16) = out_15_16;
      out_JF_x(16, 16) = out_16_16;
      out_JF_x(17, 16) = out_17_16;
      out_JF_x(9, 17) = out_9_17;
      out_JF_x(12, 17) = out_12_17;
      out_JF_x(13, 17) = out_13_17;
      out_JF_x(14, 17) = out_14_17;
      out_JF_x(15, 17) = out_15_17;
      out_JF_x(16, 17) = out_16_17;
      out_JF_x(17, 17) = out_17_17;
    end % JF_x
    %
    % - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    %
    function out_JF_x_dot = JF_x_dot( this, in_1, ~, in_3, ~ )
      % Evaluate the Jacobian of F with respect to x_dot.

      % Extract properties
      l__1 = this.m_l__1;
      l__2 = this.m_l__2;
      m__1 = this.m_m__1;
      m__2 = this.m_m__2;
      m__3 = this.m_m__3;
      J__1 = this.m_J__1;

      % Extract inputs
      theta__1 = in_1(3);
      theta__2 = in_1(6);
      omega__1 = in_1(9);
      omega__2 = in_1(12);
      lambda__1 = in_1(13);
      lambda__2 = in_1(14);
      lambda__3 = in_1(15);
      lambda__4 = in_1(16);
      lambda__5 = in_1(17);
      V_y58KN_1 = in_3(1);

      % Evaluate function
      out_1_1 = 1;
      out_2_2 = 1;
      out_6_3 = 1;
      t1 = lambda__1 - lambda__4;
      t2 = t1 * l__1;
      t3 = cos(theta__1);
      t4 = t3 ^ 2;
      t5 = t2 * t4;
      t6 = -lambda__2 + lambda__5;
      t7 = t6 * l__1;
      t8 = sin(theta__1);
      t10 = omega__1 ^ 2;
      t11 = t10 * J__1;
      t14 = t2 / 2;
      t17 = 0.1e1 / J__1;
      t18 = t17 * m__1;
      out_13_3 = t18 * (-t5 + t3 * (t8 * t7 + t11) + t14) * l__1;
      t20 = l__1 * t8;
      t22 = t3 * t1 * t20;
      t24 = t10 * t8 * J__1;
      out_15_3 = t18 * (t4 * t7 + t22 - t24 - t7 / 2) * l__1;
      t29 = -t6 * l__1;
      out_16_3 = -t17 * (-t4 * t29 + t22 - t24 + t29 / 2) * l__1;
      out_17_3 = t17 * (t5 + t3 * (t8 * t29 - t11) - t14) * l__1;
      out_3_4 = 1;
      out_4_5 = 1;
      out_5_6 = 1;
      t40 = l__2 * lambda__4;
      t42 = m__2 + 2 * m__3;
      t43 = cos(theta__2);
      t44 = t43 ^ 2;
      t45 = t44 * t42;
      t47 = omega__2 ^ 2;
      t48 = m__2 + m__3;
      t53 = m__2 * lambda__3;
      t54 = lambda__5 * t42 + t53;
      t55 = sin(theta__2);
      t56 = t55 * t54;
      t64 = 0.1e1 / V_y58KN_1;
      t66 = 0.1e1 / t48;
      out_14_6 = 4 * t66 * t64 * l__2 * (t45 * t40 + t43 * (V_y58KN_1 * t48 * t47 / 4 - l__2 * t56) - t42 * t40 / 2) * m__2;
      t69 = l__2 * t42;
      t71 = t48 * V_y58KN_1;
      t86 = t48 ^ 2;
      t87 = 0.1e1 / t86;
      out_16_6 = 2 * t87 * t64 * (t71 * t47 * t55 / 4 + l__2 * (t44 * t54 + t43 * t42 * t55 * lambda__4 + (-m__2 / 2 - m__3) * lambda__5 - t53 / 2)) * t69;
      t93 = t42 * lambda__4;
      t101 = t66 * t64;
      out_17_6 = -4 * t101 * l__2 * (-t71 * t47 * t43 / 4 + (-t44 * t93 + t43 * t56 + t93 / 2) * l__2);
      out_7_7 = -1;
      out_8_8 = -1;
      out_12_9 = 4 * J__1;
      t105 = l__1 * m__1;
      out_13_9 = 2 * t105 * t8 * omega__1;
      out_15_9 = 2 * t105 * t3 * omega__1;
      out_16_9 = -2 * omega__1 * l__1 * t3;
      out_17_9 = -2 * omega__1 * t20;
      out_10_10 = 2 * t48;
      out_11_11 = -1;
      out_9_12 = V_y58KN_1;
      out_14_12 = 2 * l__2 * t55 * omega__2 * m__2;
      out_16_12 = -t66 * omega__2 * t43 * t69;
      out_17_12 = 2 * l__2 * omega__2 * t55;
      t122 = t8 * t3;
      t123 = l__1 ^ 2;
      t124 = m__1 * t123;
      t127 = t17 * t124 * t122 / 2;
      out_13_13 = -t127;
      t128 = t123 * t4;
      t129 = m__1 * t128;
      out_15_13 = t17 * (-t129 + t124 + out_12_9) / 2;
      out_16_13 = t17 * (t3 + 1) * (t3 - 1) * t123 / 2;
      out_17_13 = t17 * t123 * t122 / 2;
      out_13_14 = t17 * (t129 + out_12_9) / 2;
      out_15_14 = out_13_13;
      out_16_14 = out_17_13;
      out_17_14 = -t17 * t128 / 2;
      t143 = l__2 ^ 2;
      t144 = t143 * t44;
      t145 = m__2 ^ 2;
      out_14_15 = t66 * t64 * (2 * t145 * t144 + 2 * t71);
      t150 = t143 * t42;
      t151 = t55 * t150;
      t152 = t43 * m__2;
      out_16_15 = t87 * t64 * t152 * t151;
      out_17_15 = 2 * t66 * t64 * m__2 * t144;
      out_13_16 = t127;
      out_14_16 = 2 * t101 * t152 * t151;
      out_15_16 = t17 * (t129 - t124 + out_12_9) / 2;
      t162 = t48 * t123;
      t170 = t143 * J__1;
      t171 = t42 ^ 2;
      t180 = t17 * t87;
      out_16_16 = t180 * t64 * (-V_y58KN_1 * t48 * (-m__2 * t123 - m__3 * t123 + t4 * t162 - 2 * J__1) - 2 * (t43 + 1) * (t43 - 1) * t171 * t170) / 2;
      t184 = t55 * t43;
      t190 = t17 * t66;
      out_17_16 = t190 * t64 * (-V_y58KN_1 * t162 * t122 + 4 * t42 * t170 * t184) / 2;
      out_13_17 = t17 * (-t129 + out_12_9) / 2;
      out_14_17 = t66 * t64 * (2 * t45 * m__2 * t143 - 2 * t71);
      out_15_17 = out_13_16;
      out_16_17 = t180 * t64 * (-V_y58KN_1 * t86 * t123 * t122 + 2 * t171 * t170 * t184) / 2;
      out_17_17 = t190 * t64 * (4 * t150 * J__1 * t44 + V_y58KN_1 * t4 * t162) / 2;

      % Store outputs
      out_JF_x_dot = zeros(17, 17);
      out_JF_x_dot(1, 1) = out_1_1;
      out_JF_x_dot(2, 2) = out_2_2;
      out_JF_x_dot(6, 3) = out_6_3;
      out_JF_x_dot(13, 3) = out_13_3;
      out_JF_x_dot(15, 3) = out_15_3;
      out_JF_x_dot(16, 3) = out_16_3;
      out_JF_x_dot(17, 3) = out_17_3;
      out_JF_x_dot(3, 4) = out_3_4;
      out_JF_x_dot(4, 5) = out_4_5;
      out_JF_x_dot(5, 6) = out_5_6;
      out_JF_x_dot(14, 6) = out_14_6;
      out_JF_x_dot(16, 6) = out_16_6;
      out_JF_x_dot(17, 6) = out_17_6;
      out_JF_x_dot(7, 7) = out_7_7;
      out_JF_x_dot(8, 8) = out_8_8;
      out_JF_x_dot(12, 9) = out_12_9;
      out_JF_x_dot(13, 9) = out_13_9;
      out_JF_x_dot(15, 9) = out_15_9;
      out_JF_x_dot(16, 9) = out_16_9;
      out_JF_x_dot(17, 9) = out_17_9;
      out_JF_x_dot(10, 10) = out_10_10;
      out_JF_x_dot(11, 11) = out_11_11;
      out_JF_x_dot(9, 12) = out_9_12;
      out_JF_x_dot(14, 12) = out_14_12;
      out_JF_x_dot(16, 12) = out_16_12;
      out_JF_x_dot(17, 12) = out_17_12;
      out_JF_x_dot(13, 13) = out_13_13;
      out_JF_x_dot(15, 13) = out_15_13;
      out_JF_x_dot(16, 13) = out_16_13;
      out_JF_x_dot(17, 13) = out_17_13;
      out_JF_x_dot(13, 14) = out_13_14;
      out_JF_x_dot(15, 14) = out_15_14;
      out_JF_x_dot(16, 14) = out_16_14;
      out_JF_x_dot(17, 14) = out_17_14;
      out_JF_x_dot(14, 15) = out_14_15;
      out_JF_x_dot(16, 15) = out_16_15;
      out_JF_x_dot(17, 15) = out_17_15;
      out_JF_x_dot(13, 16) = out_13_16;
      out_JF_x_dot(14, 16) = out_14_16;
      out_JF_x_dot(15, 16) = out_15_16;
      out_JF_x_dot(16, 16) = out_16_16;
      out_JF_x_dot(17, 16) = out_17_16;
      out_JF_x_dot(13, 17) = out_13_17;
      out_JF_x_dot(14, 17) = out_14_17;
      out_JF_x_dot(15, 17) = out_15_17;
      out_JF_x_dot(16, 17) = out_16_17;
      out_JF_x_dot(17, 17) = out_17_17;
    end % JF_x_dot
    %
    % - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    %
    function out_JF_v = JF_v( ~, ~, ~, ~, ~ )
      % Evaluate the Jacobian of F with respect to v.

      % Extract properties
      % No properties

      % Extract inputs

      % Evaluate function
      % No body

      % Store outputs
      out_JF_v = zeros(17, 27);
    end % JF_v
    %
    % - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    %
    function out_v = v( this, in_1, ~ )
      % Evaluate the the veils v.

      % Extract properties
      l__1 = this.m_l__1;
      l__2 = this.m_l__2;
      m__1 = this.m_m__1;
      m__2 = this.m_m__2;
      m__3 = this.m_m__3;
      g = this.m_g;
      J__1 = this.m_J__1;
      J__2 = this.m_J__2;

      % Extract inputs
      theta__1 = in_1(3);
      theta__2 = in_1(6);
      omega__1 = in_1(9);
      omega__2 = in_1(12);
      lambda__1 = in_1(13);
      lambda__2 = in_1(14);
      lambda__3 = in_1(15);
      lambda__4 = in_1(16);
      lambda__5 = in_1(17);

      % Evaluate function
      t1 = l__2 ^ 2;
      t9 = m__2 + m__3;
      t10 = 0.1e1 / t9;
      V_y58KN_1 = t10 * (m__2 * (m__3 * t1 + 4 * J__2) + 4 * J__2 * m__3);
      t11 = omega__2 ^ 2;
      t14 = m__2 + 2 * m__3;
      t15 = sin(theta__2);
      t24 = cos(theta__2);
      t28 = m__2 * lambda__3 + lambda__5 * t14;
      t37 = 0.1e1 / V_y58KN_1;
      V_y58KN_2 = t10 * t37 * (2 * V_y58KN_1 * (t15 * t14 * t11 * l__2 / 2 + g * m__2 + g * m__3 + lambda__5 - lambda__3) * t9 + 2 * t14 * (t14 * lambda__4 * t15 + t24 * t28) * t24 * t1);
      t40 = t14 ^ 2;
      t41 = t24 ^ 2;
      t46 = V_y58KN_1 * t9 * t11;
      t49 = l__2 * t15 * t28;
      t53 = t9 * V_y58KN_1;
      V_y58KN_3 = t10 * t37 * (-2 * t41 * t40 * lambda__4 * t1 + 2 * t24 * (-t46 / 2 + t49) * l__2 * t14 + 2 * lambda__4 * (t40 * t1 + t53));
      t60 = l__2 * t28;
      t61 = t41 * t60;
      t65 = t24 * t14 * lambda__4 * l__2 * t15;
      t67 = t53 * t11 * t15;
      t71 = t10 * t37;
      V_y58KN_4 = 2 * t71 * l__2 * (t61 + t65 + t67 / 2);
      t73 = l__1 ^ 2;
      t74 = m__1 * t73;
      t75 = -lambda__2 + lambda__5;
      t76 = cos(theta__1);
      t77 = t76 ^ 2;
      t80 = sin(theta__1);
      t82 = lambda__4 - lambda__1;
      t86 = omega__1 ^ 2;
      t96 = 0.1e1 / J__1;
      V_y58KN_5 = t96 * (t77 * t75 * t74 - t76 * t82 * m__1 * t73 * t80 + 4 * (-l__1 * m__1 * t80 * t86 / 2 + g * m__1 - lambda__5 - lambda__2) * J__1);
      t97 = -t82;
      t100 = t75 * l__1;
      t101 = t80 * t100;
      t102 = t86 * J__1;
      t103 = 2 * t102;
      t108 = 4 * J__1;
      t109 = t74 + t108;
      t111 = t74 / 4;
      t112 = -t111 + J__1;
      V_y58KN_6 = t96 * (-t77 * t97 * t74 + t76 * m__1 * (t101 + t103) * l__1 + lambda__1 * t109 + 4 * lambda__4 * t112);
      t118 = t97 * l__1;
      t119 = t77 * t118;
      t121 = -t75 * l__1;
      t122 = t80 * t121;
      V_y58KN_7 = t96 * t10 * (-V_y58KN_3 * J__1 - (t119 + t76 * (t122 - t103) - t118) * l__1 * t9);
      t131 = t77 * t100;
      t132 = l__1 * t80;
      t136 = t86 * t80 * J__1;
      V_y58KN_8 = t96 * (-2 * V_y58KN_4 * J__1 + (t76 * t82 * t132 - t131 + 2 * t136) * l__1);
      t143 = t118 / 2;
      t146 = t96 * m__1;
      V_y58KN_9 = 2 * t146 * (-t119 + t76 * (t101 + t102) + t143) * l__1;
      t148 = l__2 * lambda__4;
      t149 = t41 * t14;
      t156 = t149 * t148 + t24 * (t46 / 4 - t49) - t14 * t148 / 2;
      t158 = t37 * l__2;
      V_y58KN_10 = 4 * t10 * t158 * t156 * m__2;
      t162 = t76 * t97 * t132;
      V_y58KN_11 = -2 * t146 * (t131 + t162 - t136 - t100 / 2) * l__1;
      V_y58KN_12 = 2 * t96 * (t77 * t121 - t162 + t136 - t121 / 2) * l__1;
      t177 = t9 ^ 2;
      t178 = 0.1e1 / t177;
      V_y58KN_13 = 4 * t178 * t158 * (t61 + t65 + t67 / 4 - t60 / 2) * t14;
      t181 = t9 * t73;
      t191 = t1 * J__1;
      t195 = (t24 + 1) * (t24 - 1) * t40;
      t200 = t96 * t178;
      V_y58KN_14 = t200 * t37 * (2 * V_y58KN_1 * t9 * (-t77 * t181 / 2 + m__2 * t73 / 2 + m__3 * t73 / 2 + J__1) - 2 * t195 * t191);
      t201 = t80 * t76;
      t205 = t15 * t24;
      V_y58KN_15 = t200 * t37 * (-V_y58KN_1 * t177 * t73 * t201 + 2 * t40 * t191 * t205);
      V_y58KN_16 = -2 * t96 * (t119 + t76 * (t122 - t102) - t143) * l__1;
      V_y58KN_17 = 4 * t71 * l__2 * t156;
      V_y58KN_18 = t96 * t10 * t37 * (4 * t14 * t191 * t205 - V_y58KN_1 * t181 * t201);
      t228 = m__2 ^ 2;
      t230 = t228 * t1 * t41 + t53;
      t231 = t177 * t230;
      t234 = t1 ^ 2;
      t235 = t228 * t234;
      t240 = 0.1e1 / t230;
      t242 = t37 * t178;
      V_y58KN_19 = t242 * t240 * (-2 * t195 * t41 * t235 - V_y58KN_1 * V_y58KN_14 * t231);
      V_y58KN_20 = t242 * t240 * (-V_y58KN_1 * V_y58KN_15 * t231 + 2 * t1 * t24 * (t149 * m__2 * t1 - t9 * V_y58KN_1) * t15 * t14 * m__2);
      V_y58KN_21 = t71 * t240 * (4 * t14 * t15 * t41 * t24 * t235 - V_y58KN_1 * V_y58KN_18 * t9 * t230);
      V_y58KN_22 = t240 * t96 * (V_y58KN_1 * t77 * t181 + 8 * t41 * t1 * (t77 * t228 * t73 / 8 + J__1 * t9));
      t282 = J__1 ^ 2;
      t283 = 4 * t282;
      t284 = t74 * J__1 * t77 + t283;
      t287 = m__1 * t73 * t77;
      t288 = t287 / 4;
      V_y58KN_23 = 0.1e1 / t284 * (V_y58KN_20 * t284 + 4 * t201 * (-t288 + J__1) * t73);
      t297 = m__1 * t73 * J__1 + t283;
      t299 = t76 + 1;
      t301 = t76 - 1;
      t306 = 0.1e1 / t297;
      V_y58KN_24 = t306 * (4 * t301 * t112 * t299 * t73 + V_y58KN_19 * t297);
      t312 = t73 ^ 2;
      V_y58KN_25 = 0.1e1 / (t287 + t108) / t109 * (16 * V_y58KN_23 * (t111 + J__1) * (t288 + J__1) + 8 * t299 * t301 * m__1 * t76 * t312 * t80);
      t325 = t112 * t73;
      V_y58KN_26 = t306 * (4 * t201 * t325 + V_y58KN_21 * t297);
      V_y58KN_27 = t306 * (V_y58KN_22 * t297 + 4 * t77 * t325);

      % Store outputs
      out_v = zeros(27, 1);
      out_v(1) = V_y58KN_1;
      out_v(2) = V_y58KN_2;
      out_v(3) = V_y58KN_3;
      out_v(4) = V_y58KN_4;
      out_v(5) = V_y58KN_5;
      out_v(6) = V_y58KN_6;
      out_v(7) = V_y58KN_7;
      out_v(8) = V_y58KN_8;
      out_v(9) = V_y58KN_9;
      out_v(10) = V_y58KN_10;
      out_v(11) = V_y58KN_11;
      out_v(12) = V_y58KN_12;
      out_v(13) = V_y58KN_13;
      out_v(14) = V_y58KN_14;
      out_v(15) = V_y58KN_15;
      out_v(16) = V_y58KN_16;
      out_v(17) = V_y58KN_17;
      out_v(18) = V_y58KN_18;
      out_v(19) = V_y58KN_19;
      out_v(20) = V_y58KN_20;
      out_v(21) = V_y58KN_21;
      out_v(22) = V_y58KN_22;
      out_v(23) = V_y58KN_23;
      out_v(24) = V_y58KN_24;
      out_v(25) = V_y58KN_25;
      out_v(26) = V_y58KN_26;
      out_v(27) = V_y58KN_27;
    end % v
    %
    % - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    %
    function out_Jv_x = Jv_x( this, in_1, in_2, ~ )
      % Evaluate the Jacobian of v with respect to x.

      % Extract properties
      l__1 = this.m_l__1;
      l__2 = this.m_l__2;
      m__1 = this.m_m__1;
      m__2 = this.m_m__2;
      m__3 = this.m_m__3;
      g = this.m_g;
      J__1 = this.m_J__1;

      % Extract inputs
      theta__1 = in_1(3);
      theta__2 = in_1(6);
      omega__1 = in_1(9);
      omega__2 = in_1(12);
      lambda__1 = in_1(13);
      lambda__2 = in_1(14);
      lambda__3 = in_1(15);
      lambda__4 = in_1(16);
      lambda__5 = in_1(17);
      V_y58KN_1 = in_2(1);
      V_y58KN_14 = in_2(14);
      V_y58KN_15 = in_2(15);
      V_y58KN_18 = in_2(18);
      V_y58KN_20 = in_2(20);
      V_y58KN_23 = in_2(23);

      % Evaluate function
      D_V_y58KN_1_1 = 0;
      D_V_y58KN_2_1 = 0;
      D_V_y58KN_3_1 = 0;
      D_V_y58KN_4_1 = 0;
      D_V_y58KN_5_1 = 0;
      D_V_y58KN_6_1 = 0;
      D_V_y58KN_7_1 = 0;
      D_V_y58KN_8_1 = 0;
      D_V_y58KN_9_1 = 0;
      D_V_y58KN_10_1 = 0;
      D_V_y58KN_11_1 = 0;
      D_V_y58KN_12_1 = 0;
      D_V_y58KN_13_1 = 0;
      D_V_y58KN_14_1 = 0;
      D_V_y58KN_15_1 = 0;
      D_V_y58KN_16_1 = 0;
      D_V_y58KN_17_1 = 0;
      D_V_y58KN_18_1 = 0;
      D_V_y58KN_19_1 = 0;
      D_V_y58KN_20_1 = 0;
      D_V_y58KN_21_1 = 0;
      D_V_y58KN_22_1 = 0;
      D_V_y58KN_23_1 = 0;
      D_V_y58KN_24_1 = 0;
      D_V_y58KN_25_1 = 0;
      D_V_y58KN_26_1 = 0;
      D_V_y58KN_27_1 = 0;
      D_V_y58KN_1_2 = 0;
      D_V_y58KN_2_2 = 0;
      D_V_y58KN_3_2 = 0;
      D_V_y58KN_4_2 = 0;
      D_V_y58KN_5_2 = 0;
      D_V_y58KN_6_2 = 0;
      D_V_y58KN_7_2 = 0;
      D_V_y58KN_8_2 = 0;
      D_V_y58KN_9_2 = 0;
      D_V_y58KN_10_2 = 0;
      D_V_y58KN_11_2 = 0;
      D_V_y58KN_12_2 = 0;
      D_V_y58KN_13_2 = 0;
      D_V_y58KN_14_2 = 0;
      D_V_y58KN_15_2 = 0;
      D_V_y58KN_16_2 = 0;
      D_V_y58KN_17_2 = 0;
      D_V_y58KN_18_2 = 0;
      D_V_y58KN_19_2 = 0;
      D_V_y58KN_20_2 = 0;
      D_V_y58KN_21_2 = 0;
      D_V_y58KN_22_2 = 0;
      D_V_y58KN_23_2 = 0;
      D_V_y58KN_24_2 = 0;
      D_V_y58KN_25_2 = 0;
      D_V_y58KN_26_2 = 0;
      D_V_y58KN_27_2 = 0;
      D_V_y58KN_1_3 = 0;
      D_V_y58KN_2_3 = 0;
      D_V_y58KN_3_3 = 0;
      D_V_y58KN_4_3 = 0;
      t1 = l__1 ^ 2;
      t2 = m__1 * t1;
      t3 = -lambda__2 + lambda__5;
      t4 = cos(theta__1);
      t6 = sin(theta__1);
      t10 = t4 ^ 2;
      t11 = t1 * t10;
      t12 = lambda__4 - lambda__1;
      t13 = t12 * m__1;
      t15 = t6 ^ 2;
      t16 = t1 * t15;
      t18 = omega__1 ^ 2;
      t20 = m__1 * l__1;
      t25 = 0.1e1 / J__1;
      D_V_y58KN_5_3 = t25 * (-2 * J__1 * t20 * t4 * t18 - 2 * t6 * t4 * t3 * t2 - t13 * t11 + t13 * t16);
      t26 = -t12;
      t27 = t4 * t26;
      t33 = t3 * l__1;
      t34 = t6 * t33;
      t35 = t18 * J__1;
      t36 = 2 * t35;
      t39 = t6 * m__1;
      D_V_y58KN_6_3 = t25 * (2 * t6 * t27 * t2 + t10 * t3 * t2 - t39 * (t34 + t36) * l__1);
      t42 = l__1 * t6;
      t44 = 2 * t27 * t42;
      t46 = -t3 * l__1;
      t47 = t10 * t46;
      t48 = t6 * t46;
      D_V_y58KN_7_3 = -t25 * (-t44 + t47 - t6 * (t48 - t36)) * l__1;
      t54 = t6 * t4;
      t56 = 2 * t54 * t33;
      t57 = l__1 * t10;
      t59 = l__1 * t15;
      t61 = t4 * J__1;
      t62 = t18 * t61;
      D_V_y58KN_8_3 = t25 * (t12 * t57 - t12 * t59 + t56 + 2 * t62) * l__1;
      t71 = t25 * m__1;
      D_V_y58KN_9_3 = 2 * t71 * (t44 + t10 * t33 - t6 * (t34 + t35)) * l__1;
      D_V_y58KN_10_3 = 0;
      t74 = t10 * t26 * l__1;
      t75 = t26 * t59;
      D_V_y58KN_11_3 = -2 * t71 * (-t56 + t74 - t75 - t62) * l__1;
      D_V_y58KN_12_3 = 2 * t25 * (-2 * t54 * t46 + t62 - t74 + t75) * l__1;
      D_V_y58KN_13_3 = 0;
      t86 = t25 * t1 * t54;
      D_V_y58KN_14_3 = 2 * t86;
      t87 = m__2 + m__3;
      t88 = t87 ^ 2;
      t89 = V_y58KN_1 * t88;
      t93 = 0.1e1 / V_y58KN_1;
      t95 = 0.1e1 / t88;
      t96 = t25 * t95;
      D_V_y58KN_15_3 = t96 * t93 * (-t89 * t11 + t89 * t16);
      D_V_y58KN_16_3 = -2 * t25 * (-t44 + t47 - t6 * (t48 - t35)) * l__1;
      D_V_y58KN_17_3 = 0;
      t103 = t87 * V_y58KN_1;
      t105 = t87 * t1;
      t107 = V_y58KN_1 * t10 * t105;
      t110 = 0.1e1 / t87;
      t111 = t25 * t110;
      D_V_y58KN_18_3 = t111 * t93 * (t103 * t16 - t107);
      D_V_y58KN_19_3 = -D_V_y58KN_14_3;
      D_V_y58KN_20_3 = -D_V_y58KN_15_3;
      D_V_y58KN_21_3 = -D_V_y58KN_18_3;
      t114 = m__2 ^ 2;
      t115 = t114 * t1;
      t117 = l__2 ^ 2;
      t119 = cos(theta__2);
      t120 = t119 ^ 2;
      t126 = t117 * t120;
      t128 = t114 * t126 + t103;
      t129 = 0.1e1 / t128;
      D_V_y58KN_22_3 = t129 * t25 * (-2 * t120 * t117 * t6 * t4 * t115 - 2 * V_y58KN_1 * t105 * t54);
      t136 = J__1 ^ 2;
      t137 = 4 * t136;
      t138 = t2 * J__1 * t10 + t137;
      t141 = t1 ^ 2;
      t145 = m__1 * t11;
      t146 = t145 / 4;
      t148 = (-t146 + J__1) * t1;
      t160 = t138 ^ 2;
      t164 = t1 * J__1;
      D_V_y58KN_23_3 = 0.1e1 / t138 * (2 * m__1 * t141 * t15 * t10 - 2 * V_y58KN_20 * t39 * t1 * t61 + 4 * t10 * t148 + D_V_y58KN_20_3 * t138 - 4 * t15 * t148) + 2 * t39 * t164 * t4 / t160 * (V_y58KN_20 * t138 + 4 * t54 * t148);
      t169 = m__1 * t164 + t137;
      t172 = t2 / 4;
      t173 = -t172 + J__1;
      t174 = t4 - 1;
      t178 = t4 + 1;
      t184 = 0.1e1 / t169;
      D_V_y58KN_24_3 = t184 * (-4 * t174 * t173 * t6 * t1 - 4 * t6 * t173 * t178 * t1 + D_V_y58KN_19_3 * t169);
      t185 = t1 * t4;
      t187 = t172 + J__1;
      t193 = t187 * (t146 + J__1);
      t198 = t178 * t174 * m__1;
      t201 = t141 * t15;
      t204 = m__1 * t4;
      t212 = 4 * J__1;
      t214 = 0.1e1 / (t2 + t212);
      t216 = t145 + t212;
      t217 = 0.1e1 / t216;
      t227 = t216 ^ 2;
      D_V_y58KN_25_3 = t217 * t214 * (-8 * V_y58KN_23 * t187 * t6 * m__1 * t185 + 8 * t198 * t141 * t10 - 8 * t174 * t204 * t201 - 8 * t178 * t204 * t201 + 16 * D_V_y58KN_23_3 * t193 - 8 * t198 * t201) + 2 * t39 * t185 / t227 * t214 * (8 * t198 * t4 * t141 * t6 + 16 * V_y58KN_23 * t193);
      t234 = t173 * t1;
      D_V_y58KN_26_3 = t184 * (4 * t10 * t234 - 4 * t15 * t234 + D_V_y58KN_21_3 * t169);
      D_V_y58KN_27_3 = t184 * (D_V_y58KN_22_3 * t169 - 8 * t54 * t234);
      D_V_y58KN_1_4 = 0;
      D_V_y58KN_2_4 = 0;
      D_V_y58KN_3_4 = 0;
      D_V_y58KN_4_4 = 0;
      D_V_y58KN_5_4 = 0;
      D_V_y58KN_6_4 = 0;
      D_V_y58KN_7_4 = 0;
      D_V_y58KN_8_4 = 0;
      D_V_y58KN_9_4 = 0;
      D_V_y58KN_10_4 = 0;
      D_V_y58KN_11_4 = 0;
      D_V_y58KN_12_4 = 0;
      D_V_y58KN_13_4 = 0;
      D_V_y58KN_14_4 = 0;
      D_V_y58KN_15_4 = 0;
      D_V_y58KN_16_4 = 0;
      D_V_y58KN_17_4 = 0;
      D_V_y58KN_18_4 = 0;
      D_V_y58KN_19_4 = 0;
      D_V_y58KN_20_4 = 0;
      D_V_y58KN_21_4 = 0;
      D_V_y58KN_22_4 = 0;
      D_V_y58KN_23_4 = 0;
      D_V_y58KN_24_4 = 0;
      D_V_y58KN_25_4 = 0;
      D_V_y58KN_26_4 = 0;
      D_V_y58KN_27_4 = 0;
      D_V_y58KN_1_5 = 0;
      D_V_y58KN_2_5 = 0;
      D_V_y58KN_3_5 = 0;
      D_V_y58KN_4_5 = 0;
      D_V_y58KN_5_5 = 0;
      D_V_y58KN_6_5 = 0;
      D_V_y58KN_7_5 = 0;
      D_V_y58KN_8_5 = 0;
      D_V_y58KN_9_5 = 0;
      D_V_y58KN_10_5 = 0;
      D_V_y58KN_11_5 = 0;
      D_V_y58KN_12_5 = 0;
      D_V_y58KN_13_5 = 0;
      D_V_y58KN_14_5 = 0;
      D_V_y58KN_15_5 = 0;
      D_V_y58KN_16_5 = 0;
      D_V_y58KN_17_5 = 0;
      D_V_y58KN_18_5 = 0;
      D_V_y58KN_19_5 = 0;
      D_V_y58KN_20_5 = 0;
      D_V_y58KN_21_5 = 0;
      D_V_y58KN_22_5 = 0;
      D_V_y58KN_23_5 = 0;
      D_V_y58KN_24_5 = 0;
      D_V_y58KN_25_5 = 0;
      D_V_y58KN_26_5 = 0;
      D_V_y58KN_27_5 = 0;
      D_V_y58KN_1_6 = 0;
      t245 = omega__2 ^ 2;
      t248 = m__2 + 2 * m__3;
      t252 = sin(theta__2);
      t256 = m__2 * lambda__3 + lambda__5 * t248;
      t265 = t252 * t256;
      t267 = t248 * lambda__4 * t119;
      D_V_y58KN_2_6 = t110 * t93 * (V_y58KN_1 * t119 * t248 * t245 * l__2 * t87 - 2 * t248 * (t248 * lambda__4 * t252 + t119 * t256) * t252 * t117 + 2 * t248 * (-t265 + t267) * t119 * t117);
      t275 = t248 ^ 2;
      t280 = t117 * t248;
      t284 = l__2 * t248;
      t286 = V_y58KN_1 * t87 * t245;
      t288 = l__2 * t265;
      D_V_y58KN_3_6 = t110 * t93 * (4 * t252 * t119 * t275 * lambda__4 * t117 + 2 * t120 * t256 * t280 - 2 * t252 * (-t286 / 2 + t288) * t284);
      t295 = l__2 * t256;
      t296 = t252 * t119;
      t298 = 2 * t296 * t295;
      t300 = t120 * t248;
      t301 = t300 * l__2 * lambda__4;
      t302 = t252 ^ 2;
      t305 = t248 * lambda__4 * l__2 * t302;
      t307 = t103 * t245 * t119;
      t311 = t110 * t93;
      D_V_y58KN_4_6 = 2 * t311 * l__2 * (-t298 + t301 - t305 + t307 / 2);
      D_V_y58KN_5_6 = 0;
      D_V_y58KN_6_6 = 0;
      D_V_y58KN_7_6 = -t110 * D_V_y58KN_3_6;
      D_V_y58KN_8_6 = -2 * D_V_y58KN_4_6;
      D_V_y58KN_9_6 = 0;
      t322 = -2 * t267 * l__2 * t252 - t120 * t295 - t252 * (t286 / 4 - t288);
      t324 = t93 * l__2;
      t325 = t110 * t324;
      D_V_y58KN_10_6 = 4 * t325 * t322 * m__2;
      D_V_y58KN_11_6 = 0;
      D_V_y58KN_12_6 = 0;
      t330 = t95 * t324;
      D_V_y58KN_13_6 = 4 * t330 * (-t298 + t301 - t305 + t307 / 4) * t248;
      t332 = t117 * J__1;
      t333 = t252 * t275;
      t334 = t119 + 1;
      t335 = t334 * t333;
      t337 = t119 - 1;
      t339 = t252 * t337 * t275;
      D_V_y58KN_14_6 = t96 * t93 * (2 * t335 * t332 + 2 * t339 * t332);
      t344 = J__1 * t302;
      t345 = t275 * t117;
      t347 = J__1 * t120;
      D_V_y58KN_15_6 = t96 * t93 * (-2 * t345 * t344 + 2 * t345 * t347);
      D_V_y58KN_16_6 = 0;
      D_V_y58KN_17_6 = 4 * t311 * l__2 * t322;
      D_V_y58KN_18_6 = t111 * t93 * (-4 * t280 * t344 + 4 * t280 * t347);
      t359 = t117 * t296;
      t360 = t88 * t114;
      t361 = V_y58KN_1 * V_y58KN_14;
      t365 = t88 * t128;
      t368 = t117 ^ 2;
      t369 = t114 * t368;
      t371 = t334 * t337;
      t375 = t120 * t369;
      t382 = t93 * t95;
      t389 = t128 ^ 2;
      t390 = 0.1e1 / t389;
      t394 = t114 * t117 * t296;
      D_V_y58KN_19_6 = t382 * t129 * (4 * t333 * t371 * t119 * t369 + 2 * t361 * t360 * t359 - V_y58KN_1 * D_V_y58KN_14_6 * t365 + 2 * t335 * t375 + 2 * t339 * t375) + 2 * t394 * t382 * t390 * (-2 * t275 * t371 * t375 - t361 * t365);
      t397 = V_y58KN_1 * V_y58KN_15;
      t403 = t248 * m__2;
      t407 = t300 * m__2 * t117;
      t408 = -t87 * V_y58KN_1 + t407;
      D_V_y58KN_20_6 = t382 * t129 * (-4 * t120 * t368 * t302 * t275 * t114 + 2 * t117 * t408 * t120 * t403 - 2 * t117 * t408 * t302 * t403 + 2 * t397 * t360 * t359 - V_y58KN_1 * D_V_y58KN_15_6 * t365) + 2 * t394 * t382 * t390 * (2 * t117 * t119 * t408 * t252 * t403 - t397 * t365);
      t437 = V_y58KN_1 * V_y58KN_18;
      t441 = t87 * t128;
      t448 = t120 ^ 2;
      D_V_y58KN_21_6 = t311 * t129 * (2 * t437 * t87 * t114 * t359 - 12 * t248 * t302 * t120 * t369 + 4 * t248 * t448 * t369 - V_y58KN_1 * D_V_y58KN_18_6 * t441) + 2 * t394 * t311 * t390 * (4 * t248 * t252 * t120 * t119 * t369 - t437 * t441);
      t470 = t117 * (t10 * t115 / 8 + J__1 * t87);
      D_V_y58KN_22_6 = -16 * t129 * t25 * t252 * t119 * t470 + 2 * t394 * t390 * t25 * (8 * t120 * t470 + t107);
      D_V_y58KN_23_6 = D_V_y58KN_20_6;
      D_V_y58KN_24_6 = D_V_y58KN_19_6;
      D_V_y58KN_25_6 = 16 * t217 * t214 * D_V_y58KN_20_6 * t193;
      D_V_y58KN_26_6 = D_V_y58KN_21_6;
      D_V_y58KN_27_6 = D_V_y58KN_22_6;
      D_V_y58KN_1_7 = 0;
      D_V_y58KN_2_7 = 0;
      D_V_y58KN_3_7 = 0;
      D_V_y58KN_4_7 = 0;
      D_V_y58KN_5_7 = 0;
      D_V_y58KN_6_7 = 0;
      D_V_y58KN_7_7 = 0;
      D_V_y58KN_8_7 = 0;
      D_V_y58KN_9_7 = 0;
      D_V_y58KN_10_7 = 0;
      D_V_y58KN_11_7 = 0;
      D_V_y58KN_12_7 = 0;
      D_V_y58KN_13_7 = 0;
      D_V_y58KN_14_7 = 0;
      D_V_y58KN_15_7 = 0;
      D_V_y58KN_16_7 = 0;
      D_V_y58KN_17_7 = 0;
      D_V_y58KN_18_7 = 0;
      D_V_y58KN_19_7 = 0;
      D_V_y58KN_20_7 = 0;
      D_V_y58KN_21_7 = 0;
      D_V_y58KN_22_7 = 0;
      D_V_y58KN_23_7 = 0;
      D_V_y58KN_24_7 = 0;
      D_V_y58KN_25_7 = 0;
      D_V_y58KN_26_7 = 0;
      D_V_y58KN_27_7 = 0;
      D_V_y58KN_1_8 = 0;
      D_V_y58KN_2_8 = 0;
      D_V_y58KN_3_8 = 0;
      D_V_y58KN_4_8 = 0;
      D_V_y58KN_5_8 = 0;
      D_V_y58KN_6_8 = 0;
      D_V_y58KN_7_8 = 0;
      D_V_y58KN_8_8 = 0;
      D_V_y58KN_9_8 = 0;
      D_V_y58KN_10_8 = 0;
      D_V_y58KN_11_8 = 0;
      D_V_y58KN_12_8 = 0;
      D_V_y58KN_13_8 = 0;
      D_V_y58KN_14_8 = 0;
      D_V_y58KN_15_8 = 0;
      D_V_y58KN_16_8 = 0;
      D_V_y58KN_17_8 = 0;
      D_V_y58KN_18_8 = 0;
      D_V_y58KN_19_8 = 0;
      D_V_y58KN_20_8 = 0;
      D_V_y58KN_21_8 = 0;
      D_V_y58KN_22_8 = 0;
      D_V_y58KN_23_8 = 0;
      D_V_y58KN_24_8 = 0;
      D_V_y58KN_25_8 = 0;
      D_V_y58KN_26_8 = 0;
      D_V_y58KN_27_8 = 0;
      D_V_y58KN_1_9 = 0;
      D_V_y58KN_2_9 = 0;
      D_V_y58KN_3_9 = 0;
      D_V_y58KN_4_9 = 0;
      t488 = 4 * t20 * t6 * omega__1;
      D_V_y58KN_5_9 = -t488;
      D_V_y58KN_6_9 = 4 * t20 * t4 * omega__1;
      D_V_y58KN_7_9 = 4 * omega__1 * l__1 * t4;
      D_V_y58KN_8_9 = 4 * omega__1 * t42;
      D_V_y58KN_9_9 = D_V_y58KN_6_9;
      D_V_y58KN_10_9 = 0;
      D_V_y58KN_11_9 = t488;
      D_V_y58KN_12_9 = D_V_y58KN_8_9;
      D_V_y58KN_13_9 = 0;
      D_V_y58KN_14_9 = 0;
      D_V_y58KN_15_9 = 0;
      D_V_y58KN_16_9 = D_V_y58KN_7_9;
      D_V_y58KN_17_9 = 0;
      D_V_y58KN_18_9 = 0;
      D_V_y58KN_19_9 = 0;
      D_V_y58KN_20_9 = 0;
      D_V_y58KN_21_9 = 0;
      D_V_y58KN_22_9 = 0;
      D_V_y58KN_23_9 = 0;
      D_V_y58KN_24_9 = 0;
      D_V_y58KN_25_9 = 0;
      D_V_y58KN_26_9 = 0;
      D_V_y58KN_27_9 = 0;
      D_V_y58KN_1_10 = 0;
      D_V_y58KN_2_10 = 0;
      D_V_y58KN_3_10 = 0;
      D_V_y58KN_4_10 = 0;
      D_V_y58KN_5_10 = 0;
      D_V_y58KN_6_10 = 0;
      D_V_y58KN_7_10 = 0;
      D_V_y58KN_8_10 = 0;
      D_V_y58KN_9_10 = 0;
      D_V_y58KN_10_10 = 0;
      D_V_y58KN_11_10 = 0;
      D_V_y58KN_12_10 = 0;
      D_V_y58KN_13_10 = 0;
      D_V_y58KN_14_10 = 0;
      D_V_y58KN_15_10 = 0;
      D_V_y58KN_16_10 = 0;
      D_V_y58KN_17_10 = 0;
      D_V_y58KN_18_10 = 0;
      D_V_y58KN_19_10 = 0;
      D_V_y58KN_20_10 = 0;
      D_V_y58KN_21_10 = 0;
      D_V_y58KN_22_10 = 0;
      D_V_y58KN_23_10 = 0;
      D_V_y58KN_24_10 = 0;
      D_V_y58KN_25_10 = 0;
      D_V_y58KN_26_10 = 0;
      D_V_y58KN_27_10 = 0;
      D_V_y58KN_1_11 = 0;
      D_V_y58KN_2_11 = 0;
      D_V_y58KN_3_11 = 0;
      D_V_y58KN_4_11 = 0;
      D_V_y58KN_5_11 = 0;
      D_V_y58KN_6_11 = 0;
      D_V_y58KN_7_11 = 0;
      D_V_y58KN_8_11 = 0;
      D_V_y58KN_9_11 = 0;
      D_V_y58KN_10_11 = 0;
      D_V_y58KN_11_11 = 0;
      D_V_y58KN_12_11 = 0;
      D_V_y58KN_13_11 = 0;
      D_V_y58KN_14_11 = 0;
      D_V_y58KN_15_11 = 0;
      D_V_y58KN_16_11 = 0;
      D_V_y58KN_17_11 = 0;
      D_V_y58KN_18_11 = 0;
      D_V_y58KN_19_11 = 0;
      D_V_y58KN_20_11 = 0;
      D_V_y58KN_21_11 = 0;
      D_V_y58KN_22_11 = 0;
      D_V_y58KN_23_11 = 0;
      D_V_y58KN_24_11 = 0;
      D_V_y58KN_25_11 = 0;
      D_V_y58KN_26_11 = 0;
      D_V_y58KN_27_11 = 0;
      D_V_y58KN_1_12 = 0;
      t495 = t252 * t248;
      D_V_y58KN_2_12 = 2 * t495 * l__2 * omega__2;
      D_V_y58KN_3_12 = -2 * t119 * omega__2 * t284;
      D_V_y58KN_4_12 = 2 * l__2 * omega__2 * t252;
      D_V_y58KN_5_12 = 0;
      D_V_y58KN_6_12 = 0;
      D_V_y58KN_7_12 = -t110 * D_V_y58KN_3_12;
      D_V_y58KN_8_12 = -2 * D_V_y58KN_4_12;
      D_V_y58KN_9_12 = 0;
      t505 = l__2 * t119;
      D_V_y58KN_10_12 = 2 * t505 * m__2 * omega__2;
      D_V_y58KN_11_12 = 0;
      D_V_y58KN_12_12 = 0;
      D_V_y58KN_13_12 = 2 * l__2 * t110 * omega__2 * t495;
      D_V_y58KN_14_12 = 0;
      D_V_y58KN_15_12 = 0;
      D_V_y58KN_16_12 = 0;
      D_V_y58KN_17_12 = 2 * omega__2 * t505;
      D_V_y58KN_18_12 = 0;
      D_V_y58KN_19_12 = 0;
      D_V_y58KN_20_12 = 0;
      D_V_y58KN_21_12 = 0;
      D_V_y58KN_22_12 = 0;
      D_V_y58KN_23_12 = 0;
      D_V_y58KN_24_12 = 0;
      D_V_y58KN_25_12 = 0;
      D_V_y58KN_26_12 = 0;
      D_V_y58KN_27_12 = 0;
      D_V_y58KN_1_13 = 0;
      D_V_y58KN_2_13 = 0;
      D_V_y58KN_3_13 = 0;
      D_V_y58KN_4_13 = 0;
      D_V_y58KN_5_13 = t25 * t2 * t54;
      D_V_y58KN_6_13 = t25 * (-t145 + t2 + t212);
      t513 = t57 - l__1;
      D_V_y58KN_7_13 = -t25 * t513 * l__1;
      D_V_y58KN_8_13 = -t86;
      t517 = -t57 + l__1 / 2;
      t518 = t517 * l__1;
      D_V_y58KN_9_13 = 2 * t71 * t518;
      D_V_y58KN_10_13 = 0;
      t520 = 2 * D_V_y58KN_5_13;
      D_V_y58KN_11_13 = -t520;
      D_V_y58KN_12_13 = -D_V_y58KN_14_3;
      D_V_y58KN_13_13 = 0;
      D_V_y58KN_14_13 = 0;
      D_V_y58KN_15_13 = 0;
      t522 = -t517 * l__1;
      t524 = 2 * t25 * t522;
      D_V_y58KN_16_13 = -t524;
      D_V_y58KN_17_13 = 0;
      D_V_y58KN_18_13 = 0;
      D_V_y58KN_19_13 = 0;
      D_V_y58KN_20_13 = 0;
      D_V_y58KN_21_13 = 0;
      D_V_y58KN_22_13 = 0;
      D_V_y58KN_23_13 = 0;
      D_V_y58KN_24_13 = 0;
      D_V_y58KN_25_13 = 0;
      D_V_y58KN_26_13 = 0;
      D_V_y58KN_27_13 = 0;
      D_V_y58KN_1_14 = 0;
      D_V_y58KN_2_14 = 0;
      D_V_y58KN_3_14 = 0;
      D_V_y58KN_4_14 = 0;
      D_V_y58KN_5_14 = -t25 * t216;
      D_V_y58KN_6_14 = -D_V_y58KN_5_13;
      D_V_y58KN_7_14 = D_V_y58KN_8_13;
      D_V_y58KN_8_14 = t25 * t11;
      D_V_y58KN_9_14 = D_V_y58KN_11_13;
      D_V_y58KN_10_14 = 0;
      D_V_y58KN_11_14 = -D_V_y58KN_9_13;
      D_V_y58KN_12_14 = t524;
      D_V_y58KN_13_14 = 0;
      D_V_y58KN_14_14 = 0;
      D_V_y58KN_15_14 = 0;
      D_V_y58KN_16_14 = D_V_y58KN_12_13;
      D_V_y58KN_17_14 = 0;
      D_V_y58KN_18_14 = 0;
      D_V_y58KN_19_14 = 0;
      D_V_y58KN_20_14 = 0;
      D_V_y58KN_21_14 = 0;
      D_V_y58KN_22_14 = 0;
      D_V_y58KN_23_14 = 0;
      D_V_y58KN_24_14 = 0;
      D_V_y58KN_25_14 = 0;
      D_V_y58KN_26_14 = 0;
      D_V_y58KN_27_14 = 0;
      D_V_y58KN_1_15 = 0;
      D_V_y58KN_2_15 = t110 * t93 * (2 * t407 - 2 * t103);
      t529 = t252 * t280;
      t532 = t311 * t119 * m__2 * t529;
      D_V_y58KN_3_15 = 2 * t532;
      t534 = t110 * t93 * m__2;
      D_V_y58KN_4_15 = 2 * t534 * t126;
      D_V_y58KN_5_15 = 0;
      D_V_y58KN_6_15 = 0;
      D_V_y58KN_7_15 = -t110 * D_V_y58KN_3_15;
      D_V_y58KN_8_15 = -2 * D_V_y58KN_4_15;
      D_V_y58KN_9_15 = 0;
      D_V_y58KN_10_15 = -4 * t110 * t93 * t117 * t119 * t252 * t114;
      D_V_y58KN_11_15 = 0;
      D_V_y58KN_12_15 = 0;
      D_V_y58KN_13_15 = 4 * t330 * (m__2 * l__2 * t120 - m__2 * l__2 / 2) * t248;
      D_V_y58KN_14_15 = 0;
      D_V_y58KN_15_15 = 0;
      D_V_y58KN_16_15 = 0;
      D_V_y58KN_17_15 = -4 * t534 * t359;
      D_V_y58KN_18_15 = 0;
      D_V_y58KN_19_15 = 0;
      D_V_y58KN_20_15 = 0;
      D_V_y58KN_21_15 = 0;
      D_V_y58KN_22_15 = 0;
      D_V_y58KN_23_15 = 0;
      D_V_y58KN_24_15 = 0;
      D_V_y58KN_25_15 = 0;
      D_V_y58KN_26_15 = 0;
      D_V_y58KN_27_15 = 0;
      D_V_y58KN_1_16 = 0;
      D_V_y58KN_2_16 = 2 * t110 * t93 * t275 * t359;
      t556 = t275 * t126;
      D_V_y58KN_3_16 = t110 * t93 * (-2 * t556 + 2 * t103 + 2 * t345);
      t560 = t93 * t119;
      t562 = t110 * t560 * t529;
      D_V_y58KN_4_16 = 2 * t562;
      D_V_y58KN_5_16 = D_V_y58KN_6_14;
      D_V_y58KN_6_16 = t25 * (t145 - t2 + t212);
      D_V_y58KN_7_16 = t25 * t110 * (t513 * l__1 * t87 - D_V_y58KN_3_16 * J__1);
      D_V_y58KN_8_16 = t25 * (-2 * D_V_y58KN_4_16 * J__1 + t1 * t54);
      D_V_y58KN_9_16 = 2 * t71 * t522;
      t577 = t120 * t284 - t284 / 2;
      D_V_y58KN_10_16 = 4 * t325 * t577 * m__2;
      D_V_y58KN_11_16 = t520;
      D_V_y58KN_12_16 = D_V_y58KN_14_3;
      D_V_y58KN_13_16 = 4 * t95 * t560 * t117 * t333;
      D_V_y58KN_14_16 = 0;
      D_V_y58KN_15_16 = 0;
      t584 = 2 * t25 * t518;
      D_V_y58KN_16_16 = -t584;
      D_V_y58KN_17_16 = 4 * t311 * l__2 * t577;
      D_V_y58KN_18_16 = 0;
      D_V_y58KN_19_16 = 0;
      D_V_y58KN_20_16 = 0;
      D_V_y58KN_21_16 = 0;
      D_V_y58KN_22_16 = 0;
      D_V_y58KN_23_16 = 0;
      D_V_y58KN_24_16 = 0;
      D_V_y58KN_25_16 = 0;
      D_V_y58KN_26_16 = 0;
      D_V_y58KN_27_16 = 0;
      D_V_y58KN_1_17 = 0;
      D_V_y58KN_2_17 = t110 * t93 * (2 * t103 + 2 * t556);
      D_V_y58KN_3_17 = D_V_y58KN_2_16;
      D_V_y58KN_4_17 = 2 * t110 * t93 * t120 * t280;
      D_V_y58KN_5_17 = t25 * (t145 - t212);
      D_V_y58KN_6_17 = D_V_y58KN_5_13;
      D_V_y58KN_7_17 = t25 * t110 * (-D_V_y58KN_3_17 * J__1 + t54 * t105);
      D_V_y58KN_8_17 = t25 * (-2 * D_V_y58KN_4_17 * J__1 - t11);
      D_V_y58KN_9_17 = D_V_y58KN_11_16;
      D_V_y58KN_10_17 = -4 * t532;
      D_V_y58KN_11_17 = -D_V_y58KN_9_16;
      D_V_y58KN_12_17 = t584;
      D_V_y58KN_13_17 = 4 * t330 * t577 * t248;
      D_V_y58KN_14_17 = 0;
      D_V_y58KN_15_17 = 0;
      D_V_y58KN_16_17 = D_V_y58KN_12_16;
      D_V_y58KN_17_17 = -4 * t562;
      D_V_y58KN_18_17 = 0;
      D_V_y58KN_19_17 = 0;
      D_V_y58KN_20_17 = 0;
      D_V_y58KN_21_17 = 0;
      D_V_y58KN_22_17 = 0;
      D_V_y58KN_23_17 = 0;
      D_V_y58KN_24_17 = 0;
      D_V_y58KN_25_17 = 0;
      D_V_y58KN_26_17 = 0;
      D_V_y58KN_27_17 = 0;

      % Store outputs
      out_Jv_x = zeros(27, 17);
      out_Jv_x(1, 1) = D_V_y58KN_1_1;
      out_Jv_x(2, 1) = D_V_y58KN_2_1;
      out_Jv_x(3, 1) = D_V_y58KN_3_1;
      out_Jv_x(4, 1) = D_V_y58KN_4_1;
      out_Jv_x(5, 1) = D_V_y58KN_5_1;
      out_Jv_x(6, 1) = D_V_y58KN_6_1;
      out_Jv_x(7, 1) = D_V_y58KN_7_1;
      out_Jv_x(8, 1) = D_V_y58KN_8_1;
      out_Jv_x(9, 1) = D_V_y58KN_9_1;
      out_Jv_x(10, 1) = D_V_y58KN_10_1;
      out_Jv_x(11, 1) = D_V_y58KN_11_1;
      out_Jv_x(12, 1) = D_V_y58KN_12_1;
      out_Jv_x(13, 1) = D_V_y58KN_13_1;
      out_Jv_x(14, 1) = D_V_y58KN_14_1;
      out_Jv_x(15, 1) = D_V_y58KN_15_1;
      out_Jv_x(16, 1) = D_V_y58KN_16_1;
      out_Jv_x(17, 1) = D_V_y58KN_17_1;
      out_Jv_x(18, 1) = D_V_y58KN_18_1;
      out_Jv_x(19, 1) = D_V_y58KN_19_1;
      out_Jv_x(20, 1) = D_V_y58KN_20_1;
      out_Jv_x(21, 1) = D_V_y58KN_21_1;
      out_Jv_x(22, 1) = D_V_y58KN_22_1;
      out_Jv_x(23, 1) = D_V_y58KN_23_1;
      out_Jv_x(24, 1) = D_V_y58KN_24_1;
      out_Jv_x(25, 1) = D_V_y58KN_25_1;
      out_Jv_x(26, 1) = D_V_y58KN_26_1;
      out_Jv_x(27, 1) = D_V_y58KN_27_1;
      out_Jv_x(1, 2) = D_V_y58KN_1_2;
      out_Jv_x(2, 2) = D_V_y58KN_2_2;
      out_Jv_x(3, 2) = D_V_y58KN_3_2;
      out_Jv_x(4, 2) = D_V_y58KN_4_2;
      out_Jv_x(5, 2) = D_V_y58KN_5_2;
      out_Jv_x(6, 2) = D_V_y58KN_6_2;
      out_Jv_x(7, 2) = D_V_y58KN_7_2;
      out_Jv_x(8, 2) = D_V_y58KN_8_2;
      out_Jv_x(9, 2) = D_V_y58KN_9_2;
      out_Jv_x(10, 2) = D_V_y58KN_10_2;
      out_Jv_x(11, 2) = D_V_y58KN_11_2;
      out_Jv_x(12, 2) = D_V_y58KN_12_2;
      out_Jv_x(13, 2) = D_V_y58KN_13_2;
      out_Jv_x(14, 2) = D_V_y58KN_14_2;
      out_Jv_x(15, 2) = D_V_y58KN_15_2;
      out_Jv_x(16, 2) = D_V_y58KN_16_2;
      out_Jv_x(17, 2) = D_V_y58KN_17_2;
      out_Jv_x(18, 2) = D_V_y58KN_18_2;
      out_Jv_x(19, 2) = D_V_y58KN_19_2;
      out_Jv_x(20, 2) = D_V_y58KN_20_2;
      out_Jv_x(21, 2) = D_V_y58KN_21_2;
      out_Jv_x(22, 2) = D_V_y58KN_22_2;
      out_Jv_x(23, 2) = D_V_y58KN_23_2;
      out_Jv_x(24, 2) = D_V_y58KN_24_2;
      out_Jv_x(25, 2) = D_V_y58KN_25_2;
      out_Jv_x(26, 2) = D_V_y58KN_26_2;
      out_Jv_x(27, 2) = D_V_y58KN_27_2;
      out_Jv_x(1, 3) = D_V_y58KN_1_3;
      out_Jv_x(2, 3) = D_V_y58KN_2_3;
      out_Jv_x(3, 3) = D_V_y58KN_3_3;
      out_Jv_x(4, 3) = D_V_y58KN_4_3;
      out_Jv_x(5, 3) = D_V_y58KN_5_3;
      out_Jv_x(6, 3) = D_V_y58KN_6_3;
      out_Jv_x(7, 3) = D_V_y58KN_7_3;
      out_Jv_x(8, 3) = D_V_y58KN_8_3;
      out_Jv_x(9, 3) = D_V_y58KN_9_3;
      out_Jv_x(10, 3) = D_V_y58KN_10_3;
      out_Jv_x(11, 3) = D_V_y58KN_11_3;
      out_Jv_x(12, 3) = D_V_y58KN_12_3;
      out_Jv_x(13, 3) = D_V_y58KN_13_3;
      out_Jv_x(14, 3) = D_V_y58KN_14_3;
      out_Jv_x(15, 3) = D_V_y58KN_15_3;
      out_Jv_x(16, 3) = D_V_y58KN_16_3;
      out_Jv_x(17, 3) = D_V_y58KN_17_3;
      out_Jv_x(18, 3) = D_V_y58KN_18_3;
      out_Jv_x(19, 3) = D_V_y58KN_19_3;
      out_Jv_x(20, 3) = D_V_y58KN_20_3;
      out_Jv_x(21, 3) = D_V_y58KN_21_3;
      out_Jv_x(22, 3) = D_V_y58KN_22_3;
      out_Jv_x(23, 3) = D_V_y58KN_23_3;
      out_Jv_x(24, 3) = D_V_y58KN_24_3;
      out_Jv_x(25, 3) = D_V_y58KN_25_3;
      out_Jv_x(26, 3) = D_V_y58KN_26_3;
      out_Jv_x(27, 3) = D_V_y58KN_27_3;
      out_Jv_x(1, 4) = D_V_y58KN_1_4;
      out_Jv_x(2, 4) = D_V_y58KN_2_4;
      out_Jv_x(3, 4) = D_V_y58KN_3_4;
      out_Jv_x(4, 4) = D_V_y58KN_4_4;
      out_Jv_x(5, 4) = D_V_y58KN_5_4;
      out_Jv_x(6, 4) = D_V_y58KN_6_4;
      out_Jv_x(7, 4) = D_V_y58KN_7_4;
      out_Jv_x(8, 4) = D_V_y58KN_8_4;
      out_Jv_x(9, 4) = D_V_y58KN_9_4;
      out_Jv_x(10, 4) = D_V_y58KN_10_4;
      out_Jv_x(11, 4) = D_V_y58KN_11_4;
      out_Jv_x(12, 4) = D_V_y58KN_12_4;
      out_Jv_x(13, 4) = D_V_y58KN_13_4;
      out_Jv_x(14, 4) = D_V_y58KN_14_4;
      out_Jv_x(15, 4) = D_V_y58KN_15_4;
      out_Jv_x(16, 4) = D_V_y58KN_16_4;
      out_Jv_x(17, 4) = D_V_y58KN_17_4;
      out_Jv_x(18, 4) = D_V_y58KN_18_4;
      out_Jv_x(19, 4) = D_V_y58KN_19_4;
      out_Jv_x(20, 4) = D_V_y58KN_20_4;
      out_Jv_x(21, 4) = D_V_y58KN_21_4;
      out_Jv_x(22, 4) = D_V_y58KN_22_4;
      out_Jv_x(23, 4) = D_V_y58KN_23_4;
      out_Jv_x(24, 4) = D_V_y58KN_24_4;
      out_Jv_x(25, 4) = D_V_y58KN_25_4;
      out_Jv_x(26, 4) = D_V_y58KN_26_4;
      out_Jv_x(27, 4) = D_V_y58KN_27_4;
      out_Jv_x(1, 5) = D_V_y58KN_1_5;
      out_Jv_x(2, 5) = D_V_y58KN_2_5;
      out_Jv_x(3, 5) = D_V_y58KN_3_5;
      out_Jv_x(4, 5) = D_V_y58KN_4_5;
      out_Jv_x(5, 5) = D_V_y58KN_5_5;
      out_Jv_x(6, 5) = D_V_y58KN_6_5;
      out_Jv_x(7, 5) = D_V_y58KN_7_5;
      out_Jv_x(8, 5) = D_V_y58KN_8_5;
      out_Jv_x(9, 5) = D_V_y58KN_9_5;
      out_Jv_x(10, 5) = D_V_y58KN_10_5;
      out_Jv_x(11, 5) = D_V_y58KN_11_5;
      out_Jv_x(12, 5) = D_V_y58KN_12_5;
      out_Jv_x(13, 5) = D_V_y58KN_13_5;
      out_Jv_x(14, 5) = D_V_y58KN_14_5;
      out_Jv_x(15, 5) = D_V_y58KN_15_5;
      out_Jv_x(16, 5) = D_V_y58KN_16_5;
      out_Jv_x(17, 5) = D_V_y58KN_17_5;
      out_Jv_x(18, 5) = D_V_y58KN_18_5;
      out_Jv_x(19, 5) = D_V_y58KN_19_5;
      out_Jv_x(20, 5) = D_V_y58KN_20_5;
      out_Jv_x(21, 5) = D_V_y58KN_21_5;
      out_Jv_x(22, 5) = D_V_y58KN_22_5;
      out_Jv_x(23, 5) = D_V_y58KN_23_5;
      out_Jv_x(24, 5) = D_V_y58KN_24_5;
      out_Jv_x(25, 5) = D_V_y58KN_25_5;
      out_Jv_x(26, 5) = D_V_y58KN_26_5;
      out_Jv_x(27, 5) = D_V_y58KN_27_5;
      out_Jv_x(1, 6) = D_V_y58KN_1_6;
      out_Jv_x(2, 6) = D_V_y58KN_2_6;
      out_Jv_x(3, 6) = D_V_y58KN_3_6;
      out_Jv_x(4, 6) = D_V_y58KN_4_6;
      out_Jv_x(5, 6) = D_V_y58KN_5_6;
      out_Jv_x(6, 6) = D_V_y58KN_6_6;
      out_Jv_x(7, 6) = D_V_y58KN_7_6;
      out_Jv_x(8, 6) = D_V_y58KN_8_6;
      out_Jv_x(9, 6) = D_V_y58KN_9_6;
      out_Jv_x(10, 6) = D_V_y58KN_10_6;
      out_Jv_x(11, 6) = D_V_y58KN_11_6;
      out_Jv_x(12, 6) = D_V_y58KN_12_6;
      out_Jv_x(13, 6) = D_V_y58KN_13_6;
      out_Jv_x(14, 6) = D_V_y58KN_14_6;
      out_Jv_x(15, 6) = D_V_y58KN_15_6;
      out_Jv_x(16, 6) = D_V_y58KN_16_6;
      out_Jv_x(17, 6) = D_V_y58KN_17_6;
      out_Jv_x(18, 6) = D_V_y58KN_18_6;
      out_Jv_x(19, 6) = D_V_y58KN_19_6;
      out_Jv_x(20, 6) = D_V_y58KN_20_6;
      out_Jv_x(21, 6) = D_V_y58KN_21_6;
      out_Jv_x(22, 6) = D_V_y58KN_22_6;
      out_Jv_x(23, 6) = D_V_y58KN_23_6;
      out_Jv_x(24, 6) = D_V_y58KN_24_6;
      out_Jv_x(25, 6) = D_V_y58KN_25_6;
      out_Jv_x(26, 6) = D_V_y58KN_26_6;
      out_Jv_x(27, 6) = D_V_y58KN_27_6;
      out_Jv_x(1, 7) = D_V_y58KN_1_7;
      out_Jv_x(2, 7) = D_V_y58KN_2_7;
      out_Jv_x(3, 7) = D_V_y58KN_3_7;
      out_Jv_x(4, 7) = D_V_y58KN_4_7;
      out_Jv_x(5, 7) = D_V_y58KN_5_7;
      out_Jv_x(6, 7) = D_V_y58KN_6_7;
      out_Jv_x(7, 7) = D_V_y58KN_7_7;
      out_Jv_x(8, 7) = D_V_y58KN_8_7;
      out_Jv_x(9, 7) = D_V_y58KN_9_7;
      out_Jv_x(10, 7) = D_V_y58KN_10_7;
      out_Jv_x(11, 7) = D_V_y58KN_11_7;
      out_Jv_x(12, 7) = D_V_y58KN_12_7;
      out_Jv_x(13, 7) = D_V_y58KN_13_7;
      out_Jv_x(14, 7) = D_V_y58KN_14_7;
      out_Jv_x(15, 7) = D_V_y58KN_15_7;
      out_Jv_x(16, 7) = D_V_y58KN_16_7;
      out_Jv_x(17, 7) = D_V_y58KN_17_7;
      out_Jv_x(18, 7) = D_V_y58KN_18_7;
      out_Jv_x(19, 7) = D_V_y58KN_19_7;
      out_Jv_x(20, 7) = D_V_y58KN_20_7;
      out_Jv_x(21, 7) = D_V_y58KN_21_7;
      out_Jv_x(22, 7) = D_V_y58KN_22_7;
      out_Jv_x(23, 7) = D_V_y58KN_23_7;
      out_Jv_x(24, 7) = D_V_y58KN_24_7;
      out_Jv_x(25, 7) = D_V_y58KN_25_7;
      out_Jv_x(26, 7) = D_V_y58KN_26_7;
      out_Jv_x(27, 7) = D_V_y58KN_27_7;
      out_Jv_x(1, 8) = D_V_y58KN_1_8;
      out_Jv_x(2, 8) = D_V_y58KN_2_8;
      out_Jv_x(3, 8) = D_V_y58KN_3_8;
      out_Jv_x(4, 8) = D_V_y58KN_4_8;
      out_Jv_x(5, 8) = D_V_y58KN_5_8;
      out_Jv_x(6, 8) = D_V_y58KN_6_8;
      out_Jv_x(7, 8) = D_V_y58KN_7_8;
      out_Jv_x(8, 8) = D_V_y58KN_8_8;
      out_Jv_x(9, 8) = D_V_y58KN_9_8;
      out_Jv_x(10, 8) = D_V_y58KN_10_8;
      out_Jv_x(11, 8) = D_V_y58KN_11_8;
      out_Jv_x(12, 8) = D_V_y58KN_12_8;
      out_Jv_x(13, 8) = D_V_y58KN_13_8;
      out_Jv_x(14, 8) = D_V_y58KN_14_8;
      out_Jv_x(15, 8) = D_V_y58KN_15_8;
      out_Jv_x(16, 8) = D_V_y58KN_16_8;
      out_Jv_x(17, 8) = D_V_y58KN_17_8;
      out_Jv_x(18, 8) = D_V_y58KN_18_8;
      out_Jv_x(19, 8) = D_V_y58KN_19_8;
      out_Jv_x(20, 8) = D_V_y58KN_20_8;
      out_Jv_x(21, 8) = D_V_y58KN_21_8;
      out_Jv_x(22, 8) = D_V_y58KN_22_8;
      out_Jv_x(23, 8) = D_V_y58KN_23_8;
      out_Jv_x(24, 8) = D_V_y58KN_24_8;
      out_Jv_x(25, 8) = D_V_y58KN_25_8;
      out_Jv_x(26, 8) = D_V_y58KN_26_8;
      out_Jv_x(27, 8) = D_V_y58KN_27_8;
      out_Jv_x(1, 9) = D_V_y58KN_1_9;
      out_Jv_x(2, 9) = D_V_y58KN_2_9;
      out_Jv_x(3, 9) = D_V_y58KN_3_9;
      out_Jv_x(4, 9) = D_V_y58KN_4_9;
      out_Jv_x(5, 9) = D_V_y58KN_5_9;
      out_Jv_x(6, 9) = D_V_y58KN_6_9;
      out_Jv_x(7, 9) = D_V_y58KN_7_9;
      out_Jv_x(8, 9) = D_V_y58KN_8_9;
      out_Jv_x(9, 9) = D_V_y58KN_9_9;
      out_Jv_x(10, 9) = D_V_y58KN_10_9;
      out_Jv_x(11, 9) = D_V_y58KN_11_9;
      out_Jv_x(12, 9) = D_V_y58KN_12_9;
      out_Jv_x(13, 9) = D_V_y58KN_13_9;
      out_Jv_x(14, 9) = D_V_y58KN_14_9;
      out_Jv_x(15, 9) = D_V_y58KN_15_9;
      out_Jv_x(16, 9) = D_V_y58KN_16_9;
      out_Jv_x(17, 9) = D_V_y58KN_17_9;
      out_Jv_x(18, 9) = D_V_y58KN_18_9;
      out_Jv_x(19, 9) = D_V_y58KN_19_9;
      out_Jv_x(20, 9) = D_V_y58KN_20_9;
      out_Jv_x(21, 9) = D_V_y58KN_21_9;
      out_Jv_x(22, 9) = D_V_y58KN_22_9;
      out_Jv_x(23, 9) = D_V_y58KN_23_9;
      out_Jv_x(24, 9) = D_V_y58KN_24_9;
      out_Jv_x(25, 9) = D_V_y58KN_25_9;
      out_Jv_x(26, 9) = D_V_y58KN_26_9;
      out_Jv_x(27, 9) = D_V_y58KN_27_9;
      out_Jv_x(1, 10) = D_V_y58KN_1_10;
      out_Jv_x(2, 10) = D_V_y58KN_2_10;
      out_Jv_x(3, 10) = D_V_y58KN_3_10;
      out_Jv_x(4, 10) = D_V_y58KN_4_10;
      out_Jv_x(5, 10) = D_V_y58KN_5_10;
      out_Jv_x(6, 10) = D_V_y58KN_6_10;
      out_Jv_x(7, 10) = D_V_y58KN_7_10;
      out_Jv_x(8, 10) = D_V_y58KN_8_10;
      out_Jv_x(9, 10) = D_V_y58KN_9_10;
      out_Jv_x(10, 10) = D_V_y58KN_10_10;
      out_Jv_x(11, 10) = D_V_y58KN_11_10;
      out_Jv_x(12, 10) = D_V_y58KN_12_10;
      out_Jv_x(13, 10) = D_V_y58KN_13_10;
      out_Jv_x(14, 10) = D_V_y58KN_14_10;
      out_Jv_x(15, 10) = D_V_y58KN_15_10;
      out_Jv_x(16, 10) = D_V_y58KN_16_10;
      out_Jv_x(17, 10) = D_V_y58KN_17_10;
      out_Jv_x(18, 10) = D_V_y58KN_18_10;
      out_Jv_x(19, 10) = D_V_y58KN_19_10;
      out_Jv_x(20, 10) = D_V_y58KN_20_10;
      out_Jv_x(21, 10) = D_V_y58KN_21_10;
      out_Jv_x(22, 10) = D_V_y58KN_22_10;
      out_Jv_x(23, 10) = D_V_y58KN_23_10;
      out_Jv_x(24, 10) = D_V_y58KN_24_10;
      out_Jv_x(25, 10) = D_V_y58KN_25_10;
      out_Jv_x(26, 10) = D_V_y58KN_26_10;
      out_Jv_x(27, 10) = D_V_y58KN_27_10;
      out_Jv_x(1, 11) = D_V_y58KN_1_11;
      out_Jv_x(2, 11) = D_V_y58KN_2_11;
      out_Jv_x(3, 11) = D_V_y58KN_3_11;
      out_Jv_x(4, 11) = D_V_y58KN_4_11;
      out_Jv_x(5, 11) = D_V_y58KN_5_11;
      out_Jv_x(6, 11) = D_V_y58KN_6_11;
      out_Jv_x(7, 11) = D_V_y58KN_7_11;
      out_Jv_x(8, 11) = D_V_y58KN_8_11;
      out_Jv_x(9, 11) = D_V_y58KN_9_11;
      out_Jv_x(10, 11) = D_V_y58KN_10_11;
      out_Jv_x(11, 11) = D_V_y58KN_11_11;
      out_Jv_x(12, 11) = D_V_y58KN_12_11;
      out_Jv_x(13, 11) = D_V_y58KN_13_11;
      out_Jv_x(14, 11) = D_V_y58KN_14_11;
      out_Jv_x(15, 11) = D_V_y58KN_15_11;
      out_Jv_x(16, 11) = D_V_y58KN_16_11;
      out_Jv_x(17, 11) = D_V_y58KN_17_11;
      out_Jv_x(18, 11) = D_V_y58KN_18_11;
      out_Jv_x(19, 11) = D_V_y58KN_19_11;
      out_Jv_x(20, 11) = D_V_y58KN_20_11;
      out_Jv_x(21, 11) = D_V_y58KN_21_11;
      out_Jv_x(22, 11) = D_V_y58KN_22_11;
      out_Jv_x(23, 11) = D_V_y58KN_23_11;
      out_Jv_x(24, 11) = D_V_y58KN_24_11;
      out_Jv_x(25, 11) = D_V_y58KN_25_11;
      out_Jv_x(26, 11) = D_V_y58KN_26_11;
      out_Jv_x(27, 11) = D_V_y58KN_27_11;
      out_Jv_x(1, 12) = D_V_y58KN_1_12;
      out_Jv_x(2, 12) = D_V_y58KN_2_12;
      out_Jv_x(3, 12) = D_V_y58KN_3_12;
      out_Jv_x(4, 12) = D_V_y58KN_4_12;
      out_Jv_x(5, 12) = D_V_y58KN_5_12;
      out_Jv_x(6, 12) = D_V_y58KN_6_12;
      out_Jv_x(7, 12) = D_V_y58KN_7_12;
      out_Jv_x(8, 12) = D_V_y58KN_8_12;
      out_Jv_x(9, 12) = D_V_y58KN_9_12;
      out_Jv_x(10, 12) = D_V_y58KN_10_12;
      out_Jv_x(11, 12) = D_V_y58KN_11_12;
      out_Jv_x(12, 12) = D_V_y58KN_12_12;
      out_Jv_x(13, 12) = D_V_y58KN_13_12;
      out_Jv_x(14, 12) = D_V_y58KN_14_12;
      out_Jv_x(15, 12) = D_V_y58KN_15_12;
      out_Jv_x(16, 12) = D_V_y58KN_16_12;
      out_Jv_x(17, 12) = D_V_y58KN_17_12;
      out_Jv_x(18, 12) = D_V_y58KN_18_12;
      out_Jv_x(19, 12) = D_V_y58KN_19_12;
      out_Jv_x(20, 12) = D_V_y58KN_20_12;
      out_Jv_x(21, 12) = D_V_y58KN_21_12;
      out_Jv_x(22, 12) = D_V_y58KN_22_12;
      out_Jv_x(23, 12) = D_V_y58KN_23_12;
      out_Jv_x(24, 12) = D_V_y58KN_24_12;
      out_Jv_x(25, 12) = D_V_y58KN_25_12;
      out_Jv_x(26, 12) = D_V_y58KN_26_12;
      out_Jv_x(27, 12) = D_V_y58KN_27_12;
      out_Jv_x(1, 13) = D_V_y58KN_1_13;
      out_Jv_x(2, 13) = D_V_y58KN_2_13;
      out_Jv_x(3, 13) = D_V_y58KN_3_13;
      out_Jv_x(4, 13) = D_V_y58KN_4_13;
      out_Jv_x(5, 13) = D_V_y58KN_5_13;
      out_Jv_x(6, 13) = D_V_y58KN_6_13;
      out_Jv_x(7, 13) = D_V_y58KN_7_13;
      out_Jv_x(8, 13) = D_V_y58KN_8_13;
      out_Jv_x(9, 13) = D_V_y58KN_9_13;
      out_Jv_x(10, 13) = D_V_y58KN_10_13;
      out_Jv_x(11, 13) = D_V_y58KN_11_13;
      out_Jv_x(12, 13) = D_V_y58KN_12_13;
      out_Jv_x(13, 13) = D_V_y58KN_13_13;
      out_Jv_x(14, 13) = D_V_y58KN_14_13;
      out_Jv_x(15, 13) = D_V_y58KN_15_13;
      out_Jv_x(16, 13) = D_V_y58KN_16_13;
      out_Jv_x(17, 13) = D_V_y58KN_17_13;
      out_Jv_x(18, 13) = D_V_y58KN_18_13;
      out_Jv_x(19, 13) = D_V_y58KN_19_13;
      out_Jv_x(20, 13) = D_V_y58KN_20_13;
      out_Jv_x(21, 13) = D_V_y58KN_21_13;
      out_Jv_x(22, 13) = D_V_y58KN_22_13;
      out_Jv_x(23, 13) = D_V_y58KN_23_13;
      out_Jv_x(24, 13) = D_V_y58KN_24_13;
      out_Jv_x(25, 13) = D_V_y58KN_25_13;
      out_Jv_x(26, 13) = D_V_y58KN_26_13;
      out_Jv_x(27, 13) = D_V_y58KN_27_13;
      out_Jv_x(1, 14) = D_V_y58KN_1_14;
      out_Jv_x(2, 14) = D_V_y58KN_2_14;
      out_Jv_x(3, 14) = D_V_y58KN_3_14;
      out_Jv_x(4, 14) = D_V_y58KN_4_14;
      out_Jv_x(5, 14) = D_V_y58KN_5_14;
      out_Jv_x(6, 14) = D_V_y58KN_6_14;
      out_Jv_x(7, 14) = D_V_y58KN_7_14;
      out_Jv_x(8, 14) = D_V_y58KN_8_14;
      out_Jv_x(9, 14) = D_V_y58KN_9_14;
      out_Jv_x(10, 14) = D_V_y58KN_10_14;
      out_Jv_x(11, 14) = D_V_y58KN_11_14;
      out_Jv_x(12, 14) = D_V_y58KN_12_14;
      out_Jv_x(13, 14) = D_V_y58KN_13_14;
      out_Jv_x(14, 14) = D_V_y58KN_14_14;
      out_Jv_x(15, 14) = D_V_y58KN_15_14;
      out_Jv_x(16, 14) = D_V_y58KN_16_14;
      out_Jv_x(17, 14) = D_V_y58KN_17_14;
      out_Jv_x(18, 14) = D_V_y58KN_18_14;
      out_Jv_x(19, 14) = D_V_y58KN_19_14;
      out_Jv_x(20, 14) = D_V_y58KN_20_14;
      out_Jv_x(21, 14) = D_V_y58KN_21_14;
      out_Jv_x(22, 14) = D_V_y58KN_22_14;
      out_Jv_x(23, 14) = D_V_y58KN_23_14;
      out_Jv_x(24, 14) = D_V_y58KN_24_14;
      out_Jv_x(25, 14) = D_V_y58KN_25_14;
      out_Jv_x(26, 14) = D_V_y58KN_26_14;
      out_Jv_x(27, 14) = D_V_y58KN_27_14;
      out_Jv_x(1, 15) = D_V_y58KN_1_15;
      out_Jv_x(2, 15) = D_V_y58KN_2_15;
      out_Jv_x(3, 15) = D_V_y58KN_3_15;
      out_Jv_x(4, 15) = D_V_y58KN_4_15;
      out_Jv_x(5, 15) = D_V_y58KN_5_15;
      out_Jv_x(6, 15) = D_V_y58KN_6_15;
      out_Jv_x(7, 15) = D_V_y58KN_7_15;
      out_Jv_x(8, 15) = D_V_y58KN_8_15;
      out_Jv_x(9, 15) = D_V_y58KN_9_15;
      out_Jv_x(10, 15) = D_V_y58KN_10_15;
      out_Jv_x(11, 15) = D_V_y58KN_11_15;
      out_Jv_x(12, 15) = D_V_y58KN_12_15;
      out_Jv_x(13, 15) = D_V_y58KN_13_15;
      out_Jv_x(14, 15) = D_V_y58KN_14_15;
      out_Jv_x(15, 15) = D_V_y58KN_15_15;
      out_Jv_x(16, 15) = D_V_y58KN_16_15;
      out_Jv_x(17, 15) = D_V_y58KN_17_15;
      out_Jv_x(18, 15) = D_V_y58KN_18_15;
      out_Jv_x(19, 15) = D_V_y58KN_19_15;
      out_Jv_x(20, 15) = D_V_y58KN_20_15;
      out_Jv_x(21, 15) = D_V_y58KN_21_15;
      out_Jv_x(22, 15) = D_V_y58KN_22_15;
      out_Jv_x(23, 15) = D_V_y58KN_23_15;
      out_Jv_x(24, 15) = D_V_y58KN_24_15;
      out_Jv_x(25, 15) = D_V_y58KN_25_15;
      out_Jv_x(26, 15) = D_V_y58KN_26_15;
      out_Jv_x(27, 15) = D_V_y58KN_27_15;
      out_Jv_x(1, 16) = D_V_y58KN_1_16;
      out_Jv_x(2, 16) = D_V_y58KN_2_16;
      out_Jv_x(3, 16) = D_V_y58KN_3_16;
      out_Jv_x(4, 16) = D_V_y58KN_4_16;
      out_Jv_x(5, 16) = D_V_y58KN_5_16;
      out_Jv_x(6, 16) = D_V_y58KN_6_16;
      out_Jv_x(7, 16) = D_V_y58KN_7_16;
      out_Jv_x(8, 16) = D_V_y58KN_8_16;
      out_Jv_x(9, 16) = D_V_y58KN_9_16;
      out_Jv_x(10, 16) = D_V_y58KN_10_16;
      out_Jv_x(11, 16) = D_V_y58KN_11_16;
      out_Jv_x(12, 16) = D_V_y58KN_12_16;
      out_Jv_x(13, 16) = D_V_y58KN_13_16;
      out_Jv_x(14, 16) = D_V_y58KN_14_16;
      out_Jv_x(15, 16) = D_V_y58KN_15_16;
      out_Jv_x(16, 16) = D_V_y58KN_16_16;
      out_Jv_x(17, 16) = D_V_y58KN_17_16;
      out_Jv_x(18, 16) = D_V_y58KN_18_16;
      out_Jv_x(19, 16) = D_V_y58KN_19_16;
      out_Jv_x(20, 16) = D_V_y58KN_20_16;
      out_Jv_x(21, 16) = D_V_y58KN_21_16;
      out_Jv_x(22, 16) = D_V_y58KN_22_16;
      out_Jv_x(23, 16) = D_V_y58KN_23_16;
      out_Jv_x(24, 16) = D_V_y58KN_24_16;
      out_Jv_x(25, 16) = D_V_y58KN_25_16;
      out_Jv_x(26, 16) = D_V_y58KN_26_16;
      out_Jv_x(27, 16) = D_V_y58KN_27_16;
      out_Jv_x(1, 17) = D_V_y58KN_1_17;
      out_Jv_x(2, 17) = D_V_y58KN_2_17;
      out_Jv_x(3, 17) = D_V_y58KN_3_17;
      out_Jv_x(4, 17) = D_V_y58KN_4_17;
      out_Jv_x(5, 17) = D_V_y58KN_5_17;
      out_Jv_x(6, 17) = D_V_y58KN_6_17;
      out_Jv_x(7, 17) = D_V_y58KN_7_17;
      out_Jv_x(8, 17) = D_V_y58KN_8_17;
      out_Jv_x(9, 17) = D_V_y58KN_9_17;
      out_Jv_x(10, 17) = D_V_y58KN_10_17;
      out_Jv_x(11, 17) = D_V_y58KN_11_17;
      out_Jv_x(12, 17) = D_V_y58KN_12_17;
      out_Jv_x(13, 17) = D_V_y58KN_13_17;
      out_Jv_x(14, 17) = D_V_y58KN_14_17;
      out_Jv_x(15, 17) = D_V_y58KN_15_17;
      out_Jv_x(16, 17) = D_V_y58KN_16_17;
      out_Jv_x(17, 17) = D_V_y58KN_17_17;
      out_Jv_x(18, 17) = D_V_y58KN_18_17;
      out_Jv_x(19, 17) = D_V_y58KN_19_17;
      out_Jv_x(20, 17) = D_V_y58KN_20_17;
      out_Jv_x(21, 17) = D_V_y58KN_21_17;
      out_Jv_x(22, 17) = D_V_y58KN_22_17;
      out_Jv_x(23, 17) = D_V_y58KN_23_17;
      out_Jv_x(24, 17) = D_V_y58KN_24_17;
      out_Jv_x(25, 17) = D_V_y58KN_25_17;
      out_Jv_x(26, 17) = D_V_y58KN_26_17;
      out_Jv_x(27, 17) = D_V_y58KN_27_17;
    end % Jv_x
    %
    % - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    %
    function out_h = h( this, in_1, in_2, ~ )
      % Calculate the residual of the invariants h.

      % Extract properties
      l__1 = this.m_l__1;
      l__2 = this.m_l__2;
      m__2 = this.m_m__2;
      m__3 = this.m_m__3;

      % Extract inputs
      x__1 = in_1(1);
      y__1 = in_1(2);
      theta__1 = in_1(3);
      x__2 = in_1(4);
      y__2 = in_1(5);
      theta__2 = in_1(6);
      u__1 = in_1(7);
      v__1 = in_1(8);
      omega__1 = in_1(9);
      u__2 = in_1(10);
      v__2 = in_1(11);
      omega__2 = in_1(12);
      V_y58KN_2 = in_2(2);
      V_y58KN_4 = in_2(4);
      V_y58KN_5 = in_2(5);
      V_y58KN_6 = in_2(6);
      V_y58KN_7 = in_2(7);
      V_y58KN_8 = in_2(8);

      % Evaluate function
      out_1 = x__1;
      out_2 = y__1;
      t1 = sin(theta__2);
      out_3 = -l__2 * t1 + y__2;
      t3 = cos(theta__1);
      t4 = t3 * l__1;
      out_4 = t4 + x__1 - x__2;
      t5 = sin(theta__1);
      t6 = l__1 * t5;
      out_5 = t6 + y__1 - y__2;
      out_6 = -u__1;
      out_7 = -v__1;
      t7 = cos(theta__2);
      out_8 = omega__2 * l__2 * t7 - v__2;
      out_9 = omega__1 * t6 + out_6 + u__2;
      out_10 = -omega__1 * t4 + out_7 + v__2;
      out_11 = -V_y58KN_5 / 2;
      out_12 = (2 * m__2 + 2 * m__3) * V_y58KN_4 - V_y58KN_2;
      out_13 = V_y58KN_6 / 2;
      out_14 = -V_y58KN_7 / 2;
      out_15 = -V_y58KN_8 / 2;

      % Store outputs
      out_h = zeros(15, 1);
      out_h(1) = out_1;
      out_h(2) = out_2;
      out_h(3) = out_3;
      out_h(4) = out_4;
      out_h(5) = out_5;
      out_h(6) = out_6;
      out_h(7) = out_7;
      out_h(8) = out_8;
      out_h(9) = out_9;
      out_h(10) = out_10;
      out_h(11) = out_11;
      out_h(12) = out_12;
      out_h(13) = out_13;
      out_h(14) = out_14;
      out_h(15) = out_15;
    end % h
    %
    % - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    %
    function out_Jh_x = Jh_x( this, in_1, ~, ~ )
      % Calculate the Jacobian of h with respect to x.

      % Extract properties
      l__1 = this.m_l__1;
      l__2 = this.m_l__2;

      % Extract inputs
      theta__1 = in_1(3);
      theta__2 = in_1(6);
      omega__1 = in_1(9);
      omega__2 = in_1(12);

      % Evaluate function
      out_1_1 = 1;
      out_4_1 = 1;
      out_2_2 = 1;
      out_5_2 = 1;
      t1 = sin(theta__1);
      t2 = l__1 * t1;
      out_4_3 = -t2;
      t3 = cos(theta__1);
      out_5_3 = t3 * l__1;
      out_9_3 = omega__1 * l__1 * t3;
      out_10_3 = omega__1 * t2;
      out_4_4 = -1;
      out_3_5 = 1;
      out_5_5 = -1;
      t5 = cos(theta__2);
      t6 = l__2 * t5;
      out_3_6 = -t6;
      t7 = sin(theta__2);
      out_8_6 = -omega__2 * l__2 * t7;
      out_6_7 = -1;
      out_9_7 = -1;
      out_7_8 = -1;
      out_10_8 = -1;
      out_9_9 = t2;
      out_10_9 = -out_5_3;
      out_9_10 = 1;
      out_8_11 = -1;
      out_10_11 = 1;
      out_8_12 = t6;

      % Store outputs
      out_Jh_x = zeros(15, 17);
      out_Jh_x(1, 1) = out_1_1;
      out_Jh_x(4, 1) = out_4_1;
      out_Jh_x(2, 2) = out_2_2;
      out_Jh_x(5, 2) = out_5_2;
      out_Jh_x(4, 3) = out_4_3;
      out_Jh_x(5, 3) = out_5_3;
      out_Jh_x(9, 3) = out_9_3;
      out_Jh_x(10, 3) = out_10_3;
      out_Jh_x(4, 4) = out_4_4;
      out_Jh_x(3, 5) = out_3_5;
      out_Jh_x(5, 5) = out_5_5;
      out_Jh_x(3, 6) = out_3_6;
      out_Jh_x(8, 6) = out_8_6;
      out_Jh_x(6, 7) = out_6_7;
      out_Jh_x(9, 7) = out_9_7;
      out_Jh_x(7, 8) = out_7_8;
      out_Jh_x(10, 8) = out_10_8;
      out_Jh_x(9, 9) = out_9_9;
      out_Jh_x(10, 9) = out_10_9;
      out_Jh_x(9, 10) = out_9_10;
      out_Jh_x(8, 11) = out_8_11;
      out_Jh_x(10, 11) = out_10_11;
      out_Jh_x(8, 12) = out_8_12;
    end % Jh_x
    %
    % - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    %
    function out_Jh_v = Jh_v( this, ~, ~, ~ )
      % Calculate the Jacobian of h with respect to v.

      % Extract properties
      m__2 = this.m_m__2;
      m__3 = this.m_m__3;

      % Extract inputs

      % Evaluate function
      out_12_2 = -1;
      out_12_4 = 2 * m__2 + 2 * m__3;
      out_11_5 = -0.1e1 / 0.2e1;
      out_13_6 = 0.1e1 / 0.2e1;
      out_14_7 = -0.1e1 / 0.2e1;
      out_15_8 = -0.1e1 / 0.2e1;

      % Store outputs
      out_Jh_v = zeros(15, 27);
      out_Jh_v(12, 2) = out_12_2;
      out_Jh_v(12, 4) = out_12_4;
      out_Jh_v(11, 5) = out_11_5;
      out_Jh_v(13, 6) = out_13_6;
      out_Jh_v(14, 7) = out_14_7;
      out_Jh_v(15, 8) = out_15_8;
    end % Jh_v
    %
    % - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    %
    function out = in_domain( ~, ~, ~ )
      out = true;
    end % in_domain
    %
    % - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    %
  end
end % SliderCrankGlobal

% That's All Folks!
