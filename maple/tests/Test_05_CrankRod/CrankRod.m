% +--------------------------------------------------------------------------+
% | 'Indigo' module version 1.0 - BSD 3-Clause License - Copyright (c) 2023  |
% | Current version authors:                                                 |
% |   Davide Stocco and Enrico Bertolazzi.                                   |
% +--------------------------------------------------------------------------+

% Matlab generated code for implicit system: CrankRod
% This file has been automatically generated by Indigo.
% DISCLAIMER: If you need to edit it, do it wisely!

classdef CrankRod < Indigo.Systems.Implicit
  %
  % No class description provided.
  %
  properties (SetAccess = protected, Hidden = true)
    % User data
    m_m__1 = 1.0;
    m_m__2 = 1.0;
    m_J__1 = 1.0;
    m_J__2 = 1.0;
    m_g = 9.81;
    m_ell__1 = 1.0;
    m_ell__2 = 1.0;
  end
  %
  methods
    %
    % - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    %
    function this = CrankRod( varargin )
      % Class constructor.

      % Superclass constructor
      num_eqns = 15;
      num_veil = 0;
      num_invs = 9;
      this = this@Indigo.Systems.Implicit('CrankRod', num_eqns, num_veil, num_invs);

      % User data
      if (nargin == 0)
        % Keep default values
      elseif (nargin == 1 && isstruct(varargin{1}))
        this.m_m__1 = varargin{1}.m__1;
        this.m_m__2 = varargin{1}.m__2;
        this.m_J__1 = varargin{1}.J__1;
        this.m_J__2 = varargin{1}.J__2;
        this.m_g = varargin{1}.g;
        this.m_ell__1 = varargin{1}.ell__1;
        this.m_ell__2 = varargin{1}.ell__2;
      elseif (nargin == 7)
        this.m_m__1 = varargin{1};
        this.m_m__2 = varargin{2};
        this.m_J__1 = varargin{3};
        this.m_J__2 = varargin{4};
        this.m_g = varargin{5};
        this.m_ell__1 = varargin{6};
        this.m_ell__2 = varargin{7};
      else
        error('wrong number of input arguments.');
      end
    end % CrankRod
    %
    % - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    %
    function out_F = F( this, in_1, in_2, in_3, t )
      % Evaluate the function F.

      % Extract properties
      m__1 = this.m_m__1;
      m__2 = this.m_m__2;
      J__1 = this.m_J__1;
      J__2 = this.m_J__2;
      g = this.m_g;
      ell__1 = this.m_ell__1;
      ell__2 = this.m_ell__2;

      % Extract inputs
      x__1 = in_1(1);
      y__1 = in_1(2);
      theta__1 = in_1(3);
      x__2 = in_1(4);
      y__2 = in_1(5);
      theta__2 = in_1(6);
      u__1 = in_1(7);
      v__1 = in_1(8);
      omega__1 = in_1(9);
      u__2 = in_1(10);
      v__2 = in_1(11);
      omega__2 = in_1(12);
      lambda__1 = in_1(13);
      lambda__2 = in_1(14);
      lambda__3 = in_1(15);
      x__1_dot = in_2(1);
      y__1_dot = in_2(2);
      theta__1_dot = in_2(3);
      x__2_dot = in_2(4);
      y__2_dot = in_2(5);
      theta__2_dot = in_2(6);
      u__1_dot = in_2(7);
      v__1_dot = in_2(8);
      omega__1_dot = in_2(9);
      u__2_dot = in_2(10);
      v__2_dot = in_2(11);
      omega__2_dot = in_2(12);
      lambda__1_dot = in_2(13);
      lambda__2_dot = in_2(14);
      lambda__3_dot = in_2(15);

      % Evaluate function
      out_1 = x__1_dot - u__1;
      out_2 = -y__1_dot + v__1;
      out_3 = x__2_dot - u__2;
      out_4 = -y__2_dot + v__2;
      out_5 = -theta__2_dot + omega__2;
      out_6 = -theta__1_dot + omega__1;
      t1 = ell__2 ^ 2;
      t2 = cos(theta__2);
      t3 = t2 ^ 2;
      t4 = t3 * t1;
      t5 = m__2 * t4;
      t7 = sin(theta__2);
      t8 = t7 ^ 2;
      t9 = t8 * t1;
      t10 = m__2 * t9;
      t12 = t1 * m__2;
      t16 = t2 * ell__2;
      t19 = lambda__3 * t2;
      t22 = t7 * ell__2;
      out_7 = omega__2_dot * (t5 / 4 + t10 / 4 - t12 / 4 - J__2) + lambda__2 * t16 / 2 + ell__2 * t19 / 2 - lambda__1 * t22 / 2;
      t27 = m__2 * (-t5 - t10 + t12 + 4 * J__2);
      t30 = t2 * t7;
      t37 = t1 * ell__2;
      t38 = t3 * t2;
      t40 = m__2 ^ 2;
      t41 = omega__2 ^ 2;
      t42 = t41 * t40;
      t43 = t42 * t38 * t37;
      t46 = m__2 * lambda__1 * t4;
      t53 = t37 * t40;
      t54 = t41 * t2;
      t55 = t54 * t53;
      t57 = lambda__1 * t12;
      t59 = J__2 * m__2;
      t63 = J__2 * lambda__1;
      out_8 = -u__2_dot * t27 / 4 + lambda__2 * t30 * t12 / 4 + lambda__3 * t30 * t12 / 4 - t43 / 8 + t46 / 4 - t41 * t2 * t40 * t8 * t37 / 8 + t55 / 8 - t57 / 4 + t41 * t16 * t59 / 2 - t63;
      t67 = lambda__3 * t3 * t12;
      t71 = lambda__1 * t30 * t12 / 4;
      t76 = t41 * t7 * t40 * t3 * t37 / 8;
      t77 = g * t40;
      t79 = t77 * t4 / 4;
      t80 = t8 * t7;
      t82 = t42 * t80 * t37;
      t83 = t82 / 8;
      t85 = t77 * t9 / 4;
      t87 = m__2 * lambda__2 * t9;
      t88 = t87 / 4;
      t90 = m__2 * lambda__3 * t9;
      t91 = t90 / 4;
      t92 = t41 * t7;
      t93 = t92 * t53;
      t94 = t93 / 8;
      t95 = t1 * t40;
      t97 = g * t95 / 4;
      t98 = lambda__2 * t12;
      t99 = t98 / 4;
      t100 = lambda__3 * t12;
      t101 = t100 / 4;
      t104 = t41 * t22 * t59 / 2;
      t105 = g * t59;
      t106 = J__2 * lambda__2;
      t107 = J__2 * lambda__3;
      out_9 = -v__2_dot * t27 / 4 - t67 / 2 + t71 - t76 + t79 - t83 + t85 + t88 - t91 + t94 - t97 - t99 + t101 + t104 - t105 - t106 + t107;
      t109 = m__1 * ell__1;
      t110 = cos(theta__1);
      t114 = sin(theta__1);
      t115 = omega__1 ^ 2;
      t116 = t115 * t114;
      t117 = t116 * t109;
      out_10 = -m__1 * v__1_dot - omega__1_dot * t110 * t109 / 2 + t117 / 2 - m__1 * g + lambda__2;
      t120 = ell__1 ^ 2;
      t121 = t110 ^ 2;
      t122 = t121 * t120;
      t123 = m__1 * t122;
      t125 = t114 ^ 2;
      t126 = t125 * t120;
      t127 = m__1 * t126;
      t129 = t120 * m__1;
      t133 = t110 * lambda__2;
      t136 = t114 * lambda__1;
      out_11 = omega__1_dot * (t123 / 4 + t127 / 4 - t129 / 4 - J__1) + ell__1 * t133 / 2 - ell__1 * t136 / 2;
      t144 = lambda__2 * t114;
      t145 = t110 * t144;
      t151 = t120 * ell__1;
      t152 = t121 * t110;
      t154 = m__1 ^ 2;
      t166 = t151 * t154;
      t167 = t115 * t110;
      t168 = t167 * t166;
      t172 = J__1 * m__1;
      t177 = J__1 * lambda__1;
      out_12 = -u__1_dot * m__1 * (-t123 - t127 + t129 + 4 * J__1) / 4 + t145 * t129 / 4 - lambda__1 * t125 * t129 / 2 - t115 * t154 * t152 * t151 / 8 - m__1 * lambda__1 * t122 / 4 - t115 * t110 * t154 * t125 * t151 / 8 + t168 / 8 + lambda__1 * t129 / 4 + t115 * t110 * ell__1 * t172 / 2 + t177;
      t178 = t40 * J__1;
      t179 = lambda__1 * t1;
      t182 = m__2 * J__1;
      t184 = t120 * t154;
      t188 = J__2 * t154;
      t189 = lambda__1 * t188;
      t192 = t1 * J__1;
      t193 = t40 * t3;
      t194 = lambda__1 * t193;
      t200 = m__2 * m__1;
      t205 = lambda__1 * t95;
      t216 = t154 * t151 * t115;
      t219 = t37 * t172;
      t221 = t41 * t40 * t38;
      t224 = t40 * t172;
      t226 = t41 * t2 * t37;
      t229 = t37 * t184;
      t232 = t40 * t184;
      t235 = -t179 * t178 / 4 - t63 * t182 - t63 * t184 / 4 - t63 * t172 + t189 * t126 / 4 + t194 * t192 / 4 + t40 * t9 * t177 / 4 - lambda__1 * J__2 * t120 * t200 / 4 - t205 * t129 / 16 - t57 * t172 / 4 - t57 * t184 / 16 + t189 * t122 / 4 + t216 * t110 * t59 / 8 - t221 * t219 / 8 + t226 * t224 / 8 - t221 * t229 / 32 + t226 * t232 / 32;
      t244 = t154 * t122;
      t247 = t154 * t126;
      t256 = t1 * t129;
      t259 = t1 * t172;
      t261 = lambda__1 * m__2 * t3;
      t264 = t1 * t184;
      t267 = t115 * t152;
      t270 = t40 * t154 * t1;
      t289 = m__2 * t172;
      t290 = t7 * t1;
      t292 = lambda__2 * t2 * t290;
      t295 = m__2 * t184;
      t299 = t40 * m__1;
      t300 = t299 * t1 * t120;
      t303 = t205 * t123 / 16 + m__1 * J__2 * lambda__1 * t121 * t120 * m__2 / 4 + t57 * t244 / 16 + t57 * t247 / 16 + t40 * m__1 * t1 * t120 * t8 * lambda__1 / 16 + t194 * t256 / 16 + t261 * t259 / 4 + t261 * t264 / 16 - t270 * t151 * t267 / 32 + t270 * t151 * t167 / 32 - t216 * t152 * t59 / 8 - t46 * t247 / 16 - lambda__1 * t40 * t4 * t123 / 16 + t129 * t133 * t114 * t59 / 4 + t292 * t289 / 4 + t292 * t295 / 16 + t300 * t145 / 16;
      t305 = t19 * t290;
      t310 = t110 * t125;
      t314 = t40 * t154 * t1 * t151;
      t320 = J__2 * t182;
      t336 = t110 * J__1;
      t339 = t299 * t1 * ell__1;
      t342 = t40 * t8;
      t343 = t54 * t342;
      t346 = J__2 * t172;
      t347 = m__2 * ell__2;
      t348 = t54 * t347;
      t353 = J__2 * t184;
      t362 = t305 * t289 / 4 + t305 * t295 / 16 - t314 * t115 * t310 / 32 - t168 * t125 * t59 / 8 + t109 * t167 * t320 / 2 + t314 * t8 * t267 / 32 - t314 * t3 * t167 / 32 - t314 * t8 * t167 / 32 + t314 * t3 * t267 / 32 + t339 * t115 * t336 / 8 - t343 * t219 / 8 + t348 * t346 / 2 - t343 * t229 / 32 + t348 * t353 / 8 + t43 * t244 / 32 - t55 * t244 / 32 + t43 * t247 / 32;
      t371 = m__2 * t154;
      t372 = t371 * t122;
      t375 = t371 * t126;
      t390 = t3 * t115;
      t394 = t8 * t115;
      t404 = t37 * t154;
      t405 = t404 * t122;
      t408 = t188 * t122;
      t411 = t404 * t126;
      t414 = t188 * t126;
      t417 = -t55 * t247 / 32 - t300 * t8 * lambda__1 * t121 / 16 - t46 * t244 / 16 - t292 * t372 / 16 - t292 * t375 / 16 - t300 * t3 * t110 * t144 / 16 - t300 * t8 * t110 * t144 / 16 - t305 * t372 / 16 - t305 * t375 / 16 - t339 * t390 * t336 / 8 - t339 * t394 * t336 / 8 + t314 * t390 * t310 / 32 + t314 * t394 * t310 / 32 + t343 * t405 / 32 - t348 * t408 / 8 + t343 * t411 / 32 - t348 * t414 / 8;
      out_13 = t235 + t303 + t362 + t417;
      t431 = lambda__2 * t95;
      t434 = lambda__2 * t59;
      t439 = lambda__2 * t188;
      t444 = lambda__2 * t4;
      t447 = lambda__2 * t342;
      t454 = lambda__3 * t188;
      t463 = -t106 * t184 / 4 - lambda__2 * t1 * t178 / 4 - t106 * t182 - t106 * t172 + t107 * t184 / 4 + t107 * t172 - t98 * t184 / 16 - t431 * t129 / 16 - t434 * t129 / 4 - t98 * t172 / 4 + t439 * t122 / 4 + t439 * t126 / 4 + t444 * t178 / 4 + t447 * t192 / 4 + t100 * t184 / 16 + t100 * t172 / 4 - t454 * t122 / 4 - t454 * t126 / 4 + t98 * t244 / 16 + t98 * t247 / 16;
      t468 = m__2 * t8;
      t469 = lambda__2 * t468;
      t472 = t40 * t129;
      t483 = lambda__3 * t4;
      t486 = lambda__3 * t468;
      t495 = t40 * t1 * t115;
      t505 = t154 * t125 * t114 * t151;
      t512 = t41 * t7 * t37;
      t516 = t41 * t40 * t80;
      t523 = t431 * t127 / 16 + t434 * t127 / 4 + t469 * t259 / 4 + t444 * t472 / 16 + t447 * t256 / 16 + t469 * t264 / 16 - t100 * t244 / 16 - t100 * t247 / 16 - t483 * t289 / 2 - t486 * t259 / 4 - t483 * t295 / 8 - t486 * t264 / 16 + t495 * t114 * t166 / 32 + t115 * t114 * J__2 * m__2 * t166 / 8 - t495 * t505 / 32 - t115 * t59 * t505 / 8 + t512 * t232 / 32 - t516 * t219 / 8 + t512 * t224 / 8 - t516 * t229 / 32;
      t525 = t92 * t193;
      t528 = t92 * t347;
      t550 = lambda__1 * t7 * t2 * t1;
      t557 = lambda__2 * t3;
      t575 = t121 * t151;
      t576 = t154 * t575;
      t577 = t95 * t116;
      t583 = -t525 * t229 / 32 + t528 * t346 / 2 + t82 * t244 / 32 - t93 * t244 / 32 + t82 * t247 / 32 - t93 * t247 / 32 + t179 * t114 * t110 * t472 / 16 + t136 * J__2 * t110 * t120 * t200 / 4 + t550 * t289 / 4 + t550 * t295 / 16 - t87 * t244 / 16 - t557 * t95 * t127 / 16 - lambda__2 * t40 * t9 * t127 / 16 - t87 * t247 / 16 + t67 * t244 / 8 + t90 * t244 / 16 + t67 * t247 / 8 + t90 * t247 / 16 - t577 * t576 / 32 - t116 * t59 * t576 / 8;
      t623 = t110 * t120 * t299;
      t644 = t339 * t115 * t114 * J__1 / 8 + t117 * t320 / 2 + t95 * t390 * t505 / 32 + t95 * t394 * t505 / 32 - t577 * t3 * t166 / 32 - t577 * t8 * t166 / 32 - t525 * t219 / 8 + t528 * t353 / 8 - t339 * t116 * t3 * J__1 / 8 - t339 * t116 * t8 * J__1 / 8 - t528 * t408 / 8 + t525 * t405 / 32 - t528 * t414 / 8 + t525 * t411 / 32 - t179 * t114 * t3 * t623 / 16 - t179 * t114 * t8 * t623 / 16 - t550 * t372 / 16 - t550 * t375 / 16 + t577 * t3 * t154 * t575 / 32 + t577 * t8 * t154 * t575 / 32;
      out_14 = t463 + t523 + t583 + t644;
      out_15 = t71 - t76 - t79 - t83 - t85 - t88 + t91 + t94 + t97 + t99 - t101 + t104 + t105 + t106 - t107 - t557 * t12 / 2;

      % Store outputs
      out_F = zeros(15, 1);
      out_F(1) = out_1;
      out_F(2) = out_2;
      out_F(3) = out_3;
      out_F(4) = out_4;
      out_F(5) = out_5;
      out_F(6) = out_6;
      out_F(7) = out_7;
      out_F(8) = out_8;
      out_F(9) = out_9;
      out_F(10) = out_10;
      out_F(11) = out_11;
      out_F(12) = out_12;
      out_F(13) = out_13;
      out_F(14) = out_14;
      out_F(15) = out_15;
    end % F
    %
    % - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    %
    function out_JF_x = JF_x( this, in_1, in_2, in_3, t )
      % Evaluate the Jacobian of F with respect to x.

      % Extract properties
      m__1 = this.m_m__1;
      m__2 = this.m_m__2;
      J__1 = this.m_J__1;
      J__2 = this.m_J__2;
      g = this.m_g;
      ell__1 = this.m_ell__1;
      ell__2 = this.m_ell__2;

      % Extract inputs
      x__1 = in_1(1);
      y__1 = in_1(2);
      theta__1 = in_1(3);
      x__2 = in_1(4);
      y__2 = in_1(5);
      theta__2 = in_1(6);
      u__1 = in_1(7);
      v__1 = in_1(8);
      omega__1 = in_1(9);
      u__2 = in_1(10);
      v__2 = in_1(11);
      omega__2 = in_1(12);
      lambda__1 = in_1(13);
      lambda__2 = in_1(14);
      lambda__3 = in_1(15);
      x__1_dot = in_2(1);
      y__1_dot = in_2(2);
      theta__1_dot = in_2(3);
      x__2_dot = in_2(4);
      y__2_dot = in_2(5);
      theta__2_dot = in_2(6);
      u__1_dot = in_2(7);
      v__1_dot = in_2(8);
      omega__1_dot = in_2(9);
      u__2_dot = in_2(10);
      v__2_dot = in_2(11);
      omega__2_dot = in_2(12);
      lambda__1_dot = in_2(13);
      lambda__2_dot = in_2(14);
      lambda__3_dot = in_2(15);

      % Evaluate function
      t1 = m__1 * ell__1;
      t2 = sin(theta__1);
      t5 = cos(theta__1);
      t6 = omega__1 ^ 2;
      t7 = t6 * t5;
      t8 = t7 * t1;
      out_10_3 = omega__1_dot * t2 * t1 / 2 + t8 / 2;
      t10 = ell__1 * t2;
      out_11_3 = -ell__1 * t5 * lambda__1 / 2 - lambda__2 * t10 / 2;
      t15 = ell__1 ^ 2;
      t16 = t15 * m__1;
      t17 = t5 ^ 2;
      t18 = lambda__2 * t17;
      t21 = t2 ^ 2;
      t25 = lambda__1 * t2;
      t29 = t15 * ell__1;
      t30 = t17 * t29;
      t31 = m__1 ^ 2;
      t32 = t6 * t31;
      t37 = t21 * t2 * t29;
      t40 = t29 * t31;
      t41 = t6 * t2;
      t44 = J__1 * m__1;
      out_12_3 = t18 * t16 / 4 - lambda__2 * t21 * t16 / 4 - t5 * t25 * t16 / 2 + t2 * t32 * t30 / 8 + t32 * t37 / 8 - t41 * t40 / 8 - t6 * t10 * t44 / 2;
      t48 = t2 * t40;
      t49 = ell__2 ^ 2;
      t51 = m__2 ^ 2;
      t52 = t51 * t49 * t6;
      t55 = m__2 * t40;
      t56 = t2 * J__2;
      t60 = t31 * t37;
      t63 = J__2 * m__2;
      t68 = m__1 * t49;
      t69 = t51 * t68;
      t74 = m__2 * t16;
      t77 = t21 * t15;
      t78 = m__1 * t77;
      t79 = t49 * t51;
      t86 = t51 * m__1;
      t87 = t5 * t15;
      t88 = t87 * t86;
      t89 = cos(theta__2);
      t90 = t89 ^ 2;
      t92 = t49 * lambda__1;
      t96 = sin(theta__2);
      t97 = t96 ^ 2;
      t103 = t90 * t31 * t30;
      t104 = t79 * t41;
      t108 = t97 * t31 * t30;
      t111 = t90 * J__1;
      t114 = t86 * t49 * ell__1;
      t117 = t97 * J__1;
      t121 = -t52 * t48 / 32 - t6 * t56 * t55 / 8 + t52 * t60 / 32 + t6 * t63 * t60 / 8 + t69 * t15 * t18 / 16 + t74 * t17 * lambda__2 * J__2 / 4 - lambda__2 * t79 * t78 / 16 - lambda__2 * t63 * t78 / 4 + t92 * t2 * t90 * t88 / 8 + t92 * t2 * t97 * t88 / 8 - t104 * t103 / 32 - t104 * t108 / 32 + t114 * t41 * t111 / 8 + t114 * t41 * t117 / 8;
      t122 = t31 * t30;
      t128 = t2 * J__1;
      t133 = m__2 * J__1 * J__2;
      t137 = t6 * t90;
      t141 = t6 * t97;
      t145 = t90 * t40;
      t148 = t97 * t40;
      t151 = t15 * t86;
      t152 = t2 * t5;
      t160 = lambda__2 * t90;
      t164 = t97 * t49;
      t170 = t79 * t16;
      t176 = t104 * t122 / 32 + t41 * t63 * t122 / 8 - t114 * t6 * t128 / 8 - t1 * t41 * t133 / 2 - t79 * t137 * t60 / 32 - t79 * t141 * t60 / 32 + t104 * t145 / 32 + t104 * t148 / 32 - t92 * t152 * t151 / 8 - t25 * J__2 * t5 * t74 / 2 + t160 * t79 * t78 / 16 + lambda__2 * t51 * t164 * t78 / 16 - t170 * t90 * t18 / 16 - t170 * t97 * t18 / 16;
      out_13_3 = t121 + t176;
      t177 = t17 * t5;
      t178 = t6 * t177;
      t181 = t51 * t31 * t49;
      t187 = t177 * t63;
      t189 = t31 * t29 * t6;
      t192 = t5 * t63;
      t195 = t17 * t15;
      t196 = m__1 * t195;
      t200 = t15 * m__2;
      t214 = lambda__2 * t2;
      t223 = t5 * J__1;
      t230 = t5 * t21;
      t234 = t51 * t31 * t49 * t29;
      t240 = -t181 * t29 * t178 / 32 + t181 * t29 * t7 / 32 - t189 * t187 / 8 + t189 * t192 / 8 + lambda__1 * t79 * t196 / 16 + m__1 * J__2 * lambda__1 * t17 * t200 / 4 - t49 * lambda__1 * t21 * t151 / 16 - lambda__1 * J__2 * t21 * t74 / 4 - t170 * t90 * t5 * t214 / 8 - t170 * t97 * t5 * t214 / 8 - t114 * t137 * t223 / 8 - t114 * t141 * t223 / 8 + t234 * t137 * t230 / 32 + t234 * t141 * t230 / 32;
      t244 = t21 * t63;
      t269 = t90 * t49;
      t274 = t2 * t63;
      t290 = -t234 * t6 * t230 / 32 - t40 * t7 * t244 / 8 + t8 * t133 / 2 + t234 * t97 * t178 / 32 - t234 * t90 * t7 / 32 - t234 * t97 * t7 / 32 + t234 * t90 * t178 / 32 + t114 * t6 * t223 / 8 - t170 * t97 * lambda__1 * t17 / 16 - lambda__1 * t51 * t269 * t196 / 16 + t16 * t5 * lambda__2 * t274 / 2 + t170 * t5 * t214 / 8 + t92 * t90 * t21 * t151 / 16 + t92 * t97 * t21 * t151 / 16;
      out_14_3 = t240 + t290;
      t291 = t96 * ell__2;
      t295 = t89 * ell__2;
      out_7_6 = -ell__2 * lambda__3 * t96 / 2 - lambda__2 * t291 / 2 - lambda__1 * t295 / 2;
      t298 = t49 * m__2;
      t299 = t160 * t298;
      t302 = m__2 * lambda__2 * t164;
      t305 = lambda__3 * t90 * t298;
      t308 = m__2 * lambda__3 * t164;
      t310 = t49 * ell__2;
      t311 = t90 * t310;
      t312 = t96 * t51;
      t313 = omega__2 ^ 2;
      t317 = t96 * t89;
      t321 = t97 * t96;
      t322 = t321 * t310;
      t323 = t313 * t51;
      t324 = t323 * t322;
      t326 = t310 * t51;
      t327 = t313 * t96;
      t328 = t327 * t326;
      out_8_6 = t299 / 4 - t302 / 4 + t305 / 4 - t308 / 4 + t313 * t312 * t311 / 8 - lambda__1 * t317 * t298 / 2 + t324 / 8 - t328 / 8 - t313 * t291 * t63 / 2;
      t337 = lambda__1 * t97 * t298;
      t340 = m__2 * lambda__1 * t269;
      t342 = t97 * t310;
      t343 = t89 * t51;
      t347 = t90 * t89;
      t348 = t347 * t310;
      t349 = t323 * t348;
      t354 = t313 * t89;
      t355 = t354 * t326;
      out_9_6 = lambda__3 * t317 * t298 / 2 - t337 / 4 + t340 / 4 - t313 * t343 * t342 / 8 - t349 / 8 + lambda__2 * t317 * t298 / 2 + t355 / 8 + t313 * t295 * t63 / 2;
      t365 = t49 * t44;
      t366 = m__2 * t97;
      t367 = lambda__2 * t366;
      t370 = t15 * t31;
      t371 = t49 * t370;
      t374 = m__2 * t44;
      t375 = lambda__3 * t269;
      t378 = lambda__3 * t366;
      t381 = m__2 * t370;
      t386 = t51 * t370;
      t387 = t96 * t310;
      t388 = t313 * t387;
      t391 = t310 * t44;
      t392 = t51 * t321;
      t393 = t313 * t392;
      t396 = t51 * t44;
      t399 = t310 * t370;
      t405 = J__2 * t31;
      t406 = t405 * t195;
      t407 = m__2 * ell__2;
      t408 = t327 * t407;
      t411 = t310 * t31;
      t412 = t411 * t195;
      t413 = t51 * t90;
      t414 = t327 * t413;
      t417 = t405 * t77;
      t420 = t411 * t77;
      t423 = m__2 * t31;
      t424 = t423 * t195;
      t427 = lambda__1 * t96 * t89 * t49;
      t430 = t423 * t77;
      t433 = m__2 * t68 * t90 * lambda__2 * J__1 / 4 - t367 * t365 / 4 - t367 * t371 / 16 + t375 * t374 / 4 - t378 * t365 / 4 + t375 * t381 / 16 - t378 * t371 / 16 - t388 * t386 / 32 + t393 * t391 / 8 - t388 * t396 / 8 + t393 * t399 / 32 + lambda__2 * t269 * t381 / 16 + t408 * t406 / 8 - t414 * t412 / 32 + t408 * t417 / 8 - t414 * t420 / 32 + t427 * t424 / 8 + t427 * t430 / 8;
      t436 = t31 * t195;
      t439 = t31 * t77;
      t456 = J__2 * t370;
      t461 = J__2 * t44;
      t474 = -t427 * t381 / 8 + t302 * t436 / 16 + t302 * t439 / 16 - t305 * t436 / 16 + t308 * t436 / 16 - t305 * t439 / 16 + t308 * t439 / 16 - t299 * t436 / 16 - t299 * t439 / 16 + t414 * t391 / 8 - t408 * t456 / 8 + t414 * t399 / 32 - t408 * t461 / 2 - t324 * t436 / 32 + t328 * t436 / 32 - t324 * t439 / 32 + t328 * t439 / 32 - t427 * t374 / 2;
      out_13_6 = t433 + t474;
      t475 = t51 * t347;
      t476 = t313 * t475;
      t479 = t89 * t310;
      t480 = t313 * t479;
      t488 = lambda__1 * m__2 * t90;
      t491 = lambda__1 * t164;
      t498 = t96 * t49;
      t500 = lambda__2 * t89 * t498;
      t506 = lambda__3 * t89 * t498;
      t511 = t51 * t97;
      t512 = t354 * t511;
      t515 = t354 * t407;
      t522 = -t476 * t391 / 8 + t480 * t396 / 8 - t476 * t399 / 32 + t480 * t386 / 32 + t488 * t365 / 4 - t491 * t381 / 16 - t491 * t374 / 4 + t488 * t371 / 16 - t500 * t424 / 8 - t500 * t430 / 8 - t506 * t424 / 8 - t506 * t430 / 8 + t512 * t412 / 32 - t515 * t406 / 8 + t512 * t420 / 32 - t515 * t417 / 8;
      t555 = t506 * t381 / 8 + t337 * t436 / 16 + t337 * t439 / 16 - t512 * t391 / 8 + t515 * t461 / 2 - t512 * t399 / 32 + t515 * t456 / 8 + t349 * t436 / 32 - t355 * t436 / 32 + t349 * t439 / 32 - t355 * t439 / 32 - t340 * t436 / 16 - t340 * t439 / 16 + t500 * t374 / 2 + t500 * t381 / 8 + t506 * t374 / 2;
      out_14_6 = t522 + t555;
      out_15_6 = out_9_6;
      out_1_7 = -1;
      out_2_8 = 1;
      out_6_9 = 1;
      t556 = omega__1 * t2;
      out_10_9 = t556 * t1;
      t566 = omega__1 * t5;
      t567 = t566 * t40;
      t569 = t5 * ell__1;
      out_12_9 = -omega__1 * t31 * t177 * t29 / 4 - omega__1 * t5 * t31 * t21 * t29 / 4 + t567 / 4 + omega__1 * t569 * t44;
      t575 = omega__1 * t177;
      t582 = t97 * omega__1;
      t586 = t90 * omega__1;
      t616 = t31 * t29 * omega__1;
      out_13_9 = t114 * omega__1 * t223 / 4 + t234 * t90 * t575 / 16 + t234 * t97 * t575 / 16 - t114 * t582 * t223 / 4 + t234 * t586 * t230 / 16 + t234 * t582 * t230 / 16 - t114 * t586 * t223 / 4 - t234 * omega__1 * t230 / 16 - t234 * t90 * t566 / 16 - t234 * t97 * t566 / 16 - t567 * t244 / 4 + t1 * t566 * t133 - t181 * t29 * t575 / 16 + t181 * t29 * t566 / 16 - t616 * t187 / 4 + t616 * t192 / 4;
      t622 = t51 * t49 * omega__1;
      t633 = t79 * t556;
      out_14_9 = t622 * t48 / 16 + omega__1 * t56 * t55 / 4 - t622 * t60 / 16 - omega__1 * t63 * t60 / 4 - t633 * t122 / 16 - t556 * t63 * t122 / 4 + t79 * t586 * t60 / 16 + t79 * t582 * t60 / 16 - t633 * t145 / 16 - t633 * t148 / 16 + t114 * omega__1 * t128 / 4 + out_10_9 * t133 + t633 * t103 / 16 + t633 * t108 / 16 - t114 * t556 * t111 / 4 - t114 * t556 * t117 / 4;
      out_3_10 = -1;
      out_4_11 = 1;
      out_5_12 = 1;
      t663 = omega__2 * t51;
      t664 = t663 * t348;
      t669 = omega__2 * t89;
      t670 = t669 * t326;
      out_8_12 = -t664 / 4 - omega__2 * t343 * t342 / 4 + t670 / 4 + omega__2 * t295 * t63;
      t677 = t663 * t322;
      t679 = omega__2 * t96;
      t680 = t679 * t326;
      out_9_12 = -omega__2 * t312 * t311 / 4 - t677 / 4 + t680 / 4 + omega__2 * t291 * t63;
      t684 = t669 * t511;
      t687 = t669 * t407;
      t709 = omega__2 * t475;
      t712 = omega__2 * t479;
      out_13_12 = t684 * t412 / 16 - t687 * t406 / 4 + t684 * t420 / 16 - t687 * t417 / 4 - t684 * t391 / 4 + t687 * t461 + t664 * t436 / 16 - t670 * t436 / 16 + t664 * t439 / 16 - t670 * t439 / 16 - t684 * t399 / 16 + t687 * t456 / 4 - t709 * t391 / 4 + t712 * t396 / 4 - t709 * t399 / 16 + t712 * t386 / 16;
      t719 = omega__2 * t387;
      t722 = omega__2 * t392;
      t729 = t679 * t413;
      t740 = t679 * t407;
      out_14_12 = t719 * t386 / 16 - t722 * t391 / 4 + t719 * t396 / 4 - t722 * t399 / 16 - t729 * t391 / 4 + t677 * t436 / 16 - t680 * t436 / 16 + t677 * t439 / 16 - t680 * t439 / 16 + t740 * t456 / 4 - t729 * t399 / 16 + t740 * t461 - t740 * t406 / 4 + t729 * t412 / 16 - t740 * t417 / 4 + t729 * t420 / 16;
      out_15_12 = out_9_12;
      out_7_13 = -t291 / 2;
      t755 = m__2 * t269;
      t757 = t298 / 4;
      out_8_13 = t755 / 4 - t757 - J__2;
      t758 = t317 * t298;
      out_9_13 = t758 / 4;
      out_11_13 = -t10 / 2;
      out_12_13 = -t78 / 2 - t196 / 4 + t16 / 4 + J__1;
      t763 = m__2 * m__1;
      t766 = J__2 * t15 * t763 / 4;
      t767 = t170 / 16;
      t770 = t413 * t49 * J__1 / 4;
      t772 = t79 * t117 / 4;
      t774 = t298 * t44 / 4;
      t775 = t406 / 4;
      t776 = t417 / 4;
      t778 = t298 * t370 / 16;
      t779 = t51 * t269;
      t786 = t755 * t436;
      t788 = t755 * t439;
      t790 = -t766 - t767 + t770 + t772 - t774 + t775 + t776 - t778 - t779 * t196 / 16 - t69 * t15 * t97 * t17 / 16 - t786 / 16 - t788 / 16;
      t793 = t49 * t51 * J__1 / 4;
      t794 = t456 / 4;
      t799 = t69 * t15 * t97 / 16;
      t805 = t779 * t16 / 16;
      t806 = t49 * t423;
      t808 = t806 * t195 / 16;
      t810 = t806 * t77 / 16;
      t811 = t755 * t44;
      t813 = t755 * t370;
      t815 = -t793 - t133 - t794 - t461 + t69 * t195 / 16 + t799 + J__2 * m__1 * t17 * t200 / 4 + t805 + t808 + t810 + t811 / 4 + t813 / 16;
      out_13_13 = t790 + t815;
      t817 = t758 * t436 / 16;
      t819 = t758 * t439 / 16;
      t826 = t89 * t498;
      t828 = t826 * t374 / 4;
      t836 = t826 * t381 / 16;
      out_14_13 = -t817 - t819 - t170 * t90 * t152 / 16 - t170 * t97 * t152 / 16 + t828 + t69 * t15 * t152 / 16 + m__1 * t87 * t274 / 4 + t836;
      out_15_13 = out_9_13;
      out_7_14 = t295 / 2;
      out_8_14 = out_15_13;
      t837 = m__2 * t164;
      t838 = t837 / 4;
      out_9_14 = t838 - t757 - J__2;
      out_10_14 = 1;
      out_11_14 = t569 / 2;
      out_12_14 = t152 * t16 / 4;
      out_13_14 = out_14_13;
      t841 = t837 * t44 / 4;
      t848 = t837 * t370 / 16;
      t849 = t841 + t808 + t810 + t69 * t77 / 16 + J__2 * t763 * t77 / 4 + t805 + t799 + t848 + t775 + t776 - t778 - t767;
      t851 = t837 * t436 / 16;
      t858 = t837 * t439 / 16;
      t859 = -t766 + t770 + t772 - t774 - t851 - t779 * t78 / 16 - t51 * t164 * t78 / 16 - t858 - t794 - t793 - t133 - t461;
      out_14_14 = t849 + t859;
      out_15_14 = -t755 / 2 - t838 + t757 + J__2;
      out_7_15 = out_7_14;
      out_8_15 = out_8_14;
      out_9_15 = out_15_14;
      out_13_15 = -t817 - t819 + t828 + t836;
      out_14_15 = -t811 / 2 - t841 - t808 - t810 - t813 / 8 - t848 - t775 - t776 + t778 + t774 + t786 / 8 + t851 + t788 / 8 + t858 + t794 + t461;
      out_15_15 = out_9_14;

      % Store outputs
      out_JF_x = zeros(15, 15);
      out_JF_x(10, 3) = out_10_3;
      out_JF_x(11, 3) = out_11_3;
      out_JF_x(12, 3) = out_12_3;
      out_JF_x(13, 3) = out_13_3;
      out_JF_x(14, 3) = out_14_3;
      out_JF_x(7, 6) = out_7_6;
      out_JF_x(8, 6) = out_8_6;
      out_JF_x(9, 6) = out_9_6;
      out_JF_x(13, 6) = out_13_6;
      out_JF_x(14, 6) = out_14_6;
      out_JF_x(15, 6) = out_15_6;
      out_JF_x(1, 7) = out_1_7;
      out_JF_x(2, 8) = out_2_8;
      out_JF_x(6, 9) = out_6_9;
      out_JF_x(10, 9) = out_10_9;
      out_JF_x(12, 9) = out_12_9;
      out_JF_x(13, 9) = out_13_9;
      out_JF_x(14, 9) = out_14_9;
      out_JF_x(3, 10) = out_3_10;
      out_JF_x(4, 11) = out_4_11;
      out_JF_x(5, 12) = out_5_12;
      out_JF_x(8, 12) = out_8_12;
      out_JF_x(9, 12) = out_9_12;
      out_JF_x(13, 12) = out_13_12;
      out_JF_x(14, 12) = out_14_12;
      out_JF_x(15, 12) = out_15_12;
      out_JF_x(7, 13) = out_7_13;
      out_JF_x(8, 13) = out_8_13;
      out_JF_x(9, 13) = out_9_13;
      out_JF_x(11, 13) = out_11_13;
      out_JF_x(12, 13) = out_12_13;
      out_JF_x(13, 13) = out_13_13;
      out_JF_x(14, 13) = out_14_13;
      out_JF_x(15, 13) = out_15_13;
      out_JF_x(7, 14) = out_7_14;
      out_JF_x(8, 14) = out_8_14;
      out_JF_x(9, 14) = out_9_14;
      out_JF_x(10, 14) = out_10_14;
      out_JF_x(11, 14) = out_11_14;
      out_JF_x(12, 14) = out_12_14;
      out_JF_x(13, 14) = out_13_14;
      out_JF_x(14, 14) = out_14_14;
      out_JF_x(15, 14) = out_15_14;
      out_JF_x(7, 15) = out_7_15;
      out_JF_x(8, 15) = out_8_15;
      out_JF_x(9, 15) = out_9_15;
      out_JF_x(13, 15) = out_13_15;
      out_JF_x(14, 15) = out_14_15;
      out_JF_x(15, 15) = out_15_15;
    end % JF_x
    %
    % - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    %
    function out_JF_x_dot = JF_x_dot( this, in_1, in_2, in_3, t )
      % Evaluate the Jacobian of F with respect to x_dot.

      % Extract properties
      m__1 = this.m_m__1;
      m__2 = this.m_m__2;
      J__1 = this.m_J__1;
      J__2 = this.m_J__2;
      g = this.m_g;
      ell__1 = this.m_ell__1;
      ell__2 = this.m_ell__2;

      % Extract inputs
      x__1 = in_1(1);
      y__1 = in_1(2);
      theta__1 = in_1(3);
      x__2 = in_1(4);
      y__2 = in_1(5);
      theta__2 = in_1(6);
      u__1 = in_1(7);
      v__1 = in_1(8);
      omega__1 = in_1(9);
      u__2 = in_1(10);
      v__2 = in_1(11);
      omega__2 = in_1(12);
      lambda__1 = in_1(13);
      lambda__2 = in_1(14);
      lambda__3 = in_1(15);
      x__1_dot = in_2(1);
      y__1_dot = in_2(2);
      theta__1_dot = in_2(3);
      x__2_dot = in_2(4);
      y__2_dot = in_2(5);
      theta__2_dot = in_2(6);
      u__1_dot = in_2(7);
      v__1_dot = in_2(8);
      omega__1_dot = in_2(9);
      u__2_dot = in_2(10);
      v__2_dot = in_2(11);
      omega__2_dot = in_2(12);
      lambda__1_dot = in_2(13);
      lambda__2_dot = in_2(14);
      lambda__3_dot = in_2(15);

      % Evaluate function
      out_1_1 = 1;
      out_2_2 = -1;
      out_6_3 = -1;
      out_3_4 = 1;
      out_4_5 = -1;
      out_5_6 = -1;
      t1 = ell__1 ^ 2;
      t2 = cos(theta__1);
      t3 = t2 ^ 2;
      t5 = m__1 * t3 * t1;
      t6 = sin(theta__1);
      t7 = t6 ^ 2;
      t9 = m__1 * t7 * t1;
      t10 = t1 * m__1;
      out_12_7 = -m__1 * (-t5 - t9 + t10 + 4 * J__1) / 4;
      out_10_8 = -m__1;
      out_10_9 = -t2 * ell__1 * m__1 / 2;
      out_11_9 = t5 / 4 + t9 / 4 - t10 / 4 - J__1;
      t21 = ell__2 ^ 2;
      t22 = cos(theta__2);
      t23 = t22 ^ 2;
      t25 = m__2 * t23 * t21;
      t26 = sin(theta__2);
      t27 = t26 ^ 2;
      t29 = m__2 * t27 * t21;
      t30 = t21 * m__2;
      out_8_10 = -m__2 * (-t25 - t29 + t30 + 4 * J__2) / 4;
      out_9_11 = out_8_10;
      out_7_12 = t25 / 4 + t29 / 4 - t30 / 4 - J__2;

      % Store outputs
      out_JF_x_dot = zeros(15, 15);
      out_JF_x_dot(1, 1) = out_1_1;
      out_JF_x_dot(2, 2) = out_2_2;
      out_JF_x_dot(6, 3) = out_6_3;
      out_JF_x_dot(3, 4) = out_3_4;
      out_JF_x_dot(4, 5) = out_4_5;
      out_JF_x_dot(5, 6) = out_5_6;
      out_JF_x_dot(12, 7) = out_12_7;
      out_JF_x_dot(10, 8) = out_10_8;
      out_JF_x_dot(10, 9) = out_10_9;
      out_JF_x_dot(11, 9) = out_11_9;
      out_JF_x_dot(8, 10) = out_8_10;
      out_JF_x_dot(9, 11) = out_9_11;
      out_JF_x_dot(7, 12) = out_7_12;
    end % JF_x_dot
    %
    % - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    %
    function out_JF_v = JF_v( this, in_1, in_2, in_3, t )
      % Evaluate the Jacobian of F with respect to v.

      % Extract properties
      m__1 = this.m_m__1;
      m__2 = this.m_m__2;
      J__1 = this.m_J__1;
      J__2 = this.m_J__2;
      g = this.m_g;
      ell__1 = this.m_ell__1;
      ell__2 = this.m_ell__2;

      % Extract inputs
      x__1 = in_1(1);
      y__1 = in_1(2);
      theta__1 = in_1(3);
      x__2 = in_1(4);
      y__2 = in_1(5);
      theta__2 = in_1(6);
      u__1 = in_1(7);
      v__1 = in_1(8);
      omega__1 = in_1(9);
      u__2 = in_1(10);
      v__2 = in_1(11);
      omega__2 = in_1(12);
      lambda__1 = in_1(13);
      lambda__2 = in_1(14);
      lambda__3 = in_1(15);
      x__1_dot = in_2(1);
      y__1_dot = in_2(2);
      theta__1_dot = in_2(3);
      x__2_dot = in_2(4);
      y__2_dot = in_2(5);
      theta__2_dot = in_2(6);
      u__1_dot = in_2(7);
      v__1_dot = in_2(8);
      omega__1_dot = in_2(9);
      u__2_dot = in_2(10);
      v__2_dot = in_2(11);
      omega__2_dot = in_2(12);
      lambda__1_dot = in_2(13);
      lambda__2_dot = in_2(14);
      lambda__3_dot = in_2(15);

      % Evaluate function
      % No body

      % Store outputs
      out_JF_v = zeros(15, 0);
    end % JF_v
    %
    % - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    %
    function out_v = v( this, in_1, t )
      % Evaluate the the veils v.

      % Extract properties
      m__1 = this.m_m__1;
      m__2 = this.m_m__2;
      J__1 = this.m_J__1;
      J__2 = this.m_J__2;
      g = this.m_g;
      ell__1 = this.m_ell__1;
      ell__2 = this.m_ell__2;

      % Extract inputs
      x__1 = in_1(1);
      y__1 = in_1(2);
      theta__1 = in_1(3);
      x__2 = in_1(4);
      y__2 = in_1(5);
      theta__2 = in_1(6);
      u__1 = in_1(7);
      v__1 = in_1(8);
      omega__1 = in_1(9);
      u__2 = in_1(10);
      v__2 = in_1(11);
      omega__2 = in_1(12);
      lambda__1 = in_1(13);
      lambda__2 = in_1(14);
      lambda__3 = in_1(15);

      % Evaluate function
      % No body

      % Store outputs
      out_v = zeros(0, 1);
    end % v
    %
    % - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    %
    function out_Jv_x = Jv_x( this, in_1, in_2, t )
      % Evaluate the Jacobian of v with respect to x.

      % Extract properties
      m__1 = this.m_m__1;
      m__2 = this.m_m__2;
      J__1 = this.m_J__1;
      J__2 = this.m_J__2;
      g = this.m_g;
      ell__1 = this.m_ell__1;
      ell__2 = this.m_ell__2;

      % Extract inputs
      x__1 = in_1(1);
      y__1 = in_1(2);
      theta__1 = in_1(3);
      x__2 = in_1(4);
      y__2 = in_1(5);
      theta__2 = in_1(6);
      u__1 = in_1(7);
      v__1 = in_1(8);
      omega__1 = in_1(9);
      u__2 = in_1(10);
      v__2 = in_1(11);
      omega__2 = in_1(12);
      lambda__1 = in_1(13);
      lambda__2 = in_1(14);
      lambda__3 = in_1(15);

      % Evaluate function
      % No body

      % Store outputs
      out_Jv_x = zeros(0, 15);
    end % Jv_x
    %
    % - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    %
    function out_h = h( this, in_1, in_2, t )
      % Calculate the residual of the invariants h.

      % Extract properties
      m__1 = this.m_m__1;
      m__2 = this.m_m__2;
      J__1 = this.m_J__1;
      J__2 = this.m_J__2;
      g = this.m_g;
      ell__1 = this.m_ell__1;
      ell__2 = this.m_ell__2;

      % Extract inputs
      x__1 = in_1(1);
      y__1 = in_1(2);
      theta__1 = in_1(3);
      x__2 = in_1(4);
      y__2 = in_1(5);
      theta__2 = in_1(6);
      u__1 = in_1(7);
      v__1 = in_1(8);
      omega__1 = in_1(9);
      u__2 = in_1(10);
      v__2 = in_1(11);
      omega__2 = in_1(12);
      lambda__1 = in_1(13);
      lambda__2 = in_1(14);
      lambda__3 = in_1(15);

      % Evaluate function
      t1 = cos(theta__1);
      out_1 = -t1 * ell__1 - x__1 + x__2;
      t3 = sin(theta__1);
      out_2 = -t3 * ell__1 - y__1 + y__2;
      t5 = sin(theta__2);
      t6 = t5 * ell__2;
      out_3 = -t6 - y__2;
      t7 = ell__1 * omega__1;
      out_4 = -t3 * t7 + u__1 - u__2;
      out_5 = t1 * t7 + v__1 - v__2;
      t11 = cos(theta__2);
      out_6 = t11 * ell__2 * omega__2 + v__2;
      t13 = t1 ^ 2;
      t14 = t13 * t1;
      t15 = omega__1 ^ 2;
      t16 = t15 * t14;
      t17 = ell__1 ^ 2;
      t18 = t17 * ell__1;
      t20 = ell__2 ^ 2;
      t21 = m__1 ^ 2;
      t23 = m__2 ^ 2;
      t24 = t23 * t21 * t20;
      t27 = t15 * t1;
      t31 = J__2 * m__2;
      t34 = t21 * t18 * t15;
      t40 = J__1 * m__1;
      t41 = t20 * ell__2;
      t42 = t41 * t40;
      t43 = t11 ^ 2;
      t44 = t43 * t11;
      t46 = omega__2 ^ 2;
      t47 = t46 * t23 * t44;
      t50 = t23 * t40;
      t52 = t46 * t11 * t41;
      t55 = t17 * t21;
      t56 = t41 * t55;
      t59 = t23 * t55;
      t62 = t13 * t17;
      t63 = m__1 * t62;
      t64 = t20 * t23;
      t65 = lambda__1 * t64;
      t74 = t21 * t62;
      t75 = t20 * m__2;
      t76 = lambda__1 * t75;
      t79 = t3 ^ 2;
      t80 = t79 * t17;
      t81 = t21 * t80;
      t84 = t5 ^ 2;
      t91 = t17 * m__1;
      t92 = t20 * t91;
      t93 = t23 * t43;
      t94 = lambda__1 * t93;
      t97 = t20 * t40;
      t99 = lambda__1 * m__2 * t43;
      t102 = t20 * t55;
      t105 = m__2 * t21;
      t106 = t105 * t62;
      t107 = t5 * t20;
      t109 = lambda__2 * t11 * t107;
      t112 = -t24 * t18 * t16 / 32 + t24 * t18 * t27 / 32 - t34 * t14 * t31 / 8 + t34 * t1 * t31 / 8 - t47 * t42 / 8 + t52 * t50 / 8 - t47 * t56 / 32 + t52 * t59 / 32 + t65 * t63 / 16 + m__1 * J__2 * lambda__1 * t13 * t17 * m__2 / 4 + t76 * t74 / 16 + t76 * t81 / 16 + t23 * m__1 * t20 * t17 * t84 * lambda__1 / 16 + t94 * t92 / 16 + t99 * t97 / 4 + t99 * t102 / 16 - t109 * t106 / 16;
      t113 = t105 * t80;
      t116 = lambda__2 * t3;
      t120 = t23 * m__1;
      t121 = t120 * t20 * t17;
      t129 = lambda__3 * t11 * t107;
      t134 = t1 * J__1;
      t135 = t43 * t15;
      t138 = t120 * t20 * ell__1;
      t141 = t84 * t15;
      t145 = t1 * t79;
      t149 = t23 * t21 * t20 * t18;
      t155 = t41 * t21;
      t156 = t155 * t62;
      t157 = t23 * t84;
      t158 = t46 * t11;
      t159 = t158 * t157;
      t162 = J__2 * t21;
      t163 = t162 * t62;
      t164 = m__2 * ell__2;
      t165 = t158 * t164;
      t168 = t155 * t80;
      t171 = t162 * t80;
      t178 = t21 * t18;
      t182 = J__1 * m__2;
      t183 = J__2 * t182;
      t184 = ell__1 * m__1;
      t191 = -t109 * t113 / 16 - t121 * t43 * t1 * t116 / 16 - t121 * t84 * t1 * t116 / 16 - t129 * t106 / 16 - t129 * t113 / 16 - t138 * t135 * t134 / 8 - t138 * t141 * t134 / 8 + t149 * t135 * t145 / 32 + t149 * t141 * t145 / 32 + t159 * t156 / 32 - t165 * t163 / 8 + t159 * t168 / 32 - t165 * t171 / 8 - t149 * t15 * t145 / 32 - t178 * t27 * t79 * t31 / 8 + t184 * t27 * t183 / 2 + t149 * t84 * t16 / 32;
      t207 = J__2 * t40;
      t212 = J__2 * t55;
      t216 = t46 * t23;
      t217 = t216 * t44 * t41;
      t220 = t41 * t23;
      t221 = t158 * t220;
      t232 = t43 * t20;
      t234 = m__2 * lambda__1 * t232;
      t248 = -t149 * t43 * t27 / 32 - t149 * t84 * t27 / 32 + t149 * t43 * t16 / 32 + t138 * t15 * t134 / 8 - t159 * t42 / 8 + t165 * t207 / 2 - t159 * t56 / 32 + t165 * t212 / 8 + t217 * t74 / 32 - t221 * t74 / 32 + t217 * t81 / 32 - t221 * t81 / 32 - t121 * t84 * lambda__1 * t13 / 16 - t234 * t74 / 16 - t234 * t81 / 16 - lambda__1 * t23 * t232 * t63 / 16 + t91 * t1 * lambda__2 * t3 * t31 / 4;
      t249 = m__2 * t40;
      t252 = m__2 * t55;
      t262 = t23 * J__1;
      t263 = lambda__1 * t20;
      t266 = J__2 * lambda__1;
      t271 = m__2 * m__1;
      t282 = lambda__1 * t162;
      t287 = t20 * J__1;
      t291 = t20 * t84;
      t295 = t109 * t249 / 4 + t109 * t252 / 16 + t121 * t1 * t116 / 16 + t129 * t249 / 4 + t129 * t252 / 16 - t263 * t262 / 4 - t266 * t182 - t266 * t55 / 4 - t266 * t40 - lambda__1 * J__2 * t17 * t271 / 4 - t65 * t91 / 16 - t76 * t40 / 4 - t76 * t55 / 16 + t282 * t62 / 4 + t282 * t80 / 4 + t94 * t287 / 4 + t23 * t291 * J__1 * lambda__1 / 4;
      out_7 = t112 + t191 + t248 + t295;
      t299 = t23 * t20 * t15;
      t309 = t21 * t79 * t3 * t18;
      t316 = t46 * t5 * t41;
      t319 = t84 * t5;
      t321 = t46 * t23 * t319;
      t328 = lambda__2 * t75;
      t333 = m__1 * t80;
      t334 = lambda__2 * t64;
      t337 = lambda__2 * t31;
      t340 = m__2 * t84;
      t341 = lambda__2 * t340;
      t344 = t23 * t91;
      t345 = lambda__2 * t232;
      t348 = lambda__2 * t157;
      t353 = lambda__3 * t75;
      t358 = lambda__3 * t232;
      t361 = lambda__3 * t340;
      t364 = t299 * t3 * t178 / 32 + t15 * t3 * J__2 * m__2 * t178 / 8 - t299 * t309 / 32 - t15 * t31 * t309 / 8 + t316 * t59 / 32 - t321 * t42 / 8 + t316 * t50 / 8 - t321 * t56 / 32 + t328 * t74 / 16 + t328 * t81 / 16 + t334 * t333 / 16 + t337 * t333 / 4 + t341 * t97 / 4 + t345 * t344 / 16 + t348 * t92 / 16 + t341 * t102 / 16 - t353 * t74 / 16 - t353 * t81 / 16 - t358 * t249 / 2 - t361 * t97 / 4;
      t369 = t46 * t5;
      t370 = t369 * t164;
      t373 = t369 * t93;
      t381 = t1 * t17 * t120;
      t392 = lambda__1 * t5 * t11 * t20;
      t397 = t13 * t18;
      t400 = t15 * t3;
      t401 = t64 * t400;
      t416 = t21 * t397;
      t435 = -t358 * t252 / 8 - t361 * t102 / 16 - t370 * t163 / 8 + t373 * t156 / 32 - t370 * t171 / 8 + t373 * t168 / 32 - t263 * t3 * t43 * t381 / 16 - t263 * t3 * t84 * t381 / 16 - t392 * t106 / 16 - t392 * t113 / 16 + t401 * t43 * t21 * t397 / 32 + t401 * t84 * t21 * t397 / 32 - t138 * t400 * t43 * J__1 / 8 - t138 * t400 * t84 * J__1 / 8 - t401 * t416 / 32 - t400 * t31 * t416 / 8 + t138 * t15 * t3 * J__1 / 8 + t184 * t400 * t183 / 2 + t64 * t135 * t309 / 32 + t64 * t141 * t309 / 32;
      t452 = t216 * t319 * t41;
      t455 = t369 * t220;
      t477 = m__2 * lambda__2 * t291;
      t480 = lambda__2 * t43;
      t491 = lambda__3 * t43 * t75;
      t495 = m__2 * lambda__3 * t291;
      t498 = -t401 * t43 * t178 / 32 - t401 * t84 * t178 / 32 - t373 * t42 / 8 + t370 * t212 / 8 - t373 * t56 / 32 + t370 * t207 / 2 + t452 * t74 / 32 - t455 * t74 / 32 + t452 * t81 / 32 - t455 * t81 / 32 + t263 * t3 * t1 * t344 / 16 + lambda__1 * t3 * J__2 * t1 * t17 * t271 / 4 + t392 * t249 / 4 + t392 * t252 / 16 - t477 * t74 / 16 - t480 * t64 * t333 / 16 - lambda__2 * t23 * t291 * t333 / 16 - t477 * t81 / 16 + t491 * t74 / 8 + t495 * t74 / 16;
      t503 = J__2 * lambda__2;
      t511 = J__2 * lambda__3;
      t523 = lambda__2 * t162;
      t536 = lambda__3 * t162;
      t541 = t491 * t81 / 8 + t495 * t81 / 16 - t503 * t55 / 4 - lambda__2 * t20 * t262 / 4 - t503 * t182 - t503 * t40 + t511 * t55 / 4 + t511 * t40 - t328 * t55 / 16 - t334 * t91 / 16 - t337 * t91 / 4 - t328 * t40 / 4 + t523 * t62 / 4 + t523 * t80 / 4 + t345 * t262 / 4 + t348 * t287 / 4 + t353 * t55 / 16 + t353 * t40 / 4 - t536 * t62 / 4 - t536 * t80 / 4;
      out_8 = t364 + t435 + t498 + t541;
      t552 = g * t23;
      out_9 = lambda__1 * t5 * t11 * t75 / 4 - t46 * t5 * t23 * t43 * t41 / 8 - t552 * t232 / 4 - t452 / 8 - t552 * t291 / 4 - t477 / 4 + t495 / 4 + t455 / 8 + g * t64 / 4 + t328 / 4 - t353 / 4 + t46 * t6 * t31 / 2 + g * t31 + t503 - t511 - t480 * t75 / 2;

      % Store outputs
      out_h = zeros(9, 1);
      out_h(1) = out_1;
      out_h(2) = out_2;
      out_h(3) = out_3;
      out_h(4) = out_4;
      out_h(5) = out_5;
      out_h(6) = out_6;
      out_h(7) = out_7;
      out_h(8) = out_8;
      out_h(9) = out_9;
    end % h
    %
    % - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    %
    function out_Jh_x = Jh_x( this, in_1, in_2, t )
      % Calculate the Jacobian of h with respect to x.

      % Extract properties
      m__1 = this.m_m__1;
      m__2 = this.m_m__2;
      J__1 = this.m_J__1;
      J__2 = this.m_J__2;
      g = this.m_g;
      ell__1 = this.m_ell__1;
      ell__2 = this.m_ell__2;

      % Extract inputs
      x__1 = in_1(1);
      y__1 = in_1(2);
      theta__1 = in_1(3);
      x__2 = in_1(4);
      y__2 = in_1(5);
      theta__2 = in_1(6);
      u__1 = in_1(7);
      v__1 = in_1(8);
      omega__1 = in_1(9);
      u__2 = in_1(10);
      v__2 = in_1(11);
      omega__2 = in_1(12);
      lambda__1 = in_1(13);
      lambda__2 = in_1(14);
      lambda__3 = in_1(15);

      % Evaluate function
      out_1_1 = -1;
      out_2_2 = -1;
      t1 = sin(theta__1);
      out_1_3 = t1 * ell__1;
      t2 = cos(theta__1);
      t3 = t2 * ell__1;
      out_2_3 = -t3;
      t4 = ell__1 * omega__1;
      out_4_3 = -t2 * t4;
      out_5_3 = -t1 * t4;
      t7 = m__1 ^ 2;
      t8 = ell__1 ^ 2;
      t9 = t8 * ell__1;
      t10 = t9 * t7;
      t11 = t1 * t10;
      t12 = omega__1 ^ 2;
      t13 = ell__2 ^ 2;
      t15 = m__2 ^ 2;
      t16 = t15 * t13 * t12;
      t19 = m__2 * t10;
      t20 = t1 * J__2;
      t24 = t1 ^ 2;
      t27 = t7 * t24 * t1 * t9;
      t30 = J__2 * m__2;
      t34 = t2 ^ 2;
      t35 = lambda__2 * t34;
      t37 = m__1 * t13;
      t38 = t15 * t37;
      t43 = m__1 * t8;
      t44 = m__2 * t43;
      t47 = t24 * t8;
      t48 = m__1 * t47;
      t49 = t13 * t15;
      t56 = t15 * m__1;
      t57 = t2 * t8;
      t58 = t57 * t56;
      t59 = cos(theta__2);
      t60 = t59 ^ 2;
      t62 = t13 * lambda__1;
      t66 = sin(theta__2);
      t67 = t66 ^ 2;
      t72 = t34 * t9;
      t74 = t60 * t7 * t72;
      t75 = t12 * t1;
      t76 = t49 * t75;
      t80 = t67 * t7 * t72;
      t83 = t60 * J__1;
      t86 = t56 * t13 * ell__1;
      t89 = t67 * J__1;
      t93 = -t16 * t11 / 32 - t12 * t20 * t19 / 8 + t16 * t27 / 32 + t12 * t30 * t27 / 8 + t38 * t8 * t35 / 16 + t44 * t34 * lambda__2 * J__2 / 4 - lambda__2 * t49 * t48 / 16 - lambda__2 * t30 * t48 / 4 + t62 * t1 * t60 * t58 / 8 + t62 * t1 * t67 * t58 / 8 - t76 * t74 / 32 - t76 * t80 / 32 + t86 * t75 * t83 / 8 + t86 * t75 * t89 / 8;
      t99 = lambda__2 * t60;
      t103 = t67 * t13;
      t109 = t49 * t43;
      t115 = t7 * t72;
      t121 = t1 * J__1;
      t126 = m__2 * J__1 * J__2;
      t127 = ell__1 * m__1;
      t131 = t12 * t60;
      t135 = t12 * t67;
      t139 = t60 * t10;
      t142 = t67 * t10;
      t145 = t8 * t56;
      t146 = t1 * t2;
      t150 = -lambda__1 * t1 * J__2 * t2 * t44 / 2 + t99 * t49 * t48 / 16 + lambda__2 * t15 * t103 * t48 / 16 - t109 * t60 * t35 / 16 - t109 * t67 * t35 / 16 + t76 * t115 / 32 + t75 * t30 * t115 / 8 - t86 * t12 * t121 / 8 - t127 * t75 * t126 / 2 - t49 * t131 * t27 / 32 - t49 * t135 * t27 / 32 + t76 * t139 / 32 + t76 * t142 / 32 - t62 * t146 * t145 / 8;
      out_7_3 = t93 + t150;
      t151 = t34 * t2;
      t152 = t12 * t151;
      t155 = t15 * t7 * t13;
      t158 = t12 * t2;
      t162 = t151 * t30;
      t164 = t7 * t9 * t12;
      t167 = t2 * t30;
      t170 = t34 * t8;
      t171 = m__1 * t170;
      t175 = t8 * m__2;
      t189 = lambda__2 * t1;
      t194 = t2 * J__1;
      t201 = t2 * t24;
      t205 = t15 * t7 * t13 * t9;
      t215 = -t155 * t9 * t152 / 32 + t155 * t9 * t158 / 32 - t164 * t162 / 8 + t164 * t167 / 8 + lambda__1 * t49 * t171 / 16 + m__1 * J__2 * lambda__1 * t34 * t175 / 4 - t13 * lambda__1 * t24 * t145 / 16 - lambda__1 * J__2 * t24 * t44 / 4 - t109 * t67 * t2 * t189 / 8 - t86 * t131 * t194 / 8 - t86 * t135 * t194 / 8 + t205 * t131 * t201 / 32 + t205 * t135 * t201 / 32 - t109 * t60 * t2 * t189 / 8;
      t219 = t24 * t30;
      t245 = t60 * t13;
      t250 = t1 * t30;
      t266 = -t205 * t12 * t201 / 32 - t10 * t158 * t219 / 8 + t127 * t158 * t126 / 2 + t205 * t67 * t152 / 32 - t205 * t60 * t158 / 32 - t205 * t67 * t158 / 32 + t205 * t60 * t152 / 32 + t86 * t12 * t194 / 8 - t109 * t67 * lambda__1 * t34 / 16 - lambda__1 * t15 * t245 * t171 / 16 + t43 * t2 * lambda__2 * t250 / 2 + t109 * t2 * t189 / 8 + t62 * t60 * t24 * t145 / 16 + t62 * t67 * t24 * t145 / 16;
      out_8_3 = t215 + t266;
      out_1_4 = 1;
      out_2_5 = 1;
      out_3_5 = -1;
      t267 = t59 * ell__2;
      out_3_6 = -t267;
      t268 = omega__2 * t66;
      t269 = ell__2 * t268;
      out_6_6 = -t269;
      t270 = t8 * t7;
      t271 = t15 * t270;
      t272 = t13 * ell__2;
      t273 = t66 * t272;
      t274 = omega__2 ^ 2;
      t275 = t274 * t273;
      t278 = J__1 * m__1;
      t279 = t272 * t278;
      t280 = t67 * t66;
      t281 = t15 * t280;
      t282 = t274 * t281;
      t285 = t15 * t278;
      t288 = t272 * t270;
      t291 = m__2 * t270;
      t300 = t13 * t278;
      t301 = m__2 * t67;
      t302 = lambda__2 * t301;
      t305 = t13 * t270;
      t308 = m__2 * t278;
      t309 = lambda__3 * t245;
      t312 = lambda__3 * t301;
      t319 = J__2 * t7;
      t320 = t319 * t47;
      t321 = m__2 * ell__2;
      t322 = t274 * t66;
      t323 = t322 * t321;
      t326 = t272 * t7;
      t327 = t326 * t47;
      t328 = t15 * t60;
      t329 = t322 * t328;
      t332 = m__2 * t7;
      t333 = t332 * t170;
      t336 = lambda__1 * t66 * t59 * t13;
      t339 = t332 * t47;
      t342 = t319 * t170;
      t345 = t326 * t170;
      t348 = -t275 * t271 / 32 + t282 * t279 / 8 - t275 * t285 / 8 + t282 * t288 / 32 + lambda__2 * t245 * t291 / 16 + m__2 * t37 * t60 * lambda__2 * J__1 / 4 - t302 * t300 / 4 - t302 * t305 / 16 + t309 * t308 / 4 - t312 * t300 / 4 + t309 * t291 / 16 - t312 * t305 / 16 + t323 * t320 / 8 - t329 * t327 / 32 + t336 * t333 / 8 + t336 * t339 / 8 + t323 * t342 / 8 - t329 * t345 / 32;
      t351 = J__2 * t270;
      t356 = J__2 * t278;
      t359 = t7 * t170;
      t360 = t280 * t272;
      t361 = t274 * t15;
      t362 = t361 * t360;
      t365 = t272 * t15;
      t366 = t322 * t365;
      t369 = t7 * t47;
      t379 = m__2 * lambda__2 * t103;
      t384 = t13 * m__2;
      t386 = lambda__3 * t60 * t384;
      t390 = m__2 * lambda__3 * t103;
      t397 = t99 * t384;
      t402 = t329 * t279 / 8 - t323 * t351 / 8 + t329 * t288 / 32 - t323 * t356 / 2 - t362 * t359 / 32 + t366 * t359 / 32 - t362 * t369 / 32 + t366 * t369 / 32 - t336 * t308 / 2 - t336 * t291 / 8 + t379 * t359 / 16 + t379 * t369 / 16 - t386 * t359 / 16 + t390 * t359 / 16 - t386 * t369 / 16 + t390 * t369 / 16 - t397 * t359 / 16 - t397 * t369 / 16;
      out_7_6 = t348 + t402;
      t403 = t60 * t59;
      t404 = t15 * t403;
      t405 = t274 * t404;
      t408 = t59 * t272;
      t409 = t274 * t408;
      t417 = lambda__1 * m__2 * t60;
      t420 = lambda__1 * t103;
      t427 = t274 * t59;
      t428 = t427 * t321;
      t431 = t15 * t67;
      t432 = t427 * t431;
      t437 = t66 * t13;
      t439 = lambda__2 * t59 * t437;
      t445 = lambda__3 * t59 * t437;
      t452 = -t405 * t279 / 8 + t409 * t285 / 8 - t405 * t288 / 32 + t409 * t271 / 32 + t417 * t300 / 4 - t420 * t291 / 16 - t420 * t308 / 4 + t417 * t305 / 16 - t428 * t342 / 8 + t432 * t327 / 32 - t428 * t320 / 8 - t439 * t333 / 8 - t439 * t339 / 8 - t445 * t333 / 8 - t445 * t339 / 8 + t432 * t345 / 32;
      t459 = t403 * t272;
      t460 = t361 * t459;
      t463 = t427 * t365;
      t471 = m__2 * lambda__1 * t245;
      t485 = lambda__1 * t67 * t384;
      t492 = t428 * t356 / 2 - t432 * t288 / 32 + t428 * t351 / 8 + t460 * t359 / 32 - t463 * t359 / 32 + t460 * t369 / 32 - t463 * t369 / 32 - t471 * t359 / 16 - t471 * t369 / 16 + t439 * t308 / 2 + t439 * t291 / 8 + t445 * t308 / 2 + t445 * t291 / 8 + t485 * t359 / 16 + t485 * t369 / 16 - t432 * t279 / 8;
      out_8_6 = t452 + t492;
      t493 = t59 * t66;
      out_9_6 = lambda__3 * t493 * t384 / 2 - t485 / 4 + t471 / 4 - t274 * t59 * t15 * t67 * t272 / 8 - t460 / 8 + lambda__2 * t493 * t384 / 2 + t463 / 8 + t274 * t267 * t30 / 2;
      out_4_7 = 1;
      out_5_8 = 1;
      out_4_9 = -out_1_3;
      out_5_9 = t3;
      t515 = omega__1 * t151;
      t522 = t67 * omega__1;
      t526 = t60 * omega__1;
      t539 = omega__1 * t2;
      t558 = t7 * t9 * omega__1;
      out_7_9 = t86 * omega__1 * t194 / 4 + t205 * t60 * t515 / 16 + t205 * t67 * t515 / 16 - t86 * t522 * t194 / 4 + t205 * t526 * t201 / 16 + t205 * t522 * t201 / 16 - t86 * t526 * t194 / 4 - t205 * omega__1 * t201 / 16 - t205 * t60 * t539 / 16 - t205 * t67 * t539 / 16 - t10 * t539 * t219 / 4 + t127 * t539 * t126 - t155 * t9 * t515 / 16 + t155 * t9 * t539 / 16 - t558 * t162 / 4 + t558 * t167 / 4;
      t564 = t15 * t13 * omega__1;
      t575 = omega__1 * t1;
      t576 = t49 * t575;
      out_8_9 = t564 * t11 / 16 + omega__1 * t20 * t19 / 4 - t564 * t27 / 16 - omega__1 * t30 * t27 / 4 - t576 * t115 / 16 - t575 * t30 * t115 / 4 + t49 * t526 * t27 / 16 + t49 * t522 * t27 / 16 - t576 * t139 / 16 - t576 * t142 / 16 + t86 * omega__1 * t121 / 4 + t127 * t575 * t126 + t576 * t74 / 16 + t576 * t80 / 16 - t86 * t575 * t83 / 4 - t86 * t575 * t89 / 4;
      out_4_10 = -1;
      out_5_11 = -1;
      out_6_11 = 1;
      out_6_12 = t267;
      t607 = omega__2 * t59;
      t608 = t607 * t431;
      t611 = t607 * t321;
      t621 = omega__2 * t15;
      t622 = t621 * t459;
      t625 = t607 * t365;
      t636 = omega__2 * t404;
      t639 = omega__2 * t408;
      out_7_12 = t608 * t345 / 16 - t611 * t342 / 4 + t608 * t327 / 16 - t611 * t320 / 4 - t608 * t279 / 4 + t611 * t356 + t622 * t359 / 16 - t625 * t359 / 16 + t622 * t369 / 16 - t625 * t369 / 16 - t608 * t288 / 16 + t611 * t351 / 4 - t636 * t279 / 4 + t639 * t285 / 4 - t636 * t288 / 16 + t639 * t271 / 16;
      t646 = omega__2 * t273;
      t649 = omega__2 * t281;
      t656 = t268 * t328;
      t659 = t621 * t360;
      t662 = t268 * t365;
      t669 = t268 * t321;
      out_8_12 = t646 * t271 / 16 - t649 * t279 / 4 + t646 * t285 / 4 - t649 * t288 / 16 - t656 * t279 / 4 + t659 * t359 / 16 - t662 * t359 / 16 + t659 * t369 / 16 - t662 * t369 / 16 + t669 * t351 / 4 - t656 * t288 / 16 + t669 * t356 - t669 * t342 / 4 + t656 * t345 / 16 - t669 * t320 / 4 + t656 * t327 / 16;
      out_9_12 = -omega__2 * t66 * t15 * t60 * t272 / 4 - t659 / 4 + t662 / 4 + t269 * t30;
      t691 = m__2 * m__1;
      t694 = J__2 * t8 * t691 / 4;
      t695 = t109 / 16;
      t698 = t328 * t13 * J__1 / 4;
      t700 = t49 * t89 / 4;
      t702 = t384 * t278 / 4;
      t703 = t342 / 4;
      t704 = t320 / 4;
      t706 = t384 * t270 / 16;
      t707 = t15 * t245;
      t714 = m__2 * t245;
      t715 = t714 * t359;
      t717 = t714 * t369;
      t719 = -t694 - t695 + t698 + t700 - t702 + t703 + t704 - t706 - t707 * t171 / 16 - t38 * t8 * t67 * t34 / 16 - t715 / 16 - t717 / 16;
      t722 = t13 * t15 * J__1 / 4;
      t723 = t351 / 4;
      t728 = t38 * t8 * t67 / 16;
      t734 = t707 * t43 / 16;
      t735 = t13 * t332;
      t737 = t735 * t170 / 16;
      t739 = t735 * t47 / 16;
      t740 = t714 * t278;
      t742 = t714 * t270;
      t744 = -t722 - t126 - t723 - t356 + t38 * t170 / 16 + t728 + J__2 * m__1 * t34 * t175 / 4 + t734 + t737 + t739 + t740 / 4 + t742 / 16;
      out_7_13 = t719 + t744;
      t745 = t493 * t384;
      t747 = t745 * t359 / 16;
      t749 = t745 * t369 / 16;
      t756 = t59 * t437;
      t758 = t756 * t308 / 4;
      t766 = t756 * t291 / 16;
      out_8_13 = -t747 - t749 - t109 * t60 * t146 / 16 - t109 * t67 * t146 / 16 + t758 + t38 * t8 * t146 / 16 + m__1 * t57 * t250 / 4 + t766;
      out_9_13 = t745 / 4;
      out_7_14 = out_8_13;
      t767 = m__2 * t103;
      t769 = t767 * t278 / 4;
      t776 = t767 * t270 / 16;
      t777 = t769 + t737 + t739 + t38 * t47 / 16 + J__2 * t691 * t47 / 4 + t734 + t728 + t776 + t703 + t704 - t706 - t695;
      t779 = t767 * t359 / 16;
      t786 = t767 * t369 / 16;
      t787 = -t694 + t698 + t700 - t702 - t779 - t707 * t48 / 16 - t15 * t103 * t48 / 16 - t786 - t723 - t722 - t126 - t356;
      out_8_14 = t777 + t787;
      t789 = t767 / 4;
      t790 = t384 / 4;
      out_9_14 = -t714 / 2 - t789 + t790 + J__2;
      out_7_15 = -t747 - t749 + t758 + t766;
      out_8_15 = -t740 / 2 - t769 - t737 - t739 - t742 / 8 - t776 - t703 - t704 + t706 + t702 + t715 / 8 + t779 + t717 / 8 + t786 + t723 + t356;
      out_9_15 = t789 - t790 - J__2;

      % Store outputs
      out_Jh_x = zeros(9, 15);
      out_Jh_x(1, 1) = out_1_1;
      out_Jh_x(2, 2) = out_2_2;
      out_Jh_x(1, 3) = out_1_3;
      out_Jh_x(2, 3) = out_2_3;
      out_Jh_x(4, 3) = out_4_3;
      out_Jh_x(5, 3) = out_5_3;
      out_Jh_x(7, 3) = out_7_3;
      out_Jh_x(8, 3) = out_8_3;
      out_Jh_x(1, 4) = out_1_4;
      out_Jh_x(2, 5) = out_2_5;
      out_Jh_x(3, 5) = out_3_5;
      out_Jh_x(3, 6) = out_3_6;
      out_Jh_x(6, 6) = out_6_6;
      out_Jh_x(7, 6) = out_7_6;
      out_Jh_x(8, 6) = out_8_6;
      out_Jh_x(9, 6) = out_9_6;
      out_Jh_x(4, 7) = out_4_7;
      out_Jh_x(5, 8) = out_5_8;
      out_Jh_x(4, 9) = out_4_9;
      out_Jh_x(5, 9) = out_5_9;
      out_Jh_x(7, 9) = out_7_9;
      out_Jh_x(8, 9) = out_8_9;
      out_Jh_x(4, 10) = out_4_10;
      out_Jh_x(5, 11) = out_5_11;
      out_Jh_x(6, 11) = out_6_11;
      out_Jh_x(6, 12) = out_6_12;
      out_Jh_x(7, 12) = out_7_12;
      out_Jh_x(8, 12) = out_8_12;
      out_Jh_x(9, 12) = out_9_12;
      out_Jh_x(7, 13) = out_7_13;
      out_Jh_x(8, 13) = out_8_13;
      out_Jh_x(9, 13) = out_9_13;
      out_Jh_x(7, 14) = out_7_14;
      out_Jh_x(8, 14) = out_8_14;
      out_Jh_x(9, 14) = out_9_14;
      out_Jh_x(7, 15) = out_7_15;
      out_Jh_x(8, 15) = out_8_15;
      out_Jh_x(9, 15) = out_9_15;
    end % Jh_x
    %
    % - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    %
    function out_Jh_v = Jh_v( this, in_1, in_2, t )
      % Calculate the Jacobian of h with respect to v.

      % Extract properties
      m__1 = this.m_m__1;
      m__2 = this.m_m__2;
      J__1 = this.m_J__1;
      J__2 = this.m_J__2;
      g = this.m_g;
      ell__1 = this.m_ell__1;
      ell__2 = this.m_ell__2;

      % Extract inputs
      x__1 = in_1(1);
      y__1 = in_1(2);
      theta__1 = in_1(3);
      x__2 = in_1(4);
      y__2 = in_1(5);
      theta__2 = in_1(6);
      u__1 = in_1(7);
      v__1 = in_1(8);
      omega__1 = in_1(9);
      u__2 = in_1(10);
      v__2 = in_1(11);
      omega__2 = in_1(12);
      lambda__1 = in_1(13);
      lambda__2 = in_1(14);
      lambda__3 = in_1(15);

      % Evaluate function
      % No body

      % Store outputs
      out_Jh_v = zeros(9, 0);
    end % Jh_v
    %
    % - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    %
  end
end % CrankRod

% That's All Folks!
