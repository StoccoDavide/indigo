% +--------------------------------------------------------------------------+
% | 'Indigo' module version 1.0 - BSD 3-Clause License - Copyright (c) 2023  |
% | Current version authors:                                                 |
% |   Davide Stocco and Enrico Bertolazzi.                                   |
% +--------------------------------------------------------------------------+

% Matlab generated code for implicit system: CrankRod
% This file has been automatically generated by Indigo.
% DISCLAIMER: If you need to edit it, do it wisely!

classdef CrankRod < Indigo.Systems.Implicit
  %
  % No class description provided.
  %
  properties (SetAccess = protected, Hidden = true)
    % User data
    m_m__1 = 1.0;
    m_m__2 = 1.0;
    m_J__1 = 1.0;
    m_J__2 = 1.0;
    m_g = 9.81;
    m_ell__1 = 1.0;
    m_ell__2 = 1.0;
  end
  %
  methods
    %
    % - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    %
    function this = CrankRod( varargin )
      % Class constructor.

      % Superclass constructor
      num_eqns = 15;
      num_veil = 2;
      num_invs = 9;
      this = this@Indigo.Systems.Implicit('CrankRod', num_eqns, num_veil, num_invs);

      % User data
      if (nargin == 0)
        % Keep default values
      elseif (nargin == 1 && isstruct(varargin{1}))
        this.m_m__1 = varargin{1}.m__1;
        this.m_m__2 = varargin{1}.m__2;
        this.m_J__1 = varargin{1}.J__1;
        this.m_J__2 = varargin{1}.J__2;
        this.m_g = varargin{1}.g;
        this.m_ell__1 = varargin{1}.ell__1;
        this.m_ell__2 = varargin{1}.ell__2;
      elseif (nargin == 7)
        this.m_m__1 = varargin{1};
        this.m_m__2 = varargin{2};
        this.m_J__1 = varargin{3};
        this.m_J__2 = varargin{4};
        this.m_g = varargin{5};
        this.m_ell__1 = varargin{6};
        this.m_ell__2 = varargin{7};
      else
        error('wrong number of input arguments.');
      end
    end % CrankRod
    %
    % - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    %
    function out_F = F( this, in_1, in_2, in_3, t )
      % Evaluate the function F.

      % Extract properties
      m__1 = this.m_m__1;
      m__2 = this.m_m__2;
      J__1 = this.m_J__1;
      J__2 = this.m_J__2;
      g = this.m_g;
      ell__1 = this.m_ell__1;
      ell__2 = this.m_ell__2;

      % Extract inputs
      x__1 = in_1(1);
      y__1 = in_1(2);
      theta__1 = in_1(3);
      x__2 = in_1(4);
      y__2 = in_1(5);
      theta__2 = in_1(6);
      u__1 = in_1(7);
      v__1 = in_1(8);
      omega__1 = in_1(9);
      u__2 = in_1(10);
      v__2 = in_1(11);
      omega__2 = in_1(12);
      lambda__1 = in_1(13);
      lambda__2 = in_1(14);
      lambda__3 = in_1(15);
      x__1_dot = in_2(1);
      y__1_dot = in_2(2);
      theta__1_dot = in_2(3);
      x__2_dot = in_2(4);
      y__2_dot = in_2(5);
      theta__2_dot = in_2(6);
      u__1_dot = in_2(7);
      v__1_dot = in_2(8);
      omega__1_dot = in_2(9);
      u__2_dot = in_2(10);
      v__2_dot = in_2(11);
      omega__2_dot = in_2(12);
      lambda__1_dot = in_2(13);
      lambda__2_dot = in_2(14);
      lambda__3_dot = in_2(15);
      V_y58KN_1 = in_3(1);
      V_y58KN_2 = in_3(2);

      % Evaluate function
      out_1 = -u__1 + x__1_dot;
      out_2 = -v__1 + y__1_dot;
      out_3 = -u__2 + x__2_dot;
      out_4 = -v__2 + y__2_dot;
      t4 = cos(theta__1);
      t5 = t4 ^ 2;
      t6 = lambda__1 * t5;
      t7 = ell__1 ^ 2;
      t8 = m__1 * t7;
      t10 = m__1 * ell__1;
      t11 = sin(theta__1);
      t12 = ell__1 * t11;
      t14 = omega__1 ^ 2;
      t25 = 0.1e1 / J__1;
      t27 = 0.1e1 / m__1;
      out_5 = t27 * t25 * (4 * u__1_dot * J__1 * m__1 - t8 * t6 - t4 * (2 * t14 * J__1 + lambda__2 * t12) * t10 - 4 * lambda__1 * (-t8 / 4 + J__1)) / 4;
      t32 = cos(theta__2);
      t33 = t32 ^ 2;
      t34 = lambda__1 * t33;
      t35 = ell__2 ^ 2;
      t36 = m__2 * t35;
      t38 = ell__2 * m__2;
      t39 = lambda__2 + lambda__3;
      t41 = sin(theta__2);
      t42 = t41 * t39 * ell__2;
      t43 = omega__2 ^ 2;
      t44 = t43 * J__2;
      t50 = t36 / 4 + J__2;
      t54 = 0.1e1 / J__2;
      t56 = 0.1e1 / m__2;
      out_6 = t56 * t54 * (4 * u__2_dot * J__2 * m__2 - t36 * t34 - t32 * (t42 + 2 * t44) * t38 + 4 * t50 * lambda__1) / 4;
      t64 = t35 * t41;
      out_7 = t56 * t54 * (4 * v__2_dot * J__2 * m__2 + t33 * t39 * t36 - m__2 * t64 * lambda__1 * t32 + 4 * J__2 * (-t38 * t41 * t43 / 2 + g * m__2 - lambda__3 + lambda__2)) / 4;
      out_8 = t27 * (-t10 * t14 * t11 + t10 * omega__1_dot * t4 + 2 * g * m__1 + 2 * v__1_dot * m__1 - 2 * lambda__2);
      out_9 = t25 * (-lambda__2 * ell__1 * t4 + 2 * J__1 * omega__1_dot + lambda__1 * t12) / 2;
      out_10 = -omega__1 + theta__1_dot;
      out_11 = -omega__2 + theta__2_dot;
      t96 = -t39;
      t98 = lambda__1 * t41;
      out_12 = t54 * (2 * J__2 * omega__2_dot + ell__2 * (t32 * t96 + t98)) / 2;
      t103 = t35 * t33;
      t104 = m__2 * t103;
      t105 = 4 * J__2;
      out_13 = t56 * (lambda__2_dot * (t104 - t105) + lambda__3_dot * (t104 + t105) - 4 * m__2 * ell__2 * (lambda__1_dot * ell__2 * t41 * t32 / 4 + omega__2 * (ell__2 * t34 + t32 * (t42 + t44 / 2) - 0.3e1 / 0.4e1 * lambda__1 * ell__2)));
      t127 = t4 * t33;
      t128 = t11 * t127;
      t129 = t35 * t7;
      t130 = m__1 * m__2;
      t133 = t5 * t7;
      t153 = t7 * J__2;
      t163 = ell__1 * ell__2;
      t167 = omega__1 * t163;
      out_14 = t27 * (lambda__2_dot * (t130 * t129 * t128 - t32 * t35 * (t133 * t130 + 8 * J__1 * (m__1 + m__2 / 2)) * t41 - 4 * m__1 * t7 * t11 * t4 * J__2) + 4 * m__1 * (lambda__3_dot * (m__2 * t129 * t128 / 4 + t4 * t11 * t153 + 2 * t32 * J__1 * t64) + t38 * (-t163 * t11 * omega__2 * lambda__1 * t127 + t32 * (t167 * t41 * t6 + t4 * (t11 * ell__1 * (t41 * (omega__2 * t96 + lambda__2 * omega__1) * ell__2 - t43 * omega__2 * J__2 / 2) + ell__2 * t14 * omega__1 * t41 * J__1 / 2) - 0.3e1 / 0.4e1 * t167 * t98) + 0.3e1 / 0.4e1 * ell__2 * t12 * omega__2 * lambda__1 * t4) * ell__1));
      t206 = m__1 ^ 2;
      t207 = m__2 * t206;
      t208 = t207 * t129;
      t215 = m__2 ^ 2;
      t235 = J__1 * J__2;
      out_15 = -4 * lambda__2_dot * t32 * (-t208 * t11 * t4 * t33 * t32 + t103 * t41 * (t207 * t133 + t206 * (-m__2 * t7 - 4 * J__1) + m__1 * (-t7 * t215 / 4 - 4 * J__1 * m__2) - J__1 * t215) + t208 * t11 * t4 * t32 - (t5 * t206 * t50 * t7 + m__1 * (m__2 * (t35 * J__1 + t153) + 4 * t235) + 4 * m__2 * t235) * t41) - V_y58KN_2 / 4;

      % Store outputs
      out_F = zeros(15, 1);
      out_F(1) = out_1;
      out_F(2) = out_2;
      out_F(3) = out_3;
      out_F(4) = out_4;
      out_F(5) = out_5;
      out_F(6) = out_6;
      out_F(7) = out_7;
      out_F(8) = out_8;
      out_F(9) = out_9;
      out_F(10) = out_10;
      out_F(11) = out_11;
      out_F(12) = out_12;
      out_F(13) = out_13;
      out_F(14) = out_14;
      out_F(15) = out_15;
    end % F
    %
    % - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    %
    function out_JF_x = JF_x( this, in_1, in_2, in_3, t )
      % Evaluate the Jacobian of F with respect to x.

      % Extract properties
      m__1 = this.m_m__1;
      m__2 = this.m_m__2;
      J__1 = this.m_J__1;
      J__2 = this.m_J__2;
      g = this.m_g;
      ell__1 = this.m_ell__1;
      ell__2 = this.m_ell__2;

      % Extract inputs
      x__1 = in_1(1);
      y__1 = in_1(2);
      theta__1 = in_1(3);
      x__2 = in_1(4);
      y__2 = in_1(5);
      theta__2 = in_1(6);
      u__1 = in_1(7);
      v__1 = in_1(8);
      omega__1 = in_1(9);
      u__2 = in_1(10);
      v__2 = in_1(11);
      omega__2 = in_1(12);
      lambda__1 = in_1(13);
      lambda__2 = in_1(14);
      lambda__3 = in_1(15);
      x__1_dot = in_2(1);
      y__1_dot = in_2(2);
      theta__1_dot = in_2(3);
      x__2_dot = in_2(4);
      y__2_dot = in_2(5);
      theta__2_dot = in_2(6);
      u__1_dot = in_2(7);
      v__1_dot = in_2(8);
      omega__1_dot = in_2(9);
      u__2_dot = in_2(10);
      v__2_dot = in_2(11);
      omega__2_dot = in_2(12);
      lambda__1_dot = in_2(13);
      lambda__2_dot = in_2(14);
      lambda__3_dot = in_2(15);
      V_y58KN_1 = in_3(1);
      V_y58KN_2 = in_3(2);

      % Evaluate function
      t1 = cos(theta__1);
      t2 = lambda__1 * t1;
      t3 = ell__1 ^ 2;
      t4 = m__1 * t3;
      t5 = sin(theta__1);
      t9 = t1 ^ 2;
      t12 = m__1 * ell__1;
      t13 = ell__1 * t5;
      t14 = lambda__2 * t13;
      t15 = omega__1 ^ 2;
      t22 = 0.1e1 / J__1;
      t24 = 0.1e1 / m__1;
      out_5_3 = t24 * t22 * (2 * t5 * t4 * t2 - lambda__2 * t9 * t4 + t5 * (2 * t15 * J__1 + t14) * t12) / 4;
      out_8_3 = t24 * (-t12 * t15 * t1 - t12 * omega__1_dot * t5);
      out_9_3 = t22 * (t1 * ell__1 * lambda__1 + t14) / 2;
      t35 = cos(theta__2);
      t36 = t35 ^ 2;
      t37 = t5 ^ 2;
      t38 = t37 * t36;
      t40 = ell__2 ^ 2;
      t42 = m__2 * m__1 * t40;
      t44 = t9 * t36;
      t47 = sin(theta__2);
      t49 = m__2 * t3;
      t51 = t5 * t1;
      t52 = t35 * t40;
      t55 = 2 * t52 * t51 * t49 * m__1 * t47;
      t64 = t40 * t3;
      t65 = m__2 * t64;
      t70 = t3 * J__2;
      t77 = omega__2 * ell__1 * ell__2;
      t82 = ell__1 * ell__2;
      t83 = t5 * omega__1;
      t87 = -lambda__2 - lambda__3;
      t91 = (omega__2 * t87 + lambda__2 * omega__1) * ell__2;
      t93 = omega__2 ^ 2;
      t98 = ell__1 * (t47 * t91 - t93 * omega__2 * J__2 / 2);
      t101 = t47 * J__1;
      t103 = ell__2 * t15 * omega__1;
      t106 = t5 * t98 + t103 * t101 / 2;
      t113 = lambda__1 * t9;
      t118 = ell__2 * m__2;
      out_14_3 = t24 * (lambda__2_dot * (4 * t4 * t37 * J__2 - 4 * t4 * t9 * J__2 - t42 * t3 * t38 + t42 * t3 * t44 + t55) + 4 * m__1 * (lambda__3_dot * (-t65 * t38 / 4 + t65 * t44 / 4 + t9 * t70 - t37 * t70) + t118 * (t77 * lambda__1 * t38 - t77 * lambda__1 * t44 + t35 * (-2 * t83 * t82 * t47 * t2 - t5 * t106 + t9 * t98) - 0.3e1 / 0.4e1 * t77 * lambda__1 * t37 + 0.3e1 / 0.4e1 * t77 * t113) * ell__1));
      t124 = t36 * t35;
      t127 = m__1 ^ 2;
      t129 = m__2 * t127 * t40;
      t135 = m__2 * t127;
      t138 = t36 * t40;
      t140 = t138 * t47 * t5 * t135 * t3 * t1;
      t149 = m__2 * t40;
      t151 = t149 / 4 + J__2;
      out_15_3 = -4 * lambda__2_dot * t35 * (2 * t5 * t1 * t127 * t151 * t3 * t47 + t129 * t3 * t37 * t124 - t129 * t3 * t9 * t124 - t129 * t3 * t37 * t35 + t129 * t3 * t9 * t35 - 2 * t140);
      t161 = lambda__1 * t35;
      t162 = t40 * t47;
      t166 = -t87;
      t169 = t166 * ell__2;
      t170 = t47 * t169;
      t171 = t93 * J__2;
      t177 = 0.1e1 / J__2;
      t179 = 0.1e1 / m__2;
      out_6_6 = t179 * t177 * (2 * m__2 * t162 * t161 - t36 * t166 * t149 + t47 * (t170 + 2 * t171) * t118) / 4;
      t185 = t47 ^ 2;
      t188 = lambda__1 * t36;
      t190 = t35 * J__2;
      out_7_6 = t179 * t177 * (-2 * m__2 * ell__2 * t93 * t190 - 2 * t47 * t35 * t166 * t149 + t149 * t185 * lambda__1 - t149 * t188) / 4;
      out_12_6 = t177 * ell__2 * (-t47 * t87 + t161) / 2;
      t202 = t47 * m__2;
      t215 = ell__2 * t47;
      t220 = t170 + t171 / 2;
      out_13_6 = t179 * (-2 * lambda__2_dot * t202 * t52 - 2 * lambda__3_dot * t202 * t52 - 4 * m__2 * ell__2 * (-ell__2 * lambda__1_dot * t185 / 4 + ell__2 * lambda__1_dot * t36 / 4 + omega__2 * (-2 * t215 * t161 + t36 * t169 - t47 * t220)));
      t230 = t9 * t3;
      t236 = t230 * m__1 * m__2 + 8 * J__1 * (m__1 + m__2 / 2);
      t243 = t1 * t35;
      t244 = t5 * t243;
      t261 = omega__1 * t82;
      t278 = t47 * lambda__1;
      out_14_6 = t24 * (lambda__2_dot * (t40 * t236 * t185 - t40 * t236 * t36 - t55) + 4 * m__1 * (lambda__3_dot * (-t202 * t64 * t244 / 2 + 2 * J__1 * t138 - 2 * J__1 * t185 * t40) + t118 * (2 * t215 * t13 * lambda__1 * omega__2 * t243 + t35 * (t261 * t35 * t113 + t1 * (t5 * ell__1 * t35 * t91 + t103 * t35 * J__1 / 2) - 0.3e1 / 0.4e1 * t261 * t161) - t47 * (t261 * t47 * t113 + t1 * t106 - 0.3e1 / 0.4e1 * t261 * t278)) * ell__1));
      t292 = 4 * J__1;
      t295 = m__2 ^ 2;
      t303 = t135 * t230 + t127 * (-t49 - t292) + m__1 * (-t3 * t295 / 4 - 4 * J__1 * m__2) - J__1 * t295;
      t311 = t135 * t64;
      t319 = J__1 * J__2;
      t325 = t9 * t127 * t151 * t3 + m__1 * (m__2 * (t40 * J__1 + t70) + 4 * t319) + 4 * m__2 * t319;
      out_15_6 = -4 * lambda__2_dot * t35 * (-t311 * t5 * t1 * t47 + t40 * t124 * t303 - 2 * t52 * t185 * t303 - t325 * t35 + 3 * t140) + 4 * lambda__2_dot * t47 * (-t311 * t5 * t1 * t124 + t138 * t47 * t303 + t311 * t244 - t325 * t47);
      out_1_7 = -1;
      out_2_8 = -1;
      out_5_9 = -ell__1 * t1 * omega__1;
      out_8_9 = -2 * ell__1 * t83;
      out_10_9 = -1;
      t345 = ell__1 * t47;
      t360 = ell__2 * t35;
      out_14_9 = 4 * m__2 * t360 * (ell__2 * t345 * t113 + t1 * (t5 * t345 * ell__2 * lambda__2 + 0.3e1 / 0.2e1 * ell__2 * t15 * t101) - 0.3e1 / 0.4e1 * t82 * t278) * ell__1;
      out_3_10 = -1;
      out_4_11 = -1;
      t363 = t35 * omega__2;
      out_6_12 = -ell__2 * t363;
      out_7_12 = -ell__2 * t47 * omega__2;
      out_11_12 = -1;
      out_13_12 = -4 * ell__2 * (t93 * t190 + ell__2 * t188 + t35 * t220 - 0.3e1 / 0.4e1 * lambda__1 * ell__2);
      t375 = t1 * t36;
      t377 = ell__2 * t13;
      out_14_12 = 4 * t118 * (-t377 * lambda__1 * t375 + t244 * ell__1 * (t47 * t87 * ell__2 - 0.3e1 / 0.2e1 * t171) + 0.3e1 / 0.4e1 * t377 * t2) * ell__1;
      out_5_13 = t24 * t22 * (-m__1 * t230 - t292 + t4) / 4;
      t394 = m__2 * t138;
      t395 = 4 * J__2;
      out_6_13 = t179 * t177 * (-t394 + t149 + t395) / 4;
      out_7_13 = -t177 * t40 * t47 * t35 / 4;
      out_9_13 = t22 * t13 / 2;
      out_12_13 = t177 * t215 / 2;
      out_13_13 = -4 * ell__2 * omega__2 * (ell__2 * t36 - 0.3e1 / 0.4e1 * ell__2);
      out_14_13 = 4 * t118 * (-t377 * omega__2 * t375 + t35 * (t261 * t47 * t9 - 0.3e1 / 0.4e1 * ell__2 * omega__1 * t345) + 0.3e1 / 0.4e1 * t377 * omega__2 * t1) * ell__1;
      out_5_14 = -t22 * t1 * t5 * t3 / 4;
      out_6_14 = out_7_13;
      out_7_14 = t179 * t177 * (t394 + t395) / 4;
      out_8_14 = -2 * t24;
      out_9_14 = -t22 * ell__1 * t1 / 2;
      out_12_14 = -t177 * t360 / 2;
      out_13_14 = -4 * t363 * t162;
      t445 = m__2 * t35 * t51;
      out_14_14 = 4 * t445 * t47 * (-omega__2 + omega__1) * t64;
      out_6_15 = out_6_14;
      out_7_15 = t179 * t177 * (t394 - t395) / 4;
      out_12_15 = out_12_14;
      out_13_15 = out_13_14;
      out_14_15 = -4 * t445 * t162 * omega__2 * t3;

      % Store outputs
      out_JF_x = zeros(15, 15);
      out_JF_x(5, 3) = out_5_3;
      out_JF_x(8, 3) = out_8_3;
      out_JF_x(9, 3) = out_9_3;
      out_JF_x(14, 3) = out_14_3;
      out_JF_x(15, 3) = out_15_3;
      out_JF_x(6, 6) = out_6_6;
      out_JF_x(7, 6) = out_7_6;
      out_JF_x(12, 6) = out_12_6;
      out_JF_x(13, 6) = out_13_6;
      out_JF_x(14, 6) = out_14_6;
      out_JF_x(15, 6) = out_15_6;
      out_JF_x(1, 7) = out_1_7;
      out_JF_x(2, 8) = out_2_8;
      out_JF_x(5, 9) = out_5_9;
      out_JF_x(8, 9) = out_8_9;
      out_JF_x(10, 9) = out_10_9;
      out_JF_x(14, 9) = out_14_9;
      out_JF_x(3, 10) = out_3_10;
      out_JF_x(4, 11) = out_4_11;
      out_JF_x(6, 12) = out_6_12;
      out_JF_x(7, 12) = out_7_12;
      out_JF_x(11, 12) = out_11_12;
      out_JF_x(13, 12) = out_13_12;
      out_JF_x(14, 12) = out_14_12;
      out_JF_x(5, 13) = out_5_13;
      out_JF_x(6, 13) = out_6_13;
      out_JF_x(7, 13) = out_7_13;
      out_JF_x(9, 13) = out_9_13;
      out_JF_x(12, 13) = out_12_13;
      out_JF_x(13, 13) = out_13_13;
      out_JF_x(14, 13) = out_14_13;
      out_JF_x(5, 14) = out_5_14;
      out_JF_x(6, 14) = out_6_14;
      out_JF_x(7, 14) = out_7_14;
      out_JF_x(8, 14) = out_8_14;
      out_JF_x(9, 14) = out_9_14;
      out_JF_x(12, 14) = out_12_14;
      out_JF_x(13, 14) = out_13_14;
      out_JF_x(14, 14) = out_14_14;
      out_JF_x(6, 15) = out_6_15;
      out_JF_x(7, 15) = out_7_15;
      out_JF_x(12, 15) = out_12_15;
      out_JF_x(13, 15) = out_13_15;
      out_JF_x(14, 15) = out_14_15;
    end % JF_x
    %
    % - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    %
    function out_JF_x_dot = JF_x_dot( this, in_1, in_2, in_3, t )
      % Evaluate the Jacobian of F with respect to x_dot.

      % Extract properties
      m__1 = this.m_m__1;
      m__2 = this.m_m__2;
      J__1 = this.m_J__1;
      J__2 = this.m_J__2;
      g = this.m_g;
      ell__1 = this.m_ell__1;
      ell__2 = this.m_ell__2;

      % Extract inputs
      x__1 = in_1(1);
      y__1 = in_1(2);
      theta__1 = in_1(3);
      x__2 = in_1(4);
      y__2 = in_1(5);
      theta__2 = in_1(6);
      u__1 = in_1(7);
      v__1 = in_1(8);
      omega__1 = in_1(9);
      u__2 = in_1(10);
      v__2 = in_1(11);
      omega__2 = in_1(12);
      lambda__1 = in_1(13);
      lambda__2 = in_1(14);
      lambda__3 = in_1(15);
      x__1_dot = in_2(1);
      y__1_dot = in_2(2);
      theta__1_dot = in_2(3);
      x__2_dot = in_2(4);
      y__2_dot = in_2(5);
      theta__2_dot = in_2(6);
      u__1_dot = in_2(7);
      v__1_dot = in_2(8);
      omega__1_dot = in_2(9);
      u__2_dot = in_2(10);
      v__2_dot = in_2(11);
      omega__2_dot = in_2(12);
      lambda__1_dot = in_2(13);
      lambda__2_dot = in_2(14);
      lambda__3_dot = in_2(15);
      V_y58KN_1 = in_3(1);
      V_y58KN_2 = in_3(2);

      % Evaluate function
      out_1_1 = 1;
      out_2_2 = 1;
      out_10_3 = 1;
      out_3_4 = 1;
      out_4_5 = 1;
      out_11_6 = 1;
      out_5_7 = 1;
      out_8_8 = 2;
      t1 = cos(theta__1);
      out_8_9 = ell__1 * t1;
      out_9_9 = 1;
      out_6_10 = 1;
      out_7_11 = 1;
      out_12_12 = 1;
      t2 = cos(theta__2);
      t3 = sin(theta__2);
      t5 = ell__2 ^ 2;
      out_13_13 = -t5 * t3 * t2;
      t7 = t2 ^ 2;
      t8 = t5 * t7;
      t9 = m__2 * t8;
      t10 = 4 * J__2;
      t12 = 0.1e1 / m__2;
      out_13_14 = t12 * (t9 - t10);
      t14 = sin(theta__1);
      t15 = t14 * t1 * t7;
      t16 = ell__1 ^ 2;
      t17 = t5 * t16;
      t18 = m__1 * m__2;
      t21 = t1 ^ 2;
      t22 = t21 * t16;
      out_14_14 = 0.1e1 / m__1 * (t18 * t17 * t15 - t2 * t5 * (t22 * t18 + 8 * J__1 * (m__1 + m__2 / 2)) * t3 - 4 * m__1 * t16 * t14 * t1 * J__2);
      t42 = m__1 ^ 2;
      t43 = m__2 * t42;
      t44 = t43 * t17;
      t51 = m__2 ^ 2;
      t72 = t16 * J__2;
      t75 = J__1 * J__2;
      out_15_14 = -4 * t2 * (-t44 * t14 * t1 * t7 * t2 + t8 * t3 * (t43 * t22 + t42 * (-m__2 * t16 - 4 * J__1) + m__1 * (-t16 * t51 / 4 - 4 * J__1 * m__2) - J__1 * t51) + t44 * t14 * t1 * t2 - (t21 * t42 * (m__2 * t5 / 4 + J__2) * t16 + m__1 * (m__2 * (t5 * J__1 + t72) + 4 * t75) + 4 * m__2 * t75) * t3);
      out_13_15 = t12 * (t9 + t10);
      out_14_15 = 8 * t2 * J__1 * t3 * t5 + m__2 * t17 * t15 + 4 * t1 * t14 * t72;

      % Store outputs
      out_JF_x_dot = zeros(15, 15);
      out_JF_x_dot(1, 1) = out_1_1;
      out_JF_x_dot(2, 2) = out_2_2;
      out_JF_x_dot(10, 3) = out_10_3;
      out_JF_x_dot(3, 4) = out_3_4;
      out_JF_x_dot(4, 5) = out_4_5;
      out_JF_x_dot(11, 6) = out_11_6;
      out_JF_x_dot(5, 7) = out_5_7;
      out_JF_x_dot(8, 8) = out_8_8;
      out_JF_x_dot(8, 9) = out_8_9;
      out_JF_x_dot(9, 9) = out_9_9;
      out_JF_x_dot(6, 10) = out_6_10;
      out_JF_x_dot(7, 11) = out_7_11;
      out_JF_x_dot(12, 12) = out_12_12;
      out_JF_x_dot(13, 13) = out_13_13;
      out_JF_x_dot(13, 14) = out_13_14;
      out_JF_x_dot(14, 14) = out_14_14;
      out_JF_x_dot(15, 14) = out_15_14;
      out_JF_x_dot(13, 15) = out_13_15;
      out_JF_x_dot(14, 15) = out_14_15;
    end % JF_x_dot
    %
    % - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    %
    function out_JF_v = JF_v( this, in_1, in_2, in_3, t )
      % Evaluate the Jacobian of F with respect to v.

      % Extract properties
      m__1 = this.m_m__1;
      m__2 = this.m_m__2;
      J__1 = this.m_J__1;
      J__2 = this.m_J__2;
      g = this.m_g;
      ell__1 = this.m_ell__1;
      ell__2 = this.m_ell__2;

      % Extract inputs
      x__1 = in_1(1);
      y__1 = in_1(2);
      theta__1 = in_1(3);
      x__2 = in_1(4);
      y__2 = in_1(5);
      theta__2 = in_1(6);
      u__1 = in_1(7);
      v__1 = in_1(8);
      omega__1 = in_1(9);
      u__2 = in_1(10);
      v__2 = in_1(11);
      omega__2 = in_1(12);
      lambda__1 = in_1(13);
      lambda__2 = in_1(14);
      lambda__3 = in_1(15);
      x__1_dot = in_2(1);
      y__1_dot = in_2(2);
      theta__1_dot = in_2(3);
      x__2_dot = in_2(4);
      y__2_dot = in_2(5);
      theta__2_dot = in_2(6);
      u__1_dot = in_2(7);
      v__1_dot = in_2(8);
      omega__1_dot = in_2(9);
      u__2_dot = in_2(10);
      v__2_dot = in_2(11);
      omega__2_dot = in_2(12);
      lambda__1_dot = in_2(13);
      lambda__2_dot = in_2(14);
      lambda__3_dot = in_2(15);
      V_y58KN_1 = in_3(1);
      V_y58KN_2 = in_3(2);

      % Evaluate function
      % No body

      % Store outputs
      out_JF_v = zeros(15, 2);
    end % JF_v
    %
    % - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    %
    function out_v = v( this, in_1, t )
      % Evaluate the the veils v.

      % Extract properties
      m__1 = this.m_m__1;
      m__2 = this.m_m__2;
      J__1 = this.m_J__1;
      J__2 = this.m_J__2;
      g = this.m_g;
      ell__1 = this.m_ell__1;
      ell__2 = this.m_ell__2;

      % Extract inputs
      x__1 = in_1(1);
      y__1 = in_1(2);
      theta__1 = in_1(3);
      x__2 = in_1(4);
      y__2 = in_1(5);
      theta__2 = in_1(6);
      u__1 = in_1(7);
      v__1 = in_1(8);
      omega__1 = in_1(9);
      u__2 = in_1(10);
      v__2 = in_1(11);
      omega__2 = in_1(12);
      lambda__1 = in_1(13);
      lambda__2 = in_1(14);
      lambda__3 = in_1(15);

      % Evaluate function
      t1 = cos(theta__1);
      t2 = t1 ^ 2;
      t4 = ell__1 ^ 2;
      t5 = m__1 * t4;
      t6 = m__2 * t5;
      t7 = t6 * t2 * J__2;
      t8 = ell__2 ^ 2;
      t10 = m__1 * m__2;
      t11 = t10 * t8 * J__1;
      t13 = t5 / 4;
      t16 = J__1 * m__1;
      t18 = J__2 * (m__2 * (t13 + J__1) + t16);
      t19 = 4 * t18;
      t23 = cos(theta__2);
      t24 = t23 ^ 2;
      t28 = -lambda__2 - lambda__3;
      t31 = omega__2 * t28 + lambda__2 * omega__1;
      t38 = sin(theta__1);
      t43 = omega__1 ^ 2;
      t44 = t43 * omega__1;
      t46 = ell__1 * t38;
      t62 = sin(theta__2);
      t64 = t2 * t4;
      t71 = omega__2 ^ 2;
      t72 = t71 * omega__2;
      t74 = J__2 ^ 2;
      V_y58KN_1 = -4 * m__2 / J__2 * ell__2 * (t24 * ell__2 * lambda__1 * (t7 - 0.3e1 / 0.4e1 * t11 - t19) * omega__2 + t23 * (t62 * (-t2 * t31 * m__2 * J__2 * t5 + t10 * t4 * t38 * omega__1 * lambda__1 * t1 * J__2 + t10 * t46 * t44 * J__2 * J__1 / 2 + 4 * omega__2 * t28 * (0.3e1 / 0.16e2 * t11 + t18) + t6 * J__2 * omega__1 * lambda__2 / 4) * ell__2 + t74 * t72 * (t64 * t10 + m__2 * (-t5 - 4 * J__1) - 4 * t16) / 2) - 0.3e1 / 0.4e1 * (t7 - t11 - t19) * ell__2 * omega__2 * lambda__1);
      t90 = t1 * t24;
      t107 = ell__1 * ell__2;
      t113 = omega__1 * t107;
      t141 = m__2 ^ 2;
      V_y58KN_2 = 8 / m__2 / t8 / J__1 * m__1 * (V_y58KN_1 * (m__2 * t8 * t4 * t38 * t90 / 8 + t23 * J__1 * t62 * t8 + t1 * t38 * t4 * J__2 / 2) + m__2 * ell__2 * (t24 * (-m__1 * t64 / 4 + t13 + J__1) * t8 * t141 - t7 + t11 + 4 * J__2 * (t6 / 4 + (m__1 + m__2) * J__1)) * (-2 * t107 * t38 * omega__2 * lambda__1 * t90 + t23 * (2 * t113 * t62 * t2 * lambda__1 + t1 * (2 * t38 * ell__1 * (t62 * t31 * ell__2 - t72 * J__2 / 2) + ell__2 * t44 * t62 * J__1) - 0.3e1 / 0.2e1 * t113 * t62 * lambda__1) + 0.3e1 / 0.2e1 * ell__2 * t46 * omega__2 * lambda__1 * t1) * ell__1);

      % Store outputs
      out_v = zeros(2, 1);
      out_v(1) = V_y58KN_1;
      out_v(2) = V_y58KN_2;
    end % v
    %
    % - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    %
    function out_Jv_x = Jv_x( this, in_1, in_2, t )
      % Evaluate the Jacobian of v with respect to x.

      % Extract properties
      m__1 = this.m_m__1;
      m__2 = this.m_m__2;
      J__1 = this.m_J__1;
      J__2 = this.m_J__2;
      g = this.m_g;
      ell__1 = this.m_ell__1;
      ell__2 = this.m_ell__2;

      % Extract inputs
      x__1 = in_1(1);
      y__1 = in_1(2);
      theta__1 = in_1(3);
      x__2 = in_1(4);
      y__2 = in_1(5);
      theta__2 = in_1(6);
      u__1 = in_1(7);
      v__1 = in_1(8);
      omega__1 = in_1(9);
      u__2 = in_1(10);
      v__2 = in_1(11);
      omega__2 = in_1(12);
      lambda__1 = in_1(13);
      lambda__2 = in_1(14);
      lambda__3 = in_1(15);
      V_y58KN_1 = in_2(1);
      V_y58KN_2 = in_2(2);

      % Evaluate function
      % No body

      % Store outputs
      out_Jv_x = zeros(2, 15);
    end % Jv_x
    %
    % - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    %
    function out_h = h( this, in_1, in_2, t )
      % Calculate the residual of the invariants h.

      % Extract properties
      m__1 = this.m_m__1;
      m__2 = this.m_m__2;
      J__1 = this.m_J__1;
      J__2 = this.m_J__2;
      g = this.m_g;
      ell__1 = this.m_ell__1;
      ell__2 = this.m_ell__2;

      % Extract inputs
      x__1 = in_1(1);
      y__1 = in_1(2);
      theta__1 = in_1(3);
      x__2 = in_1(4);
      y__2 = in_1(5);
      theta__2 = in_1(6);
      u__1 = in_1(7);
      v__1 = in_1(8);
      omega__1 = in_1(9);
      u__2 = in_1(10);
      v__2 = in_1(11);
      omega__2 = in_1(12);
      lambda__1 = in_1(13);
      lambda__2 = in_1(14);
      lambda__3 = in_1(15);
      V_y58KN_1 = in_2(1);
      V_y58KN_2 = in_2(2);

      % Evaluate function
      t1 = cos(theta__1);
      out_1 = 16 * ell__1 * t1 + 16 * x__1 - 16 * x__2;
      t4 = sin(theta__1);
      t5 = ell__1 * t4;
      out_2 = 16 * t5 + 16 * y__1 - 16 * y__2;
      t7 = sin(theta__2);
      out_3 = 16 * ell__2 * t7 + 16 * y__2;
      t13 = 0.1e1 / ell__1;
      out_4 = t13 * (ell__1 * t4 * omega__1 - u__1 + u__2);
      out_5 = t13 * (-ell__1 * t1 * omega__1 - v__1 + v__2);
      t17 = cos(theta__2);
      out_6 = -ell__2 * t17 * omega__2 - v__2;
      t20 = t17 ^ 2;
      t23 = ell__2 ^ 2;
      t27 = lambda__2 + lambda__3;
      t30 = omega__2 ^ 2;
      t36 = m__2 * ell__2;
      t39 = t1 ^ 2;
      t42 = ell__1 ^ 2;
      t44 = m__2 * m__1 * t42;
      t49 = omega__1 ^ 2;
      t56 = t23 * J__1;
      t61 = J__1 * J__2;
      t69 = 0.1e1 / J__1;
      t71 = 0.1e1 / m__1;
      t73 = 0.1e1 / J__2;
      t75 = 0.1e1 / m__2;
      t76 = t75 * t73 * t13;
      out_7 = t76 * t71 * t69 * (-m__2 * m__1 * t23 * lambda__1 * t20 * J__1 - t17 * t36 * m__1 * J__1 * (t7 * t27 * ell__2 + 2 * t30 * J__2) - t44 * lambda__1 * t39 * J__2 - t1 * (2 * t49 * J__1 + lambda__2 * t5) * ell__1 * J__2 * m__1 * m__2 + 4 * lambda__1 * (m__1 * (m__2 * (t42 * J__2 / 4 + t56 / 4) + t61) + m__2 * t61)) / 4;
      t84 = t23 * t7;
      out_8 = t76 * t71 * t69 * (t20 * t27 * m__2 * m__1 * t56 - m__1 * m__2 * t84 * lambda__1 * t17 * J__1 - J__2 * (-t39 * t42 * m__2 * lambda__2 * m__1 + t44 * t4 * t1 * lambda__1 - 4 * J__1 * (-t49 * ell__1 * m__2 * m__1 * t4 / 2 - t30 * t36 * m__1 * t7 / 2 + (m__1 + m__2) * lambda__2 - lambda__3 * m__1))) / 2;
      out_9 = t75 * t73 * (t20 * t27 * t23 * m__2 - m__2 * t84 * lambda__1 * t17 - 4 * J__2 * (t36 * t7 * t30 / 2 + g * m__2 - lambda__3 + lambda__2)) / 2;

      % Store outputs
      out_h = zeros(9, 1);
      out_h(1) = out_1;
      out_h(2) = out_2;
      out_h(3) = out_3;
      out_h(4) = out_4;
      out_h(5) = out_5;
      out_h(6) = out_6;
      out_h(7) = out_7;
      out_h(8) = out_8;
      out_h(9) = out_9;
    end % h
    %
    % - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    %
    function out_Jh_x = Jh_x( this, in_1, in_2, t )
      % Calculate the Jacobian of h with respect to x.

      % Extract properties
      m__1 = this.m_m__1;
      m__2 = this.m_m__2;
      J__1 = this.m_J__1;
      J__2 = this.m_J__2;
      g = this.m_g;
      ell__1 = this.m_ell__1;
      ell__2 = this.m_ell__2;

      % Extract inputs
      x__1 = in_1(1);
      y__1 = in_1(2);
      theta__1 = in_1(3);
      x__2 = in_1(4);
      y__2 = in_1(5);
      theta__2 = in_1(6);
      u__1 = in_1(7);
      v__1 = in_1(8);
      omega__1 = in_1(9);
      u__2 = in_1(10);
      v__2 = in_1(11);
      omega__2 = in_1(12);
      lambda__1 = in_1(13);
      lambda__2 = in_1(14);
      lambda__3 = in_1(15);
      V_y58KN_1 = in_2(1);
      V_y58KN_2 = in_2(2);

      % Evaluate function
      out_1_1 = 16;
      out_2_2 = 16;
      t1 = sin(theta__1);
      t2 = ell__1 * t1;
      out_1_3 = -16 * t2;
      t4 = cos(theta__1);
      out_2_3 = 16 * ell__1 * t4;
      out_4_3 = t4 * omega__1;
      out_5_3 = omega__1 * t1;
      t8 = ell__1 ^ 2;
      t10 = m__1 * m__2;
      t14 = t4 ^ 2;
      t15 = t14 * J__2;
      t18 = m__2 * m__1 * t8;
      t21 = J__2 * m__1 * m__2;
      t23 = omega__1 ^ 2;
      t31 = 0.1e1 / J__1;
      t33 = 0.1e1 / m__1;
      t35 = 0.1e1 / ell__1;
      t36 = 0.1e1 / J__2;
      t38 = 0.1e1 / m__2;
      t39 = t38 * t36 * t35;
      out_7_3 = t39 * t33 * t31 * (2 * t10 * t8 * t1 * lambda__1 * t4 * J__2 - t18 * lambda__2 * t15 + t1 * (2 * t23 * J__1 + lambda__2 * t2) * ell__1 * t21) / 4;
      t44 = t1 * t4 * t8;
      t47 = t1 ^ 2;
      out_8_3 = -t38 * t35 * t33 * t31 * (2 * J__1 * t23 * ell__1 * m__2 * m__1 * t4 + 2 * t44 * lambda__2 * m__1 * m__2 + t18 * t14 * lambda__1 - t18 * t47 * lambda__1) / 2;
      out_1_4 = -16;
      out_2_5 = -16;
      out_3_5 = 16;
      t64 = cos(theta__2);
      t65 = ell__2 * t64;
      out_3_6 = 16 * t65;
      t66 = sin(theta__2);
      out_6_6 = ell__2 * t66 * omega__2;
      t70 = ell__2 ^ 2;
      t71 = t70 * t66;
      t75 = t70 * J__1;
      t76 = m__1 * t75;
      t77 = lambda__2 + lambda__3;
      t78 = t77 * m__2;
      t79 = t64 ^ 2;
      t84 = omega__2 ^ 2;
      out_7_6 = t39 * t33 * t31 * (2 * t10 * t71 * lambda__1 * t64 * J__1 - t79 * t78 * t76 + t66 * m__2 * ell__2 * m__1 * J__1 * (t66 * t77 * ell__2 + 2 * t84 * J__2)) / 4;
      t97 = t66 * t64;
      t102 = t66 ^ 2;
      t105 = m__2 * m__1 * t70;
      t107 = t79 * J__1;
      t110 = J__1 * J__2;
      t112 = ell__2 * t84;
      out_8_6 = t39 * t33 * t31 * (t105 * t102 * lambda__1 * J__1 - 2 * t10 * t112 * t64 * t110 - t105 * lambda__1 * t107 - 2 * t97 * t78 * t76) / 2;
      t120 = t70 * m__2;
      out_9_6 = t38 * t36 * (-2 * m__2 * t112 * t64 * J__2 - 2 * t66 * t64 * t77 * t120 + t120 * t102 * lambda__1 - t120 * lambda__1 * t79) / 2;
      out_4_7 = -t35;
      out_5_8 = out_4_7;
      out_4_9 = t1;
      out_5_9 = -t4;
      out_7_9 = -out_4_3;
      out_8_9 = -2 * out_5_3;
      out_4_10 = t35;
      out_5_11 = out_4_10;
      out_6_11 = -1;
      out_6_12 = -t65;
      t138 = out_5_11 * t64;
      out_7_12 = -t138 * omega__2 * ell__2;
      out_8_12 = -2 * out_5_11 * omega__2 * ell__2 * t66;
      out_9_12 = -2 * out_6_6;
      t145 = t105 * t107;
      out_7_13 = t39 * t33 * t31 * (-t145 - t18 * t15 + 4 * m__1 * (m__2 * (t8 * J__2 / 4 + t75 / 4) + t110) + 4 * m__2 * t110) / 4;
      t167 = t39 * t33 * t31 * (-t64 * t10 * J__1 * t71 - t44 * t21);
      out_8_13 = t167 / 2;
      out_9_13 = -t36 * t70 * t97 / 2;
      out_7_14 = t167 / 4;
      out_8_14 = t39 * t33 * t31 * (t145 - J__2 * (-t14 * t8 * t10 - 4 * (m__1 + m__2) * J__1)) / 2;
      t183 = m__2 * t70 * t79;
      t184 = 4 * J__2;
      out_9_14 = t38 * t36 * (t183 - t184) / 2;
      out_7_15 = -t36 * t138 * t71 / 4;
      out_8_15 = t39 * t33 * t31 * (-4 * m__1 * t110 + t145) / 2;
      out_9_15 = t38 * t36 * (t183 + t184) / 2;

      % Store outputs
      out_Jh_x = zeros(9, 15);
      out_Jh_x(1, 1) = out_1_1;
      out_Jh_x(2, 2) = out_2_2;
      out_Jh_x(1, 3) = out_1_3;
      out_Jh_x(2, 3) = out_2_3;
      out_Jh_x(4, 3) = out_4_3;
      out_Jh_x(5, 3) = out_5_3;
      out_Jh_x(7, 3) = out_7_3;
      out_Jh_x(8, 3) = out_8_3;
      out_Jh_x(1, 4) = out_1_4;
      out_Jh_x(2, 5) = out_2_5;
      out_Jh_x(3, 5) = out_3_5;
      out_Jh_x(3, 6) = out_3_6;
      out_Jh_x(6, 6) = out_6_6;
      out_Jh_x(7, 6) = out_7_6;
      out_Jh_x(8, 6) = out_8_6;
      out_Jh_x(9, 6) = out_9_6;
      out_Jh_x(4, 7) = out_4_7;
      out_Jh_x(5, 8) = out_5_8;
      out_Jh_x(4, 9) = out_4_9;
      out_Jh_x(5, 9) = out_5_9;
      out_Jh_x(7, 9) = out_7_9;
      out_Jh_x(8, 9) = out_8_9;
      out_Jh_x(4, 10) = out_4_10;
      out_Jh_x(5, 11) = out_5_11;
      out_Jh_x(6, 11) = out_6_11;
      out_Jh_x(6, 12) = out_6_12;
      out_Jh_x(7, 12) = out_7_12;
      out_Jh_x(8, 12) = out_8_12;
      out_Jh_x(9, 12) = out_9_12;
      out_Jh_x(7, 13) = out_7_13;
      out_Jh_x(8, 13) = out_8_13;
      out_Jh_x(9, 13) = out_9_13;
      out_Jh_x(7, 14) = out_7_14;
      out_Jh_x(8, 14) = out_8_14;
      out_Jh_x(9, 14) = out_9_14;
      out_Jh_x(7, 15) = out_7_15;
      out_Jh_x(8, 15) = out_8_15;
      out_Jh_x(9, 15) = out_9_15;
    end % Jh_x
    %
    % - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    %
    function out_Jh_v = Jh_v( this, in_1, in_2, t )
      % Calculate the Jacobian of h with respect to v.

      % Extract properties
      m__1 = this.m_m__1;
      m__2 = this.m_m__2;
      J__1 = this.m_J__1;
      J__2 = this.m_J__2;
      g = this.m_g;
      ell__1 = this.m_ell__1;
      ell__2 = this.m_ell__2;

      % Extract inputs
      x__1 = in_1(1);
      y__1 = in_1(2);
      theta__1 = in_1(3);
      x__2 = in_1(4);
      y__2 = in_1(5);
      theta__2 = in_1(6);
      u__1 = in_1(7);
      v__1 = in_1(8);
      omega__1 = in_1(9);
      u__2 = in_1(10);
      v__2 = in_1(11);
      omega__2 = in_1(12);
      lambda__1 = in_1(13);
      lambda__2 = in_1(14);
      lambda__3 = in_1(15);
      V_y58KN_1 = in_2(1);
      V_y58KN_2 = in_2(2);

      % Evaluate function
      % No body

      % Store outputs
      out_Jh_v = zeros(9, 2);
    end % Jh_v
    %
    % - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    %
  end
end % CrankRod

% That's All Folks!
