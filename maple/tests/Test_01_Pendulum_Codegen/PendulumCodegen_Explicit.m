% +--------------------------------------------------------------------------+
% | 'Indigo' module version 1.0 - BSD 3-Clause License - Copyright (c) 2023  |
% | Current version authors:                                                 |
% |   Davide Stocco and Enrico Bertolazzi.                                   |
% +--------------------------------------------------------------------------+

% Matlab generated code for implicit system: PendulumCodegen_Explicit
% This file has been automatically generated by Indigo.
% DISCLAIMER: If you need to edit it, do it wisely!

classdef PendulumCodegen_Explicit < ExplicitSystem
  %
  % No class description provided.
  %
  properties (SetAccess = protected, Hidden = true)
    % User data
    m_m = 1.0;
    m_l = 1.0;
    m_g = 9.81;
  end
  %
  methods
    %
    % - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    %
    function this = PendulumCodegen_Explicit( varargin )
      % Constructor for 'PendulumCodegen_Explicit'' class.

      % Superclass constructor
      this = this@ExplicitSystem('PendulumCodegen_Explicit', 2, 1);

      % User data
      if (nargin == 0)
        % Keep default values
      elseif (nargin == 3)
        this.m_m = varargin{1};
        this.m_l = varargin{2};
        this.m_g = varargin{3};
      else
        error('wrong number of input arguments.');
      end
    end
    %
    % - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    %
    function out_A = A( this, in_1, t )
      % Calculate the matrix A of the explicit system.

      % Extract properties
      m = this.m_m;
      l = this.m_l;
      g = this.m_g;

      % Extract inputs
      theta = in_1(1);
      omega = in_1(2);

      % Generated function code
      out_1_1 = 1;
      out_2_2 = 1;

      % Store outputs
      out_A = zeros(2,2);
      out_A(1,1) = out_1_1;
      out_A(2,2) = out_2_2;
    end % A
    %
    % - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    %
    function out_TA = TA( this, in_1, t )
      % Calculate the tensor of A with respect to x.

      % Extract properties
      m = this.m_m;
      l = this.m_l;
      g = this.m_g;

      % Extract inputs
      theta = in_1(1);
      omega = in_1(2);

      % Generated function code
      % None

      % Store outputs
      out_TA = zeros(2, 2, 2);
    end % TA
    %
    % - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    %
    function out_b = b( this, in_1, t )
      % Calculate the vector b of the explicit system.

      % Extract properties
      m = this.m_m;
      l = this.m_l;
      g = this.m_g;

      % Extract inputs
      theta = in_1(1);
      omega = in_1(2);

      % Generated function code
      out_1 = omega;
      t3 = sin(theta);
      out_2 = t3 / l * g;

      % Store outputs
      out_b = zeros(2,1);
      out_b(1) = out_1;
      out_b(2) = out_2;
    end % b
    %
    % - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    %
    function out_Jb = Jb( this, in_1, t )
      % Calculate the Jacobian of b with respect to x.

      % Extract properties
      m = this.m_m;
      l = this.m_l;
      g = this.m_g;

      % Extract inputs
      theta = in_1(1);
      omega = in_1(2);

      % Generated function code
      out_1_2 = 1;
      t3 = cos(theta);
      out_2_1 = t3 / l * g;

      % Store outputs
      out_Jb = zeros(2,2);
      out_Jb(1,2) = out_1_2;
      out_Jb(2,1) = out_2_1;
    end % Jb
    %
    % - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    %
    function out_h = h( this, in_1, t )
      % Calculate the residual of the invariants h.

      % Extract properties
      m = this.m_m;
      l = this.m_l;
      g = this.m_g;

      % Extract inputs
      theta = in_1(1);
      omega = in_1(2);

      % Generated function code
      out_1 = 0;

      % Store outputs
      out_h = zeros(1,1);
      out_h(1) = out_1;
    end % h
    %
    % - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    %
    function out_Jh = Jh( this, in_1, t )
      % Calculate the Jacobian of h with respect to x.

      % Extract properties
      m = this.m_m;
      l = this.m_l;
      g = this.m_g;

      % Extract inputs
      theta = in_1(1);
      omega = in_1(2);

      % Generated function code
      % None

      % Store outputs
      out_Jh = zeros(1,2);
    end % Jh
    %
    % - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    %
  end
end % PendulumCodegen_Explicit

% That's All Folks!
