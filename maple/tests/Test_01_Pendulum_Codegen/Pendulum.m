% +--------------------------------------------------------------------------+
% | 'Indigo' module version 1.0 - BSD 3-Clause License - Copyright (c) 2023  |
% | Current version authors:                                                 |
% |   Davide Stocco and Enrico Bertolazzi.                                   |
% +--------------------------------------------------------------------------+

% Matlab generated code for implicit system: Pendulum
% This file has been automatically generated by Indigo.
% DISCLAIMER: If you need to edit it, do it wisely!

classdef Pendulum < ExplicitSystem
  %
  % No class description provided.
  %
  properties (SetAccess = protected, Hidden = true)
    % User data
    m_m = 1.0;
    m_ell = 1.0;
    m_g = 9.81;
  end
  %
  methods
    %
    % - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    %
    function this = Pendulum( varargin )
      % Constructor for 'Pendulum'' class.

      % Superclass constructor
      this = this@ExplicitSystem('Pendulum', 5, 3);

      % User data
      if (nargin == 0)
        % Keep default values
      elseif (nargin == 3)
        this.m_m = varargin{1};
        this.m_ell = varargin{2};
        this.m_g = varargin{3};
      else
        error('wrong number of input arguments.');
      end
    end
    %
    % - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    %
    function out_f = f( this, in_1, t )
      % Calculate the vector f of the semiexplicit system.

      % Extract properties
      m = this.m_m;
      ell = this.m_ell;
      g = this.m_g;

      % Extract inputs
      x = in_1(1);
      y = in_1(2);
      u = in_1(3);
      v = in_1(4);
      lambda = in_1(5);

      % Evaluate assignments
      t1 = y ^ 2;
      t2 = 0.1e1 / t1;
      V_y58KN_1 = u * x * t2;
      t4 = 0.1e1 / u;
      V_y58KN_2 = V_y58KN_1 * t4;
      t5 = 0.1e1 / y;
      V_y58KN_3 = V_y58KN_1 * t5;
      t7 = y * g * m;
      t8 = x ^ 2;
      t9 = lambda * t8;
      t10 = lambda * t1;
      t11 = u * m;
      t14 = 0.1e1 / m;
      V_y58KN_4 = t5 * t14 * (y * t11 + t10 + t7 + t9);
      V_y58KN_5 = t14 * t4 * (t8 + t1);
      V_y58KN_6 = t14 * t4 * (m * g + 2 * lambda * y + t11);
      t23 = u ^ 2;
      V_y58KN_7 = t14 / t23 * (2 * m * t23 * x + t10 + t7 + t9);
      V_y58KN_8 = -t14 * t4 * (lambda * x - m * t23);
      V_y58KN_9 = V_y58KN_1;
      V_y58KN_10 = x * u * t2 * V_y58KN_3;
      V_y58KN_11 = t5 * (2 + V_y58KN_3) * x;
      t39 = V_y58KN_3 * u;
      V_y58KN_12 = t5 * (t39 - 2 * y);
      t42 = y * V_y58KN_12;
      V_y58KN_13 = -t4 * (V_y58KN_9 * t42 - V_y58KN_10 * u);
      V_y58KN_14 = t14 * t4 * (V_y58KN_11 * u - V_y58KN_12 * x);
      V_y58KN_15 = t14 * t4 * (t39 - t42 + 2 * u);
      V_y58KN_16 = V_y58KN_12 * t4 * y;

      % Evaluate function
      t3 = x ^ 2;
      t5 = y ^ 2;
      t6 = lambda * t5;
      t7 = y * V_y58KN_4;
      t10 = 0.1e1 / y;
      t12 = 0.1e1 / m;
      out_1 = t12 * t10 * (-g * m * y - lambda * t3 + m * t7 - t6);
      t14 = m * g;
      t21 = lambda * y;
      t23 = t5 * y;
      t24 = t23 * lambda;
      t25 = u * m;
      t28 = 0.1e1 / u;
      t30 = 0.1e1 / x;
      out_2 = t12 * t30 * t28 * (-g * m * t5 - lambda * t3 * u - t14 * u * y - t21 * t3 + t25 * t7 - t6 * u - t24);
      out_3 = -lambda * x * t12;
      out_4 = -(t14 + t21) * t12;
      t36 = u ^ 2;
      t37 = t36 * u;
      t40 = m ^ 2;
      t45 = t3 * x;
      t49 = x * t37;
      t61 = g ^ 2;
      t71 = g * u;
      t75 = t5 ^ 2;
      t76 = t75 * lambda;
      t80 = t40 * g;
      t82 = u * t23;
      t84 = t5 * V_y58KN_4;
      t87 = -3 * g * m * t21 * t3 * u + 2 * g * t37 * t40 * x * y + 2 * lambda * m * t37 * t45 + 2 * m * t21 * t36 * t45 - t40 * t5 * t61 * u - 3 * m * t24 * t71 + 2 * m * t49 * t6 - t23 * t40 * t61 - t36 * t5 * t80 - 2 * t40 * t49 * t7 + t40 * t71 * t84 - 3 * t14 * t76 - t80 * t82;
      t88 = lambda ^ 2;
      t90 = t3 ^ 2;
      t94 = t3 * u;
      t112 = m * t94;
      t114 = lambda * V_y58KN_4;
      t124 = -m * t21 * t3 * t36 + 2 * m * t114 * t82 - m * t24 * t36 + 2 * t112 * t114 * y - t23 * t3 * t88 + t36 * t40 * t84 - 4 * t5 * t88 * t94 - 2 * t75 * t88 * u - 2 * t75 * t88 * y - 2 * t88 * t90 * u + t88 * t90 * y - t112 * t6 - t25 * t76;
      out_5 = -t30 * t12 / (t3 + t5) * t28 * t10 * (t87 + t124);

      % Store outputs
      out_f = zeros(5,1);
      out_f(1) = out_1;
      out_f(2) = out_2;
      out_f(3) = out_3;
      out_f(4) = out_4;
      out_f(5) = out_5;
    end % f
    %
    % - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    %
    function out_Jf = Jf( this, in_1, t )
      % Calculate the Jacobian of f with respect to x.

      % Extract properties
      m = this.m_m;
      ell = this.m_ell;
      g = this.m_g;

      % Extract inputs
      x = in_1(1);
      y = in_1(2);
      u = in_1(3);
      v = in_1(4);
      lambda = in_1(5);

      % Evaluate assignments
      t1 = y ^ 2;
      t2 = 0.1e1 / t1;
      V_y58KN_1 = u * x * t2;
      t4 = 0.1e1 / u;
      V_y58KN_2 = V_y58KN_1 * t4;
      t5 = 0.1e1 / y;
      V_y58KN_3 = V_y58KN_1 * t5;
      t6 = m * g;
      t7 = y * t6;
      t8 = x ^ 2;
      t9 = t8 * lambda;
      t10 = t1 * lambda;
      t11 = u * m;
      t14 = 0.1e1 / m;
      t15 = t14 * (y * t11 + t10 + t7 + t9);
      V_y58KN_4 = t5 * t15;
      t16 = t8 + t1;
      V_y58KN_5 = t14 * t4 * t16;
      t19 = 2 * lambda * y;
      t20 = t6 + t19 + t11;
      V_y58KN_6 = t14 * t4 * t20;
      t22 = u ^ 2;
      t23 = t22 * m;
      t26 = 2 * x * t23 + t10 + t7 + t9;
      t27 = 0.1e1 / t22;
      V_y58KN_7 = t14 * t27 * t26;
      t29 = lambda * x;
      t30 = -t23 + t29;
      V_y58KN_8 = -t14 * t4 * t30;
      V_y58KN_9 = V_y58KN_1;
      t33 = t2 * V_y58KN_3;
      t34 = x * u;
      V_y58KN_10 = t34 * t33;
      t35 = 2 + V_y58KN_3;
      t36 = t35 * x;
      V_y58KN_11 = t5 * t36;
      t37 = u * V_y58KN_3;
      t39 = t37 - 2 * y;
      V_y58KN_12 = t5 * t39;
      t40 = y * V_y58KN_12;
      t43 = V_y58KN_9 * t40 - u * V_y58KN_10;
      V_y58KN_13 = -t4 * t43;
      t47 = u * V_y58KN_11 - x * V_y58KN_12;
      V_y58KN_14 = t14 * t4 * t47;
      t50 = t37 - t40 + 2 * u;
      V_y58KN_15 = t14 * t4 * t50;
      t52 = t4 * y;
      V_y58KN_16 = V_y58KN_12 * t52;
      D_2_V_y58KN_1 = u * t2;
      t54 = 0.1e1 / t1 / y;
      D_3_V_y58KN_1 = -2 * u * x * t54;
      D_1_V_y58KN_1 = x * t2;
      D_2_V_y58KN_2 = D_2_V_y58KN_1 * t4;
      D_3_V_y58KN_2 = D_3_V_y58KN_1 * t4;
      D_1_V_y58KN_2 = -V_y58KN_1 * t27 + D_1_V_y58KN_1 * t4;
      D_2_V_y58KN_3 = D_2_V_y58KN_1 * t5;
      D_3_V_y58KN_3 = -V_y58KN_1 * t2 + D_3_V_y58KN_1 * t5;
      D_1_V_y58KN_3 = D_1_V_y58KN_1 * t5;
      D_3_V_y58KN_4 = 2 * t5 * t14 * t29;
      D_4_V_y58KN_4 = t5 * t14 * t20 - t2 * t15;
      D_2_V_y58KN_4 = 1;
      D_1_V_y58KN_4 = t5 * t14 * t16;
      t68 = t4 * x;
      t69 = t14 * t68;
      D_2_V_y58KN_5 = 2 * t69;
      D_3_V_y58KN_5 = 2 * t14 * t52;
      t72 = t14 * t27 * t16;
      D_1_V_y58KN_5 = -t72;
      t74 = t14 * t4 * lambda;
      D_3_V_y58KN_6 = 2 * t74;
      D_2_V_y58KN_6 = -t14 * t27 * t20 + t4;
      D_1_V_y58KN_6 = D_3_V_y58KN_5;
      D_3_V_y58KN_7 = t14 * t27 * (2 * t23 + 2 * t29);
      D_4_V_y58KN_7 = t14 * t27 * (t6 + t19);
      D_2_V_y58KN_7 = 4 * t68 - 2 * t14 / t22 / u * t26;
      D_1_V_y58KN_7 = t72;
      D_3_V_y58KN_8 = -t74;
      D_2_V_y58KN_8 = t14 * t27 * t30 + 2;
      D_1_V_y58KN_8 = -t69;
      D_2_V_y58KN_9 = D_2_V_y58KN_1;
      D_3_V_y58KN_9 = D_3_V_y58KN_1;
      D_1_V_y58KN_9 = D_1_V_y58KN_1;
      D_2_V_y58KN_10 = t34 * t2 * D_2_V_y58KN_3 + u * t33;
      D_3_V_y58KN_10 = t34 * t2 * D_3_V_y58KN_3 - 2 * t34 * t54 * V_y58KN_3;
      D_1_V_y58KN_10 = t34 * t2 * D_1_V_y58KN_3 + x * t33;
      D_2_V_y58KN_11 = t5 * D_2_V_y58KN_3 * x + t5 * t35;
      D_3_V_y58KN_11 = t5 * D_3_V_y58KN_3 * x - t2 * t36;
      D_1_V_y58KN_11 = t5 * D_1_V_y58KN_3 * x;
      t108 = u * D_2_V_y58KN_3;
      D_2_V_y58KN_12 = t5 * t108;
      t109 = u * D_3_V_y58KN_3;
      D_3_V_y58KN_12 = t5 * (t109 - 2) - t2 * t39;
      t113 = u * D_1_V_y58KN_3;
      D_1_V_y58KN_12 = t5 * (t113 + V_y58KN_3);
      t115 = y * D_2_V_y58KN_12;
      D_2_V_y58KN_13 = -t4 * (y * D_2_V_y58KN_9 * V_y58KN_12 + V_y58KN_9 * t115 - u * D_2_V_y58KN_10);
      t122 = y * D_3_V_y58KN_12;
      D_3_V_y58KN_13 = -t4 * (y * D_3_V_y58KN_9 * V_y58KN_12 + V_y58KN_9 * t122 - u * D_3_V_y58KN_10 + V_y58KN_12 * V_y58KN_9);
      t130 = y * D_1_V_y58KN_12;
      D_1_V_y58KN_13 = -t4 * (y * D_1_V_y58KN_9 * V_y58KN_12 + V_y58KN_9 * t130 - u * D_1_V_y58KN_10 - V_y58KN_10) + t27 * t43;
      D_2_V_y58KN_14 = t14 * t4 * (u * D_2_V_y58KN_11 - x * D_2_V_y58KN_12 - V_y58KN_12);
      D_3_V_y58KN_14 = t14 * t4 * (u * D_3_V_y58KN_11 - x * D_3_V_y58KN_12);
      D_1_V_y58KN_14 = t14 * t4 * (u * D_1_V_y58KN_11 - x * D_1_V_y58KN_12 + V_y58KN_11) - t14 * t27 * t47;
      D_2_V_y58KN_15 = t14 * t4 * (t108 - t115);
      D_3_V_y58KN_15 = t14 * t4 * (t109 - t122 - V_y58KN_12);
      D_1_V_y58KN_15 = t14 * t4 * (t113 - t130 + V_y58KN_3 + 2) - t14 * t27 * t50;
      D_2_V_y58KN_16 = D_2_V_y58KN_12 * t52;
      D_3_V_y58KN_16 = V_y58KN_12 * t4 + D_3_V_y58KN_12 * t52;
      D_1_V_y58KN_16 = -V_y58KN_12 * t27 * y + D_1_V_y58KN_12 * t52;

      % Evaluate function
      t1 = y * m;
      t3 = lambda * x;
      t6 = 0.1e1 / y;
      t8 = 0.1e1 / m;
      out_1_1 = t8 * t6 * (D_3_V_y58KN_4 * t1 - 2 * t3);
      t10 = m * g;
      t17 = y * t10;
      t18 = x ^ 2;
      t19 = t18 * lambda;
      t20 = y ^ 2;
      t21 = t20 * lambda;
      t22 = V_y58KN_4 * t1;
      t24 = 0.1e1 / t20;
      out_1_2 = t8 * t6 * (-2 * lambda * y + m * V_y58KN_4 + D_4_V_y58KN_4 * t1 - t10) - t8 * t24 * (-t17 - t19 - t21 + t22);
      out_1_3 = D_2_V_y58KN_4;
      out_1_5 = t8 * t6 * (D_1_V_y58KN_4 * t1 - t18 - t20);
      t30 = u * m;
      t33 = u * lambda;
      t39 = 0.1e1 / u;
      t41 = 0.1e1 / x;
      t42 = t8 * t41;
      t44 = u * y;
      t50 = t20 * y;
      t52 = y * V_y58KN_4;
      t54 = -t50 * lambda - t20 * t10 - t44 * t10 - t18 * t33 - y * t19 - t20 * t33 + t52 * t30;
      t56 = 0.1e1 / t18;
      out_2_1 = t42 * t39 * (y * D_3_V_y58KN_4 * t30 - 2 * y * t3 - 2 * x * t33) - t8 * t56 * t39 * t54;
      out_2_2 = t42 * t39 * (y * D_4_V_y58KN_4 * t30 - u * t10 + V_y58KN_4 * t30 - 2 * y * t33 - 2 * t17 - t19 - 3 * t21);
      t74 = u ^ 2;
      t75 = 0.1e1 / t74;
      out_2_3 = t42 * t39 * (y * D_2_V_y58KN_4 * t30 - t17 - t19 - t21 + t22) - t42 * t75 * t54;
      t80 = t18 * u;
      t81 = t20 * u;
      t82 = y * t18;
      out_2_5 = t42 * t39 * (y * D_1_V_y58KN_4 * t30 - t50 - t80 - t81 - t82);
      out_3_1 = -t8 * lambda;
      out_3_5 = -x * t8;
      out_4_2 = out_3_1;
      out_4_5 = -y * t8;
      t88 = m ^ 2;
      t89 = t74 * u;
      t90 = t89 * t88;
      t91 = y * x;
      t95 = t88 * g;
      t101 = lambda * m;
      t108 = t18 * t74;
      t110 = y * t108 * t101;
      t112 = u * t101;
      t116 = t50 * u;
      t122 = t74 * t88;
      t125 = lambda * g;
      t126 = m * t125;
      t127 = x * u;
      t131 = lambda ^ 2;
      t132 = u * t131;
      t133 = t18 * x;
      t136 = t20 * x;
      t145 = x * t74;
      t146 = y * t145;
      t152 = V_y58KN_4 * t91;
      t155 = 2 * D_3_V_y58KN_4 * t116 * t101 - 2 * t20 * t127 * t101 + 6 * t18 * t89 * t101 + 2 * t20 * t89 * t101 + 2 * D_3_V_y58KN_4 * t82 * t112 + D_3_V_y58KN_4 * t20 * t122 - 6 * y * t127 * t126 + 4 * y * t133 * t131 - 2 * t50 * x * t131 + D_3_V_y58KN_4 * t81 * t95 + 2 * y * t89 * t95 - 2 * D_3_V_y58KN_4 * t91 * t90 - 2 * t146 * t101 + 4 * t152 * t112 - 8 * t133 * t132 - 8 * t136 * t132 - 2 * t52 * t90 + 6 * t110;
      t158 = t18 + t20;
      t160 = t8 / t158;
      t161 = t41 * t160;
      t163 = x * t89;
      t164 = y * t163;
      t173 = t133 * t74;
      t179 = g ^ 2;
      t180 = t88 * t179;
      t183 = y * t80;
      t189 = t20 ^ 2;
      t193 = t20 * t74;
      t196 = V_y58KN_4 * t81;
      t198 = -3 * t189 * m * t125 + 2 * t133 * t89 * t101 + 2 * t20 * t163 * t101 + 2 * y * t173 * t101 - 3 * t50 * t30 * t125 - t116 * t95 - 3 * t183 * t126 - 2 * t152 * t90 + 2 * t164 * t95 - t50 * t180 - t81 * t180 - t193 * t95 + t196 * t95;
      t199 = t18 ^ 2;
      t202 = t20 * t18;
      t207 = t199 * t131;
      t209 = t18 * t131;
      t211 = t189 * y;
      t218 = V_y58KN_4 * t82;
      t226 = V_y58KN_4 * t20;
      t228 = 2 * V_y58KN_4 * t116 * t101 - t189 * u * t101 - t20 * t80 * t101 - t50 * t74 * t101 + 2 * t218 * t112 + t226 * t122 - 2 * t211 * t131 - 2 * t189 * t132 - 2 * t199 * t132 - 4 * t202 * t132 + y * t207 - t50 * t209 - t110;
      t229 = t198 + t228;
      t230 = t6 * t229;
      t231 = t158 ^ 2;
      t232 = 0.1e1 / t231;
      out_5_1 = -t161 * t39 * t6 * t155 + t56 * t160 * t39 * t230 + 2 * t8 * t232 * t39 * t230;
      t249 = t173 * t101;
      t264 = t20 * t180;
      t273 = t50 * m * t125;
      t275 = 2 * D_4_V_y58KN_4 * t116 * t101 + 2 * D_4_V_y58KN_4 * t82 * t112 + D_4_V_y58KN_4 * t20 * t122 - 3 * t18 * t30 * t125 - 9 * t20 * t30 * t125 + D_4_V_y58KN_4 * t81 * t95 - 2 * D_4_V_y58KN_4 * t91 * t90 - 2 * x * V_y58KN_4 * t90 + 4 * t164 * t101 + 2 * t163 * t95 - 2 * t44 * t180 + 2 * t249 - 3 * t264 - 12 * t273;
      t279 = t81 * t95;
      t288 = t20 * t209;
      t290 = t189 * t131;
      t296 = 2 * t183 * t101;
      t300 = t116 * t101;
      t306 = 2 * V_y58KN_4 * t80 * t101 + 2 * V_y58KN_4 * t44 * t95 - 2 * y * t74 * t95 - t108 * t101 - 3 * t193 * t101 + 6 * t196 * t101 + 2 * t52 * t122 - 8 * t50 * t132 - 8 * t82 * t132 + t207 - 3 * t279 - 3 * t288 - 10 * t290 - t296 - 4 * t300;
      out_5_2 = -t161 * t39 * t6 * (t275 + t306) + t161 * t39 * t24 * t229 + 2 * t41 * t8 * t232 * t39 * t229;
      t349 = -3 * y * t18 * m * t125 + 4 * y * t133 * u * t101 + 2 * D_2_V_y58KN_4 * t116 * t101 + 6 * t20 * t145 * t101 + 2 * D_2_V_y58KN_4 * t82 * t112 + D_2_V_y58KN_4 * t20 * t122 + D_2_V_y58KN_4 * t81 * t95 - 2 * D_2_V_y58KN_4 * t91 * t90 - 6 * t152 * t122 + 6 * t146 * t95 + 6 * t249 - t264 - 3 * t273;
      t361 = V_y58KN_4 * t50;
      t367 = 2 * t226 * u * t88 - t189 * t101 - t202 * t101 + 2 * t218 * t101 + 2 * t361 * t101 + t226 * t95 - t50 * t95 - 2 * t207 - 2 * t279 - 4 * t288 - 2 * t290 - t296 - 2 * t300;
      out_5_3 = -t161 * t39 * t6 * (t349 + t367) + t161 * t75 * t230;
      t387 = t89 * m;
      t392 = t74 * m;
      t402 = 2 * D_1_V_y58KN_4 * t116 * t101 + 2 * D_1_V_y58KN_4 * t82 * t112 + D_1_V_y58KN_4 * t20 * t122 + 2 * y * t133 * t392 + D_1_V_y58KN_4 * t81 * t95 - 2 * D_1_V_y58KN_4 * t91 * t90 - 3 * t116 * t10 - 3 * t183 * t10 - 3 * t189 * t10 + 2 * t133 * t387 + 2 * t136 * t387;
      t424 = 2 * y * t199 * lambda - 4 * t211 * lambda - t189 * t30 - 4 * t189 * t33 - 2 * t50 * t19 - 4 * t199 * t33 - t202 * t30 - 8 * t202 * t33 + 2 * t218 * t30 + 2 * t361 * t30 - t50 * t392 - t82 * t392;
      out_5_5 = -t161 * t39 * t6 * (t402 + t424);

      % Store outputs
      out_Jf = zeros(5,5);
      out_Jf(1,1) = out_1_1;
      out_Jf(1,2) = out_1_2;
      out_Jf(1,3) = out_1_3;
      out_Jf(1,5) = out_1_5;
      out_Jf(2,1) = out_2_1;
      out_Jf(2,2) = out_2_2;
      out_Jf(2,3) = out_2_3;
      out_Jf(2,5) = out_2_5;
      out_Jf(3,1) = out_3_1;
      out_Jf(3,5) = out_3_5;
      out_Jf(4,2) = out_4_2;
      out_Jf(4,5) = out_4_5;
      out_Jf(5,1) = out_5_1;
      out_Jf(5,2) = out_5_2;
      out_Jf(5,3) = out_5_3;
      out_Jf(5,5) = out_5_5;
    end % Jf
    %
    % - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    %
    function out_h = h( this, in_1, t )
      % Calculate the residual of the invariants h.

      % Extract properties
      m = this.m_m;
      ell = this.m_ell;
      g = this.m_g;

      % Extract inputs
      x = in_1(1);
      y = in_1(2);
      u = in_1(3);
      v = in_1(4);
      lambda = in_1(5);

      % Evaluate assignments
      t1 = y ^ 2;
      t2 = 0.1e1 / t1;
      V_y58KN_1 = u * x * t2;
      t4 = 0.1e1 / u;
      V_y58KN_2 = V_y58KN_1 * t4;
      t5 = 0.1e1 / y;
      V_y58KN_3 = V_y58KN_1 * t5;
      t6 = m * g;
      t7 = y * t6;
      t8 = x ^ 2;
      t9 = t8 * lambda;
      t10 = t1 * lambda;
      t11 = u * m;
      t14 = 0.1e1 / m;
      V_y58KN_4 = t5 * t14 * (y * t11 + t10 + t7 + t9);
      V_y58KN_5 = t14 * t4 * (t8 + t1);
      V_y58KN_6 = t14 * t4 * (2 * lambda * y + t11 + t6);
      t22 = u ^ 2;
      t23 = t22 * m;
      V_y58KN_7 = t14 / t22 * (2 * x * t23 + t10 + t7 + t9);
      V_y58KN_8 = -t14 * t4 * (lambda * x - t23);
      V_y58KN_9 = V_y58KN_1;
      V_y58KN_10 = x * u * t2 * V_y58KN_3;
      V_y58KN_11 = t5 * (2 + V_y58KN_3) * x;
      t37 = u * V_y58KN_3;
      V_y58KN_12 = t5 * (t37 - 2 * y);
      t40 = y * V_y58KN_12;
      V_y58KN_13 = -t4 * (V_y58KN_9 * t40 - u * V_y58KN_10);
      V_y58KN_14 = t14 * t4 * (u * V_y58KN_11 - x * V_y58KN_12);
      V_y58KN_15 = t14 * t4 * (t37 - t40 + 2 * u);
      V_y58KN_16 = V_y58KN_12 * t4 * y;

      % Evaluate function
      t1 = ell ^ 2;
      t2 = x ^ 2;
      t3 = y ^ 2;
      out_1 = t1 - t2 - t3;
      out_2 = 0.1e1 / y * x * u + v;
      t7 = 0.1e1 / u;
      t8 = 0.1e1 / m;
      out_3 = -lambda * t2 * t8 * t7 + (-m * g - lambda * y) * t8 * t7 * y - y + 2 * x * u;

      % Store outputs
      out_h = zeros(3,1);
      out_h(1) = out_1;
      out_h(2) = out_2;
      out_h(3) = out_3;
    end % h
    %
    % - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    %
    function out_Jh = Jh( this, in_1, t )
      % Calculate the Jacobian of h with respect to x.

      % Extract properties
      m = this.m_m;
      ell = this.m_ell;
      g = this.m_g;

      % Extract inputs
      x = in_1(1);
      y = in_1(2);
      u = in_1(3);
      v = in_1(4);
      lambda = in_1(5);

      % Evaluate assignments
      t1 = y ^ 2;
      t2 = 0.1e1 / t1;
      V_y58KN_1 = u * x * t2;
      t4 = 0.1e1 / u;
      V_y58KN_2 = V_y58KN_1 * t4;
      t5 = 0.1e1 / y;
      V_y58KN_3 = V_y58KN_1 * t5;
      t6 = m * g;
      t7 = y * t6;
      t8 = x ^ 2;
      t9 = t8 * lambda;
      t10 = t1 * lambda;
      t11 = u * m;
      t14 = 0.1e1 / m;
      t15 = t14 * (y * t11 + t10 + t7 + t9);
      V_y58KN_4 = t5 * t15;
      t16 = t8 + t1;
      V_y58KN_5 = t14 * t4 * t16;
      t19 = 2 * lambda * y;
      t20 = t6 + t19 + t11;
      V_y58KN_6 = t14 * t4 * t20;
      t22 = u ^ 2;
      t23 = t22 * m;
      t26 = 2 * x * t23 + t10 + t7 + t9;
      t27 = 0.1e1 / t22;
      V_y58KN_7 = t14 * t27 * t26;
      t29 = lambda * x;
      t30 = -t23 + t29;
      V_y58KN_8 = -t14 * t4 * t30;
      V_y58KN_9 = V_y58KN_1;
      t33 = t2 * V_y58KN_3;
      t34 = x * u;
      V_y58KN_10 = t34 * t33;
      t35 = 2 + V_y58KN_3;
      t36 = t35 * x;
      V_y58KN_11 = t5 * t36;
      t37 = u * V_y58KN_3;
      t39 = t37 - 2 * y;
      V_y58KN_12 = t5 * t39;
      t40 = y * V_y58KN_12;
      t43 = V_y58KN_9 * t40 - u * V_y58KN_10;
      V_y58KN_13 = -t4 * t43;
      t47 = u * V_y58KN_11 - x * V_y58KN_12;
      V_y58KN_14 = t14 * t4 * t47;
      t50 = t37 - t40 + 2 * u;
      V_y58KN_15 = t14 * t4 * t50;
      t52 = t4 * y;
      V_y58KN_16 = V_y58KN_12 * t52;
      D_2_V_y58KN_1 = u * t2;
      t54 = 0.1e1 / t1 / y;
      D_3_V_y58KN_1 = -2 * u * x * t54;
      D_1_V_y58KN_1 = x * t2;
      D_2_V_y58KN_2 = D_2_V_y58KN_1 * t4;
      D_3_V_y58KN_2 = D_3_V_y58KN_1 * t4;
      D_1_V_y58KN_2 = -t27 * V_y58KN_1 + t4 * D_1_V_y58KN_1;
      D_2_V_y58KN_3 = D_2_V_y58KN_1 * t5;
      D_3_V_y58KN_3 = -t2 * V_y58KN_1 + t5 * D_3_V_y58KN_1;
      D_1_V_y58KN_3 = D_1_V_y58KN_1 * t5;
      D_3_V_y58KN_4 = 2 * t5 * t14 * t29;
      D_4_V_y58KN_4 = t14 * t20 * t5 - t15 * t2;
      D_2_V_y58KN_4 = 1;
      D_1_V_y58KN_4 = t5 * t14 * t16;
      t68 = t4 * x;
      t69 = t14 * t68;
      D_2_V_y58KN_5 = 2 * t69;
      D_3_V_y58KN_5 = 2 * t14 * t52;
      t72 = t14 * t27 * t16;
      D_1_V_y58KN_5 = -t72;
      t74 = t14 * t4 * lambda;
      D_3_V_y58KN_6 = 2 * t74;
      D_2_V_y58KN_6 = -t14 * t20 * t27 + t4;
      D_1_V_y58KN_6 = D_3_V_y58KN_5;
      D_3_V_y58KN_7 = t14 * t27 * (2 * t23 + 2 * t29);
      D_4_V_y58KN_7 = t14 * t27 * (t6 + t19);
      D_2_V_y58KN_7 = 4 * t68 - 2 * t14 / t22 / u * t26;
      D_1_V_y58KN_7 = t72;
      D_3_V_y58KN_8 = -t74;
      D_2_V_y58KN_8 = t14 * t27 * t30 + 2;
      D_1_V_y58KN_8 = -t69;
      D_2_V_y58KN_9 = D_2_V_y58KN_1;
      D_3_V_y58KN_9 = D_3_V_y58KN_1;
      D_1_V_y58KN_9 = D_1_V_y58KN_1;
      D_2_V_y58KN_10 = t2 * t34 * D_2_V_y58KN_3 + t33 * u;
      D_3_V_y58KN_10 = t2 * t34 * D_3_V_y58KN_3 - 2 * t34 * t54 * V_y58KN_3;
      D_1_V_y58KN_10 = t2 * t34 * D_1_V_y58KN_3 + t33 * x;
      D_2_V_y58KN_11 = t5 * x * D_2_V_y58KN_3 + t35 * t5;
      D_3_V_y58KN_11 = t5 * x * D_3_V_y58KN_3 - t2 * t36;
      D_1_V_y58KN_11 = t5 * D_1_V_y58KN_3 * x;
      t108 = u * D_2_V_y58KN_3;
      D_2_V_y58KN_12 = t5 * t108;
      t109 = u * D_3_V_y58KN_3;
      D_3_V_y58KN_12 = t5 * (t109 - 2) - t2 * t39;
      t113 = u * D_1_V_y58KN_3;
      D_1_V_y58KN_12 = t5 * (t113 + V_y58KN_3);
      t115 = y * D_2_V_y58KN_12;
      D_2_V_y58KN_13 = -t4 * (y * D_2_V_y58KN_9 * V_y58KN_12 + t115 * V_y58KN_9 - u * D_2_V_y58KN_10);
      t122 = y * D_3_V_y58KN_12;
      D_3_V_y58KN_13 = -t4 * (y * D_3_V_y58KN_9 * V_y58KN_12 + t122 * V_y58KN_9 - u * D_3_V_y58KN_10 + V_y58KN_12 * V_y58KN_9);
      t130 = y * D_1_V_y58KN_12;
      D_1_V_y58KN_13 = -t4 * (y * D_1_V_y58KN_9 * V_y58KN_12 + t130 * V_y58KN_9 - u * D_1_V_y58KN_10 - V_y58KN_10) + t27 * t43;
      D_2_V_y58KN_14 = t14 * t4 * (u * D_2_V_y58KN_11 - x * D_2_V_y58KN_12 - V_y58KN_12);
      D_3_V_y58KN_14 = t14 * t4 * (u * D_3_V_y58KN_11 - x * D_3_V_y58KN_12);
      D_1_V_y58KN_14 = t14 * t4 * (u * D_1_V_y58KN_11 - x * D_1_V_y58KN_12 + V_y58KN_11) - t14 * t27 * t47;
      D_2_V_y58KN_15 = t14 * t4 * (t108 - t115);
      D_3_V_y58KN_15 = t14 * t4 * (t109 - t122 - V_y58KN_12);
      D_1_V_y58KN_15 = t14 * t4 * (t113 - t130 + V_y58KN_3 + 2) - t14 * t27 * t50;
      D_2_V_y58KN_16 = D_2_V_y58KN_12 * t52;
      D_3_V_y58KN_16 = t4 * V_y58KN_12 + t52 * D_3_V_y58KN_12;
      D_1_V_y58KN_16 = -t27 * y * V_y58KN_12 + t52 * D_1_V_y58KN_12;

      % Evaluate function
      t1 = 2 * x;
      out_1_1 = -t1;
      out_1_2 = -2 * y;
      t3 = 0.1e1 / y;
      out_2_1 = u * t3;
      t4 = y ^ 2;
      out_2_2 = -u * x / t4;
      out_2_3 = x * t3;
      out_2_4 = 1;
      t8 = 0.1e1 / u;
      t9 = 0.1e1 / m;
      t10 = t9 * t8;
      out_3_1 = -2 * x * lambda * t10 + 2 * u;
      t16 = -m * g - lambda * y;
      out_3_2 = -lambda * t9 * t8 * y + t16 * t10 - 1;
      t21 = u ^ 2;
      t22 = 0.1e1 / t21;
      t24 = x ^ 2;
      out_3_3 = lambda * t24 * t9 * t22 - t16 * t9 * t22 * y + t1;
      out_3_5 = -t9 * t8 * t4 - t24 * t10;

      % Store outputs
      out_Jh = zeros(3,5);
      out_Jh(1,1) = out_1_1;
      out_Jh(1,2) = out_1_2;
      out_Jh(2,1) = out_2_1;
      out_Jh(2,2) = out_2_2;
      out_Jh(2,3) = out_2_3;
      out_Jh(2,4) = out_2_4;
      out_Jh(3,1) = out_3_1;
      out_Jh(3,2) = out_3_2;
      out_Jh(3,3) = out_3_3;
      out_Jh(3,5) = out_3_5;
    end % Jh
    %
    % - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    %
  end
end % Pendulum

% That's All Folks!
