% +--------------------------------------------------------------------------+
% | 'Indigo' module version 1.0 - BSD 3-Clause License - Copyright (c) 2023  |
% | Current version authors:                                                 |
% |   Davide Stocco and Enrico Bertolazzi.                                   |
% +--------------------------------------------------------------------------+

% Matlab generated code for implicit system: DoubleSlider
% This file has been automatically generated by Indigo.
% DISCLAIMER: If you need to edit it, do it wisely!

classdef DoubleSlider < Indigo.DAE.Implicit
  %
  % No class description provided.
  %
  properties (SetAccess = protected, Hidden = true)
    % User data
    m_m = 1.0;
    m_J = 1.0;
    m_g = 9.81;
    m_ell = 1.0;
  end
  %
  methods
    %
    % - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    %
    function this = DoubleSlider( varargin )
      % Class constructor.

      % Superclass constructor
      num_eqns = 8;
      num_veil = 1;
      num_invs = 6;
      this = this@Indigo.DAE.Implicit('DoubleSlider', num_eqns, num_veil, num_invs);

      % User data
      if (nargin == 0)
        % Keep default values
      elseif (nargin == 1 && isstruct(varargin{1}))
        this.m_m = varargin{1}.m;
        this.m_J = varargin{1}.J;
        this.m_g = varargin{1}.g;
        this.m_ell = varargin{1}.ell;
      elseif (nargin == 4)
        this.m_m = varargin{1};
        this.m_J = varargin{2};
        this.m_g = varargin{3};
        this.m_ell = varargin{4};
      else
        error('wrong number of input arguments.');
      end
    end % DoubleSlider
    %
    % - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    %
    function out_F = F( this, in_1, in_2, ~, ~ )
      % Evaluate the function F.

      % Extract properties
      m = this.m_m;
      J = this.m_J;
      g = this.m_g;
      ell = this.m_ell;

      % Extract inputs
      theta = in_1(3);
      u = in_1(4);
      v = in_1(5);
      omega = in_1(6);
      lambda__1 = in_1(7);
      lambda__2 = in_1(8);
      x_dot = in_2(1);
      y_dot = in_2(2);
      theta_dot = in_2(3);
      u_dot = in_2(4);
      v_dot = in_2(5);
      omega_dot = in_2(6);
      lambda__1_dot = in_2(7);
      lambda__2_dot = in_2(8);

      % Evaluate function
      out_1 = -u + x_dot;
      out_2 = -v + y_dot;
      t1 = 0.1e1 / m;
      out_3 = t1 * lambda__1 + u_dot;
      out_4 = v_dot + t1 * (g * m + lambda__2);
      out_5 = -omega + theta_dot;
      t6 = sin(theta);
      t7 = ell * t6;
      t9 = cos(theta);
      t12 = omega_dot * J;
      t15 = 0.1e1 / J;
      out_6 = t15 * (lambda__2 * ell * t9 - lambda__1 * t7 + 2 * t12) / 2;
      t17 = ell * m;
      t18 = omega ^ 2;
      t19 = t18 * J;
      t23 = t9 ^ 2;
      t32 = ell ^ 2;
      t34 = m * t32 * t23;
      t36 = 4 * J;
      t39 = omega * t12;
      t50 = 0.1e1 / ell * t1;
      out_7 = t50 * t15 * (-2 * theta_dot * (t6 * t19 - t7 * t9 * lambda__1 + ell * lambda__2 * t23 - ell * lambda__2 / 2) * t17 + lambda__1_dot * (m * t32 - t34 + t36) + 4 * (t39 - ell * lambda__2_dot * t6 / 4) * t9 * t17) / 2;
      out_8 = t50 * t15 * (2 * m * theta_dot * (-ell * t23 * lambda__1 + t9 * (-lambda__2 * t7 + t19) + ell * lambda__1 / 2) * ell + lambda__2_dot * (t34 + t36) + 4 * m * (t39 - t9 * ell * lambda__1_dot / 4) * t7) / 2;

      % Store outputs
      out_F = zeros(8, 1);
      out_F(1) = out_1;
      out_F(2) = out_2;
      out_F(3) = out_3;
      out_F(4) = out_4;
      out_F(5) = out_5;
      out_F(6) = out_6;
      out_F(7) = out_7;
      out_F(8) = out_8;
    end % F
    %
    % - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    %
    function out_JF_x = JF_x( this, in_1, in_2, ~, ~ )
      % Evaluate the Jacobian of F with respect to x.

      % Extract properties
      m = this.m_m;
      J = this.m_J;
      ell = this.m_ell;

      % Extract inputs
      theta = in_1(3);
      omega = in_1(6);
      lambda__1 = in_1(7);
      lambda__2 = in_1(8);
      theta_dot = in_2(3);
      omega_dot = in_2(6);
      lambda__1_dot = in_2(7);
      lambda__2_dot = in_2(8);

      % Evaluate function
      t1 = cos(theta);
      t2 = ell * t1;
      t4 = sin(theta);
      t5 = ell * t4;
      t6 = lambda__2 * t5;
      t8 = 0.1e1 / J;
      out_6_3 = t8 * (-lambda__1 * t2 - t6) / 2;
      t10 = ell * m;
      t11 = omega ^ 2;
      t12 = t11 * J;
      t14 = t4 ^ 2;
      t17 = t1 ^ 2;
      t27 = ell ^ 2;
      t28 = t27 * t1;
      t29 = t4 * m;
      t33 = omega_dot * J;
      t34 = omega * t33;
      t47 = 0.1e1 / m;
      t49 = 0.1e1 / ell * t47;
      out_7_3 = t49 * t8 * (-2 * theta_dot * (ell * t14 * lambda__1 - ell * t17 * lambda__1 - 2 * t5 * lambda__2 * t1 + t1 * t12) * t10 + 2 * lambda__1_dot * t29 * t28 - 4 * (t34 - ell * lambda__2_dot * t4 / 4) * t4 * t10 - lambda__2_dot * t17 * m * t27) / 2;
      out_8_3 = t49 * t8 * (2 * m * theta_dot * (2 * t5 * t1 * lambda__1 - ell * lambda__2 * t17 - t4 * (t12 - t6)) * ell - 2 * lambda__2_dot * t29 * t28 + 4 * m * (t34 - t1 * ell * lambda__1_dot / 4) * t2 + lambda__1_dot * m * t14 * t27) / 2;
      out_1_4 = -1;
      out_2_5 = -1;
      out_5_6 = -1;
      out_7_6 = t49 * t8 * (-4 * theta_dot * t4 * omega * J * t10 + 4 * J * omega_dot * t1 * t10) / 2;
      out_8_6 = t49 * t8 * (4 * theta_dot * m * t1 * ell * J * omega + 4 * m * t33 * t5) / 2;
      out_3_7 = t47;
      out_6_7 = -t8 * t5 / 2;
      out_7_7 = t8 * theta_dot * t4 * t2;
      t107 = -ell * t17 + ell / 2;
      out_8_7 = t8 * theta_dot * t107;
      out_4_8 = out_3_7;
      out_6_8 = t8 * t2 / 2;
      out_7_8 = t8 * theta_dot * t107;
      out_8_8 = -out_7_7;

      % Store outputs
      out_JF_x = zeros(8, 8);
      out_JF_x(6, 3) = out_6_3;
      out_JF_x(7, 3) = out_7_3;
      out_JF_x(8, 3) = out_8_3;
      out_JF_x(1, 4) = out_1_4;
      out_JF_x(2, 5) = out_2_5;
      out_JF_x(5, 6) = out_5_6;
      out_JF_x(7, 6) = out_7_6;
      out_JF_x(8, 6) = out_8_6;
      out_JF_x(3, 7) = out_3_7;
      out_JF_x(6, 7) = out_6_7;
      out_JF_x(7, 7) = out_7_7;
      out_JF_x(8, 7) = out_8_7;
      out_JF_x(4, 8) = out_4_8;
      out_JF_x(6, 8) = out_6_8;
      out_JF_x(7, 8) = out_7_8;
      out_JF_x(8, 8) = out_8_8;
    end % JF_x
    %
    % - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    %
    function out_JF_x_dot = JF_x_dot( this, in_1, ~, ~, ~ )
      % Evaluate the Jacobian of F with respect to x_dot.

      % Extract properties
      m = this.m_m;
      J = this.m_J;
      ell = this.m_ell;

      % Extract inputs
      theta = in_1(3);
      omega = in_1(6);
      lambda__1 = in_1(7);
      lambda__2 = in_1(8);

      % Evaluate function
      out_1_1 = 1;
      out_2_2 = 1;
      out_5_3 = 1;
      t1 = omega ^ 2;
      t2 = t1 * J;
      t3 = sin(theta);
      t5 = cos(theta);
      t7 = ell * t3;
      t9 = t5 ^ 2;
      t15 = 0.1e1 / J;
      out_7_3 = -t15 * (t3 * t2 - t7 * t5 * lambda__1 + lambda__2 * ell * t9 - ell * lambda__2 / 2);
      out_8_3 = t15 * (-ell * t9 * lambda__1 + t5 * (-lambda__2 * t7 + t2) + ell * lambda__1 / 2);
      out_3_4 = 1;
      out_4_5 = 1;
      out_6_6 = 1;
      out_7_6 = 2 * t5 * omega;
      out_8_6 = 2 * omega * t3;
      t27 = ell ^ 2;
      t29 = m * t27 * t9;
      t31 = 4 * J;
      t36 = 0.1e1 / m / ell;
      out_7_7 = t36 * t15 * (m * t27 - t29 + t31) / 2;
      out_8_7 = -t15 * ell * t3 * t5 / 2;
      out_7_8 = out_8_7;
      out_8_8 = t36 * t15 * (t29 + t31) / 2;

      % Store outputs
      out_JF_x_dot = zeros(8, 8);
      out_JF_x_dot(1, 1) = out_1_1;
      out_JF_x_dot(2, 2) = out_2_2;
      out_JF_x_dot(5, 3) = out_5_3;
      out_JF_x_dot(7, 3) = out_7_3;
      out_JF_x_dot(8, 3) = out_8_3;
      out_JF_x_dot(3, 4) = out_3_4;
      out_JF_x_dot(4, 5) = out_4_5;
      out_JF_x_dot(6, 6) = out_6_6;
      out_JF_x_dot(7, 6) = out_7_6;
      out_JF_x_dot(8, 6) = out_8_6;
      out_JF_x_dot(7, 7) = out_7_7;
      out_JF_x_dot(8, 7) = out_8_7;
      out_JF_x_dot(7, 8) = out_7_8;
      out_JF_x_dot(8, 8) = out_8_8;
    end % JF_x_dot
    %
    % - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    %
    function out_JF_v = JF_v( ~, ~, ~, ~, ~ )
      % Evaluate the Jacobian of F with respect to v.

      % Extract properties
      % No properties

      % Extract inputs

      % Evaluate function
      % No body

      % Store outputs
      out_JF_v = zeros(8, 1);
    end % JF_v
    %
    % - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    %
    function out_v = v( this, in_1, ~ )
      % Evaluate the the veils v.

      % Extract properties
      m = this.m_m;
      J = this.m_J;
      ell = this.m_ell;

      % Extract inputs
      theta = in_1(3);

      % Evaluate function
      t1 = ell ^ 2;
      t6 = m ^ 2;
      t8 = t1 * ell * t6;
      t9 = cos(theta);
      t10 = t9 ^ 2;
      V_y58KN_1 = 0.1e1 / (4 * J * m * ell - t10 * t8 + t8) * (4 * m * t1 + 16 * J);

      % Store outputs
      out_v = zeros(1, 1);
      out_v(1) = V_y58KN_1;
    end % v
    %
    % - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    %
    function out_Jv_x = Jv_x( this, in_1, ~, ~ )
      % Evaluate the Jacobian of v with respect to x.

      % Extract properties
      m = this.m_m;
      J = this.m_J;
      ell = this.m_ell;

      % Extract inputs
      theta = in_1(3);

      % Evaluate function
      D_V_y58KN_1_1 = 0;
      D_V_y58KN_1_2 = 0;
      t1 = ell ^ 2;
      t6 = m ^ 2;
      t7 = t1 * ell;
      t8 = t7 * t6;
      t9 = cos(theta);
      t10 = t9 ^ 2;
      t16 = (4 * J * m * ell - t10 * t8 + t8) ^ 2;
      t21 = sin(theta);
      D_V_y58KN_1_3 = -2 * t21 * t9 * t7 * t6 / t16 * (4 * m * t1 + 16 * J);
      D_V_y58KN_1_4 = 0;
      D_V_y58KN_1_5 = 0;
      D_V_y58KN_1_6 = 0;
      D_V_y58KN_1_7 = 0;
      D_V_y58KN_1_8 = 0;

      % Store outputs
      out_Jv_x = zeros(1, 8);
      out_Jv_x(1, 1) = D_V_y58KN_1_1;
      out_Jv_x(1, 2) = D_V_y58KN_1_2;
      out_Jv_x(1, 3) = D_V_y58KN_1_3;
      out_Jv_x(1, 4) = D_V_y58KN_1_4;
      out_Jv_x(1, 5) = D_V_y58KN_1_5;
      out_Jv_x(1, 6) = D_V_y58KN_1_6;
      out_Jv_x(1, 7) = D_V_y58KN_1_7;
      out_Jv_x(1, 8) = D_V_y58KN_1_8;
    end % Jv_x
    %
    % - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    %
    function out_h = h( this, in_1, ~, ~ )
      % Calculate the residual of the invariants h.

      % Extract properties
      m = this.m_m;
      J = this.m_J;
      g = this.m_g;
      ell = this.m_ell;

      % Extract inputs
      x = in_1(1);
      y = in_1(2);
      theta = in_1(3);
      u = in_1(4);
      v = in_1(5);
      omega = in_1(6);
      lambda__1 = in_1(7);
      lambda__2 = in_1(8);

      % Evaluate function
      t1 = cos(theta);
      t2 = t1 * ell;
      out_1 = -t2 - 2 * x;
      t4 = sin(theta);
      out_2 = -ell * t4 - 2 * y;
      t11 = 0.1e1 / ell;
      out_3 = t11 * (-ell * t4 * omega + 2 * u);
      out_4 = t11 * (ell * t1 * omega + 2 * v);
      t16 = omega ^ 2;
      t21 = t1 ^ 2;
      t23 = ell ^ 2;
      t24 = m * t23;
      t35 = 0.1e1 / J;
      t38 = t11 / m;
      out_5 = t38 * t35 * (-m * t23 * lambda__2 * t4 * t1 + 2 * m * t2 * t16 * J + m * t23 * lambda__1 - t24 * t21 * lambda__1 + 4 * J * lambda__1) / 2;
      out_6 = t38 * t35 * (t24 * lambda__2 * t21 - m * t23 * t4 * t1 * lambda__1 + 2 * (m * ell * t4 * t16 + 2 * g * m + 2 * lambda__2) * J) / 2;

      % Store outputs
      out_h = zeros(6, 1);
      out_h(1) = out_1;
      out_h(2) = out_2;
      out_h(3) = out_3;
      out_h(4) = out_4;
      out_h(5) = out_5;
      out_h(6) = out_6;
    end % h
    %
    % - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    %
    function out_Jh_x = Jh_x( this, in_1, ~, ~ )
      % Calculate the Jacobian of h with respect to x.

      % Extract properties
      m = this.m_m;
      J = this.m_J;
      ell = this.m_ell;

      % Extract inputs
      theta = in_1(3);
      omega = in_1(6);
      lambda__1 = in_1(7);
      lambda__2 = in_1(8);

      % Evaluate function
      out_1_1 = -2;
      out_2_2 = -2;
      t1 = sin(theta);
      out_1_3 = t1 * ell;
      t2 = cos(theta);
      t3 = ell * t2;
      out_2_3 = -t3;
      t4 = t2 * omega;
      out_3_3 = -t4;
      t5 = omega * t1;
      out_4_3 = -t5;
      t6 = omega ^ 2;
      t7 = t6 * J;
      t13 = ell ^ 2;
      t18 = t2 ^ 2;
      t20 = m * t13;
      t22 = t1 ^ 2;
      t26 = 0.1e1 / J;
      t29 = 0.1e1 / ell;
      t30 = t29 / m;
      out_5_3 = t30 * t26 * (2 * m * t13 * t1 * t2 * lambda__1 - 2 * m * ell * t1 * t7 - t20 * lambda__2 * t18 + t20 * lambda__2 * t22) / 2;
      t39 = t1 * t2;
      out_6_3 = t30 * t26 * (-2 * m * t13 * lambda__2 * t39 + 2 * m * t3 * t7 - t20 * t18 * lambda__1 + t20 * t22 * lambda__1) / 2;
      out_3_4 = 2 * t29;
      out_4_5 = out_3_4;
      out_3_6 = -t1;
      out_4_6 = t2;
      out_5_6 = 2 * t4;
      out_6_6 = 2 * t5;
      t48 = m * t13 * t18;
      t49 = 4 * J;
      out_5_7 = t30 * t26 * (-t48 + t20 + t49) / 2;
      out_6_7 = -t26 * ell * t39 / 2;
      out_5_8 = out_6_7;
      out_6_8 = t30 * t26 * (t48 + t49) / 2;

      % Store outputs
      out_Jh_x = zeros(6, 8);
      out_Jh_x(1, 1) = out_1_1;
      out_Jh_x(2, 2) = out_2_2;
      out_Jh_x(1, 3) = out_1_3;
      out_Jh_x(2, 3) = out_2_3;
      out_Jh_x(3, 3) = out_3_3;
      out_Jh_x(4, 3) = out_4_3;
      out_Jh_x(5, 3) = out_5_3;
      out_Jh_x(6, 3) = out_6_3;
      out_Jh_x(3, 4) = out_3_4;
      out_Jh_x(4, 5) = out_4_5;
      out_Jh_x(3, 6) = out_3_6;
      out_Jh_x(4, 6) = out_4_6;
      out_Jh_x(5, 6) = out_5_6;
      out_Jh_x(6, 6) = out_6_6;
      out_Jh_x(5, 7) = out_5_7;
      out_Jh_x(6, 7) = out_6_7;
      out_Jh_x(5, 8) = out_5_8;
      out_Jh_x(6, 8) = out_6_8;
    end % Jh_x
    %
    % - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    %
    function out_Jh_v = Jh_v( ~, ~, ~, ~ )
      % Calculate the Jacobian of h with respect to v.

      % Extract properties
      % No properties

      % Extract inputs

      % Evaluate function
      % No body

      % Store outputs
      out_Jh_v = zeros(6, 1);
    end % Jh_v
    %
    % - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    %
    function out = in_domain( ~, ~, ~ )
      out = true;
    end % in_domain
    %
    % - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    %
  end
end % DoubleSlider

% That's All Folks!
