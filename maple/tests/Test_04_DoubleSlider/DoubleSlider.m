% +--------------------------------------------------------------------------+
% | 'Indigo' module version 1.0 - BSD 3-Clause License - Copyright (c) 2023  |
% | Current version authors:                                                 |
% |   Davide Stocco and Enrico Bertolazzi.                                   |
% +--------------------------------------------------------------------------+

% Matlab generated code for implicit system: DoubleSlider
% This file has been automatically generated by Indigo.
% DISCLAIMER: If you need to edit it, do it wisely!

classdef DoubleSlider < Indigo.Systems.Implicit
  %
  % No class description provided.
  %
  properties (SetAccess = protected, Hidden = true)
    % User data
    m_m = 1.0;
    m_g = 9.81;
    m_ell = 1.0;
  end
  %
  methods
    %
    % - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    %
    function this = DoubleSlider( varargin )
      % Class constructor.

      % Superclass constructor
      num_eqns = 8;
      num_veil = 0;
      num_invs = 6;
      this = this@Indigo.Systems.Implicit('DoubleSlider', num_eqns, num_veil, num_invs);

      % User data
      if (nargin == 0)
        % Keep default values
      elseif (nargin == 1 && isstruct(varargin{1}))
        this.m_m = varargin{1}.m;
        this.m_g = varargin{1}.g;
        this.m_ell = varargin{1}.ell;
      elseif (nargin == 3)
        this.m_m = varargin{1};
        this.m_g = varargin{2};
        this.m_ell = varargin{3};
      else
        error('wrong number of input arguments.');
      end
    end % DoubleSlider
    %
    % - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    %
    function out_F = F( this, in_1, in_2, in_3, t )
      % Evaluate the function F.

      % Extract properties
      m = this.m_m;
      g = this.m_g;
      ell = this.m_ell;

      % Extract inputs
      x = in_1(1);
      y = in_1(2);
      theta = in_1(3);
      u = in_1(4);
      v = in_1(5);
      omega = in_1(6);
      lambda__1 = in_1(7);
      lambda__2 = in_1(8);
      x_dot = in_2(1);
      y_dot = in_2(2);
      theta_dot = in_2(3);
      u_dot = in_2(4);
      v_dot = in_2(5);
      omega_dot = in_2(6);
      lambda__1_dot = in_2(7);
      lambda__2_dot = in_2(8);

      % Evaluate function
      out_1 = x_dot - u;
      out_2 = y_dot - v;
      out_3 = u_dot * m - 2 * lambda__2;
      t3 = g * m;
      out_4 = v_dot * m + t3 - 2 * lambda__1;
      t6 = cos(theta);
      t9 = sin(theta);
      t10 = ell * t9;
      t11 = omega ^ 2;
      t17 = 0.1e1 / m;
      out_5 = -omega_dot * ell * t6 + t17 * (m * t11 * t10 - 2 * t3 + 4 * lambda__1);
      out_6 = theta_dot - omega;
      t19 = 0.1e1 / t6;
      t26 = t6 ^ 2;
      t27 = t26 * t11;
      t30 = t9 ^ 2;
      t31 = t30 * t9;
      t33 = ell * m;
      t41 = t26 * lambda__1;
      t46 = 0.1e1 / t26;
      out_7 = 4 * lambda__1_dot * t17 * t9 * t19 - 4 * t17 * lambda__2_dot + 3 * omega * t17 * t46 * (-2 * m * g * t26 - 2 * m * g * t30 + m * t10 * t27 + t33 * t31 * t11 + 4 * t30 * lambda__1 + 4 * t41);
      t60 = t30 ^ 2;
      out_8 = -lambda__1_dot * t19 * (t26 + t30) * ell - t46 * (3 * m * ell * t30 * t27 - 6 * m * g * t31 + 3 * t33 * t60 * t11 - 6 * t3 * t9 * t26 + 4 * t26 * t6 * lambda__2 + 12 * t31 * lambda__1 + 8 * t9 * t41) * ell * omega / 4;

      % Store outputs
      out_F = zeros(8, 1);
      out_F(1) = out_1;
      out_F(2) = out_2;
      out_F(3) = out_3;
      out_F(4) = out_4;
      out_F(5) = out_5;
      out_F(6) = out_6;
      out_F(7) = out_7;
      out_F(8) = out_8;
    end % F
    %
    % - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    %
    function out_JF_x = JF_x( this, in_1, in_2, in_3, t )
      % Evaluate the Jacobian of F with respect to x.

      % Extract properties
      m = this.m_m;
      g = this.m_g;
      ell = this.m_ell;

      % Extract inputs
      x = in_1(1);
      y = in_1(2);
      theta = in_1(3);
      u = in_1(4);
      v = in_1(5);
      omega = in_1(6);
      lambda__1 = in_1(7);
      lambda__2 = in_1(8);
      x_dot = in_2(1);
      y_dot = in_2(2);
      theta_dot = in_2(3);
      u_dot = in_2(4);
      v_dot = in_2(5);
      omega_dot = in_2(6);
      lambda__1_dot = in_2(7);
      lambda__2_dot = in_2(8);

      % Evaluate function
      t1 = sin(theta);
      t2 = ell * t1;
      t4 = cos(theta);
      t5 = ell * t4;
      t6 = omega ^ 2;
      out_5_3 = t2 * omega_dot + t5 * t6;
      t8 = t4 ^ 2;
      t9 = 0.1e1 / t8;
      t10 = t1 ^ 2;
      t12 = 0.1e1 / m;
      t13 = lambda__1_dot * t12;
      t17 = t4 * t6;
      t19 = m * ell * t10;
      t21 = t8 * t4;
      t22 = t21 * t6;
      t23 = ell * m;
      t27 = omega * t12;
      t30 = t8 * t6;
      t31 = m * t2;
      t33 = t10 * t1;
      t42 = t8 * lambda__1;
      t46 = -2 * g * m * t10 - 2 * g * m * t8 + t23 * t33 * t6 + 4 * t10 * lambda__1 + t30 * t31 + 4 * t42;
      t47 = 0.1e1 / t21;
      out_7_3 = 4 * t13 * t10 * t9 + 4 * t13 + 3 * t27 * t9 * (t17 * t19 + t22 * t23) + 6 * t1 * t27 * t47 * t46;
      t52 = t8 + t10;
      t57 = ell * omega;
      t65 = g * m;
      t85 = t10 ^ 2;
      t89 = t1 * t8;
      t101 = -6 * g * m * t33 + 3 * t23 * t6 * t85 + 8 * t1 * t42 + 3 * t19 * t30 + 4 * t21 * lambda__2 + 12 * t33 * lambda__1 - 6 * t65 * t89;
      out_8_3 = -t1 * lambda__1_dot * t9 * t52 * ell - t9 * (6 * ell * m * t17 * t33 - 6 * g * m * t21 - 12 * t1 * t8 * lambda__2 - 6 * t10 * t4 * t65 + 20 * t10 * t4 * lambda__1 + 8 * t21 * lambda__1 + 6 * t22 * t31) * t57 / 4 - t1 * t47 * t101 * t57 / 2;
      out_1_4 = -1;
      out_2_5 = -1;
      out_5_6 = 2 * omega * t2;
      out_6_6 = -1;
      t107 = t8 * omega;
      out_7_6 = 3 * t27 * t9 * (2 * omega * t23 * t33 + 2 * t107 * t31) + 3 * t12 * t9 * t46;
      out_8_6 = -t9 * t101 * ell / 4 - t9 * (6 * omega * t23 * t85 + 6 * t107 * t19) * t57 / 4;
      out_4_7 = -2;
      out_5_7 = 4 * t12;
      out_7_7 = 12 * t27 * t9 * t52;
      out_8_7 = -t9 * (8 * t89 + 12 * t33) * t57 / 4;
      out_3_8 = -2;
      out_8_8 = -omega * t5;

      % Store outputs
      out_JF_x = zeros(8, 8);
      out_JF_x(5, 3) = out_5_3;
      out_JF_x(7, 3) = out_7_3;
      out_JF_x(8, 3) = out_8_3;
      out_JF_x(1, 4) = out_1_4;
      out_JF_x(2, 5) = out_2_5;
      out_JF_x(5, 6) = out_5_6;
      out_JF_x(6, 6) = out_6_6;
      out_JF_x(7, 6) = out_7_6;
      out_JF_x(8, 6) = out_8_6;
      out_JF_x(4, 7) = out_4_7;
      out_JF_x(5, 7) = out_5_7;
      out_JF_x(7, 7) = out_7_7;
      out_JF_x(8, 7) = out_8_7;
      out_JF_x(3, 8) = out_3_8;
      out_JF_x(8, 8) = out_8_8;
    end % JF_x
    %
    % - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    %
    function out_JF_x_dot = JF_x_dot( this, in_1, in_2, in_3, t )
      % Evaluate the Jacobian of F with respect to x_dot.

      % Extract properties
      m = this.m_m;
      g = this.m_g;
      ell = this.m_ell;

      % Extract inputs
      x = in_1(1);
      y = in_1(2);
      theta = in_1(3);
      u = in_1(4);
      v = in_1(5);
      omega = in_1(6);
      lambda__1 = in_1(7);
      lambda__2 = in_1(8);
      x_dot = in_2(1);
      y_dot = in_2(2);
      theta_dot = in_2(3);
      u_dot = in_2(4);
      v_dot = in_2(5);
      omega_dot = in_2(6);
      lambda__1_dot = in_2(7);
      lambda__2_dot = in_2(8);

      % Evaluate function
      out_1_1 = 1;
      out_2_2 = 1;
      out_6_3 = 1;
      out_3_4 = m;
      out_4_5 = m;
      t1 = cos(theta);
      out_5_6 = -ell * t1;
      t3 = 0.1e1 / t1;
      t4 = sin(theta);
      t6 = 0.1e1 / m;
      out_7_7 = 4 * t6 * t4 * t3;
      t8 = t1 ^ 2;
      t9 = t4 ^ 2;
      out_8_7 = -t3 * (t8 + t9) * ell;
      out_7_8 = -4 * t6;

      % Store outputs
      out_JF_x_dot = zeros(8, 8);
      out_JF_x_dot(1, 1) = out_1_1;
      out_JF_x_dot(2, 2) = out_2_2;
      out_JF_x_dot(6, 3) = out_6_3;
      out_JF_x_dot(3, 4) = out_3_4;
      out_JF_x_dot(4, 5) = out_4_5;
      out_JF_x_dot(5, 6) = out_5_6;
      out_JF_x_dot(7, 7) = out_7_7;
      out_JF_x_dot(8, 7) = out_8_7;
      out_JF_x_dot(7, 8) = out_7_8;
    end % JF_x_dot
    %
    % - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    %
    function out_JF_v = JF_v( this, in_1, in_2, in_3, t )
      % Evaluate the Jacobian of F with respect to v.

      % Extract properties
      m = this.m_m;
      g = this.m_g;
      ell = this.m_ell;

      % Extract inputs
      x = in_1(1);
      y = in_1(2);
      theta = in_1(3);
      u = in_1(4);
      v = in_1(5);
      omega = in_1(6);
      lambda__1 = in_1(7);
      lambda__2 = in_1(8);
      x_dot = in_2(1);
      y_dot = in_2(2);
      theta_dot = in_2(3);
      u_dot = in_2(4);
      v_dot = in_2(5);
      omega_dot = in_2(6);
      lambda__1_dot = in_2(7);
      lambda__2_dot = in_2(8);

      % Evaluate function
      % No body

      % Store outputs
      out_JF_v = zeros(8, 0);
    end % JF_v
    %
    % - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    %
    function out_v = v( this, in_1, t )
      % Evaluate the the veils v.

      % Extract properties
      m = this.m_m;
      g = this.m_g;
      ell = this.m_ell;

      % Extract inputs
      x = in_1(1);
      y = in_1(2);
      theta = in_1(3);
      u = in_1(4);
      v = in_1(5);
      omega = in_1(6);
      lambda__1 = in_1(7);
      lambda__2 = in_1(8);

      % Evaluate function
      % No body

      % Store outputs
      out_v = zeros(0, 1);
    end % v
    %
    % - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    %
    function out_Jv_x = Jv_x( this, in_1, in_2, t )
      % Evaluate the Jacobian of v with respect to x.

      % Extract properties
      m = this.m_m;
      g = this.m_g;
      ell = this.m_ell;

      % Extract inputs
      x = in_1(1);
      y = in_1(2);
      theta = in_1(3);
      u = in_1(4);
      v = in_1(5);
      omega = in_1(6);
      lambda__1 = in_1(7);
      lambda__2 = in_1(8);

      % Evaluate function
      % No body

      % Store outputs
      out_Jv_x = zeros(0, 8);
    end % Jv_x
    %
    % - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    %
    function out_h = h( this, in_1, in_2, t )
      % Calculate the residual of the invariants h.

      % Extract properties
      m = this.m_m;
      g = this.m_g;
      ell = this.m_ell;

      % Extract inputs
      x = in_1(1);
      y = in_1(2);
      theta = in_1(3);
      u = in_1(4);
      v = in_1(5);
      omega = in_1(6);
      lambda__1 = in_1(7);
      lambda__2 = in_1(8);

      % Evaluate function
      t1 = cos(theta);
      t2 = ell * t1;
      t4 = sin(theta);
      t5 = ell * t4;
      out_1 = -lambda__1 * t2 - lambda__2 * t5;
      out_2 = -2 * y + t5;
      out_3 = -2 * x - t2;
      out_4 = -omega * t2 + 2 * v;
      out_5 = -omega * t5 + 2 * u;
      t13 = t1 ^ 2;
      t15 = omega ^ 2;
      t18 = t4 ^ 2;
      out_6 = 0.1e1 / m / t1 * (m * t15 * ell * t13 + ell * m * t18 * t15 - 2 * m * g * t4 - 4 * t1 * lambda__2 + 4 * t4 * lambda__1);

      % Store outputs
      out_h = zeros(6, 1);
      out_h(1) = out_1;
      out_h(2) = out_2;
      out_h(3) = out_3;
      out_h(4) = out_4;
      out_h(5) = out_5;
      out_h(6) = out_6;
    end % h
    %
    % - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    %
    function out_Jh_x = Jh_x( this, in_1, in_2, t )
      % Calculate the Jacobian of h with respect to x.

      % Extract properties
      m = this.m_m;
      g = this.m_g;
      ell = this.m_ell;

      % Extract inputs
      x = in_1(1);
      y = in_1(2);
      theta = in_1(3);
      u = in_1(4);
      v = in_1(5);
      omega = in_1(6);
      lambda__1 = in_1(7);
      lambda__2 = in_1(8);

      % Evaluate function
      out_3_1 = -2;
      out_2_2 = -2;
      t1 = cos(theta);
      t2 = t1 * lambda__2;
      t4 = sin(theta);
      t5 = t4 * lambda__1;
      out_1_3 = -ell * t2 + ell * t5;
      out_2_3 = ell * t1;
      out_3_3 = ell * t4;
      out_4_3 = omega * ell * t4;
      out_5_3 = -omega * ell * t1;
      t18 = 0.1e1 / t1;
      t20 = 0.1e1 / m;
      t22 = t1 ^ 2;
      t23 = ell * t22;
      t24 = omega ^ 2;
      t27 = t4 ^ 2;
      t29 = ell * m;
      out_6_3 = t20 * t18 * (-2 * m * g * t1 + 4 * t1 * lambda__1 + 4 * t4 * lambda__2) + t4 * t20 / t22 * (-2 * m * g * t4 + m * t24 * t23 + t29 * t27 * t24 - 4 * t2 + 4 * t5);
      out_5_4 = 2;
      out_4_5 = 2;
      out_4_6 = -out_2_3;
      out_5_6 = -out_3_3;
      out_6_6 = t20 * t18 * (2 * omega * m * t23 + 2 * t29 * t27 * omega);
      out_1_7 = out_4_6;
      out_6_7 = 4 * t20 * t4 * t18;
      out_1_8 = out_5_6;
      out_6_8 = -4 * t20;

      % Store outputs
      out_Jh_x = zeros(6, 8);
      out_Jh_x(3, 1) = out_3_1;
      out_Jh_x(2, 2) = out_2_2;
      out_Jh_x(1, 3) = out_1_3;
      out_Jh_x(2, 3) = out_2_3;
      out_Jh_x(3, 3) = out_3_3;
      out_Jh_x(4, 3) = out_4_3;
      out_Jh_x(5, 3) = out_5_3;
      out_Jh_x(6, 3) = out_6_3;
      out_Jh_x(5, 4) = out_5_4;
      out_Jh_x(4, 5) = out_4_5;
      out_Jh_x(4, 6) = out_4_6;
      out_Jh_x(5, 6) = out_5_6;
      out_Jh_x(6, 6) = out_6_6;
      out_Jh_x(1, 7) = out_1_7;
      out_Jh_x(6, 7) = out_6_7;
      out_Jh_x(1, 8) = out_1_8;
      out_Jh_x(6, 8) = out_6_8;
    end % Jh_x
    %
    % - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    %
    function out_Jh_v = Jh_v( this, in_1, in_2, t )
      % Calculate the Jacobian of h with respect to v.

      % Extract properties
      m = this.m_m;
      g = this.m_g;
      ell = this.m_ell;

      % Extract inputs
      x = in_1(1);
      y = in_1(2);
      theta = in_1(3);
      u = in_1(4);
      v = in_1(5);
      omega = in_1(6);
      lambda__1 = in_1(7);
      lambda__2 = in_1(8);

      % Evaluate function
      % No body

      % Store outputs
      out_Jh_v = zeros(6, 0);
    end % Jh_v
    %
    % - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    %
  end
end % DoubleSlider

% That's All Folks!
