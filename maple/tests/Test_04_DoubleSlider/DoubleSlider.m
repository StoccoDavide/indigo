% +--------------------------------------------------------------------------+
% | 'Indigo' module version 1.0 - BSD 3-Clause License - Copyright (c) 2023  |
% | Current version authors:                                                 |
% |   Davide Stocco and Enrico Bertolazzi.                                   |
% +--------------------------------------------------------------------------+

% Matlab generated code for implicit system: DoubleSlider
% This file has been automatically generated by Indigo.
% DISCLAIMER: If you need to edit it, do it wisely!

classdef DoubleSlider < Indigo.Systems.Implicit
  %
  % No class description provided.
  %
  properties (SetAccess = protected, Hidden = true)
    % User data
    m_m = 1.0;
    m_J = 1.0;
    m_g = 9.81;
    m_ell = 1.0;
  end
  %
  methods
    %
    % - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    %
    function this = DoubleSlider( varargin )
      % Class constructor.

      % Superclass constructor
      num_eqns = 8;
      num_veil = 0;
      num_invs = 6;
      this = this@Indigo.Systems.Implicit('DoubleSlider', num_eqns, num_veil, num_invs);

      % User data
      if (nargin == 0)
        % Keep default values
      elseif (nargin == 1 && isstruct(varargin{1}))
        this.m_m = varargin{1}.m;
        this.m_J = varargin{1}.J;
        this.m_g = varargin{1}.g;
        this.m_ell = varargin{1}.ell;
      elseif (nargin == 4)
        this.m_m = varargin{1};
        this.m_J = varargin{2};
        this.m_g = varargin{3};
        this.m_ell = varargin{4};
      else
        error('wrong number of input arguments.');
      end
    end % DoubleSlider
    %
    % - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    %
    function out_F = F( this, in_1, in_2, in_3, t )
      % Evaluate the function F.

      % Extract properties
      m = this.m_m;
      J = this.m_J;
      g = this.m_g;
      ell = this.m_ell;

      % Extract inputs
      x = in_1(1);
      y = in_1(2);
      theta = in_1(3);
      u = in_1(4);
      v = in_1(5);
      omega = in_1(6);
      lambda__1 = in_1(7);
      lambda__2 = in_1(8);
      x_dot = in_2(1);
      y_dot = in_2(2);
      theta_dot = in_2(3);
      u_dot = in_2(4);
      v_dot = in_2(5);
      omega_dot = in_2(6);
      lambda__1_dot = in_2(7);
      lambda__2_dot = in_2(8);

      % Evaluate function
      out_1 = -u + x_dot;
      out_2 = -v + y_dot;
      t1 = 0.1e1 / m;
      out_3 = t1 * lambda__1 + u_dot;
      out_4 = v_dot + t1 * (g * m + lambda__2);
      out_5 = -omega + theta_dot;
      t6 = sin(theta);
      t8 = cos(theta);
      t9 = lambda__2 * t8;
      out_6 = omega_dot - 0.1e1 / J * (lambda__1 * t6 - t9) * ell / 2;
      t15 = t8 * t6;
      t18 = t8 ^ 2;
      t19 = ell ^ 2;
      t21 = m * t19 * t18;
      t22 = 4 * J;
      t25 = 0.1e1 / ell;
      t28 = omega ^ 2;
      t32 = t6 ^ 2;
      out_7 = -ell * lambda__1_dot * t15 + lambda__2_dot * t25 * t1 * (t21 + t22) + (2 * t8 * t28 * J - 4 * lambda__2 * ell * t15 - ell * lambda__1 * t18 + 3 * ell * lambda__1 * t32) * omega;
      t47 = m ^ 2;
      t54 = t32 ^ 2;
      t56 = t19 * ell;
      t63 = m * t56 * lambda__2;
      t75 = J ^ 2;
      t80 = lambda__1 * ell;
      out_8 = -4 * lambda__2_dot / t19 / t47 * (m * t19 * t32 + t21 + t22) * J - t25 * t1 * (3 * m * t56 * lambda__1 * t18 * t32 - 16 * ell * t9 * t6 * J + 3 * m * t56 * lambda__1 * t54 - 3 * t63 * t18 * t8 * t6 - 3 * t63 * t8 * t32 * t6 - 4 * t80 * t18 * J + 12 * t80 * t32 * J + 8 * t8 * t28 * t75) * omega;

      % Store outputs
      out_F = zeros(8, 1);
      out_F(1) = out_1;
      out_F(2) = out_2;
      out_F(3) = out_3;
      out_F(4) = out_4;
      out_F(5) = out_5;
      out_F(6) = out_6;
      out_F(7) = out_7;
      out_F(8) = out_8;
    end % F
    %
    % - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    %
    function out_JF_x = JF_x( this, in_1, in_2, in_3, t )
      % Evaluate the Jacobian of F with respect to x.

      % Extract properties
      m = this.m_m;
      J = this.m_J;
      g = this.m_g;
      ell = this.m_ell;

      % Extract inputs
      x = in_1(1);
      y = in_1(2);
      theta = in_1(3);
      u = in_1(4);
      v = in_1(5);
      omega = in_1(6);
      lambda__1 = in_1(7);
      lambda__2 = in_1(8);
      x_dot = in_2(1);
      y_dot = in_2(2);
      theta_dot = in_2(3);
      u_dot = in_2(4);
      v_dot = in_2(5);
      omega_dot = in_2(6);
      lambda__1_dot = in_2(7);
      lambda__2_dot = in_2(8);

      % Evaluate function
      t1 = cos(theta);
      t3 = sin(theta);
      t7 = 0.1e1 / J;
      out_6_3 = -t7 * (t1 * lambda__1 + lambda__2 * t3) * ell / 2;
      t10 = t1 ^ 2;
      t11 = ell * t10;
      t13 = t3 ^ 2;
      t14 = ell * t13;
      t16 = ell * t1;
      t20 = t3 * J;
      t21 = omega ^ 2;
      t24 = t1 * t3;
      t25 = lambda__1 * ell;
      out_7_3 = -lambda__1_dot * t11 + lambda__1_dot * t14 - 2 * lambda__2_dot * t3 * t16 + (-4 * ell * lambda__2 * t10 + 4 * ell * lambda__2 * t13 - 2 * t21 * t20 + 8 * t25 * t24) * omega;
      t36 = t13 * t3;
      t38 = ell ^ 2;
      t39 = t38 * ell;
      t40 = m * t39;
      t44 = t13 ^ 2;
      t49 = t10 * t1 * t3;
      t51 = m * t39 * lambda__1;
      t54 = t10 ^ 2;
      t58 = J ^ 2;
      t59 = t21 * t58;
      t65 = t10 * J;
      t66 = lambda__2 * ell;
      t69 = t13 * J;
      t74 = 0.1e1 / m;
      t75 = 0.1e1 / ell;
      t76 = t75 * t74;
      out_8_3 = -t76 * (6 * t1 * t40 * lambda__1 * t36 + 32 * t1 * t25 * t20 + 3 * t40 * lambda__2 * t44 - 3 * t40 * lambda__2 * t54 - 8 * t3 * t59 + 6 * t51 * t49 - 16 * t66 * t65 + 16 * t66 * t69) * omega;
      out_1_4 = -1;
      out_2_5 = -1;
      out_5_6 = -1;
      out_7_6 = 6 * t1 * t21 * J - ell * lambda__1 * t10 + 3 * ell * lambda__1 * t13 - 4 * t66 * t24;
      t91 = t1 * t36;
      t93 = m * t39 * lambda__2;
      t96 = t10 * t13;
      out_8_6 = -t75 * t74 * (-16 * ell * lambda__2 * t1 * t20 + 3 * t40 * lambda__1 * t44 + 8 * t1 * t59 - 4 * t25 * t65 + 12 * t25 * t69 - 3 * t93 * t49 + 3 * t51 * t96 - 3 * t93 * t91) - 16 * t75 * t74 * t1 * t59;
      out_3_7 = t74;
      out_6_7 = -t7 * t3 * ell / 2;
      out_7_7 = (3 * t14 - t11) * omega;
      out_8_7 = -t76 * (3 * m * t39 * t44 - 4 * ell * t65 + 12 * ell * t69 + 3 * t40 * t96) * omega;
      out_4_8 = out_3_7;
      out_6_8 = t7 * t16 / 2;
      out_7_8 = -4 * t16 * t3 * omega;
      out_8_8 = -t76 * (-16 * t16 * t20 - 3 * t40 * t49 - 3 * t40 * t91) * omega;

      % Store outputs
      out_JF_x = zeros(8, 8);
      out_JF_x(6, 3) = out_6_3;
      out_JF_x(7, 3) = out_7_3;
      out_JF_x(8, 3) = out_8_3;
      out_JF_x(1, 4) = out_1_4;
      out_JF_x(2, 5) = out_2_5;
      out_JF_x(5, 6) = out_5_6;
      out_JF_x(7, 6) = out_7_6;
      out_JF_x(8, 6) = out_8_6;
      out_JF_x(3, 7) = out_3_7;
      out_JF_x(6, 7) = out_6_7;
      out_JF_x(7, 7) = out_7_7;
      out_JF_x(8, 7) = out_8_7;
      out_JF_x(4, 8) = out_4_8;
      out_JF_x(6, 8) = out_6_8;
      out_JF_x(7, 8) = out_7_8;
      out_JF_x(8, 8) = out_8_8;
    end % JF_x
    %
    % - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    %
    function out_JF_x_dot = JF_x_dot( this, in_1, in_2, in_3, t )
      % Evaluate the Jacobian of F with respect to x_dot.

      % Extract properties
      m = this.m_m;
      J = this.m_J;
      g = this.m_g;
      ell = this.m_ell;

      % Extract inputs
      x = in_1(1);
      y = in_1(2);
      theta = in_1(3);
      u = in_1(4);
      v = in_1(5);
      omega = in_1(6);
      lambda__1 = in_1(7);
      lambda__2 = in_1(8);
      x_dot = in_2(1);
      y_dot = in_2(2);
      theta_dot = in_2(3);
      u_dot = in_2(4);
      v_dot = in_2(5);
      omega_dot = in_2(6);
      lambda__1_dot = in_2(7);
      lambda__2_dot = in_2(8);

      % Evaluate function
      out_1_1 = 1;
      out_2_2 = 1;
      out_5_3 = 1;
      out_3_4 = 1;
      out_4_5 = 1;
      out_6_6 = 1;
      t1 = sin(theta);
      t2 = cos(theta);
      out_7_7 = -ell * t2 * t1;
      t5 = t2 ^ 2;
      t6 = ell ^ 2;
      t8 = m * t6 * t5;
      t9 = 4 * J;
      out_7_8 = 0.1e1 / ell / m * (t8 + t9);
      t14 = t1 ^ 2;
      t19 = m ^ 2;
      out_8_8 = -4 / t6 / t19 * (m * t6 * t14 + t8 + t9) * J;

      % Store outputs
      out_JF_x_dot = zeros(8, 8);
      out_JF_x_dot(1, 1) = out_1_1;
      out_JF_x_dot(2, 2) = out_2_2;
      out_JF_x_dot(5, 3) = out_5_3;
      out_JF_x_dot(3, 4) = out_3_4;
      out_JF_x_dot(4, 5) = out_4_5;
      out_JF_x_dot(6, 6) = out_6_6;
      out_JF_x_dot(7, 7) = out_7_7;
      out_JF_x_dot(7, 8) = out_7_8;
      out_JF_x_dot(8, 8) = out_8_8;
    end % JF_x_dot
    %
    % - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    %
    function out_JF_v = JF_v( this, in_1, in_2, in_3, t )
      % Evaluate the Jacobian of F with respect to v.

      % Extract properties
      m = this.m_m;
      J = this.m_J;
      g = this.m_g;
      ell = this.m_ell;

      % Extract inputs
      x = in_1(1);
      y = in_1(2);
      theta = in_1(3);
      u = in_1(4);
      v = in_1(5);
      omega = in_1(6);
      lambda__1 = in_1(7);
      lambda__2 = in_1(8);
      x_dot = in_2(1);
      y_dot = in_2(2);
      theta_dot = in_2(3);
      u_dot = in_2(4);
      v_dot = in_2(5);
      omega_dot = in_2(6);
      lambda__1_dot = in_2(7);
      lambda__2_dot = in_2(8);

      % Evaluate function
      % No body

      % Store outputs
      out_JF_v = zeros(8, 0);
    end % JF_v
    %
    % - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    %
    function out_v = v( this, in_1, t )
      % Evaluate the the veils v.

      % Extract properties
      m = this.m_m;
      J = this.m_J;
      g = this.m_g;
      ell = this.m_ell;

      % Extract inputs
      x = in_1(1);
      y = in_1(2);
      theta = in_1(3);
      u = in_1(4);
      v = in_1(5);
      omega = in_1(6);
      lambda__1 = in_1(7);
      lambda__2 = in_1(8);

      % Evaluate function
      % No body

      % Store outputs
      out_v = zeros(0, 1);
    end % v
    %
    % - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    %
    function out_Jv_x = Jv_x( this, in_1, in_2, t )
      % Evaluate the Jacobian of v with respect to x.

      % Extract properties
      m = this.m_m;
      J = this.m_J;
      g = this.m_g;
      ell = this.m_ell;

      % Extract inputs
      x = in_1(1);
      y = in_1(2);
      theta = in_1(3);
      u = in_1(4);
      v = in_1(5);
      omega = in_1(6);
      lambda__1 = in_1(7);
      lambda__2 = in_1(8);

      % Evaluate function
      % No body

      % Store outputs
      out_Jv_x = zeros(0, 8);
    end % Jv_x
    %
    % - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    %
    function out_h = h( this, in_1, in_2, t )
      % Calculate the residual of the invariants h.

      % Extract properties
      m = this.m_m;
      J = this.m_J;
      g = this.m_g;
      ell = this.m_ell;

      % Extract inputs
      x = in_1(1);
      y = in_1(2);
      theta = in_1(3);
      u = in_1(4);
      v = in_1(5);
      omega = in_1(6);
      lambda__1 = in_1(7);
      lambda__2 = in_1(8);

      % Evaluate function
      t1 = cos(theta);
      t2 = ell * t1;
      out_1 = -t2 - 2 * x;
      t4 = sin(theta);
      out_2 = -ell * t4 - 2 * y;
      out_3 = -ell * t4 * omega + 2 * u;
      out_4 = ell * t1 * omega + 2 * v;
      t13 = omega ^ 2;
      t18 = t4 ^ 2;
      t20 = ell ^ 2;
      t21 = m * t20;
      t23 = t1 * t4;
      t30 = 0.1e1 / J;
      t34 = 0.1e1 / m / ell;
      out_5 = t34 * t30 * (2 * m * t2 * t13 * J - m * t20 * lambda__2 * t23 + t21 * lambda__1 * t18 + 4 * J * lambda__1) / 2;
      t44 = t1 ^ 2;
      out_6 = t34 * t30 * (2 * m * ell * t13 * t4 * J - m * t20 * lambda__1 * t23 + 4 * J * g * m + t21 * lambda__2 * t44 + 4 * J * lambda__2) / 2;

      % Store outputs
      out_h = zeros(6, 1);
      out_h(1) = out_1;
      out_h(2) = out_2;
      out_h(3) = out_3;
      out_h(4) = out_4;
      out_h(5) = out_5;
      out_h(6) = out_6;
    end % h
    %
    % - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    %
    function out_Jh_x = Jh_x( this, in_1, in_2, t )
      % Calculate the Jacobian of h with respect to x.

      % Extract properties
      m = this.m_m;
      J = this.m_J;
      g = this.m_g;
      ell = this.m_ell;

      % Extract inputs
      x = in_1(1);
      y = in_1(2);
      theta = in_1(3);
      u = in_1(4);
      v = in_1(5);
      omega = in_1(6);
      lambda__1 = in_1(7);
      lambda__2 = in_1(8);

      % Evaluate function
      out_1_1 = -2;
      out_2_2 = -2;
      t1 = sin(theta);
      out_1_3 = ell * t1;
      t2 = cos(theta);
      t3 = ell * t2;
      out_2_3 = -t3;
      t4 = t2 * omega;
      out_3_3 = -ell * t4;
      t6 = t1 * omega;
      out_4_3 = -ell * t6;
      t9 = omega ^ 2;
      t14 = t2 * t1;
      t15 = ell ^ 2;
      t20 = t2 ^ 2;
      t22 = m * t15;
      t24 = t1 ^ 2;
      t28 = 0.1e1 / J;
      t32 = 0.1e1 / m / ell;
      out_5_3 = t32 * t28 * (-2 * m * ell * t9 * t1 * J + 2 * m * t15 * lambda__1 * t14 - t22 * lambda__2 * t20 + t22 * lambda__2 * t24) / 2;
      out_6_3 = t32 * t28 * (2 * m * t3 * t9 * J - 2 * m * t15 * lambda__2 * t14 - t22 * lambda__1 * t20 + t22 * lambda__1 * t24) / 2;
      out_3_4 = 2;
      out_4_5 = 2;
      out_3_6 = -out_1_3;
      out_4_6 = t3;
      out_5_6 = 2 * t4;
      out_6_6 = 2 * t6;
      t51 = 4 * J;
      out_5_7 = t32 * t28 * (m * t15 * t24 + t51) / 2;
      out_6_7 = -t28 * ell * t14 / 2;
      out_5_8 = out_6_7;
      out_6_8 = t32 * t28 * (m * t15 * t20 + t51) / 2;

      % Store outputs
      out_Jh_x = zeros(6, 8);
      out_Jh_x(1, 1) = out_1_1;
      out_Jh_x(2, 2) = out_2_2;
      out_Jh_x(1, 3) = out_1_3;
      out_Jh_x(2, 3) = out_2_3;
      out_Jh_x(3, 3) = out_3_3;
      out_Jh_x(4, 3) = out_4_3;
      out_Jh_x(5, 3) = out_5_3;
      out_Jh_x(6, 3) = out_6_3;
      out_Jh_x(3, 4) = out_3_4;
      out_Jh_x(4, 5) = out_4_5;
      out_Jh_x(3, 6) = out_3_6;
      out_Jh_x(4, 6) = out_4_6;
      out_Jh_x(5, 6) = out_5_6;
      out_Jh_x(6, 6) = out_6_6;
      out_Jh_x(5, 7) = out_5_7;
      out_Jh_x(6, 7) = out_6_7;
      out_Jh_x(5, 8) = out_5_8;
      out_Jh_x(6, 8) = out_6_8;
    end % Jh_x
    %
    % - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    %
    function out_Jh_v = Jh_v( this, in_1, in_2, t )
      % Calculate the Jacobian of h with respect to v.

      % Extract properties
      m = this.m_m;
      J = this.m_J;
      g = this.m_g;
      ell = this.m_ell;

      % Extract inputs
      x = in_1(1);
      y = in_1(2);
      theta = in_1(3);
      u = in_1(4);
      v = in_1(5);
      omega = in_1(6);
      lambda__1 = in_1(7);
      lambda__2 = in_1(8);

      % Evaluate function
      % No body

      % Store outputs
      out_Jh_v = zeros(6, 0);
    end % Jh_v
    %
    % - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    %
  end
end % DoubleSlider

% That's All Folks!
